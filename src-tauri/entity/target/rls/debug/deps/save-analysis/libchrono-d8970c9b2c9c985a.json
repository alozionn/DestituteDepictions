{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22","program":"C:\\Users\\Andrei\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","chrono","--edition=2018","C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"clock\"","--cfg","feature=\"iana-time-zone\"","--cfg","feature=\"serde\"","--cfg","feature=\"std\"","--cfg","feature=\"winapi\"","-C","metadata=d8970c9b2c9c985a","-C","extra-filename=-d8970c9b2c9c985a","--out-dir","d:\\Programming\\DestituteDepictions\\src-tauri\\entity\\target\\rls\\debug\\deps","-L","dependency=d:\\Programming\\DestituteDepictions\\src-tauri\\entity\\target\\rls\\debug\\deps","--extern","iana_time_zone=d:\\Programming\\DestituteDepictions\\src-tauri\\entity\\target\\rls\\debug\\deps\\libiana_time_zone-912289917efe42c7.rmeta","--extern","num_integer=d:\\Programming\\DestituteDepictions\\src-tauri\\entity\\target\\rls\\debug\\deps\\libnum_integer-4163eba70f5b2e74.rmeta","--extern","num_traits=d:\\Programming\\DestituteDepictions\\src-tauri\\entity\\target\\rls\\debug\\deps\\libnum_traits-622eef8a488adc5c.rmeta","--extern","serde=d:\\Programming\\DestituteDepictions\\src-tauri\\entity\\target\\rls\\debug\\deps\\libserde-8dedf60d8a0c5e81.rmeta","--extern","winapi=d:\\Programming\\DestituteDepictions\\src-tauri\\entity\\target\\rls\\debug\\deps\\libwinapi-251f9d83e64a3171.rmeta","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\Andrei\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"d:\\Programming\\DestituteDepictions\\src-tauri\\entity\\target\\rls\\debug\\deps\\libchrono-d8970c9b2c9c985a.rmeta"},"prelude":{"crate_id":{"name":"chrono","disambiguator":[7515685025117692943,0]},"crate_root":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src","external_crates":[{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[8526938853280630398,0]}},{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","num":2,"id":{"name":"core","disambiguator":[5339428516588690145,0]}},{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[263601903543822771,0]}},{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[7343628043363739070,0]}},{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[14796848713614703829,0]}},{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[2248661955232720858,0]}},{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[6100837883140397065,0]}},{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[6763488366047601591,0]}},{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","num":9,"id":{"name":"miniz_oxide","disambiguator":[79841370634592438,0]}},{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[14720684392801985393,0]}},{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","num":11,"id":{"name":"adler","disambiguator":[1205045013435031913,0]}},{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[9970316023349964410,0]}},{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","num":13,"id":{"name":"std_detect","disambiguator":[17496692589544781456,0]}},{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","num":14,"id":{"name":"rustc_demangle","disambiguator":[17700294896468204783,0]}},{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","num":15,"id":{"name":"panic_unwind","disambiguator":[8939469696884238691,0]}},{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","num":16,"id":{"name":"serde","disambiguator":[12132081963377550534,0]}},{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","num":17,"id":{"name":"serde_derive","disambiguator":[11166650514861956175,0]}},{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","num":18,"id":{"name":"num_integer","disambiguator":[18268649106776947508,0]}},{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","num":19,"id":{"name":"num_traits","disambiguator":[9592260288182239992,0]}},{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\local\\windows.rs","num":20,"id":{"name":"winapi","disambiguator":[4865609260724861705,0]}}],"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":76,"byte_end":22970,"line_start":4,"line_end":532,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":3253},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":20321,"byte_end":20329,"line_start":432,"line_end":432,"column_start":18,"column_end":26},"alias_span":null,"name":"Duration","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3287},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":20686,"byte_end":20690,"line_start":445,"line_end":445,"column_start":20,"column_end":24},"alias_span":null,"name":"Date","value":"","parent":{"krate":0,"index":109}},{"kind":"Use","ref_id":{"krate":0,"index":3829},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":20763,"byte_end":20768,"line_start":448,"line_end":448,"column_start":20,"column_end":25},"alias_span":null,"name":"Local","value":"","parent":{"krate":0,"index":109}},{"kind":"Use","ref_id":{"krate":0,"index":3830},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":20763,"byte_end":20768,"line_start":448,"line_end":448,"column_start":20,"column_end":25},"alias_span":null,"name":"Local","value":"","parent":{"krate":0,"index":109}},{"kind":"Use","ref_id":{"krate":0,"index":3051},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":20901,"byte_end":20912,"line_start":453,"line_end":453,"column_start":20,"column_end":31},"alias_span":null,"name":"SubsecRound","value":"","parent":{"krate":0,"index":109}},{"kind":"Use","ref_id":{"krate":0,"index":3334},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":20956,"byte_end":20964,"line_start":455,"line_end":455,"column_start":21,"column_end":29},"alias_span":null,"name":"DateTime","value":"","parent":{"krate":0,"index":109}},{"kind":"Use","ref_id":{"krate":0,"index":3310},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":20966,"byte_end":20979,"line_start":455,"line_end":455,"column_start":31,"column_end":44},"alias_span":null,"name":"SecondsFormat","value":"","parent":{"krate":0,"index":109}},{"kind":"Use","ref_id":{"krate":0,"index":3214},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":21024,"byte_end":21032,"line_start":457,"line_end":457,"column_start":21,"column_end":29},"alias_span":null,"name":"Datelike","value":"","parent":{"krate":0,"index":109}},{"kind":"Use","ref_id":{"krate":0,"index":3946},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":21034,"byte_end":21039,"line_start":457,"line_end":457,"column_start":31,"column_end":36},"alias_span":null,"name":"Month","value":"","parent":{"krate":0,"index":109}},{"kind":"Use","ref_id":{"krate":0,"index":3233},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":21041,"byte_end":21049,"line_start":457,"line_end":457,"column_start":38,"column_end":46},"alias_span":null,"name":"Timelike","value":"","parent":{"krate":0,"index":109}},{"kind":"Use","ref_id":{"krate":0,"index":3899},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":21051,"byte_end":21058,"line_start":457,"line_end":457,"column_start":48,"column_end":55},"alias_span":null,"name":"Weekday","value":"","parent":{"krate":0,"index":109}},{"kind":"Use","ref_id":{"krate":0,"index":3814},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":21103,"byte_end":21114,"line_start":459,"line_end":459,"column_start":21,"column_end":32},"alias_span":null,"name":"FixedOffset","value":"","parent":{"krate":0,"index":109}},{"kind":"Use","ref_id":{"krate":0,"index":3836},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":21116,"byte_end":21119,"line_start":459,"line_end":459,"column_start":34,"column_end":37},"alias_span":null,"name":"Utc","value":"","parent":{"krate":0,"index":109}},{"kind":"Use","ref_id":{"krate":0,"index":3837},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":21116,"byte_end":21119,"line_start":459,"line_end":459,"column_start":34,"column_end":37},"alias_span":null,"name":"Utc","value":"","parent":{"krate":0,"index":109}},{"kind":"Use","ref_id":{"krate":0,"index":3660},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":21164,"byte_end":21173,"line_start":461,"line_end":461,"column_start":21,"column_end":30},"alias_span":null,"name":"NaiveDate","value":"","parent":{"krate":0,"index":109}},{"kind":"Use","ref_id":{"krate":0,"index":3721},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":21175,"byte_end":21188,"line_start":461,"line_end":461,"column_start":32,"column_end":45},"alias_span":null,"name":"NaiveDateTime","value":"","parent":{"krate":0,"index":109}},{"kind":"Use","ref_id":{"krate":0,"index":3794},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":21190,"byte_end":21199,"line_start":461,"line_end":461,"column_start":47,"column_end":56},"alias_span":null,"name":"NaiveTime","value":"","parent":{"krate":0,"index":109}},{"kind":"Use","ref_id":{"krate":0,"index":2973},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":21244,"byte_end":21250,"line_start":463,"line_end":463,"column_start":21,"column_end":27},"alias_span":null,"name":"Offset","value":"","parent":{"krate":0,"index":109}},{"kind":"Use","ref_id":{"krate":0,"index":2975},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":21252,"byte_end":21260,"line_start":463,"line_end":463,"column_start":29,"column_end":37},"alias_span":null,"name":"TimeZone","value":"","parent":{"krate":0,"index":109}},{"kind":"Use","ref_id":{"krate":0,"index":3287},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":21312,"byte_end":21316,"line_start":468,"line_end":468,"column_start":16,"column_end":20},"alias_span":null,"name":"Date","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":231},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":21318,"byte_end":21326,"line_start":468,"line_end":468,"column_start":22,"column_end":30},"alias_span":null,"name":"MAX_DATE","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":230},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":21328,"byte_end":21336,"line_start":468,"line_end":468,"column_start":32,"column_end":40},"alias_span":null,"name":"MIN_DATE","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3334},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":21476,"byte_end":21484,"line_start":474,"line_end":474,"column_start":20,"column_end":28},"alias_span":null,"name":"DateTime","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3310},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":21486,"byte_end":21499,"line_start":474,"line_end":474,"column_start":30,"column_end":43},"alias_span":null,"name":"SecondsFormat","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":853},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":21501,"byte_end":21513,"line_start":474,"line_end":474,"column_start":45,"column_end":57},"alias_span":null,"name":"MAX_DATETIME","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":852},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":21515,"byte_end":21527,"line_start":474,"line_end":474,"column_start":59,"column_end":71},"alias_span":null,"name":"MIN_DATETIME","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1381},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":149384,"byte_end":149389,"line_start":58,"line_end":58,"column_start":16,"column_end":21},"alias_span":null,"name":"parse","value":"","parent":{"krate":0,"index":1043}},{"kind":"Use","ref_id":{"krate":0,"index":3591},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":149407,"byte_end":149413,"line_start":59,"line_end":59,"column_start":17,"column_end":23},"alias_span":null,"name":"Parsed","value":"","parent":{"krate":0,"index":1043}},{"kind":"Use","ref_id":{"krate":0,"index":3627},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":149523,"byte_end":149536,"line_start":63,"line_end":63,"column_start":19,"column_end":32},"alias_span":null,"name":"StrftimeItems","value":"","parent":{"krate":0,"index":1043}},{"kind":"Use","ref_id":{"krate":0,"index":3548},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":21643,"byte_end":21653,"line_start":480,"line_end":480,"column_start":18,"column_end":28},"alias_span":null,"name":"ParseError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1117},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":21655,"byte_end":21666,"line_start":480,"line_end":480,"column_start":30,"column_end":41},"alias_span":null,"name":"ParseResult","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3660},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\mod.rs","byte_start":327274,"byte_end":327283,"line_start":14,"line_end":14,"column_start":22,"column_end":31},"alias_span":null,"name":"NaiveDate","value":"","parent":{"krate":0,"index":1546}},{"kind":"Use","ref_id":{"krate":0,"index":3655},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\mod.rs","byte_start":327285,"byte_end":327294,"line_start":14,"line_end":14,"column_start":33,"column_end":42},"alias_span":null,"name":"NaiveWeek","value":"","parent":{"krate":0,"index":1546}},{"kind":"Use","ref_id":{"krate":0,"index":1661},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\mod.rs","byte_start":327296,"byte_end":327304,"line_start":14,"line_end":14,"column_start":44,"column_end":52},"alias_span":null,"name":"MAX_DATE","value":"","parent":{"krate":0,"index":1546}},{"kind":"Use","ref_id":{"krate":0,"index":1660},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\mod.rs","byte_start":327306,"byte_end":327314,"line_start":14,"line_end":14,"column_start":54,"column_end":62},"alias_span":null,"name":"MIN_DATE","value":"","parent":{"krate":0,"index":1546}},{"kind":"Use","ref_id":{"krate":0,"index":3721},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\mod.rs","byte_start":327472,"byte_end":327485,"line_start":19,"line_end":19,"column_start":26,"column_end":39},"alias_span":null,"name":"NaiveDateTime","value":"","parent":{"krate":0,"index":1546}},{"kind":"Use","ref_id":{"krate":0,"index":2244},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\mod.rs","byte_start":327487,"byte_end":327499,"line_start":19,"line_end":19,"column_start":41,"column_end":53},"alias_span":null,"name":"MAX_DATETIME","value":"","parent":{"krate":0,"index":1546}},{"kind":"Use","ref_id":{"krate":0,"index":2243},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\mod.rs","byte_start":327501,"byte_end":327513,"line_start":19,"line_end":19,"column_start":55,"column_end":67},"alias_span":null,"name":"MIN_DATETIME","value":"","parent":{"krate":0,"index":1546}},{"kind":"Use","ref_id":{"krate":0,"index":3778},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\mod.rs","byte_start":327539,"byte_end":327546,"line_start":20,"line_end":20,"column_start":24,"column_end":31},"alias_span":null,"name":"IsoWeek","value":"","parent":{"krate":0,"index":1546}},{"kind":"Use","ref_id":{"krate":0,"index":3794},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\mod.rs","byte_start":327568,"byte_end":327577,"line_start":21,"line_end":21,"column_start":21,"column_end":30},"alias_span":null,"name":"NaiveTime","value":"","parent":{"krate":0,"index":1546}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\mod.rs","byte_start":328120,"byte_end":328121,"line_start":37,"line_end":37,"column_start":37,"column_end":38},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":2628}},{"kind":"Use","ref_id":{"krate":0,"index":3778},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":21719,"byte_end":21726,"line_start":484,"line_end":484,"column_start":17,"column_end":24},"alias_span":null,"name":"IsoWeek","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3660},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":21728,"byte_end":21737,"line_start":484,"line_end":484,"column_start":26,"column_end":35},"alias_span":null,"name":"NaiveDate","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3721},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":21739,"byte_end":21752,"line_start":484,"line_end":484,"column_start":37,"column_end":50},"alias_span":null,"name":"NaiveDateTime","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3794},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":21754,"byte_end":21763,"line_start":484,"line_end":484,"column_start":52,"column_end":61},"alias_span":null,"name":"NaiveTime","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3655},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":21765,"byte_end":21774,"line_start":484,"line_end":484,"column_start":63,"column_end":72},"alias_span":null,"name":"NaiveWeek","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3814},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":626967,"byte_end":626978,"line_start":29,"line_end":29,"column_start":22,"column_end":33},"alias_span":null,"name":"FixedOffset","value":"","parent":{"krate":0,"index":2646}},{"kind":"Use","ref_id":{"krate":0,"index":3829},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":627065,"byte_end":627070,"line_start":34,"line_end":34,"column_start":22,"column_end":27},"alias_span":null,"name":"Local","value":"","parent":{"krate":0,"index":2646}},{"kind":"Use","ref_id":{"krate":0,"index":3830},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":627065,"byte_end":627070,"line_start":34,"line_end":34,"column_start":22,"column_end":27},"alias_span":null,"name":"Local","value":"","parent":{"krate":0,"index":2646}},{"kind":"Use","ref_id":{"krate":0,"index":3836},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":627101,"byte_end":627104,"line_start":37,"line_end":37,"column_start":20,"column_end":23},"alias_span":null,"name":"Utc","value":"","parent":{"krate":0,"index":2646}},{"kind":"Use","ref_id":{"krate":0,"index":3837},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":627101,"byte_end":627104,"line_start":37,"line_end":37,"column_start":20,"column_end":23},"alias_span":null,"name":"Utc","value":"","parent":{"krate":0,"index":2646}},{"kind":"Use","ref_id":{"krate":0,"index":3829},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":21854,"byte_end":21859,"line_start":489,"line_end":489,"column_start":17,"column_end":22},"alias_span":null,"name":"Local","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3830},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":21854,"byte_end":21859,"line_start":489,"line_end":489,"column_start":17,"column_end":22},"alias_span":null,"name":"Local","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3814},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":21896,"byte_end":21907,"line_start":491,"line_end":491,"column_start":18,"column_end":29},"alias_span":null,"name":"FixedOffset","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3847},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":21909,"byte_end":21920,"line_start":491,"line_end":491,"column_start":31,"column_end":42},"alias_span":null,"name":"LocalResult","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2973},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":21922,"byte_end":21928,"line_start":491,"line_end":491,"column_start":44,"column_end":50},"alias_span":null,"name":"Offset","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2975},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":21930,"byte_end":21938,"line_start":491,"line_end":491,"column_start":52,"column_end":60},"alias_span":null,"name":"TimeZone","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3836},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":21940,"byte_end":21943,"line_start":491,"line_end":491,"column_start":62,"column_end":65},"alias_span":null,"name":"Utc","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3837},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":21940,"byte_end":21943,"line_start":491,"line_end":491,"column_start":62,"column_end":65},"alias_span":null,"name":"Utc","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3059},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":21974,"byte_end":21987,"line_start":494,"line_end":494,"column_start":17,"column_end":30},"alias_span":null,"name":"DurationRound","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3881},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":21989,"byte_end":22002,"line_start":494,"line_end":494,"column_start":32,"column_end":45},"alias_span":null,"name":"RoundingError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3051},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":22004,"byte_end":22015,"line_start":494,"line_end":494,"column_start":47,"column_end":58},"alias_span":null,"name":"SubsecRound","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3935},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":22050,"byte_end":22067,"line_start":497,"line_end":497,"column_start":19,"column_end":36},"alias_span":null,"name":"ParseWeekdayError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3899},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":22069,"byte_end":22076,"line_start":497,"line_end":497,"column_start":38,"column_end":45},"alias_span":null,"name":"Weekday","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3946},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":22107,"byte_end":22112,"line_start":500,"line_end":500,"column_start":17,"column_end":22},"alias_span":null,"name":"Month","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3997},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":22114,"byte_end":22120,"line_start":500,"line_end":500,"column_start":24,"column_end":30},"alias_span":null,"name":"Months","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3998},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":22114,"byte_end":22120,"line_start":500,"line_end":500,"column_start":24,"column_end":30},"alias_span":null,"name":"Months","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4017},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":22122,"byte_end":22137,"line_start":500,"line_end":500,"column_start":32,"column_end":47},"alias_span":null,"name":"ParseMonthError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3214},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":22170,"byte_end":22178,"line_start":503,"line_end":503,"column_start":18,"column_end":26},"alias_span":null,"name":"Datelike","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3233},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":22180,"byte_end":22188,"line_start":503,"line_end":503,"column_start":28,"column_end":36},"alias_span":null,"name":"Timelike","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":22694,"byte_end":22695,"line_start":519,"line_end":519,"column_start":37,"column_end":38},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":3251}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":76,"byte_end":22970,"line_start":4,"line_end":532,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":106},{"krate":0,"index":109},{"krate":0,"index":163},{"krate":0,"index":348},{"krate":0,"index":349},{"krate":0,"index":352},{"krate":0,"index":355},{"krate":0,"index":358},{"krate":0,"index":1030},{"krate":0,"index":1031},{"krate":0,"index":1034},{"krate":0,"index":1037},{"krate":0,"index":1040},{"krate":0,"index":1043},{"krate":0,"index":1539},{"krate":0,"index":1540},{"krate":0,"index":1543},{"krate":0,"index":1546},{"krate":0,"index":2630},{"krate":0,"index":2631},{"krate":0,"index":2634},{"krate":0,"index":2637},{"krate":0,"index":2640},{"krate":0,"index":2643},{"krate":0,"index":2646},{"krate":0,"index":3000},{"krate":0,"index":3001},{"krate":0,"index":3003},{"krate":0,"index":3004},{"krate":0,"index":3007},{"krate":0,"index":3010},{"krate":0,"index":3013},{"krate":0,"index":3016},{"krate":0,"index":3017},{"krate":0,"index":3019},{"krate":0,"index":3081},{"krate":0,"index":3082},{"krate":0,"index":3085},{"krate":0,"index":3088},{"krate":0,"index":3091},{"krate":0,"index":3142},{"krate":0,"index":3143},{"krate":0,"index":3146},{"krate":0,"index":3149},{"krate":0,"index":3196},{"krate":0,"index":3197},{"krate":0,"index":3200},{"krate":0,"index":3201},{"krate":0,"index":3203},{"krate":0,"index":3206},{"krate":0,"index":3244},{"krate":0,"index":3245},{"krate":0,"index":3248},{"krate":0,"index":3251}],"decl_id":null,"docs":" # Chrono: Date and Time for Rust","sig":null,"attributes":[{"value":"/ # Chrono: Date and Time for Rust","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":76,"byte_end":112,"line_start":4,"line_end":4,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":113,"byte_end":116,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ It aims to be a feature-complete superset of","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":117,"byte_end":165,"line_start":6,"line_end":6,"column_start":1,"column_end":49}},{"value":"/ the [time](https://github.com/rust-lang-deprecated/time) library.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":166,"byte_end":235,"line_start":7,"line_end":7,"column_start":1,"column_end":70}},{"value":"/ In particular,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":236,"byte_end":254,"line_start":8,"line_end":8,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":255,"byte_end":258,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ * Chrono strictly adheres to ISO 8601.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":259,"byte_end":301,"line_start":10,"line_end":10,"column_start":1,"column_end":43}},{"value":"/ * Chrono is timezone-aware by default, with separate timezone-naive types.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":302,"byte_end":380,"line_start":11,"line_end":11,"column_start":1,"column_end":79}},{"value":"/ * Chrono is space-optimal and (while not being the primary goal) reasonably efficient.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":381,"byte_end":471,"line_start":12,"line_end":12,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":472,"byte_end":475,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ There were several previous attempts to bring a good date and time library to Rust,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":476,"byte_end":563,"line_start":14,"line_end":14,"column_start":1,"column_end":88}},{"value":"/ which Chrono builds upon and should acknowledge:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":564,"byte_end":616,"line_start":15,"line_end":15,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":617,"byte_end":620,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ * [Initial research on","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":621,"byte_end":647,"line_start":17,"line_end":17,"column_start":1,"column_end":27}},{"value":"/    the wiki](https://github.com/rust-lang/rust-wiki-backup/blob/master/Lib-datetime.md)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":648,"byte_end":739,"line_start":18,"line_end":18,"column_start":1,"column_end":92}},{"value":"/ * Dietrich Epp's [datetime-rs](https://github.com/depp/datetime-rs)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":740,"byte_end":811,"line_start":19,"line_end":19,"column_start":1,"column_end":72}},{"value":"/ * Luis de Bethencourt's [rust-datetime](https://github.com/luisbg/rust-datetime)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":812,"byte_end":896,"line_start":20,"line_end":20,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":897,"byte_end":900,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ Any significant changes to Chrono are documented in","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":901,"byte_end":956,"line_start":22,"line_end":22,"column_start":1,"column_end":56}},{"value":"/ the [`CHANGELOG.md`](https://github.com/chronotope/chrono/blob/main/CHANGELOG.md) file.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":957,"byte_end":1048,"line_start":23,"line_end":23,"column_start":1,"column_end":92}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":1049,"byte_end":1052,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ ## Usage","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":1053,"byte_end":1065,"line_start":25,"line_end":25,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":1066,"byte_end":1069,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ Put this in your `Cargo.toml`:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":1070,"byte_end":1104,"line_start":27,"line_end":27,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":1105,"byte_end":1108,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ ```toml","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":1109,"byte_end":1120,"line_start":29,"line_end":29,"column_start":1,"column_end":12}},{"value":"/ [dependencies]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":1121,"byte_end":1139,"line_start":30,"line_end":30,"column_start":1,"column_end":19}},{"value":"/ chrono = \"0.4\"","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":1140,"byte_end":1158,"line_start":31,"line_end":31,"column_start":1,"column_end":19}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":1159,"byte_end":1166,"line_start":32,"line_end":32,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":1167,"byte_end":1170,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ ### Features","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":1171,"byte_end":1187,"line_start":34,"line_end":34,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":1188,"byte_end":1191,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ Chrono supports various runtime environments and operating systems, and has","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":1192,"byte_end":1271,"line_start":36,"line_end":36,"column_start":1,"column_end":80}},{"value":"/ several features that may be enabled or disabled.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":1272,"byte_end":1325,"line_start":37,"line_end":37,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":1326,"byte_end":1329,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ Default features:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":1330,"byte_end":1351,"line_start":39,"line_end":39,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":1352,"byte_end":1355,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ - `alloc`: Enable features that depend on allocation (primarily string formatting)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":1356,"byte_end":1442,"line_start":41,"line_end":41,"column_start":1,"column_end":87}},{"value":"/ - `std`: Enables functionality that depends on the standard library. This","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":1443,"byte_end":1520,"line_start":42,"line_end":42,"column_start":1,"column_end":78}},{"value":"/   is a superset of `alloc` and adds interoperation with standard library types","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":1521,"byte_end":1603,"line_start":43,"line_end":43,"column_start":1,"column_end":83}},{"value":"/   and traits.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":1604,"byte_end":1621,"line_start":44,"line_end":44,"column_start":1,"column_end":18}},{"value":"/ - `clock`: Enables reading the system time (`now`) that depends on the standard library for","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":1622,"byte_end":1717,"line_start":45,"line_end":45,"column_start":1,"column_end":96}},{"value":"/ UNIX-like operating systems and the Windows API (`winapi`) for Windows.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":1718,"byte_end":1793,"line_start":46,"line_end":46,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":1794,"byte_end":1797,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ Optional features:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":1798,"byte_end":1820,"line_start":48,"line_end":48,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":1821,"byte_end":1824,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ - [`serde`][]: Enable serialization/deserialization via serde.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":1825,"byte_end":1891,"line_start":50,"line_end":50,"column_start":1,"column_end":67}},{"value":"/ - `unstable-locales`: Enable localization. This adds various methods with a","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":1892,"byte_end":1971,"line_start":51,"line_end":51,"column_start":1,"column_end":80}},{"value":"/   `_localized` suffix. The implementation and API may change or even be","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":1972,"byte_end":2047,"line_start":52,"line_end":52,"column_start":1,"column_end":76}},{"value":"/   removed in a patch release. Feedback welcome.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":2048,"byte_end":2099,"line_start":53,"line_end":53,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":2100,"byte_end":2103,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ [`serde`]: https://github.com/serde-rs/serde","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":2104,"byte_end":2152,"line_start":55,"line_end":55,"column_start":1,"column_end":49}},{"value":"/ [wasm-bindgen]: https://github.com/rustwasm/wasm-bindgen","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":2153,"byte_end":2213,"line_start":56,"line_end":56,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":2214,"byte_end":2217,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ See the [cargo docs][] for examples of specifying features.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":2218,"byte_end":2281,"line_start":58,"line_end":58,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":2282,"byte_end":2285,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ [cargo docs]: https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choosing-features","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":2286,"byte_end":2392,"line_start":60,"line_end":60,"column_start":1,"column_end":107}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":2393,"byte_end":2396,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ ## Overview","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":2397,"byte_end":2412,"line_start":62,"line_end":62,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":2413,"byte_end":2416,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ ### Duration","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":2417,"byte_end":2433,"line_start":64,"line_end":64,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":2434,"byte_end":2437,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ Chrono currently uses its own [`Duration`] type to represent the magnitude","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":2438,"byte_end":2516,"line_start":66,"line_end":66,"column_start":1,"column_end":79}},{"value":"/ of a time span. Since this has the same name as the newer, standard type for","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":2517,"byte_end":2597,"line_start":67,"line_end":67,"column_start":1,"column_end":81}},{"value":"/ duration, the reference will refer this type as `OldDuration`.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":2598,"byte_end":2664,"line_start":68,"line_end":68,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":2665,"byte_end":2668,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ Note that this is an \"accurate\" duration represented as seconds and","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":2669,"byte_end":2740,"line_start":70,"line_end":70,"column_start":1,"column_end":72}},{"value":"/ nanoseconds and does not represent \"nominal\" components such as days or","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":2741,"byte_end":2816,"line_start":71,"line_end":71,"column_start":1,"column_end":76}},{"value":"/ months.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":2817,"byte_end":2828,"line_start":72,"line_end":72,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":2829,"byte_end":2832,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ When the `oldtime` feature is enabled, [`Duration`] is an alias for the","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":2833,"byte_end":2908,"line_start":74,"line_end":74,"column_start":1,"column_end":76}},{"value":"/ [`time::Duration`](https://docs.rs/time/0.1.40/time/struct.Duration.html)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":2909,"byte_end":2986,"line_start":75,"line_end":75,"column_start":1,"column_end":78}},{"value":"/ type from v0.1 of the time crate. time v0.1 is deprecated, so new code","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":2987,"byte_end":3061,"line_start":76,"line_end":76,"column_start":1,"column_end":75}},{"value":"/ should disable the `oldtime` feature and use the `chrono::Duration` type","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":3062,"byte_end":3138,"line_start":77,"line_end":77,"column_start":1,"column_end":77}},{"value":"/ instead. The `oldtime` feature is enabled by default for backwards","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":3139,"byte_end":3209,"line_start":78,"line_end":78,"column_start":1,"column_end":71}},{"value":"/ compatibility, but future versions of Chrono are likely to remove the","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":3210,"byte_end":3283,"line_start":79,"line_end":79,"column_start":1,"column_end":74}},{"value":"/ feature entirely.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":3284,"byte_end":3305,"line_start":80,"line_end":80,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":3306,"byte_end":3309,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ Chrono does not yet natively support","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":3310,"byte_end":3350,"line_start":82,"line_end":82,"column_start":1,"column_end":41}},{"value":"/ the standard [`Duration`](https://doc.rust-lang.org/std/time/struct.Duration.html) type,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":3351,"byte_end":3443,"line_start":83,"line_end":83,"column_start":1,"column_end":93}},{"value":"/ but it will be supported in the future.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":3444,"byte_end":3487,"line_start":84,"line_end":84,"column_start":1,"column_end":44}},{"value":"/ Meanwhile you can convert between two types with","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":3488,"byte_end":3540,"line_start":85,"line_end":85,"column_start":1,"column_end":53}},{"value":"/ [`Duration::from_std`](https://docs.rs/time/0.1.40/time/struct.Duration.html#method.from_std)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":3541,"byte_end":3638,"line_start":86,"line_end":86,"column_start":1,"column_end":98}},{"value":"/ and","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":3639,"byte_end":3646,"line_start":87,"line_end":87,"column_start":1,"column_end":8}},{"value":"/ [`Duration::to_std`](https://docs.rs/time/0.1.40/time/struct.Duration.html#method.to_std)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":3647,"byte_end":3740,"line_start":88,"line_end":88,"column_start":1,"column_end":94}},{"value":"/ methods.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":3741,"byte_end":3753,"line_start":89,"line_end":89,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":3754,"byte_end":3757,"line_start":90,"line_end":90,"column_start":1,"column_end":4}},{"value":"/ ### Date and Time","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":3758,"byte_end":3779,"line_start":91,"line_end":91,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":3780,"byte_end":3783,"line_start":92,"line_end":92,"column_start":1,"column_end":4}},{"value":"/ Chrono provides a","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":3784,"byte_end":3805,"line_start":93,"line_end":93,"column_start":1,"column_end":22}},{"value":"/ [**`DateTime`**](./struct.DateTime.html)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":3806,"byte_end":3850,"line_start":94,"line_end":94,"column_start":1,"column_end":45}},{"value":"/ type to represent a date and a time in a timezone.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":3851,"byte_end":3905,"line_start":95,"line_end":95,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":3906,"byte_end":3909,"line_start":96,"line_end":96,"column_start":1,"column_end":4}},{"value":"/ For more abstract moment-in-time tracking such as internal timekeeping","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":3910,"byte_end":3984,"line_start":97,"line_end":97,"column_start":1,"column_end":75}},{"value":"/ that is unconcerned with timezones, consider","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":3985,"byte_end":4033,"line_start":98,"line_end":98,"column_start":1,"column_end":49}},{"value":"/ [`time::SystemTime`](https://doc.rust-lang.org/std/time/struct.SystemTime.html),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":4034,"byte_end":4118,"line_start":99,"line_end":99,"column_start":1,"column_end":85}},{"value":"/ which tracks your system clock, or","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":4119,"byte_end":4157,"line_start":100,"line_end":100,"column_start":1,"column_end":39}},{"value":"/ [`time::Instant`](https://doc.rust-lang.org/std/time/struct.Instant.html), which","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":4158,"byte_end":4242,"line_start":101,"line_end":101,"column_start":1,"column_end":85}},{"value":"/ is an opaque but monotonically-increasing representation of a moment in time.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":4243,"byte_end":4324,"line_start":102,"line_end":102,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":4325,"byte_end":4328,"line_start":103,"line_end":103,"column_start":1,"column_end":4}},{"value":"/ `DateTime` is timezone-aware and must be constructed from","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":4329,"byte_end":4390,"line_start":104,"line_end":104,"column_start":1,"column_end":62}},{"value":"/ the [**`TimeZone`**](./offset/trait.TimeZone.html) object,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":4391,"byte_end":4453,"line_start":105,"line_end":105,"column_start":1,"column_end":63}},{"value":"/ which defines how the local date is converted to and back from the UTC date.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":4454,"byte_end":4534,"line_start":106,"line_end":106,"column_start":1,"column_end":81}},{"value":"/ There are three well-known `TimeZone` implementations:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":4535,"byte_end":4593,"line_start":107,"line_end":107,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":4594,"byte_end":4597,"line_start":108,"line_end":108,"column_start":1,"column_end":4}},{"value":"/ * [**`Utc`**](./offset/struct.Utc.html) specifies the UTC time zone. It is most efficient.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":4598,"byte_end":4692,"line_start":109,"line_end":109,"column_start":1,"column_end":95}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":4693,"byte_end":4696,"line_start":110,"line_end":110,"column_start":1,"column_end":4}},{"value":"/ * [**`Local`**](./offset/struct.Local.html) specifies the system local time zone.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":4697,"byte_end":4782,"line_start":111,"line_end":111,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":4783,"byte_end":4786,"line_start":112,"line_end":112,"column_start":1,"column_end":4}},{"value":"/ * [**`FixedOffset`**](./offset/struct.FixedOffset.html) specifies","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":4787,"byte_end":4856,"line_start":113,"line_end":113,"column_start":1,"column_end":70}},{"value":"/   an arbitrary, fixed time zone such as UTC+09:00 or UTC-10:30.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":4857,"byte_end":4924,"line_start":114,"line_end":114,"column_start":1,"column_end":68}},{"value":"/   This often results from the parsed textual date and time.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":4925,"byte_end":4988,"line_start":115,"line_end":115,"column_start":1,"column_end":64}},{"value":"/   Since it stores the most information and does not depend on the system environment,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":4989,"byte_end":5078,"line_start":116,"line_end":116,"column_start":1,"column_end":90}},{"value":"/   you would want to normalize other `TimeZone`s into this type.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":5079,"byte_end":5146,"line_start":117,"line_end":117,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":5147,"byte_end":5150,"line_start":118,"line_end":118,"column_start":1,"column_end":4}},{"value":"/ `DateTime`s with different `TimeZone` types are distinct and do not mix,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":5151,"byte_end":5227,"line_start":119,"line_end":119,"column_start":1,"column_end":77}},{"value":"/ but can be converted to each other using","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":5228,"byte_end":5272,"line_start":120,"line_end":120,"column_start":1,"column_end":45}},{"value":"/ the [`DateTime::with_timezone`](./struct.DateTime.html#method.with_timezone) method.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":5273,"byte_end":5361,"line_start":121,"line_end":121,"column_start":1,"column_end":89}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":5362,"byte_end":5365,"line_start":122,"line_end":122,"column_start":1,"column_end":4}},{"value":"/ You can get the current date and time in the UTC time zone","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":5366,"byte_end":5428,"line_start":123,"line_end":123,"column_start":1,"column_end":63}},{"value":"/ ([`Utc::now()`](./offset/struct.Utc.html#method.now))","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":5429,"byte_end":5486,"line_start":124,"line_end":124,"column_start":1,"column_end":58}},{"value":"/ or in the local time zone","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":5487,"byte_end":5516,"line_start":125,"line_end":125,"column_start":1,"column_end":30}},{"value":"/ ([`Local::now()`](./offset/struct.Local.html#method.now)).","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":5517,"byte_end":5579,"line_start":126,"line_end":126,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":5580,"byte_end":5583,"line_start":127,"line_end":127,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":5584,"byte_end":5595,"line_start":128,"line_end":128,"column_start":1,"column_end":12}},{"value":"/ use chrono::prelude::*;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":5596,"byte_end":5623,"line_start":129,"line_end":129,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":5624,"byte_end":5627,"line_start":130,"line_end":130,"column_start":1,"column_end":4}},{"value":"/ let utc: DateTime<Utc> = Utc::now();       // e.g. `2014-11-28T12:45:59.324310806Z`","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":5628,"byte_end":5715,"line_start":131,"line_end":131,"column_start":1,"column_end":88}},{"value":"/ let local: DateTime<Local> = Local::now(); // e.g. `2014-11-28T21:45:59.324310806+09:00`","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":5716,"byte_end":5808,"line_start":132,"line_end":132,"column_start":1,"column_end":93}},{"value":"/ # let _ = utc; let _ = local;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":5809,"byte_end":5842,"line_start":133,"line_end":133,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":5843,"byte_end":5850,"line_start":134,"line_end":134,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":5851,"byte_end":5854,"line_start":135,"line_end":135,"column_start":1,"column_end":4}},{"value":"/ Alternatively, you can create your own date and time.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":5855,"byte_end":5912,"line_start":136,"line_end":136,"column_start":1,"column_end":58}},{"value":"/ This is a bit verbose due to Rust's lack of function and method overloading,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":5913,"byte_end":5993,"line_start":137,"line_end":137,"column_start":1,"column_end":81}},{"value":"/ but in turn we get a rich combination of initialization methods.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":5994,"byte_end":6062,"line_start":138,"line_end":138,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":6063,"byte_end":6066,"line_start":139,"line_end":139,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":6067,"byte_end":6078,"line_start":140,"line_end":140,"column_start":1,"column_end":12}},{"value":"/ use chrono::prelude::*;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":6079,"byte_end":6106,"line_start":141,"line_end":141,"column_start":1,"column_end":28}},{"value":"/ use chrono::offset::LocalResult;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":6107,"byte_end":6143,"line_start":142,"line_end":142,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":6144,"byte_end":6147,"line_start":143,"line_end":143,"column_start":1,"column_end":4}},{"value":"/ let dt = Utc.ymd(2014, 7, 8).and_hms(9, 10, 11); // `2014-07-08T09:10:11Z`","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":6148,"byte_end":6226,"line_start":144,"line_end":144,"column_start":1,"column_end":79}},{"value":"/ // July 8 is 188th day of the year 2014 (`o` for \"ordinal\")","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":6227,"byte_end":6290,"line_start":145,"line_end":145,"column_start":1,"column_end":64}},{"value":"/ assert_eq!(dt, Utc.yo(2014, 189).and_hms(9, 10, 11));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":6291,"byte_end":6348,"line_start":146,"line_end":146,"column_start":1,"column_end":58}},{"value":"/ // July 8 is Tuesday in ISO week 28 of the year 2014.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":6349,"byte_end":6406,"line_start":147,"line_end":147,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(dt, Utc.isoywd(2014, 28, Weekday::Tue).and_hms(9, 10, 11));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":6407,"byte_end":6481,"line_start":148,"line_end":148,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":6482,"byte_end":6485,"line_start":149,"line_end":149,"column_start":1,"column_end":4}},{"value":"/ let dt = Utc.ymd(2014, 7, 8).and_hms_milli(9, 10, 11, 12); // `2014-07-08T09:10:11.012Z`","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":6486,"byte_end":6578,"line_start":150,"line_end":150,"column_start":1,"column_end":93}},{"value":"/ assert_eq!(dt, Utc.ymd(2014, 7, 8).and_hms_micro(9, 10, 11, 12_000));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":6579,"byte_end":6652,"line_start":151,"line_end":151,"column_start":1,"column_end":74}},{"value":"/ assert_eq!(dt, Utc.ymd(2014, 7, 8).and_hms_nano(9, 10, 11, 12_000_000));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":6653,"byte_end":6729,"line_start":152,"line_end":152,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":6730,"byte_end":6733,"line_start":153,"line_end":153,"column_start":1,"column_end":4}},{"value":"/ // dynamic verification","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":6734,"byte_end":6761,"line_start":154,"line_end":154,"column_start":1,"column_end":28}},{"value":"/ assert_eq!(Utc.ymd_opt(2014, 7, 8).and_hms_opt(21, 15, 33),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":6762,"byte_end":6825,"line_start":155,"line_end":155,"column_start":1,"column_end":64}},{"value":"/            LocalResult::Single(Utc.ymd(2014, 7, 8).and_hms(21, 15, 33)));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":6826,"byte_end":6903,"line_start":156,"line_end":156,"column_start":1,"column_end":78}},{"value":"/ assert_eq!(Utc.ymd_opt(2014, 7, 8).and_hms_opt(80, 15, 33), LocalResult::None);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":6904,"byte_end":6987,"line_start":157,"line_end":157,"column_start":1,"column_end":84}},{"value":"/ assert_eq!(Utc.ymd_opt(2014, 7, 38).and_hms_opt(21, 15, 33), LocalResult::None);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":6988,"byte_end":7072,"line_start":158,"line_end":158,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":7073,"byte_end":7076,"line_start":159,"line_end":159,"column_start":1,"column_end":4}},{"value":"/ // other time zone objects can be used to construct a local datetime.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":7077,"byte_end":7150,"line_start":160,"line_end":160,"column_start":1,"column_end":74}},{"value":"/ // obviously, `local_dt` is normally different from `dt`, but `fixed_dt` should be identical.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":7151,"byte_end":7248,"line_start":161,"line_end":161,"column_start":1,"column_end":98}},{"value":"/ let local_dt = Local.ymd(2014, 7, 8).and_hms_milli(9, 10, 11, 12);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":7249,"byte_end":7319,"line_start":162,"line_end":162,"column_start":1,"column_end":71}},{"value":"/ let fixed_dt = FixedOffset::east(9 * 3600).ymd(2014, 7, 8).and_hms_milli(18, 10, 11, 12);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":7320,"byte_end":7413,"line_start":163,"line_end":163,"column_start":1,"column_end":94}},{"value":"/ assert_eq!(dt, fixed_dt);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":7414,"byte_end":7443,"line_start":164,"line_end":164,"column_start":1,"column_end":30}},{"value":"/ # let _ = local_dt;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":7444,"byte_end":7467,"line_start":165,"line_end":165,"column_start":1,"column_end":24}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":7468,"byte_end":7475,"line_start":166,"line_end":166,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":7476,"byte_end":7479,"line_start":167,"line_end":167,"column_start":1,"column_end":4}},{"value":"/ Various properties are available to the date and time, and can be altered individually.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":7480,"byte_end":7571,"line_start":168,"line_end":168,"column_start":1,"column_end":92}},{"value":"/ Most of them are defined in the traits [`Datelike`](./trait.Datelike.html) and","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":7572,"byte_end":7654,"line_start":169,"line_end":169,"column_start":1,"column_end":83}},{"value":"/ [`Timelike`](./trait.Timelike.html) which you should `use` before.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":7655,"byte_end":7725,"line_start":170,"line_end":170,"column_start":1,"column_end":71}},{"value":"/ Addition and subtraction is also supported.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":7726,"byte_end":7773,"line_start":171,"line_end":171,"column_start":1,"column_end":48}},{"value":"/ The following illustrates most supported operations to the date and time:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":7774,"byte_end":7851,"line_start":172,"line_end":172,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":7852,"byte_end":7855,"line_start":173,"line_end":173,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":7856,"byte_end":7867,"line_start":174,"line_end":174,"column_start":1,"column_end":12}},{"value":"/ use chrono::prelude::*;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":7868,"byte_end":7895,"line_start":175,"line_end":175,"column_start":1,"column_end":28}},{"value":"/ use chrono::Duration;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":7896,"byte_end":7921,"line_start":176,"line_end":176,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":7922,"byte_end":7925,"line_start":177,"line_end":177,"column_start":1,"column_end":4}},{"value":"/ // assume this returned `2014-11-28T21:45:59.324310806+09:00`:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":7926,"byte_end":7992,"line_start":178,"line_end":178,"column_start":1,"column_end":67}},{"value":"/ let dt = FixedOffset::east(9*3600).ymd(2014, 11, 28).and_hms_nano(21, 45, 59, 324310806);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":7993,"byte_end":8086,"line_start":179,"line_end":179,"column_start":1,"column_end":94}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":8087,"byte_end":8090,"line_start":180,"line_end":180,"column_start":1,"column_end":4}},{"value":"/ // property accessors","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":8091,"byte_end":8116,"line_start":181,"line_end":181,"column_start":1,"column_end":26}},{"value":"/ assert_eq!((dt.year(), dt.month(), dt.day()), (2014, 11, 28));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":8117,"byte_end":8183,"line_start":182,"line_end":182,"column_start":1,"column_end":67}},{"value":"/ assert_eq!((dt.month0(), dt.day0()), (10, 27)); // for unfortunate souls","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":8184,"byte_end":8260,"line_start":183,"line_end":183,"column_start":1,"column_end":77}},{"value":"/ assert_eq!((dt.hour(), dt.minute(), dt.second()), (21, 45, 59));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":8261,"byte_end":8329,"line_start":184,"line_end":184,"column_start":1,"column_end":69}},{"value":"/ assert_eq!(dt.weekday(), Weekday::Fri);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":8330,"byte_end":8373,"line_start":185,"line_end":185,"column_start":1,"column_end":44}},{"value":"/ assert_eq!(dt.weekday().number_from_monday(), 5); // Mon=1, ..., Sun=7","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":8374,"byte_end":8448,"line_start":186,"line_end":186,"column_start":1,"column_end":75}},{"value":"/ assert_eq!(dt.ordinal(), 332); // the day of year","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":8449,"byte_end":8502,"line_start":187,"line_end":187,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(dt.num_days_from_ce(), 735565); // the number of days from and including Jan 1, 1","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":8503,"byte_end":8599,"line_start":188,"line_end":188,"column_start":1,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":8600,"byte_end":8603,"line_start":189,"line_end":189,"column_start":1,"column_end":4}},{"value":"/ // time zone accessor and manipulation","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":8604,"byte_end":8646,"line_start":190,"line_end":190,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(dt.offset().fix().local_minus_utc(), 9 * 3600);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":8647,"byte_end":8709,"line_start":191,"line_end":191,"column_start":1,"column_end":63}},{"value":"/ assert_eq!(dt.timezone(), FixedOffset::east(9 * 3600));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":8710,"byte_end":8769,"line_start":192,"line_end":192,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(dt.with_timezone(&Utc), Utc.ymd(2014, 11, 28).and_hms_nano(12, 45, 59, 324310806));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":8770,"byte_end":8868,"line_start":193,"line_end":193,"column_start":1,"column_end":99}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":8869,"byte_end":8872,"line_start":194,"line_end":194,"column_start":1,"column_end":4}},{"value":"/ // a sample of property manipulations (validates dynamically)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":8873,"byte_end":8938,"line_start":195,"line_end":195,"column_start":1,"column_end":66}},{"value":"/ assert_eq!(dt.with_day(29).unwrap().weekday(), Weekday::Sat); // 2014-11-29 is Saturday","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":8939,"byte_end":9030,"line_start":196,"line_end":196,"column_start":1,"column_end":92}},{"value":"/ assert_eq!(dt.with_day(32), None);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":9031,"byte_end":9069,"line_start":197,"line_end":197,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(dt.with_year(-300).unwrap().num_days_from_ce(), -109606); // November 29, 301 BCE","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":9070,"byte_end":9166,"line_start":198,"line_end":198,"column_start":1,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":9167,"byte_end":9170,"line_start":199,"line_end":199,"column_start":1,"column_end":4}},{"value":"/ // arithmetic operations","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":9171,"byte_end":9199,"line_start":200,"line_end":200,"column_start":1,"column_end":29}},{"value":"/ let dt1 = Utc.ymd(2014, 11, 14).and_hms(8, 9, 10);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":9200,"byte_end":9254,"line_start":201,"line_end":201,"column_start":1,"column_end":55}},{"value":"/ let dt2 = Utc.ymd(2014, 11, 14).and_hms(10, 9, 8);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":9255,"byte_end":9309,"line_start":202,"line_end":202,"column_start":1,"column_end":55}},{"value":"/ assert_eq!(dt1.signed_duration_since(dt2), Duration::seconds(-2 * 3600 + 2));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":9310,"byte_end":9391,"line_start":203,"line_end":203,"column_start":1,"column_end":82}},{"value":"/ assert_eq!(dt2.signed_duration_since(dt1), Duration::seconds(2 * 3600 - 2));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":9392,"byte_end":9472,"line_start":204,"line_end":204,"column_start":1,"column_end":81}},{"value":"/ assert_eq!(Utc.ymd(1970, 1, 1).and_hms(0, 0, 0) + Duration::seconds(1_000_000_000),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":9473,"byte_end":9560,"line_start":205,"line_end":205,"column_start":1,"column_end":88}},{"value":"/            Utc.ymd(2001, 9, 9).and_hms(1, 46, 40));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":9561,"byte_end":9616,"line_start":206,"line_end":206,"column_start":1,"column_end":56}},{"value":"/ assert_eq!(Utc.ymd(1970, 1, 1).and_hms(0, 0, 0) - Duration::seconds(1_000_000_000),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":9617,"byte_end":9704,"line_start":207,"line_end":207,"column_start":1,"column_end":88}},{"value":"/            Utc.ymd(1938, 4, 24).and_hms(22, 13, 20));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":9705,"byte_end":9762,"line_start":208,"line_end":208,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":9763,"byte_end":9770,"line_start":209,"line_end":209,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":9771,"byte_end":9774,"line_start":210,"line_end":210,"column_start":1,"column_end":4}},{"value":"/ ### Formatting and Parsing","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":9775,"byte_end":9805,"line_start":211,"line_end":211,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":9806,"byte_end":9809,"line_start":212,"line_end":212,"column_start":1,"column_end":4}},{"value":"/ Formatting is done via the [`format`](./struct.DateTime.html#method.format) method,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":9810,"byte_end":9897,"line_start":213,"line_end":213,"column_start":1,"column_end":88}},{"value":"/ which format is equivalent to the familiar `strftime` format.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":9898,"byte_end":9963,"line_start":214,"line_end":214,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":9964,"byte_end":9967,"line_start":215,"line_end":215,"column_start":1,"column_end":4}},{"value":"/ See [`format::strftime`](./format/strftime/index.html#specifiers)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":9968,"byte_end":10037,"line_start":216,"line_end":216,"column_start":1,"column_end":70}},{"value":"/ documentation for full syntax and list of specifiers.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":10038,"byte_end":10095,"line_start":217,"line_end":217,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":10096,"byte_end":10099,"line_start":218,"line_end":218,"column_start":1,"column_end":4}},{"value":"/ The default `to_string` method and `{:?}` specifier also give a reasonable representation.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":10100,"byte_end":10194,"line_start":219,"line_end":219,"column_start":1,"column_end":95}},{"value":"/ Chrono also provides [`to_rfc2822`](./struct.DateTime.html#method.to_rfc2822) and","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":10195,"byte_end":10280,"line_start":220,"line_end":220,"column_start":1,"column_end":86}},{"value":"/ [`to_rfc3339`](./struct.DateTime.html#method.to_rfc3339) methods","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":10281,"byte_end":10349,"line_start":221,"line_end":221,"column_start":1,"column_end":69}},{"value":"/ for well-known formats.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":10350,"byte_end":10377,"line_start":222,"line_end":222,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":10378,"byte_end":10381,"line_start":223,"line_end":223,"column_start":1,"column_end":4}},{"value":"/ Chrono now also provides date formatting in almost any language without the","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":10382,"byte_end":10461,"line_start":224,"line_end":224,"column_start":1,"column_end":80}},{"value":"/ help of an additional C library. This functionality is under the feature","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":10462,"byte_end":10538,"line_start":225,"line_end":225,"column_start":1,"column_end":77}},{"value":"/ `unstable-locales`:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":10539,"byte_end":10562,"line_start":226,"line_end":226,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":10563,"byte_end":10566,"line_start":227,"line_end":227,"column_start":1,"column_end":4}},{"value":"/ ```toml","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":10567,"byte_end":10578,"line_start":228,"line_end":228,"column_start":1,"column_end":12}},{"value":"/ chrono = { version = \"0.4\", features = [\"unstable-locales\"] }","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":10579,"byte_end":10644,"line_start":229,"line_end":229,"column_start":1,"column_end":66}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":10645,"byte_end":10652,"line_start":230,"line_end":230,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":10653,"byte_end":10656,"line_start":231,"line_end":231,"column_start":1,"column_end":4}},{"value":"/ The `unstable-locales` feature requires and implies at least the `alloc` feature.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":10657,"byte_end":10742,"line_start":232,"line_end":232,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":10743,"byte_end":10746,"line_start":233,"line_end":233,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":10747,"byte_end":10758,"line_start":234,"line_end":234,"column_start":1,"column_end":12}},{"value":"/ use chrono::prelude::*;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":10759,"byte_end":10786,"line_start":235,"line_end":235,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":10787,"byte_end":10790,"line_start":236,"line_end":236,"column_start":1,"column_end":4}},{"value":"/ # #[cfg(feature = \"unstable-locales\")]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":10791,"byte_end":10833,"line_start":237,"line_end":237,"column_start":1,"column_end":43}},{"value":"/ # fn test() {","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":10834,"byte_end":10851,"line_start":238,"line_end":238,"column_start":1,"column_end":18}},{"value":"/ let dt = Utc.ymd(2014, 11, 28).and_hms(12, 0, 9);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":10852,"byte_end":10905,"line_start":239,"line_end":239,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(dt.format(\"%Y-%m-%d %H:%M:%S\").to_string(), \"2014-11-28 12:00:09\");","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":10906,"byte_end":10988,"line_start":240,"line_end":240,"column_start":1,"column_end":83}},{"value":"/ assert_eq!(dt.format(\"%a %b %e %T %Y\").to_string(), \"Fri Nov 28 12:00:09 2014\");","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":10989,"byte_end":11073,"line_start":241,"line_end":241,"column_start":1,"column_end":85}},{"value":"/ assert_eq!(dt.format_localized(\"%A %e %B %Y, %T\", Locale::fr_BE).to_string(), \"vendredi 28 novembre 2014, 12:00:09\");","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":11074,"byte_end":11195,"line_start":242,"line_end":242,"column_start":1,"column_end":122}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":11196,"byte_end":11199,"line_start":243,"line_end":243,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(dt.format(\"%a %b %e %T %Y\").to_string(), dt.format(\"%c\").to_string());","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":11200,"byte_end":11285,"line_start":244,"line_end":244,"column_start":1,"column_end":86}},{"value":"/ assert_eq!(dt.to_string(), \"2014-11-28 12:00:09 UTC\");","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":11286,"byte_end":11344,"line_start":245,"line_end":245,"column_start":1,"column_end":59}},{"value":"/ assert_eq!(dt.to_rfc2822(), \"Fri, 28 Nov 2014 12:00:09 +0000\");","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":11345,"byte_end":11412,"line_start":246,"line_end":246,"column_start":1,"column_end":68}},{"value":"/ assert_eq!(dt.to_rfc3339(), \"2014-11-28T12:00:09+00:00\");","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":11413,"byte_end":11474,"line_start":247,"line_end":247,"column_start":1,"column_end":62}},{"value":"/ assert_eq!(format!(\"{:?}\", dt), \"2014-11-28T12:00:09Z\");","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":11475,"byte_end":11535,"line_start":248,"line_end":248,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":11536,"byte_end":11539,"line_start":249,"line_end":249,"column_start":1,"column_end":4}},{"value":"/ // Note that milli/nanoseconds are only printed if they are non-zero","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":11540,"byte_end":11612,"line_start":250,"line_end":250,"column_start":1,"column_end":73}},{"value":"/ let dt_nano = Utc.ymd(2014, 11, 28).and_hms_nano(12, 0, 9, 1);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":11613,"byte_end":11679,"line_start":251,"line_end":251,"column_start":1,"column_end":67}},{"value":"/ assert_eq!(format!(\"{:?}\", dt_nano), \"2014-11-28T12:00:09.000000001Z\");","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":11680,"byte_end":11755,"line_start":252,"line_end":252,"column_start":1,"column_end":76}},{"value":"/ # }","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":11756,"byte_end":11763,"line_start":253,"line_end":253,"column_start":1,"column_end":8}},{"value":"/ # #[cfg(not(feature = \"unstable-locales\"))]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":11764,"byte_end":11811,"line_start":254,"line_end":254,"column_start":1,"column_end":48}},{"value":"/ # fn test() {}","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":11812,"byte_end":11830,"line_start":255,"line_end":255,"column_start":1,"column_end":19}},{"value":"/ # if cfg!(feature = \"unstable-locales\") {","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":11831,"byte_end":11876,"line_start":256,"line_end":256,"column_start":1,"column_end":46}},{"value":"/ #    test();","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":11877,"byte_end":11893,"line_start":257,"line_end":257,"column_start":1,"column_end":17}},{"value":"/ # }","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":11894,"byte_end":11901,"line_start":258,"line_end":258,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":11902,"byte_end":11909,"line_start":259,"line_end":259,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":11910,"byte_end":11913,"line_start":260,"line_end":260,"column_start":1,"column_end":4}},{"value":"/ Parsing can be done with three methods:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":11914,"byte_end":11957,"line_start":261,"line_end":261,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":11958,"byte_end":11961,"line_start":262,"line_end":262,"column_start":1,"column_end":4}},{"value":"/ 1. The standard [`FromStr`](https://doc.rust-lang.org/std/str/trait.FromStr.html) trait","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":11962,"byte_end":12053,"line_start":263,"line_end":263,"column_start":1,"column_end":92}},{"value":"/    (and [`parse`](https://doc.rust-lang.org/std/primitive.str.html#method.parse) method","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":12054,"byte_end":12145,"line_start":264,"line_end":264,"column_start":1,"column_end":92}},{"value":"/    on a string) can be used for parsing `DateTime<FixedOffset>`, `DateTime<Utc>` and","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":12146,"byte_end":12234,"line_start":265,"line_end":265,"column_start":1,"column_end":89}},{"value":"/    `DateTime<Local>` values. This parses what the `{:?}`","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":12235,"byte_end":12295,"line_start":266,"line_end":266,"column_start":1,"column_end":61}},{"value":"/    ([`std::fmt::Debug`](https://doc.rust-lang.org/std/fmt/trait.Debug.html))","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":12296,"byte_end":12376,"line_start":267,"line_end":267,"column_start":1,"column_end":81}},{"value":"/    format specifier prints, and requires the offset to be present.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":12377,"byte_end":12447,"line_start":268,"line_end":268,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":12448,"byte_end":12451,"line_start":269,"line_end":269,"column_start":1,"column_end":4}},{"value":"/ 2. [`DateTime::parse_from_str`](./struct.DateTime.html#method.parse_from_str) parses","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":12452,"byte_end":12540,"line_start":270,"line_end":270,"column_start":1,"column_end":89}},{"value":"/    a date and time with offsets and returns `DateTime<FixedOffset>`.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":12541,"byte_end":12613,"line_start":271,"line_end":271,"column_start":1,"column_end":73}},{"value":"/    This should be used when the offset is a part of input and the caller cannot guess that.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":12614,"byte_end":12709,"line_start":272,"line_end":272,"column_start":1,"column_end":96}},{"value":"/    It *cannot* be used when the offset can be missing.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":12710,"byte_end":12768,"line_start":273,"line_end":273,"column_start":1,"column_end":59}},{"value":"/    [`DateTime::parse_from_rfc2822`](./struct.DateTime.html#method.parse_from_rfc2822)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":12769,"byte_end":12858,"line_start":274,"line_end":274,"column_start":1,"column_end":90}},{"value":"/    and","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":12859,"byte_end":12869,"line_start":275,"line_end":275,"column_start":1,"column_end":11}},{"value":"/    [`DateTime::parse_from_rfc3339`](./struct.DateTime.html#method.parse_from_rfc3339)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":12870,"byte_end":12959,"line_start":276,"line_end":276,"column_start":1,"column_end":90}},{"value":"/    are similar but for well-known formats.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":12960,"byte_end":13006,"line_start":277,"line_end":277,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":13007,"byte_end":13010,"line_start":278,"line_end":278,"column_start":1,"column_end":4}},{"value":"/ 3. [`Offset::datetime_from_str`](./offset/trait.TimeZone.html#method.datetime_from_str) is","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":13011,"byte_end":13105,"line_start":279,"line_end":279,"column_start":1,"column_end":95}},{"value":"/    similar but returns `DateTime` of given offset.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":13106,"byte_end":13160,"line_start":280,"line_end":280,"column_start":1,"column_end":55}},{"value":"/    When the explicit offset is missing from the input, it simply uses given offset.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":13161,"byte_end":13248,"line_start":281,"line_end":281,"column_start":1,"column_end":88}},{"value":"/    It issues an error when the input contains an explicit offset different","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":13249,"byte_end":13327,"line_start":282,"line_end":282,"column_start":1,"column_end":79}},{"value":"/    from the current offset.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":13328,"byte_end":13359,"line_start":283,"line_end":283,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":13360,"byte_end":13363,"line_start":284,"line_end":284,"column_start":1,"column_end":4}},{"value":"/ More detailed control over the parsing process is available via","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":13364,"byte_end":13431,"line_start":285,"line_end":285,"column_start":1,"column_end":68}},{"value":"/ [`format`](./format/index.html) module.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":13432,"byte_end":13475,"line_start":286,"line_end":286,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":13476,"byte_end":13479,"line_start":287,"line_end":287,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":13480,"byte_end":13491,"line_start":288,"line_end":288,"column_start":1,"column_end":12}},{"value":"/ use chrono::prelude::*;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":13492,"byte_end":13519,"line_start":289,"line_end":289,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":13520,"byte_end":13523,"line_start":290,"line_end":290,"column_start":1,"column_end":4}},{"value":"/ let dt = Utc.ymd(2014, 11, 28).and_hms(12, 0, 9);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":13524,"byte_end":13577,"line_start":291,"line_end":291,"column_start":1,"column_end":54}},{"value":"/ let fixed_dt = dt.with_timezone(&FixedOffset::east(9*3600));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":13578,"byte_end":13642,"line_start":292,"line_end":292,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":13643,"byte_end":13646,"line_start":293,"line_end":293,"column_start":1,"column_end":4}},{"value":"/ // method 1","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":13647,"byte_end":13662,"line_start":294,"line_end":294,"column_start":1,"column_end":16}},{"value":"/ assert_eq!(\"2014-11-28T12:00:09Z\".parse::<DateTime<Utc>>(), Ok(dt.clone()));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":13663,"byte_end":13743,"line_start":295,"line_end":295,"column_start":1,"column_end":81}},{"value":"/ assert_eq!(\"2014-11-28T21:00:09+09:00\".parse::<DateTime<Utc>>(), Ok(dt.clone()));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":13744,"byte_end":13829,"line_start":296,"line_end":296,"column_start":1,"column_end":86}},{"value":"/ assert_eq!(\"2014-11-28T21:00:09+09:00\".parse::<DateTime<FixedOffset>>(), Ok(fixed_dt.clone()));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":13830,"byte_end":13929,"line_start":297,"line_end":297,"column_start":1,"column_end":100}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":13930,"byte_end":13933,"line_start":298,"line_end":298,"column_start":1,"column_end":4}},{"value":"/ // method 2","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":13934,"byte_end":13949,"line_start":299,"line_end":299,"column_start":1,"column_end":16}},{"value":"/ assert_eq!(DateTime::parse_from_str(\"2014-11-28 21:00:09 +09:00\", \"%Y-%m-%d %H:%M:%S %z\"),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":13950,"byte_end":14044,"line_start":300,"line_end":300,"column_start":1,"column_end":95}},{"value":"/            Ok(fixed_dt.clone()));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":14045,"byte_end":14082,"line_start":301,"line_end":301,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(DateTime::parse_from_rfc2822(\"Fri, 28 Nov 2014 21:00:09 +0900\"),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":14083,"byte_end":14162,"line_start":302,"line_end":302,"column_start":1,"column_end":80}},{"value":"/            Ok(fixed_dt.clone()));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":14163,"byte_end":14200,"line_start":303,"line_end":303,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(DateTime::parse_from_rfc3339(\"2014-11-28T21:00:09+09:00\"), Ok(fixed_dt.clone()));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":14201,"byte_end":14297,"line_start":304,"line_end":304,"column_start":1,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":14298,"byte_end":14301,"line_start":305,"line_end":305,"column_start":1,"column_end":4}},{"value":"/ // method 3","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":14302,"byte_end":14317,"line_start":306,"line_end":306,"column_start":1,"column_end":16}},{"value":"/ assert_eq!(Utc.datetime_from_str(\"2014-11-28 12:00:09\", \"%Y-%m-%d %H:%M:%S\"), Ok(dt.clone()));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":14318,"byte_end":14416,"line_start":307,"line_end":307,"column_start":1,"column_end":99}},{"value":"/ assert_eq!(Utc.datetime_from_str(\"Fri Nov 28 12:00:09 2014\", \"%a %b %e %T %Y\"), Ok(dt.clone()));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":14417,"byte_end":14517,"line_start":308,"line_end":308,"column_start":1,"column_end":101}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":14518,"byte_end":14521,"line_start":309,"line_end":309,"column_start":1,"column_end":4}},{"value":"/ // oops, the year is missing!","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":14522,"byte_end":14555,"line_start":310,"line_end":310,"column_start":1,"column_end":34}},{"value":"/ assert!(Utc.datetime_from_str(\"Fri Nov 28 12:00:09\", \"%a %b %e %T %Y\").is_err());","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":14556,"byte_end":14641,"line_start":311,"line_end":311,"column_start":1,"column_end":86}},{"value":"/ // oops, the format string does not include the year at all!","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":14642,"byte_end":14706,"line_start":312,"line_end":312,"column_start":1,"column_end":65}},{"value":"/ assert!(Utc.datetime_from_str(\"Fri Nov 28 12:00:09\", \"%a %b %e %T\").is_err());","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":14707,"byte_end":14789,"line_start":313,"line_end":313,"column_start":1,"column_end":83}},{"value":"/ // oops, the weekday is incorrect!","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":14790,"byte_end":14828,"line_start":314,"line_end":314,"column_start":1,"column_end":39}},{"value":"/ assert!(Utc.datetime_from_str(\"Sat Nov 28 12:00:09 2014\", \"%a %b %e %T %Y\").is_err());","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":14829,"byte_end":14919,"line_start":315,"line_end":315,"column_start":1,"column_end":91}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":14920,"byte_end":14927,"line_start":316,"line_end":316,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":14928,"byte_end":14931,"line_start":317,"line_end":317,"column_start":1,"column_end":4}},{"value":"/ Again : See [`format::strftime`](./format/strftime/index.html#specifiers)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":14932,"byte_end":15009,"line_start":318,"line_end":318,"column_start":1,"column_end":78}},{"value":"/ documentation for full syntax and list of specifiers.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":15010,"byte_end":15067,"line_start":319,"line_end":319,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":15068,"byte_end":15071,"line_start":320,"line_end":320,"column_start":1,"column_end":4}},{"value":"/ ### Conversion from and to EPOCH timestamps","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":15072,"byte_end":15119,"line_start":321,"line_end":321,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":15120,"byte_end":15123,"line_start":322,"line_end":322,"column_start":1,"column_end":4}},{"value":"/ Use [`Utc.timestamp(seconds, nanoseconds)`](./offset/trait.TimeZone.html#method.timestamp)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":15124,"byte_end":15218,"line_start":323,"line_end":323,"column_start":1,"column_end":95}},{"value":"/ to construct a [`DateTime<Utc>`](./struct.DateTime.html) from a UNIX timestamp","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":15219,"byte_end":15301,"line_start":324,"line_end":324,"column_start":1,"column_end":83}},{"value":"/ (seconds, nanoseconds that passed since January 1st 1970).","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":15302,"byte_end":15364,"line_start":325,"line_end":325,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":15365,"byte_end":15368,"line_start":326,"line_end":326,"column_start":1,"column_end":4}},{"value":"/ Use [`DateTime.timestamp`](./struct.DateTime.html#method.timestamp) to get the timestamp (in seconds)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":15369,"byte_end":15474,"line_start":327,"line_end":327,"column_start":1,"column_end":106}},{"value":"/ from a [`DateTime`](./struct.DateTime.html). Additionally, you can use","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":15475,"byte_end":15549,"line_start":328,"line_end":328,"column_start":1,"column_end":75}},{"value":"/ [`DateTime.timestamp_subsec_nanos`](./struct.DateTime.html#method.timestamp_subsec_nanos)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":15550,"byte_end":15643,"line_start":329,"line_end":329,"column_start":1,"column_end":94}},{"value":"/ to get the number of additional number of nanoseconds.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":15644,"byte_end":15702,"line_start":330,"line_end":330,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":15703,"byte_end":15706,"line_start":331,"line_end":331,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":15707,"byte_end":15718,"line_start":332,"line_end":332,"column_start":1,"column_end":12}},{"value":"/ // We need the trait in scope to use Utc::timestamp().","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":15719,"byte_end":15777,"line_start":333,"line_end":333,"column_start":1,"column_end":59}},{"value":"/ use chrono::{DateTime, TimeZone, Utc};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":15778,"byte_end":15820,"line_start":334,"line_end":334,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":15821,"byte_end":15824,"line_start":335,"line_end":335,"column_start":1,"column_end":4}},{"value":"/ // Construct a datetime from epoch:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":15825,"byte_end":15864,"line_start":336,"line_end":336,"column_start":1,"column_end":40}},{"value":"/ let dt = Utc.timestamp(1_500_000_000, 0);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":15865,"byte_end":15910,"line_start":337,"line_end":337,"column_start":1,"column_end":46}},{"value":"/ assert_eq!(dt.to_rfc2822(), \"Fri, 14 Jul 2017 02:40:00 +0000\");","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":15911,"byte_end":15978,"line_start":338,"line_end":338,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":15979,"byte_end":15982,"line_start":339,"line_end":339,"column_start":1,"column_end":4}},{"value":"/ // Get epoch value from a datetime:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":15983,"byte_end":16022,"line_start":340,"line_end":340,"column_start":1,"column_end":40}},{"value":"/ let dt = DateTime::parse_from_rfc2822(\"Fri, 14 Jul 2017 02:40:00 +0000\").unwrap();","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":16023,"byte_end":16109,"line_start":341,"line_end":341,"column_start":1,"column_end":87}},{"value":"/ assert_eq!(dt.timestamp(), 1_500_000_000);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":16110,"byte_end":16156,"line_start":342,"line_end":342,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":16157,"byte_end":16164,"line_start":343,"line_end":343,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":16165,"byte_end":16168,"line_start":344,"line_end":344,"column_start":1,"column_end":4}},{"value":"/ ### Individual date","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":16169,"byte_end":16192,"line_start":345,"line_end":345,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":16193,"byte_end":16196,"line_start":346,"line_end":346,"column_start":1,"column_end":4}},{"value":"/ Chrono also provides an individual date type ([**`Date`**](./struct.Date.html)).","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":16197,"byte_end":16281,"line_start":347,"line_end":347,"column_start":1,"column_end":85}},{"value":"/ It also has time zones attached, and have to be constructed via time zones.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":16282,"byte_end":16361,"line_start":348,"line_end":348,"column_start":1,"column_end":80}},{"value":"/ Most operations available to `DateTime` are also available to `Date` whenever appropriate.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":16362,"byte_end":16456,"line_start":349,"line_end":349,"column_start":1,"column_end":95}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":16457,"byte_end":16460,"line_start":350,"line_end":350,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":16461,"byte_end":16472,"line_start":351,"line_end":351,"column_start":1,"column_end":12}},{"value":"/ use chrono::prelude::*;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":16473,"byte_end":16500,"line_start":352,"line_end":352,"column_start":1,"column_end":28}},{"value":"/ use chrono::offset::LocalResult;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":16501,"byte_end":16537,"line_start":353,"line_end":353,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":16538,"byte_end":16541,"line_start":354,"line_end":354,"column_start":1,"column_end":4}},{"value":"/ # // these *may* fail, but only very rarely. just rerun the test if you were that unfortunate ;)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":16542,"byte_end":16642,"line_start":355,"line_end":355,"column_start":1,"column_end":101}},{"value":"/ assert_eq!(Utc::today(), Utc::now().date());","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":16643,"byte_end":16691,"line_start":356,"line_end":356,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(Local::today(), Local::now().date());","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":16692,"byte_end":16744,"line_start":357,"line_end":357,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":16745,"byte_end":16748,"line_start":358,"line_end":358,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(Utc.ymd(2014, 11, 28).weekday(), Weekday::Fri);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":16749,"byte_end":16811,"line_start":359,"line_end":359,"column_start":1,"column_end":63}},{"value":"/ assert_eq!(Utc.ymd_opt(2014, 11, 31), LocalResult::None);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":16812,"byte_end":16873,"line_start":360,"line_end":360,"column_start":1,"column_end":62}},{"value":"/ assert_eq!(Utc.ymd(2014, 11, 28).and_hms_milli(7, 8, 9, 10).format(\"%H%M%S\").to_string(),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":16874,"byte_end":16967,"line_start":361,"line_end":361,"column_start":1,"column_end":94}},{"value":"/            \"070809\");","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":16968,"byte_end":16993,"line_start":362,"line_end":362,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":16994,"byte_end":17001,"line_start":363,"line_end":363,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":17002,"byte_end":17005,"line_start":364,"line_end":364,"column_start":1,"column_end":4}},{"value":"/ There is no timezone-aware `Time` due to the lack of usefulness and also the complexity.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":17006,"byte_end":17098,"line_start":365,"line_end":365,"column_start":1,"column_end":93}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":17099,"byte_end":17102,"line_start":366,"line_end":366,"column_start":1,"column_end":4}},{"value":"/ `DateTime` has [`date`](./struct.DateTime.html#method.date) method","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":17103,"byte_end":17173,"line_start":367,"line_end":367,"column_start":1,"column_end":71}},{"value":"/ which returns a `Date` which represents its date component.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":17174,"byte_end":17237,"line_start":368,"line_end":368,"column_start":1,"column_end":64}},{"value":"/ There is also a [`time`](./struct.DateTime.html#method.time) method,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":17238,"byte_end":17310,"line_start":369,"line_end":369,"column_start":1,"column_end":73}},{"value":"/ which simply returns a naive local time described below.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":17311,"byte_end":17371,"line_start":370,"line_end":370,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":17372,"byte_end":17375,"line_start":371,"line_end":371,"column_start":1,"column_end":4}},{"value":"/ ### Naive date and time","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":17376,"byte_end":17403,"line_start":372,"line_end":372,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":17404,"byte_end":17407,"line_start":373,"line_end":373,"column_start":1,"column_end":4}},{"value":"/ Chrono provides naive counterparts to `Date`, (non-existent) `Time` and `DateTime`","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":17408,"byte_end":17494,"line_start":374,"line_end":374,"column_start":1,"column_end":87}},{"value":"/ as [**`NaiveDate`**](./naive/struct.NaiveDate.html),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":17495,"byte_end":17551,"line_start":375,"line_end":375,"column_start":1,"column_end":57}},{"value":"/ [**`NaiveTime`**](./naive/struct.NaiveTime.html) and","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":17552,"byte_end":17608,"line_start":376,"line_end":376,"column_start":1,"column_end":57}},{"value":"/ [**`NaiveDateTime`**](./naive/struct.NaiveDateTime.html) respectively.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":17609,"byte_end":17683,"line_start":377,"line_end":377,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":17684,"byte_end":17687,"line_start":378,"line_end":378,"column_start":1,"column_end":4}},{"value":"/ They have almost equivalent interfaces as their timezone-aware twins,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":17688,"byte_end":17761,"line_start":379,"line_end":379,"column_start":1,"column_end":74}},{"value":"/ but are not associated to time zones obviously and can be quite low-level.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":17762,"byte_end":17840,"line_start":380,"line_end":380,"column_start":1,"column_end":79}},{"value":"/ They are mostly useful for building blocks for higher-level types.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":17841,"byte_end":17911,"line_start":381,"line_end":381,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":17912,"byte_end":17915,"line_start":382,"line_end":382,"column_start":1,"column_end":4}},{"value":"/ Timezone-aware `DateTime` and `Date` types have two methods returning naive versions:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":17916,"byte_end":18005,"line_start":383,"line_end":383,"column_start":1,"column_end":90}},{"value":"/ [`naive_local`](./struct.DateTime.html#method.naive_local) returns","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":18006,"byte_end":18076,"line_start":384,"line_end":384,"column_start":1,"column_end":71}},{"value":"/ a view to the naive local time,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":18077,"byte_end":18112,"line_start":385,"line_end":385,"column_start":1,"column_end":36}},{"value":"/ and [`naive_utc`](./struct.DateTime.html#method.naive_utc) returns","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":18113,"byte_end":18183,"line_start":386,"line_end":386,"column_start":1,"column_end":71}},{"value":"/ a view to the naive UTC time.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":18184,"byte_end":18217,"line_start":387,"line_end":387,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":18218,"byte_end":18221,"line_start":388,"line_end":388,"column_start":1,"column_end":4}},{"value":"/ ## Limitations","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":18222,"byte_end":18240,"line_start":389,"line_end":389,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":18241,"byte_end":18244,"line_start":390,"line_end":390,"column_start":1,"column_end":4}},{"value":"/ Only proleptic Gregorian calendar (i.e. extended to support older dates) is supported.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":18245,"byte_end":18335,"line_start":391,"line_end":391,"column_start":1,"column_end":91}},{"value":"/ Be very careful if you really have to deal with pre-20C dates, they can be in Julian or others.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":18336,"byte_end":18435,"line_start":392,"line_end":392,"column_start":1,"column_end":100}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":18436,"byte_end":18439,"line_start":393,"line_end":393,"column_start":1,"column_end":4}},{"value":"/ Date types are limited in about +/- 262,000 years from the common epoch.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":18440,"byte_end":18516,"line_start":394,"line_end":394,"column_start":1,"column_end":77}},{"value":"/ Time types are limited in the nanosecond accuracy.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":18517,"byte_end":18571,"line_start":395,"line_end":395,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":18572,"byte_end":18575,"line_start":396,"line_end":396,"column_start":1,"column_end":4}},{"value":"/ [Leap seconds are supported in the representation but","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":18576,"byte_end":18633,"line_start":397,"line_end":397,"column_start":1,"column_end":58}},{"value":"/ Chrono doesn't try to make use of them](./naive/struct.NaiveTime.html#leap-second-handling).","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":18634,"byte_end":18730,"line_start":398,"line_end":398,"column_start":1,"column_end":97}},{"value":"/ (The main reason is that leap seconds are not really predictable.)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":18731,"byte_end":18801,"line_start":399,"line_end":399,"column_start":1,"column_end":71}},{"value":"/ Almost *every* operation over the possible leap seconds will ignore them.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":18802,"byte_end":18879,"line_start":400,"line_end":400,"column_start":1,"column_end":78}},{"value":"/ Consider using `NaiveDateTime` with the implicit TAI (International Atomic Time) scale","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":18880,"byte_end":18970,"line_start":401,"line_end":401,"column_start":1,"column_end":91}},{"value":"/ if you want.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":18971,"byte_end":18987,"line_start":402,"line_end":402,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":18988,"byte_end":18991,"line_start":403,"line_end":403,"column_start":1,"column_end":4}},{"value":"/ Chrono inherently does not support an inaccurate or partial date and time representation.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":18992,"byte_end":19085,"line_start":404,"line_end":404,"column_start":1,"column_end":94}},{"value":"/ Any operation that can be ambiguous will return `None` in such cases.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":19086,"byte_end":19159,"line_start":405,"line_end":405,"column_start":1,"column_end":74}},{"value":"/ For example, \"a month later\" of 2014-01-30 is not well-defined","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":19160,"byte_end":19226,"line_start":406,"line_end":406,"column_start":1,"column_end":67}},{"value":"/ and consequently `Utc.ymd(2014, 1, 30).with_month(2)` returns `None`.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":19227,"byte_end":19300,"line_start":407,"line_end":407,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":19301,"byte_end":19304,"line_start":408,"line_end":408,"column_start":1,"column_end":4}},{"value":"/ Non ISO week handling is not yet supported.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":19305,"byte_end":19352,"line_start":409,"line_end":409,"column_start":1,"column_end":48}},{"value":"/ For now you can use the [chrono_ext](https://crates.io/crates/chrono_ext)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":19353,"byte_end":19430,"line_start":410,"line_end":410,"column_start":1,"column_end":78}},{"value":"/ crate ([sources](https://github.com/bcourtine/chrono-ext/)).","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":19431,"byte_end":19495,"line_start":411,"line_end":411,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":19496,"byte_end":19499,"line_start":412,"line_end":412,"column_start":1,"column_end":4}},{"value":"/ Advanced time zone handling is not yet supported.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":19500,"byte_end":19553,"line_start":413,"line_end":413,"column_start":1,"column_end":54}},{"value":"/ For now you can try the [Chrono-tz](https://github.com/chronotope/chrono-tz/) crate instead.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":19554,"byte_end":19650,"line_start":414,"line_end":414,"column_start":1,"column_end":97}},{"value":"deny(missing_docs)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":19799,"byte_end":19821,"line_start":418,"line_end":418,"column_start":1,"column_end":23}},{"value":"deny(missing_debug_implementations)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":19822,"byte_end":19861,"line_start":419,"line_end":419,"column_start":1,"column_end":40}},{"value":"warn(unreachable_pub)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":19862,"byte_end":19887,"line_start":420,"line_end":420,"column_start":1,"column_end":26}},{"value":"deny(dead_code)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":19888,"byte_end":19907,"line_start":421,"line_end":421,"column_start":1,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":3253},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":24852,"byte_end":24860,"line_start":55,"line_end":55,"column_start":12,"column_end":20},"name":"Duration","qualname":"::oldtime::Duration","value":"Duration {  }","parent":null,"children":[{"krate":0,"index":3254},{"krate":0,"index":3255}],"decl_id":null,"docs":" ISO 8601 time duration with nanosecond precision.","sig":null,"attributes":[{"value":"/ ISO 8601 time duration with nanosecond precision.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":24566,"byte_end":24619,"line_start":50,"line_end":50,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":24620,"byte_end":24623,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ This also allows for the negative duration; see individual methods for details.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":24624,"byte_end":24707,"line_start":52,"line_end":52,"column_start":1,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":46},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":25619,"byte_end":25624,"line_start":77,"line_end":77,"column_start":12,"column_end":17},"name":"weeks","qualname":"<Duration>::weeks","value":"fn weeks(i64) -> Duration","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `Duration` with given number of weeks.\n Equivalent to `Duration::seconds(weeks * 7 * 24 * 60 * 60)` with overflow checks.\n Panics when the duration is out of bounds.\n","sig":null,"attributes":[{"value":"/ Makes a new `Duration` with given number of weeks.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":25398,"byte_end":25452,"line_start":73,"line_end":73,"column_start":5,"column_end":59}},{"value":"/ Equivalent to `Duration::seconds(weeks * 7 * 24 * 60 * 60)` with overflow checks.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":25457,"byte_end":25542,"line_start":74,"line_end":74,"column_start":5,"column_end":90}},{"value":"/ Panics when the duration is out of bounds.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":25547,"byte_end":25593,"line_start":75,"line_end":75,"column_start":5,"column_end":51}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":25598,"byte_end":25607,"line_start":76,"line_end":76,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":47},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":26002,"byte_end":26006,"line_start":86,"line_end":86,"column_start":12,"column_end":16},"name":"days","qualname":"<Duration>::days","value":"fn days(i64) -> Duration","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `Duration` with given number of days.\n Equivalent to `Duration::seconds(days * 24 * 60 * 60)` with overflow checks.\n Panics when the duration is out of bounds.\n","sig":null,"attributes":[{"value":"/ Makes a new `Duration` with given number of days.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":25787,"byte_end":25840,"line_start":82,"line_end":82,"column_start":5,"column_end":58}},{"value":"/ Equivalent to `Duration::seconds(days * 24 * 60 * 60)` with overflow checks.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":25845,"byte_end":25925,"line_start":83,"line_end":83,"column_start":5,"column_end":85}},{"value":"/ Panics when the duration is out of bounds.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":25930,"byte_end":25976,"line_start":84,"line_end":84,"column_start":5,"column_end":51}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":25981,"byte_end":25990,"line_start":85,"line_end":85,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":48},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":26377,"byte_end":26382,"line_start":95,"line_end":95,"column_start":12,"column_end":17},"name":"hours","qualname":"<Duration>::hours","value":"fn hours(i64) -> Duration","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `Duration` with given number of hours.\n Equivalent to `Duration::seconds(hours * 60 * 60)` with overflow checks.\n Panics when the duration is out of bounds.\n","sig":null,"attributes":[{"value":"/ Makes a new `Duration` with given number of hours.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":26165,"byte_end":26219,"line_start":91,"line_end":91,"column_start":5,"column_end":59}},{"value":"/ Equivalent to `Duration::seconds(hours * 60 * 60)` with overflow checks.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":26224,"byte_end":26300,"line_start":92,"line_end":92,"column_start":5,"column_end":81}},{"value":"/ Panics when the duration is out of bounds.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":26305,"byte_end":26351,"line_start":93,"line_end":93,"column_start":5,"column_end":51}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":26356,"byte_end":26365,"line_start":94,"line_end":94,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":49},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":26756,"byte_end":26763,"line_start":104,"line_end":104,"column_start":12,"column_end":19},"name":"minutes","qualname":"<Duration>::minutes","value":"fn minutes(i64) -> Duration","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `Duration` with given number of minutes.\n Equivalent to `Duration::seconds(minutes * 60)` with overflow checks.\n Panics when the duration is out of bounds.\n","sig":null,"attributes":[{"value":"/ Makes a new `Duration` with given number of minutes.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":26545,"byte_end":26601,"line_start":100,"line_end":100,"column_start":5,"column_end":61}},{"value":"/ Equivalent to `Duration::seconds(minutes * 60)` with overflow checks.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":26606,"byte_end":26679,"line_start":101,"line_end":101,"column_start":5,"column_end":78}},{"value":"/ Panics when the duration is out of bounds.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":26684,"byte_end":26730,"line_start":102,"line_end":102,"column_start":5,"column_end":51}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":26735,"byte_end":26744,"line_start":103,"line_end":103,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":50},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":27122,"byte_end":27129,"line_start":113,"line_end":113,"column_start":12,"column_end":19},"name":"seconds","qualname":"<Duration>::seconds","value":"fn seconds(i64) -> Duration","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `Duration` with given number of seconds.\n Panics when the duration is more than `i64::MAX` seconds\n or less than `i64::MIN` seconds.\n","sig":null,"attributes":[{"value":"/ Makes a new `Duration` with given number of seconds.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":26934,"byte_end":26990,"line_start":109,"line_end":109,"column_start":5,"column_end":61}},{"value":"/ Panics when the duration is more than `i64::MAX` seconds","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":26995,"byte_end":27055,"line_start":110,"line_end":110,"column_start":5,"column_end":65}},{"value":"/ or less than `i64::MIN` seconds.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":27060,"byte_end":27096,"line_start":111,"line_end":111,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":27101,"byte_end":27110,"line_start":112,"line_end":112,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":51},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":27417,"byte_end":27429,"line_start":123,"line_end":123,"column_start":12,"column_end":24},"name":"milliseconds","qualname":"<Duration>::milliseconds","value":"fn milliseconds(i64) -> Duration","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `Duration` with given number of milliseconds.\n","sig":null,"attributes":[{"value":"/ Makes a new `Duration` with given number of milliseconds.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":27330,"byte_end":27391,"line_start":121,"line_end":121,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":27396,"byte_end":27405,"line_start":122,"line_end":122,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":52},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":27737,"byte_end":27749,"line_start":131,"line_end":131,"column_start":12,"column_end":24},"name":"microseconds","qualname":"<Duration>::microseconds","value":"fn microseconds(i64) -> Duration","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `Duration` with given number of microseconds.\n","sig":null,"attributes":[{"value":"/ Makes a new `Duration` with given number of microseconds.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":27650,"byte_end":27711,"line_start":129,"line_end":129,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":27716,"byte_end":27725,"line_start":130,"line_end":130,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":53},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":28056,"byte_end":28067,"line_start":139,"line_end":139,"column_start":12,"column_end":23},"name":"nanoseconds","qualname":"<Duration>::nanoseconds","value":"fn nanoseconds(i64) -> Duration","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `Duration` with given number of nanoseconds.\n","sig":null,"attributes":[{"value":"/ Makes a new `Duration` with given number of nanoseconds.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":27970,"byte_end":28030,"line_start":137,"line_end":137,"column_start":5,"column_end":65}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":28035,"byte_end":28044,"line_start":138,"line_end":138,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":54},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":28319,"byte_end":28328,"line_start":146,"line_end":146,"column_start":12,"column_end":21},"name":"num_weeks","qualname":"<Duration>::num_weeks","value":"fn num_weeks(&Self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of whole weeks in the duration.\n","sig":null,"attributes":[{"value":"/ Returns the total number of whole weeks in the duration.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":28233,"byte_end":28293,"line_start":144,"line_end":144,"column_start":5,"column_end":65}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":28298,"byte_end":28307,"line_start":145,"line_end":145,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":55},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":28455,"byte_end":28463,"line_start":151,"line_end":151,"column_start":12,"column_end":20},"name":"num_days","qualname":"<Duration>::num_days","value":"fn num_days(&Self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of whole days in the duration.\n","sig":null,"attributes":[{"value":"/ Returns the total number of whole days in the duration.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":28384,"byte_end":28443,"line_start":150,"line_end":150,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":56},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":28619,"byte_end":28628,"line_start":157,"line_end":157,"column_start":12,"column_end":21},"name":"num_hours","qualname":"<Duration>::num_hours","value":"fn num_hours(&Self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of whole hours in the duration.\n","sig":null,"attributes":[{"value":"/ Returns the total number of whole hours in the duration.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":28533,"byte_end":28593,"line_start":155,"line_end":155,"column_start":5,"column_end":65}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":28598,"byte_end":28607,"line_start":156,"line_end":156,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":57},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":28787,"byte_end":28798,"line_start":163,"line_end":163,"column_start":12,"column_end":23},"name":"num_minutes","qualname":"<Duration>::num_minutes","value":"fn num_minutes(&Self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of whole minutes in the duration.\n","sig":null,"attributes":[{"value":"/ Returns the total number of whole minutes in the duration.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":28699,"byte_end":28761,"line_start":161,"line_end":161,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":28766,"byte_end":28775,"line_start":162,"line_end":162,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":58},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":28945,"byte_end":28956,"line_start":168,"line_end":168,"column_start":12,"column_end":23},"name":"num_seconds","qualname":"<Duration>::num_seconds","value":"fn num_seconds(&Self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of whole seconds in the duration.\n","sig":null,"attributes":[{"value":"/ Returns the total number of whole seconds in the duration.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":28871,"byte_end":28933,"line_start":167,"line_end":167,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":60},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":29609,"byte_end":29625,"line_start":189,"line_end":189,"column_start":12,"column_end":28},"name":"num_milliseconds","qualname":"<Duration>::num_milliseconds","value":"fn num_milliseconds(&Self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of whole milliseconds in the duration,\n","sig":null,"attributes":[{"value":"/ Returns the total number of whole milliseconds in the duration,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":29530,"byte_end":29597,"line_start":188,"line_end":188,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":61},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":30117,"byte_end":30133,"line_start":199,"line_end":199,"column_start":12,"column_end":28},"name":"num_microseconds","qualname":"<Duration>::num_microseconds","value":"fn num_microseconds(&Self) -> Option<i64>","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of whole microseconds in the duration,\n or `None` on overflow (exceeding 2^63 microseconds in either direction).\n","sig":null,"attributes":[{"value":"/ Returns the total number of whole microseconds in the duration,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":29957,"byte_end":30024,"line_start":197,"line_end":197,"column_start":5,"column_end":72}},{"value":"/ or `None` on overflow (exceeding 2^63 microseconds in either direction).","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":30029,"byte_end":30105,"line_start":198,"line_end":198,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":62},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":30523,"byte_end":30538,"line_start":207,"line_end":207,"column_start":12,"column_end":27},"name":"num_nanoseconds","qualname":"<Duration>::num_nanoseconds","value":"fn num_nanoseconds(&Self) -> Option<i64>","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of whole nanoseconds in the duration,\n or `None` on overflow (exceeding 2^63 nanoseconds in either direction).\n","sig":null,"attributes":[{"value":"/ Returns the total number of whole nanoseconds in the duration,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":30365,"byte_end":30431,"line_start":205,"line_end":205,"column_start":5,"column_end":71}},{"value":"/ or `None` on overflow (exceeding 2^63 nanoseconds in either direction).","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":30436,"byte_end":30511,"line_start":206,"line_end":206,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":63},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":30831,"byte_end":30842,"line_start":214,"line_end":214,"column_start":12,"column_end":23},"name":"checked_add","qualname":"<Duration>::checked_add","value":"fn checked_add(&Self, &Duration) -> Option<Duration>","parent":null,"children":[],"decl_id":null,"docs":" Add two durations, returning `None` if overflow occurred.\n","sig":null,"attributes":[{"value":"/ Add two durations, returning `None` if overflow occurred.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":30758,"byte_end":30819,"line_start":213,"line_end":213,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":64},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":31485,"byte_end":31496,"line_start":232,"line_end":232,"column_start":12,"column_end":23},"name":"checked_sub","qualname":"<Duration>::checked_sub","value":"fn checked_sub(&Self, &Duration) -> Option<Duration>","parent":null,"children":[],"decl_id":null,"docs":" Subtract two durations, returning `None` if overflow occurred.\n","sig":null,"attributes":[{"value":"/ Subtract two durations, returning `None` if overflow occurred.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":31407,"byte_end":31473,"line_start":231,"line_end":231,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":65},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":32135,"byte_end":32138,"line_start":251,"line_end":251,"column_start":12,"column_end":15},"name":"abs","qualname":"<Duration>::abs","value":"fn abs(&Self) -> Duration","parent":null,"children":[],"decl_id":null,"docs":" Returns the duration as an absolute (non-negative) value.\n","sig":null,"attributes":[{"value":"/ Returns the duration as an absolute (non-negative) value.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":32048,"byte_end":32109,"line_start":249,"line_end":249,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":32114,"byte_end":32123,"line_start":250,"line_end":250,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":66},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":32485,"byte_end":32494,"line_start":261,"line_end":261,"column_start":12,"column_end":21},"name":"min_value","qualname":"<Duration>::min_value","value":"fn min_value() -> Duration","parent":null,"children":[],"decl_id":null,"docs":" The minimum possible `Duration`: `i64::MIN` milliseconds.\n","sig":null,"attributes":[{"value":"/ The minimum possible `Duration`: `i64::MIN` milliseconds.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":32398,"byte_end":32459,"line_start":259,"line_end":259,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":32464,"byte_end":32473,"line_start":260,"line_end":260,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":67},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":32621,"byte_end":32630,"line_start":267,"line_end":267,"column_start":12,"column_end":21},"name":"max_value","qualname":"<Duration>::max_value","value":"fn max_value() -> Duration","parent":null,"children":[],"decl_id":null,"docs":" The maximum possible `Duration`: `i64::MAX` milliseconds.\n","sig":null,"attributes":[{"value":"/ The maximum possible `Duration`: `i64::MAX` milliseconds.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":32534,"byte_end":32595,"line_start":265,"line_end":265,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":32600,"byte_end":32609,"line_start":266,"line_end":266,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":68},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":32770,"byte_end":32774,"line_start":273,"line_end":273,"column_start":12,"column_end":16},"name":"zero","qualname":"<Duration>::zero","value":"fn zero() -> Duration","parent":null,"children":[],"decl_id":null,"docs":" A duration where the stored seconds and nanoseconds are equal to zero.\n","sig":null,"attributes":[{"value":"/ A duration where the stored seconds and nanoseconds are equal to zero.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":32670,"byte_end":32744,"line_start":271,"line_end":271,"column_start":5,"column_end":79}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":32749,"byte_end":32758,"line_start":272,"line_end":272,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":69},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":32928,"byte_end":32935,"line_start":279,"line_end":279,"column_start":12,"column_end":19},"name":"is_zero","qualname":"<Duration>::is_zero","value":"fn is_zero(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the duration equals `Duration::zero()`.\n","sig":null,"attributes":[{"value":"/ Returns `true` if the duration equals `Duration::zero()`.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":32841,"byte_end":32902,"line_start":277,"line_end":277,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":32907,"byte_end":32916,"line_start":278,"line_end":278,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":70},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":33208,"byte_end":33216,"line_start":287,"line_end":287,"column_start":12,"column_end":20},"name":"from_std","qualname":"<Duration>::from_std","value":"fn from_std(StdDuration) -> Result<Duration, OutOfRangeError>","parent":null,"children":[],"decl_id":null,"docs":" Creates a `time::Duration` object from `std::time::Duration`","sig":null,"attributes":[{"value":"/ Creates a `time::Duration` object from `std::time::Duration`","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":33006,"byte_end":33070,"line_start":283,"line_end":283,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":33075,"byte_end":33078,"line_start":284,"line_end":284,"column_start":5,"column_end":8}},{"value":"/ This function errors when original duration is larger than the maximum","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":33083,"byte_end":33157,"line_start":285,"line_end":285,"column_start":5,"column_end":79}},{"value":"/ value supported for this type.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":33162,"byte_end":33196,"line_start":286,"line_end":286,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":71},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":33873,"byte_end":33879,"line_start":303,"line_end":303,"column_start":12,"column_end":18},"name":"to_std","qualname":"<Duration>::to_std","value":"fn to_std(&Self) -> Result<StdDuration, OutOfRangeError>","parent":null,"children":[],"decl_id":null,"docs":" Creates a `std::time::Duration` object from `time::Duration`","sig":null,"attributes":[{"value":"/ Creates a `std::time::Duration` object from `time::Duration`","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":33649,"byte_end":33713,"line_start":299,"line_end":299,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":33718,"byte_end":33721,"line_start":300,"line_end":300,"column_start":5,"column_end":8}},{"value":"/ This function errors when duration is less than zero. As standard","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":33726,"byte_end":33795,"line_start":301,"line_end":301,"column_start":5,"column_end":74}},{"value":"/ library implementation is limited to non-negative values.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":33800,"byte_end":33861,"line_start":302,"line_end":302,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":74},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":34160,"byte_end":34163,"line_start":315,"line_end":315,"column_start":8,"column_end":11},"name":"neg","qualname":"<Duration as std::ops::Neg>::neg","value":"fn neg(Self) -> Duration","parent":{"krate":2,"index":3245},"children":[],"decl_id":{"krate":2,"index":3247},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":34143,"byte_end":34152,"line_start":314,"line_end":314,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":77},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":34442,"byte_end":34445,"line_start":327,"line_end":327,"column_start":8,"column_end":11},"name":"add","qualname":"<Duration as std::ops::Add>::add","value":"fn add(Self, Duration) -> Duration","parent":{"krate":2,"index":3218},"children":[],"decl_id":{"krate":2,"index":3221},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":80},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":34794,"byte_end":34797,"line_start":341,"line_end":341,"column_start":8,"column_end":11},"name":"sub","qualname":"<Duration as std::ops::Sub>::sub","value":"fn sub(Self, Duration) -> Duration","parent":{"krate":2,"index":3223},"children":[],"decl_id":{"krate":2,"index":3226},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":83},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":35138,"byte_end":35141,"line_start":355,"line_end":355,"column_start":8,"column_end":11},"name":"mul","qualname":"<Duration as std::ops::Mul>::mul","value":"fn mul(Self, i32) -> Duration","parent":{"krate":2,"index":3228},"children":[],"decl_id":{"krate":2,"index":3231},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":86},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":35577,"byte_end":35580,"line_start":367,"line_end":367,"column_start":8,"column_end":11},"name":"div","qualname":"<Duration as std::ops::Div>::div","value":"fn div(Self, i32) -> Duration","parent":{"krate":2,"index":3233},"children":[],"decl_id":{"krate":2,"index":3236},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":89},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":36188,"byte_end":36191,"line_start":386,"line_end":386,"column_start":8,"column_end":11},"name":"sum","qualname":"<Duration as std::iter::Sum>::sum","value":"fn sum<I>(I) -> Duration where I: Iterator<Item = &'a Duration>","parent":{"krate":2,"index":7957},"children":[],"decl_id":{"krate":2,"index":7959},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":93},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":36400,"byte_end":36403,"line_start":393,"line_end":393,"column_start":8,"column_end":11},"name":"sum","qualname":"<Duration as std::iter::Sum>::sum","value":"fn sum<I>(I) -> Duration where I: Iterator<Item = Duration>","parent":{"krate":2,"index":7957},"children":[],"decl_id":{"krate":2,"index":7959},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":97},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":36691,"byte_end":36694,"line_start":402,"line_end":402,"column_start":8,"column_end":11},"name":"fmt","qualname":"<Duration as std::fmt::Display>::fmt","value":"fn fmt(&Self, &mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":9914},"children":[],"decl_id":{"krate":2,"index":9915},"docs":" Format a duration using the [ISO 8601] format","sig":null,"attributes":[{"value":"/ Format a duration using the [ISO 8601] format","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":36557,"byte_end":36606,"line_start":399,"line_end":399,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":36611,"byte_end":36614,"line_start":400,"line_end":400,"column_start":5,"column_end":8}},{"value":"/ [ISO 8601]: https://en.wikipedia.org/wiki/ISO_8601#Durations","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":36619,"byte_end":36683,"line_start":401,"line_end":401,"column_start":5,"column_end":69}}]},{"kind":"Struct","id":{"krate":0,"index":3272},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":38054,"byte_end":38069,"line_start":439,"line_end":439,"column_start":12,"column_end":27},"name":"OutOfRangeError","qualname":"::oldtime::OutOfRangeError","value":"","parent":null,"children":[],"decl_id":null,"docs":" Represents error when converting `Duration` to/from a standard library\n implementation","sig":null,"attributes":[{"value":"/ Represents error when converting `Duration` to/from a standard library","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":37731,"byte_end":37805,"line_start":432,"line_end":432,"column_start":1,"column_end":75}},{"value":"/ implementation","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":37806,"byte_end":37824,"line_start":433,"line_end":433,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":37825,"byte_end":37828,"line_start":434,"line_end":434,"column_start":1,"column_end":4}},{"value":"/ The `std::time::Duration` supports a range from zero to `u64::MAX`","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":37829,"byte_end":37899,"line_start":435,"line_end":435,"column_start":1,"column_end":71}},{"value":"/ *seconds*, while this module supports signed range of up to","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":37900,"byte_end":37963,"line_start":436,"line_end":436,"column_start":1,"column_end":64}},{"value":"/ `i64::MAX` of *milliseconds*.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":37964,"byte_end":37997,"line_start":437,"line_end":437,"column_start":1,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":99},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":38123,"byte_end":38126,"line_start":442,"line_end":442,"column_start":8,"column_end":11},"name":"fmt","qualname":"<OutOfRangeError as std::fmt::Display>::fmt","value":"fn fmt(&Self, &mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":9914},"children":[],"decl_id":{"krate":2,"index":9915},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":101},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":38363,"byte_end":38374,"line_start":450,"line_end":450,"column_start":8,"column_end":19},"name":"description","qualname":"<OutOfRangeError as std::error::Error>::description","value":"fn description(&Self) -> &str","parent":{"krate":1,"index":2555},"children":[],"decl_id":{"krate":1,"index":2559},"docs":"","sig":null,"attributes":[{"value":"allow(deprecated)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":38335,"byte_end":38355,"line_start":449,"line_end":449,"column_start":5,"column_end":25}}]},{"kind":"Mod","id":{"krate":0,"index":109},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":20635,"byte_end":20642,"line_start":443,"line_end":443,"column_start":9,"column_end":16},"name":"prelude","qualname":"::prelude","value":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":110},{"krate":0,"index":113},{"krate":0,"index":114},{"krate":0,"index":116},{"krate":0,"index":119},{"krate":0,"index":120},{"krate":0,"index":123},{"krate":0,"index":126},{"krate":0,"index":127},{"krate":0,"index":130},{"krate":0,"index":133},{"krate":0,"index":136},{"krate":0,"index":139},{"krate":0,"index":140},{"krate":0,"index":143},{"krate":0,"index":144},{"krate":0,"index":146},{"krate":0,"index":147},{"krate":0,"index":150},{"krate":0,"index":153},{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":160}],"decl_id":null,"docs":" A convenience module appropriate for glob imports (`use chrono::prelude::*;`).\n","sig":null,"attributes":[{"value":"/ A convenience module appropriate for glob imports (`use chrono::prelude::*;`).","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":20544,"byte_end":20626,"line_start":442,"line_end":442,"column_start":1,"column_end":83}}]},{"kind":"Struct","id":{"krate":0,"index":3287},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":54216,"byte_end":54220,"line_start":58,"line_end":58,"column_start":12,"column_end":16},"name":"Date","qualname":"::date::Date","value":"Date {  }","parent":null,"children":[{"krate":0,"index":3289},{"krate":0,"index":3290}],"decl_id":null,"docs":" ISO 8601 calendar date with time zone.","sig":null,"attributes":[{"value":"/ ISO 8601 calendar date with time zone.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":52559,"byte_end":52601,"line_start":25,"line_end":25,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":52602,"byte_end":52605,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ You almost certainly want to be using a [`NaiveDate`] instead of this type.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":52606,"byte_end":52685,"line_start":27,"line_end":27,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":52686,"byte_end":52689,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ This type primarily exists to aid in the construction of DateTimes that","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":52690,"byte_end":52765,"line_start":29,"line_end":29,"column_start":1,"column_end":76}},{"value":"/ have a timezone by way of the [`TimeZone`] datelike constructors (e.g.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":52766,"byte_end":52840,"line_start":30,"line_end":30,"column_start":1,"column_end":75}},{"value":"/ [`TimeZone::ymd`]).","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":52841,"byte_end":52864,"line_start":31,"line_end":31,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":52865,"byte_end":52868,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ This type should be considered ambiguous at best, due to the inherent lack","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":52869,"byte_end":52947,"line_start":33,"line_end":33,"column_start":1,"column_end":79}},{"value":"/ of precision required for the time zone resolution.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":52948,"byte_end":53003,"line_start":34,"line_end":34,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":53004,"byte_end":53007,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ There are some guarantees on the usage of `Date<Tz>`:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":53008,"byte_end":53065,"line_start":36,"line_end":36,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":53066,"byte_end":53069,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ - If properly constructed via [`TimeZone::ymd`] and others without an error,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":53070,"byte_end":53150,"line_start":38,"line_end":38,"column_start":1,"column_end":81}},{"value":"/   the corresponding local date should exist for at least a moment.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":53151,"byte_end":53221,"line_start":39,"line_end":39,"column_start":1,"column_end":71}},{"value":"/   (It may still have a gap from the offset changes.)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":53222,"byte_end":53278,"line_start":40,"line_end":40,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":53279,"byte_end":53282,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ - The `TimeZone` is free to assign *any* [`Offset`](crate::offset::Offset) to the","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":53283,"byte_end":53368,"line_start":42,"line_end":42,"column_start":1,"column_end":86}},{"value":"/   local date, as long as that offset did occur in given day.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":53369,"byte_end":53433,"line_start":43,"line_end":43,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":53434,"byte_end":53437,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/   For example, if `2015-03-08T01:59-08:00` is followed by `2015-03-08T03:00-07:00`,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":53438,"byte_end":53525,"line_start":45,"line_end":45,"column_start":1,"column_end":88}},{"value":"/   it may produce either `2015-03-08-08:00` or `2015-03-08-07:00`","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":53526,"byte_end":53594,"line_start":46,"line_end":46,"column_start":1,"column_end":69}},{"value":"/   but *not* `2015-03-08+00:00` and others.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":53595,"byte_end":53641,"line_start":47,"line_end":47,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":53642,"byte_end":53645,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ - Once constructed as a full `DateTime`, [`DateTime::date`] and other associated","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":53646,"byte_end":53730,"line_start":49,"line_end":49,"column_start":1,"column_end":85}},{"value":"/   methods should return those for the original `Date`. For example, if `dt =","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":53731,"byte_end":53811,"line_start":50,"line_end":50,"column_start":1,"column_end":81}},{"value":"/   tz.ymd(y,m,d).hms(h,n,s)` were valid, `dt.date() == tz.ymd(y,m,d)`.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":53812,"byte_end":53885,"line_start":51,"line_end":51,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":53886,"byte_end":53889,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ - The date is timezone-agnostic up to one day (i.e. practically always),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":53890,"byte_end":53966,"line_start":53,"line_end":53,"column_start":1,"column_end":77}},{"value":"/   so the local date and UTC date should be equal for most cases","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":53967,"byte_end":54034,"line_start":54,"line_end":54,"column_start":1,"column_end":68}},{"value":"/   even though the raw calculation between `NaiveDate` and `Duration` may not.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":54035,"byte_end":54116,"line_start":55,"line_end":55,"column_start":1,"column_end":82}}]},{"kind":"Const","id":{"krate":0,"index":230},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":54417,"byte_end":54425,"line_start":66,"line_end":66,"column_start":11,"column_end":19},"name":"MIN_DATE","qualname":"::date::MIN_DATE","value":"Date<Utc>","parent":null,"children":[],"decl_id":null,"docs":" The minimum possible `Date`.\n","sig":null,"attributes":[{"value":"/ The minimum possible `Date`.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":54285,"byte_end":54317,"line_start":63,"line_end":63,"column_start":1,"column_end":33}},{"value":"allow(deprecated)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":54318,"byte_end":54338,"line_start":64,"line_end":64,"column_start":1,"column_end":21}},{"value":"deprecated(since = \"0.4.20\", note = \"Use Date::MIN_UTC instead\")","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":54339,"byte_end":54406,"line_start":65,"line_end":65,"column_start":1,"column_end":68}}]},{"kind":"Const","id":{"krate":0,"index":231},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":54593,"byte_end":54601,"line_start":70,"line_end":70,"column_start":11,"column_end":19},"name":"MAX_DATE","qualname":"::date::MAX_DATE","value":"Date<Utc>","parent":null,"children":[],"decl_id":null,"docs":" The maximum possible `Date`.\n","sig":null,"attributes":[{"value":"/ The maximum possible `Date`.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":54461,"byte_end":54493,"line_start":67,"line_end":67,"column_start":1,"column_end":33}},{"value":"allow(deprecated)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":54494,"byte_end":54514,"line_start":68,"line_end":68,"column_start":1,"column_end":21}},{"value":"deprecated(since = \"0.4.20\", note = \"Use Date::MAX_UTC instead\")","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":54515,"byte_end":54582,"line_start":69,"line_end":69,"column_start":1,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":234},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":54926,"byte_end":54934,"line_start":78,"line_end":78,"column_start":12,"column_end":20},"name":"from_utc","qualname":"<Date<Tz>>::from_utc","value":"fn from_utc(NaiveDate, Tz::Offset) -> Date<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `Date` with given *UTC* date and offset.\n The local date should be constructed via the `TimeZone` trait.\n","sig":null,"attributes":[{"value":"/ Makes a new `Date` with given *UTC* date and offset.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":54672,"byte_end":54728,"line_start":73,"line_end":73,"column_start":5,"column_end":61}},{"value":"/ The local date should be constructed via the `TimeZone` trait.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":54733,"byte_end":54799,"line_start":74,"line_end":74,"column_start":5,"column_end":71}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":54905,"byte_end":54914,"line_start":77,"line_end":77,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":235},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":55221,"byte_end":55229,"line_start":87,"line_end":87,"column_start":12,"column_end":20},"name":"and_time","qualname":"<Date<Tz>>::and_time","value":"fn and_time(&Self, NaiveTime) -> Option<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date and given `NaiveTime`.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date and given `NaiveTime`.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":55027,"byte_end":55098,"line_start":82,"line_end":82,"column_start":5,"column_end":76}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":55103,"byte_end":55151,"line_start":83,"line_end":83,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":55156,"byte_end":55159,"line_start":84,"line_end":84,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid datetime.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":55164,"byte_end":55195,"line_start":85,"line_end":85,"column_start":5,"column_end":36}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":55200,"byte_end":55209,"line_start":86,"line_end":86,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":236},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":55626,"byte_end":55633,"line_start":97,"line_end":97,"column_start":12,"column_end":19},"name":"and_hms","qualname":"<Date<Tz>>::and_hms","value":"fn and_hms(&Self, u32, u32, u32) -> DateTime<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute and second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute and second.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":55411,"byte_end":55485,"line_start":92,"line_end":92,"column_start":5,"column_end":79}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":55490,"byte_end":55538,"line_start":93,"line_end":93,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":55543,"byte_end":55546,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute and/or second.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":55551,"byte_end":55600,"line_start":95,"line_end":95,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":55605,"byte_end":55614,"line_start":96,"line_end":96,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":237},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":55988,"byte_end":55999,"line_start":106,"line_end":106,"column_start":12,"column_end":23},"name":"and_hms_opt","qualname":"<Date<Tz>>::and_hms_opt","value":"fn and_hms_opt(&Self, u32, u32, u32) -> Option<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute and second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute and second.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":55765,"byte_end":55839,"line_start":101,"line_end":101,"column_start":5,"column_end":79}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":55844,"byte_end":55892,"line_start":102,"line_end":102,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":55897,"byte_end":55900,"line_start":103,"line_end":103,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute and/or second.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":55905,"byte_end":55962,"line_start":104,"line_end":104,"column_start":5,"column_end":62}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":55967,"byte_end":55976,"line_start":105,"line_end":105,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":239},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":56486,"byte_end":56499,"line_start":116,"line_end":116,"column_start":12,"column_end":25},"name":"and_hms_milli","qualname":"<Date<Tz>>::and_hms_milli","value":"fn and_hms_milli(&Self, u32, u32, u32, u32) -> DateTime<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and millisecond.\n The millisecond part can exceed 1,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and millisecond.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":56160,"byte_end":56247,"line_start":110,"line_end":110,"column_start":5,"column_end":92}},{"value":"/ The millisecond part can exceed 1,000 in order to represent the leap second.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":56252,"byte_end":56332,"line_start":111,"line_end":111,"column_start":5,"column_end":85}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":56337,"byte_end":56385,"line_start":112,"line_end":112,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":56390,"byte_end":56393,"line_start":113,"line_end":113,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or millisecond.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":56398,"byte_end":56460,"line_start":114,"line_end":114,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":56465,"byte_end":56474,"line_start":115,"line_end":115,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":240},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":56990,"byte_end":57007,"line_start":126,"line_end":126,"column_start":12,"column_end":29},"name":"and_hms_milli_opt","qualname":"<Date<Tz>>::and_hms_milli_opt","value":"fn and_hms_milli_opt(&Self, u32, u32, u32, u32) -> Option<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and millisecond.\n The millisecond part can exceed 1,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and millisecond.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":56656,"byte_end":56743,"line_start":120,"line_end":120,"column_start":5,"column_end":92}},{"value":"/ The millisecond part can exceed 1,000 in order to represent the leap second.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":56748,"byte_end":56828,"line_start":121,"line_end":121,"column_start":5,"column_end":85}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":56833,"byte_end":56881,"line_start":122,"line_end":122,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":56886,"byte_end":56889,"line_start":123,"line_end":123,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or millisecond.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":56894,"byte_end":56964,"line_start":124,"line_end":124,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":56969,"byte_end":56978,"line_start":125,"line_end":125,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":242},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":57570,"byte_end":57583,"line_start":142,"line_end":142,"column_start":12,"column_end":25},"name":"and_hms_micro","qualname":"<Date<Tz>>::and_hms_micro","value":"fn and_hms_micro(&Self, u32, u32, u32, u32) -> DateTime<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and microsecond.\n The microsecond part can exceed 1,000,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and microsecond.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":57240,"byte_end":57327,"line_start":136,"line_end":136,"column_start":5,"column_end":92}},{"value":"/ The microsecond part can exceed 1,000,000 in order to represent the leap second.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":57332,"byte_end":57416,"line_start":137,"line_end":137,"column_start":5,"column_end":89}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":57421,"byte_end":57469,"line_start":138,"line_end":138,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":57474,"byte_end":57477,"line_start":139,"line_end":139,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or microsecond.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":57482,"byte_end":57544,"line_start":140,"line_end":140,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":57549,"byte_end":57558,"line_start":141,"line_end":141,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":243},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":58078,"byte_end":58095,"line_start":152,"line_end":152,"column_start":12,"column_end":29},"name":"and_hms_micro_opt","qualname":"<Date<Tz>>::and_hms_micro_opt","value":"fn and_hms_micro_opt(&Self, u32, u32, u32, u32) -> Option<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and microsecond.\n The microsecond part can exceed 1,000,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and microsecond.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":57740,"byte_end":57827,"line_start":146,"line_end":146,"column_start":5,"column_end":92}},{"value":"/ The microsecond part can exceed 1,000,000 in order to represent the leap second.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":57832,"byte_end":57916,"line_start":147,"line_end":147,"column_start":5,"column_end":89}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":57921,"byte_end":57969,"line_start":148,"line_end":148,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":57974,"byte_end":57977,"line_start":149,"line_end":149,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or microsecond.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":57982,"byte_end":58052,"line_start":150,"line_end":150,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":58057,"byte_end":58066,"line_start":151,"line_end":151,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":245},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":58659,"byte_end":58671,"line_start":168,"line_end":168,"column_start":12,"column_end":24},"name":"and_hms_nano","qualname":"<Date<Tz>>::and_hms_nano","value":"fn and_hms_nano(&Self, u32, u32, u32, u32) -> DateTime<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.\n The nanosecond part can exceed 1,000,000,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":58328,"byte_end":58414,"line_start":162,"line_end":162,"column_start":5,"column_end":91}},{"value":"/ The nanosecond part can exceed 1,000,000,000 in order to represent the leap second.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":58419,"byte_end":58506,"line_start":163,"line_end":163,"column_start":5,"column_end":92}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":58511,"byte_end":58559,"line_start":164,"line_end":164,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":58564,"byte_end":58567,"line_start":165,"line_end":165,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or nanosecond.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":58572,"byte_end":58633,"line_start":166,"line_end":166,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":58638,"byte_end":58647,"line_start":167,"line_end":167,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":246},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":59164,"byte_end":59180,"line_start":178,"line_end":178,"column_start":12,"column_end":28},"name":"and_hms_nano_opt","qualname":"<Date<Tz>>::and_hms_nano_opt","value":"fn and_hms_nano_opt(&Self, u32, u32, u32, u32) -> Option<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.\n The nanosecond part can exceed 1,000,000,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":58825,"byte_end":58911,"line_start":172,"line_end":172,"column_start":5,"column_end":91}},{"value":"/ The nanosecond part can exceed 1,000,000,000 in order to represent the leap second.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":58916,"byte_end":59003,"line_start":173,"line_end":173,"column_start":5,"column_end":92}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":59008,"byte_end":59056,"line_start":174,"line_end":174,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":59061,"byte_end":59064,"line_start":175,"line_end":175,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or nanosecond.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":59069,"byte_end":59138,"line_start":176,"line_end":176,"column_start":5,"column_end":74}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":59143,"byte_end":59152,"line_start":177,"line_end":177,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":248},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":59544,"byte_end":59548,"line_start":192,"line_end":192,"column_start":12,"column_end":16},"name":"succ","qualname":"<Date<Tz>>::succ","value":"fn succ(&Self) -> Date<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `Date` for the next date.","sig":null,"attributes":[{"value":"/ Makes a new `Date` for the next date.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":59410,"byte_end":59451,"line_start":188,"line_end":188,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":59456,"byte_end":59459,"line_start":189,"line_end":189,"column_start":5,"column_end":8}},{"value":"/ Panics when `self` is the last representable date.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":59464,"byte_end":59518,"line_start":190,"line_end":190,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":59523,"byte_end":59532,"line_start":191,"line_end":191,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":249},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":59770,"byte_end":59778,"line_start":200,"line_end":200,"column_start":12,"column_end":20},"name":"succ_opt","qualname":"<Date<Tz>>::succ_opt","value":"fn succ_opt(&Self) -> Option<Date<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `Date` for the next date.","sig":null,"attributes":[{"value":"/ Makes a new `Date` for the next date.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":59628,"byte_end":59669,"line_start":196,"line_end":196,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":59674,"byte_end":59677,"line_start":197,"line_end":197,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when `self` is the last representable date.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":59682,"byte_end":59744,"line_start":198,"line_end":198,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":59749,"byte_end":59758,"line_start":199,"line_end":199,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":251},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":60038,"byte_end":60042,"line_start":208,"line_end":208,"column_start":12,"column_end":16},"name":"pred","qualname":"<Date<Tz>>::pred","value":"fn pred(&Self) -> Date<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `Date` for the prior date.","sig":null,"attributes":[{"value":"/ Makes a new `Date` for the prior date.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":59902,"byte_end":59944,"line_start":204,"line_end":204,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":59949,"byte_end":59952,"line_start":205,"line_end":205,"column_start":5,"column_end":8}},{"value":"/ Panics when `self` is the first representable date.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":59957,"byte_end":60012,"line_start":206,"line_end":206,"column_start":5,"column_end":60}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":60017,"byte_end":60026,"line_start":207,"line_end":207,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":252},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":60266,"byte_end":60274,"line_start":216,"line_end":216,"column_start":12,"column_end":20},"name":"pred_opt","qualname":"<Date<Tz>>::pred_opt","value":"fn pred_opt(&Self) -> Option<Date<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `Date` for the prior date.","sig":null,"attributes":[{"value":"/ Makes a new `Date` for the prior date.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":60122,"byte_end":60164,"line_start":212,"line_end":212,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":60169,"byte_end":60172,"line_start":213,"line_end":213,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when `self` is the first representable date.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":60177,"byte_end":60240,"line_start":214,"line_end":214,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":60245,"byte_end":60254,"line_start":215,"line_end":215,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":254},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":60468,"byte_end":60474,"line_start":222,"line_end":222,"column_start":12,"column_end":18},"name":"offset","qualname":"<Date<Tz>>::offset","value":"fn offset(&Self) -> &Tz::Offset","parent":null,"children":[],"decl_id":null,"docs":" Retrieves an associated offset from UTC.\n","sig":null,"attributes":[{"value":"/ Retrieves an associated offset from UTC.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":60398,"byte_end":60442,"line_start":220,"line_end":220,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":60447,"byte_end":60456,"line_start":221,"line_end":221,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":255},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":60595,"byte_end":60603,"line_start":228,"line_end":228,"column_start":12,"column_end":20},"name":"timezone","qualname":"<Date<Tz>>::timezone","value":"fn timezone(&Self) -> Tz","parent":null,"children":[],"decl_id":null,"docs":" Retrieves an associated time zone.\n","sig":null,"attributes":[{"value":"/ Retrieves an associated time zone.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":60531,"byte_end":60569,"line_start":226,"line_end":226,"column_start":5,"column_end":43}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":60574,"byte_end":60583,"line_start":227,"line_end":227,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":256},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":60829,"byte_end":60842,"line_start":235,"line_end":235,"column_start":12,"column_end":25},"name":"with_timezone","qualname":"<Date<Tz>>::with_timezone","value":"fn with_timezone<Tz2>(&Self, &Tz2) -> Date<Tz2> where Tz2: TimeZone","parent":null,"children":[],"decl_id":null,"docs":" Changes the associated time zone.\n This does not change the actual `Date` (but will change the string representation).\n","sig":null,"attributes":[{"value":"/ Changes the associated time zone.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":60674,"byte_end":60711,"line_start":232,"line_end":232,"column_start":5,"column_end":42}},{"value":"/ This does not change the actual `Date` (but will change the string representation).","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":60716,"byte_end":60803,"line_start":233,"line_end":233,"column_start":5,"column_end":92}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":60808,"byte_end":60817,"line_start":234,"line_end":234,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":258},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":61074,"byte_end":61092,"line_start":243,"line_end":243,"column_start":12,"column_end":30},"name":"checked_add_signed","qualname":"<Date<Tz>>::checked_add_signed","value":"fn checked_add_signed(Self, OldDuration) -> Option<Date<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Adds given `Duration` to the current date.","sig":null,"attributes":[{"value":"/ Adds given `Duration` to the current date.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":60938,"byte_end":60984,"line_start":239,"line_end":239,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":60989,"byte_end":60992,"line_start":240,"line_end":240,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when it will result in overflow.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":60997,"byte_end":61048,"line_start":241,"line_end":241,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":61053,"byte_end":61062,"line_start":242,"line_end":242,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":259},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":61397,"byte_end":61415,"line_start":252,"line_end":252,"column_start":12,"column_end":30},"name":"checked_sub_signed","qualname":"<Date<Tz>>::checked_sub_signed","value":"fn checked_sub_signed(Self, OldDuration) -> Option<Date<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Subtracts given `Duration` from the current date.","sig":null,"attributes":[{"value":"/ Subtracts given `Duration` from the current date.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":61254,"byte_end":61307,"line_start":248,"line_end":248,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":61312,"byte_end":61315,"line_start":249,"line_end":249,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when it will result in overflow.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":61320,"byte_end":61371,"line_start":250,"line_end":250,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":61376,"byte_end":61385,"line_start":251,"line_end":251,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":260},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":61828,"byte_end":61849,"line_start":263,"line_end":263,"column_start":12,"column_end":33},"name":"signed_duration_since","qualname":"<Date<Tz>>::signed_duration_since","value":"fn signed_duration_since<Tz2>(Self, Date<Tz2>) -> OldDuration where\nTz2: TimeZone","parent":null,"children":[],"decl_id":null,"docs":" Subtracts another `Date` from the current date.\n Returns a `Duration` of integral numbers.","sig":null,"attributes":[{"value":"/ Subtracts another `Date` from the current date.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":61577,"byte_end":61628,"line_start":257,"line_end":257,"column_start":5,"column_end":56}},{"value":"/ Returns a `Duration` of integral numbers.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":61633,"byte_end":61678,"line_start":258,"line_end":258,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":61683,"byte_end":61686,"line_start":259,"line_end":259,"column_start":5,"column_end":8}},{"value":"/ This does not overflow or underflow at all,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":61691,"byte_end":61738,"line_start":260,"line_end":260,"column_start":5,"column_end":52}},{"value":"/ as all possible output fits in the range of `Duration`.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":61743,"byte_end":61802,"line_start":261,"line_end":261,"column_start":5,"column_end":64}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":61807,"byte_end":61816,"line_start":262,"line_end":262,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":262},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":62032,"byte_end":62041,"line_start":269,"line_end":269,"column_start":12,"column_end":21},"name":"naive_utc","qualname":"<Date<Tz>>::naive_utc","value":"fn naive_utc(&Self) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Returns a view to the naive UTC date.\n","sig":null,"attributes":[{"value":"/ Returns a view to the naive UTC date.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":61965,"byte_end":62006,"line_start":267,"line_end":267,"column_start":5,"column_end":46}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":62011,"byte_end":62020,"line_start":268,"line_end":268,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":263},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":62351,"byte_end":62362,"line_start":279,"line_end":279,"column_start":12,"column_end":23},"name":"naive_local","qualname":"<Date<Tz>>::naive_local","value":"fn naive_local(&Self) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Returns a view to the naive local date.","sig":null,"attributes":[{"value":"/ Returns a view to the naive local date.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":62093,"byte_end":62136,"line_start":273,"line_end":273,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":62141,"byte_end":62144,"line_start":274,"line_end":274,"column_start":5,"column_end":8}},{"value":"/ This is technically the same as [`naive_utc`](#method.naive_utc)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":62149,"byte_end":62217,"line_start":275,"line_end":275,"column_start":5,"column_end":73}},{"value":"/ because the offset is restricted to never exceed one day,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":62222,"byte_end":62283,"line_start":276,"line_end":276,"column_start":5,"column_end":66}},{"value":"/ but provided for the consistency.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":62288,"byte_end":62325,"line_start":277,"line_end":277,"column_start":5,"column_end":42}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":62330,"byte_end":62339,"line_start":278,"line_end":278,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":264},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":62499,"byte_end":62510,"line_start":284,"line_end":284,"column_start":12,"column_end":23},"name":"years_since","qualname":"<Date<Tz>>::years_since","value":"fn years_since(&Self, Self) -> Option<u32>","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of whole years from the given `base` until `self`.\n","sig":null,"attributes":[{"value":"/ Returns the number of whole years from the given `base` until `self`.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":62414,"byte_end":62487,"line_start":283,"line_end":283,"column_start":5,"column_end":78}}]},{"kind":"Const","id":{"krate":0,"index":265},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":62864,"byte_end":62871,"line_start":297,"line_end":297,"column_start":15,"column_end":22},"name":"MIN_UTC","qualname":"::date::Date::<Tz>::MIN_UTC","value":"Date<Utc>","parent":{"krate":0,"index":232},"children":[],"decl_id":null,"docs":" The minimum possible `Date`.\n","sig":null,"attributes":[{"value":"/ The minimum possible `Date`.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":62817,"byte_end":62849,"line_start":296,"line_end":296,"column_start":5,"column_end":37}}]},{"kind":"Const","id":{"krate":0,"index":266},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":62980,"byte_end":62987,"line_start":299,"line_end":299,"column_start":15,"column_end":22},"name":"MAX_UTC","qualname":"::date::Date::<Tz>::MAX_UTC","value":"Date<Utc>","parent":{"krate":0,"index":232},"children":[],"decl_id":null,"docs":" The maximum possible `Date`.\n","sig":null,"attributes":[{"value":"/ The maximum possible `Date`.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":62933,"byte_end":62965,"line_start":298,"line_end":298,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":273},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":63545,"byte_end":63562,"line_start":317,"line_end":317,"column_start":12,"column_end":29},"name":"format_with_items","qualname":"<Date<Tz>>::format_with_items","value":"fn format_with_items<'a, I, B>(&Self, I) -> DelayedFormat<I> where\nI: Iterator<Item = B> + Clone, B: Borrow<Item>","parent":null,"children":[],"decl_id":null,"docs":" Formats the date with the specified formatting items.\n","sig":null,"attributes":[{"value":"/ Formats the date with the specified formatting items.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":63404,"byte_end":63461,"line_start":314,"line_end":314,"column_start":5,"column_end":62}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":63466,"byte_end":63519,"line_start":315,"line_end":315,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":63524,"byte_end":63533,"line_start":316,"line_end":316,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":277},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":64295,"byte_end":64301,"line_start":339,"line_end":339,"column_start":12,"column_end":18},"name":"format","qualname":"<Date<Tz>>::format","value":"fn format<'a>(&Self, &'a str) -> DelayedFormat<StrftimeItems>","parent":null,"children":[],"decl_id":null,"docs":" Formats the date with the specified format string.\n See the [`crate::format::strftime`] module\n on the supported escape sequences.","sig":null,"attributes":[{"value":"/ Formats the date with the specified format string.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":63797,"byte_end":63851,"line_start":325,"line_end":325,"column_start":5,"column_end":59}},{"value":"/ See the [`crate::format::strftime`] module","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":63856,"byte_end":63902,"line_start":326,"line_end":326,"column_start":5,"column_end":51}},{"value":"/ on the supported escape sequences.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":63907,"byte_end":63945,"line_start":327,"line_end":327,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":63950,"byte_end":63953,"line_start":328,"line_end":328,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":63958,"byte_end":63971,"line_start":329,"line_end":329,"column_start":5,"column_end":18}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":63976,"byte_end":63987,"line_start":330,"line_end":330,"column_start":5,"column_end":16}},{"value":"/ use chrono::prelude::*;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":63992,"byte_end":64019,"line_start":331,"line_end":331,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":64024,"byte_end":64027,"line_start":332,"line_end":332,"column_start":5,"column_end":8}},{"value":"/ let date_time: Date<Utc> = Utc.ymd(2017, 04, 02);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":64032,"byte_end":64085,"line_start":333,"line_end":333,"column_start":5,"column_end":58}},{"value":"/ let formatted = format!(\"{}\", date_time.format(\"%d/%m/%Y\"));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":64090,"byte_end":64154,"line_start":334,"line_end":334,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(formatted, \"02/04/2017\");","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":64159,"byte_end":64199,"line_start":335,"line_end":335,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":64204,"byte_end":64211,"line_start":336,"line_end":336,"column_start":5,"column_end":12}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":64216,"byte_end":64269,"line_start":337,"line_end":337,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":64274,"byte_end":64283,"line_start":338,"line_end":338,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":281},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":65481,"byte_end":65485,"line_start":380,"line_end":380,"column_start":8,"column_end":12},"name":"year","qualname":"<Date<Tz> as traits::Datelike>::year","value":"fn year(&Self) -> i32","parent":{"krate":0,"index":3214},"children":[],"decl_id":{"krate":0,"index":3215},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":65464,"byte_end":65473,"line_start":379,"line_end":379,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":282},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":65563,"byte_end":65568,"line_start":384,"line_end":384,"column_start":8,"column_end":13},"name":"month","qualname":"<Date<Tz> as traits::Datelike>::month","value":"fn month(&Self) -> u32","parent":{"krate":0,"index":3214},"children":[],"decl_id":{"krate":0,"index":3217},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":65546,"byte_end":65555,"line_start":383,"line_end":383,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":283},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":65647,"byte_end":65653,"line_start":388,"line_end":388,"column_start":8,"column_end":14},"name":"month0","qualname":"<Date<Tz> as traits::Datelike>::month0","value":"fn month0(&Self) -> u32","parent":{"krate":0,"index":3214},"children":[],"decl_id":{"krate":0,"index":3218},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":65630,"byte_end":65639,"line_start":387,"line_end":387,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":284},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":65733,"byte_end":65736,"line_start":392,"line_end":392,"column_start":8,"column_end":11},"name":"day","qualname":"<Date<Tz> as traits::Datelike>::day","value":"fn day(&Self) -> u32","parent":{"krate":0,"index":3214},"children":[],"decl_id":{"krate":0,"index":3219},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":65716,"byte_end":65725,"line_start":391,"line_end":391,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":285},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":65813,"byte_end":65817,"line_start":396,"line_end":396,"column_start":8,"column_end":12},"name":"day0","qualname":"<Date<Tz> as traits::Datelike>::day0","value":"fn day0(&Self) -> u32","parent":{"krate":0,"index":3214},"children":[],"decl_id":{"krate":0,"index":3220},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":65796,"byte_end":65805,"line_start":395,"line_end":395,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":286},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":65895,"byte_end":65902,"line_start":400,"line_end":400,"column_start":8,"column_end":15},"name":"ordinal","qualname":"<Date<Tz> as traits::Datelike>::ordinal","value":"fn ordinal(&Self) -> u32","parent":{"krate":0,"index":3214},"children":[],"decl_id":{"krate":0,"index":3221},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":65878,"byte_end":65887,"line_start":399,"line_end":399,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":287},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":65983,"byte_end":65991,"line_start":404,"line_end":404,"column_start":8,"column_end":16},"name":"ordinal0","qualname":"<Date<Tz> as traits::Datelike>::ordinal0","value":"fn ordinal0(&Self) -> u32","parent":{"krate":0,"index":3214},"children":[],"decl_id":{"krate":0,"index":3222},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":65966,"byte_end":65975,"line_start":403,"line_end":403,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":288},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":66073,"byte_end":66080,"line_start":408,"line_end":408,"column_start":8,"column_end":15},"name":"weekday","qualname":"<Date<Tz> as traits::Datelike>::weekday","value":"fn weekday(&Self) -> Weekday","parent":{"krate":0,"index":3214},"children":[],"decl_id":{"krate":0,"index":3223},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":66056,"byte_end":66065,"line_start":407,"line_end":407,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":289},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":66165,"byte_end":66173,"line_start":412,"line_end":412,"column_start":8,"column_end":16},"name":"iso_week","qualname":"<Date<Tz> as traits::Datelike>::iso_week","value":"fn iso_week(&Self) -> IsoWeek","parent":{"krate":0,"index":3214},"children":[],"decl_id":{"krate":0,"index":3224},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":66148,"byte_end":66157,"line_start":411,"line_end":411,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":290},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":66260,"byte_end":66269,"line_start":417,"line_end":417,"column_start":8,"column_end":17},"name":"with_year","qualname":"<Date<Tz> as traits::Datelike>::with_year","value":"fn with_year(&Self, i32) -> Option<Date<Tz>>","parent":{"krate":0,"index":3214},"children":[],"decl_id":{"krate":0,"index":3225},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":66243,"byte_end":66252,"line_start":416,"line_end":416,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":292},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":66391,"byte_end":66401,"line_start":422,"line_end":422,"column_start":8,"column_end":18},"name":"with_month","qualname":"<Date<Tz> as traits::Datelike>::with_month","value":"fn with_month(&Self, u32) -> Option<Date<Tz>>","parent":{"krate":0,"index":3214},"children":[],"decl_id":{"krate":0,"index":3226},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":66374,"byte_end":66383,"line_start":421,"line_end":421,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":294},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":66526,"byte_end":66537,"line_start":427,"line_end":427,"column_start":8,"column_end":19},"name":"with_month0","qualname":"<Date<Tz> as traits::Datelike>::with_month0","value":"fn with_month0(&Self, u32) -> Option<Date<Tz>>","parent":{"krate":0,"index":3214},"children":[],"decl_id":{"krate":0,"index":3227},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":66509,"byte_end":66518,"line_start":426,"line_end":426,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":296},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":66665,"byte_end":66673,"line_start":432,"line_end":432,"column_start":8,"column_end":16},"name":"with_day","qualname":"<Date<Tz> as traits::Datelike>::with_day","value":"fn with_day(&Self, u32) -> Option<Date<Tz>>","parent":{"krate":0,"index":3214},"children":[],"decl_id":{"krate":0,"index":3228},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":66648,"byte_end":66657,"line_start":431,"line_end":431,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":298},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":66792,"byte_end":66801,"line_start":437,"line_end":437,"column_start":8,"column_end":17},"name":"with_day0","qualname":"<Date<Tz> as traits::Datelike>::with_day0","value":"fn with_day0(&Self, u32) -> Option<Date<Tz>>","parent":{"krate":0,"index":3214},"children":[],"decl_id":{"krate":0,"index":3229},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":66775,"byte_end":66784,"line_start":436,"line_end":436,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":300},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":66923,"byte_end":66935,"line_start":442,"line_end":442,"column_start":8,"column_end":20},"name":"with_ordinal","qualname":"<Date<Tz> as traits::Datelike>::with_ordinal","value":"fn with_ordinal(&Self, u32) -> Option<Date<Tz>>","parent":{"krate":0,"index":3214},"children":[],"decl_id":{"krate":0,"index":3230},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":66906,"byte_end":66915,"line_start":441,"line_end":441,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":302},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":67066,"byte_end":67079,"line_start":447,"line_end":447,"column_start":8,"column_end":21},"name":"with_ordinal0","qualname":"<Date<Tz> as traits::Datelike>::with_ordinal0","value":"fn with_ordinal0(&Self, u32) -> Option<Date<Tz>>","parent":{"krate":0,"index":3214},"children":[],"decl_id":{"krate":0,"index":3231},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":67049,"byte_end":67058,"line_start":446,"line_end":446,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":311},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":67499,"byte_end":67501,"line_start":457,"line_end":457,"column_start":8,"column_end":10},"name":"eq","qualname":"<Date<Tz> as std::cmp::PartialEq>::eq","value":"fn eq(&Self, &Date<Tz2>) -> bool","parent":{"krate":2,"index":2802},"children":[],"decl_id":{"krate":2,"index":2804},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":316},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":67670,"byte_end":67681,"line_start":465,"line_end":465,"column_start":8,"column_end":19},"name":"partial_cmp","qualname":"<Date<Tz> as std::cmp::PartialOrd>::partial_cmp","value":"fn partial_cmp(&Self, &Date<Tz>) -> Option<Ordering>","parent":{"krate":2,"index":2848},"children":[],"decl_id":{"krate":2,"index":2850},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":319},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":67826,"byte_end":67829,"line_start":471,"line_end":471,"column_start":8,"column_end":11},"name":"cmp","qualname":"<Date<Tz> as std::cmp::Ord>::cmp","value":"fn cmp(&Self, &Date<Tz>) -> Ordering","parent":{"krate":2,"index":2838},"children":[],"decl_id":{"krate":2,"index":2839},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":322},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":67965,"byte_end":67969,"line_start":477,"line_end":477,"column_start":8,"column_end":12},"name":"hash","qualname":"<Date<Tz> as std::hash::Hash>::hash","value":"fn hash<H>(&Self, &mut H) where H: hash::Hasher","parent":{"krate":2,"index":10120},"children":[],"decl_id":{"krate":2,"index":10121},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":327},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":68151,"byte_end":68154,"line_start":486,"line_end":486,"column_start":8,"column_end":11},"name":"add","qualname":"<Date<Tz> as std::ops::Add>::add","value":"fn add(Self, OldDuration) -> Date<Tz>","parent":{"krate":2,"index":3218},"children":[],"decl_id":{"krate":2,"index":3221},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":68134,"byte_end":68143,"line_start":485,"line_end":485,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":330},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":68356,"byte_end":68366,"line_start":493,"line_end":493,"column_start":8,"column_end":18},"name":"add_assign","qualname":"<Date<Tz> as std::ops::AddAssign>::add_assign","value":"fn add_assign(&mut Self, OldDuration)","parent":{"krate":2,"index":3249},"children":[],"decl_id":{"krate":2,"index":3251},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":68339,"byte_end":68348,"line_start":492,"line_end":492,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":334},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":68602,"byte_end":68605,"line_start":502,"line_end":502,"column_start":8,"column_end":11},"name":"sub","qualname":"<Date<Tz> as std::ops::Sub>::sub","value":"fn sub(Self, OldDuration) -> Date<Tz>","parent":{"krate":2,"index":3223},"children":[],"decl_id":{"krate":2,"index":3226},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":68585,"byte_end":68594,"line_start":501,"line_end":501,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":337},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":68807,"byte_end":68817,"line_start":509,"line_end":509,"column_start":8,"column_end":18},"name":"sub_assign","qualname":"<Date<Tz> as std::ops::SubAssign>::sub_assign","value":"fn sub_assign(&mut Self, OldDuration)","parent":{"krate":2,"index":3253},"children":[],"decl_id":{"krate":2,"index":3255},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":68790,"byte_end":68799,"line_start":508,"line_end":508,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":341},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":69053,"byte_end":69056,"line_start":518,"line_end":518,"column_start":8,"column_end":11},"name":"sub","qualname":"<Date<Tz> as std::ops::Sub>::sub","value":"fn sub(Self, Date<Tz>) -> OldDuration","parent":{"krate":2,"index":3223},"children":[],"decl_id":{"krate":2,"index":3226},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":69036,"byte_end":69045,"line_start":517,"line_end":517,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":344},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":69196,"byte_end":69199,"line_start":524,"line_end":524,"column_start":8,"column_end":11},"name":"fmt","qualname":"<Date<Tz> as std::fmt::Debug>::fmt","value":"fn fmt(&Self, &mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":9907},"children":[],"decl_id":{"krate":2,"index":9908},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":347},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":69410,"byte_end":69413,"line_start":533,"line_end":533,"column_start":8,"column_end":11},"name":"fmt","qualname":"<Date<Tz> as std::fmt::Display>::fmt","value":"fn fmt(&Self, &mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":9914},"children":[],"decl_id":{"krate":2,"index":9915},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3294},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":112541,"byte_end":112564,"line_start":12,"line_end":12,"column_start":12,"column_end":35},"name":"SecondsTimestampVisitor","qualname":"::datetime::serde::SecondsTimestampVisitor","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3298},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":112610,"byte_end":112637,"line_start":16,"line_end":16,"column_start":12,"column_end":39},"name":"NanoSecondsTimestampVisitor","qualname":"::datetime::serde::NanoSecondsTimestampVisitor","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3302},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":112683,"byte_end":112711,"line_start":20,"line_end":20,"column_start":12,"column_end":40},"name":"MicroSecondsTimestampVisitor","qualname":"::datetime::serde::MicroSecondsTimestampVisitor","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3306},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":112757,"byte_end":112785,"line_start":24,"line_end":24,"column_start":12,"column_end":40},"name":"MilliSecondsTimestampVisitor","qualname":"::datetime::serde::MilliSecondsTimestampVisitor","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":501},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":112976,"byte_end":112985,"line_start":31,"line_end":31,"column_start":8,"column_end":17},"name":"serialize","qualname":"<DateTime<Tz> as serde::Serialize>::serialize","value":"fn serialize<S>(&Self, S) -> Result<S::Ok, S::Error> where S: ser::Serializer","parent":{"krate":16,"index":2117},"children":[],"decl_id":{"krate":16,"index":2118},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":521},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":114258,"byte_end":114269,"line_start":75,"line_end":75,"column_start":8,"column_end":19},"name":"deserialize","qualname":"<DateTime<FixedOffset> as serde::Deserialize>::deserialize","value":"fn deserialize<D>(D) -> Result<Self, D::Error> where D: de::Deserializer","parent":{"krate":16,"index":1577},"children":[],"decl_id":{"krate":16,"index":1579},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":525},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":114680,"byte_end":114691,"line_start":90,"line_end":90,"column_start":8,"column_end":19},"name":"deserialize","qualname":"<DateTime<Utc> as serde::Deserialize>::deserialize","value":"fn deserialize<D>(D) -> Result<Self, D::Error> where D: de::Deserializer","parent":{"krate":16,"index":1577},"children":[],"decl_id":{"krate":16,"index":1579},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":530},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":115211,"byte_end":115222,"line_start":107,"line_end":107,"column_start":8,"column_end":19},"name":"deserialize","qualname":"<DateTime<Local> as serde::Deserialize>::deserialize","value":"fn deserialize<D>(D) -> Result<Self, D::Error> where D: de::Deserializer","parent":{"krate":16,"index":1577},"children":[],"decl_id":{"krate":16,"index":1579},"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":533},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":116206,"byte_end":116220,"line_start":142,"line_end":142,"column_start":9,"column_end":23},"name":"ts_nanoseconds","qualname":"::datetime::serde::ts_nanoseconds","value":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","parent":null,"children":[{"krate":0,"index":534},{"krate":0,"index":537},{"krate":0,"index":538},{"krate":0,"index":541},{"krate":0,"index":544},{"krate":0,"index":547},{"krate":0,"index":548},{"krate":0,"index":551},{"krate":0,"index":552},{"krate":0,"index":554},{"krate":0,"index":555},{"krate":0,"index":558},{"krate":0,"index":559},{"krate":0,"index":561},{"krate":0,"index":563},{"krate":0,"index":566}],"decl_id":null,"docs":" Ser/de to/from timestamps in nanoseconds","sig":null,"attributes":[{"value":"/ Ser/de to/from timestamps in nanoseconds","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":115417,"byte_end":115461,"line_start":115,"line_end":115,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":115462,"byte_end":115465,"line_start":116,"line_end":116,"column_start":1,"column_end":4}},{"value":"/ Intended for use with `serde`'s `with` attribute.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":115466,"byte_end":115519,"line_start":117,"line_end":117,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":115520,"byte_end":115523,"line_start":118,"line_end":118,"column_start":1,"column_end":4}},{"value":"/ # Example:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":115524,"byte_end":115538,"line_start":119,"line_end":119,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":115539,"byte_end":115542,"line_start":120,"line_end":120,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":115543,"byte_end":115554,"line_start":121,"line_end":121,"column_start":1,"column_end":12}},{"value":"/ # use chrono::{TimeZone, DateTime, Utc};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":115555,"byte_end":115599,"line_start":122,"line_end":122,"column_start":1,"column_end":45}},{"value":"/ # use serde_derive::{Deserialize, Serialize};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":115600,"byte_end":115649,"line_start":123,"line_end":123,"column_start":1,"column_end":50}},{"value":"/ use chrono::serde::ts_nanoseconds;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":115650,"byte_end":115688,"line_start":124,"line_end":124,"column_start":1,"column_end":39}},{"value":"/ #[derive(Deserialize, Serialize)]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":115689,"byte_end":115726,"line_start":125,"line_end":125,"column_start":1,"column_end":38}},{"value":"/ struct S {","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":115727,"byte_end":115741,"line_start":126,"line_end":126,"column_start":1,"column_end":15}},{"value":"/     #[serde(with = \"ts_nanoseconds\")]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":115742,"byte_end":115783,"line_start":127,"line_end":127,"column_start":1,"column_end":42}},{"value":"/     time: DateTime<Utc>","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":115784,"byte_end":115811,"line_start":128,"line_end":128,"column_start":1,"column_end":28}},{"value":"/ }","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":115812,"byte_end":115817,"line_start":129,"line_end":129,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":115818,"byte_end":115821,"line_start":130,"line_end":130,"column_start":1,"column_end":4}},{"value":"/ let time = Utc.ymd(2018, 5, 17).and_hms_nano(02, 04, 59, 918355733);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":115822,"byte_end":115894,"line_start":131,"line_end":131,"column_start":1,"column_end":73}},{"value":"/ let my_s = S {","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":115895,"byte_end":115913,"line_start":132,"line_end":132,"column_start":1,"column_end":19}},{"value":"/     time: time.clone(),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":115914,"byte_end":115941,"line_start":133,"line_end":133,"column_start":1,"column_end":28}},{"value":"/ };","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":115942,"byte_end":115948,"line_start":134,"line_end":134,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":115949,"byte_end":115952,"line_start":135,"line_end":135,"column_start":1,"column_end":4}},{"value":"/ let as_string = serde_json::to_string(&my_s)?;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":115953,"byte_end":116003,"line_start":136,"line_end":136,"column_start":1,"column_end":51}},{"value":"/ assert_eq!(as_string, r#\"{\"time\":1526522699918355733}\"#);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":116004,"byte_end":116065,"line_start":137,"line_end":137,"column_start":1,"column_end":62}},{"value":"/ let my_s: S = serde_json::from_str(&as_string)?;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":116066,"byte_end":116118,"line_start":138,"line_end":138,"column_start":1,"column_end":53}},{"value":"/ assert_eq!(my_s.time, time);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":116119,"byte_end":116151,"line_start":139,"line_end":139,"column_start":1,"column_end":33}},{"value":"/ # Ok::<(), serde_json::Error>(())","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":116152,"byte_end":116189,"line_start":140,"line_end":140,"column_start":1,"column_end":38}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":116190,"byte_end":116197,"line_start":141,"line_end":141,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":561},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":117209,"byte_end":117218,"line_start":174,"line_end":174,"column_start":12,"column_end":21},"name":"serialize","qualname":"::datetime::serde::ts_nanoseconds::serialize","value":"fn serialize<S>(&DateTime<Utc>, S) -> Result<S::Ok, S::Error> where\nS: ser::Serializer","parent":null,"children":[],"decl_id":null,"docs":" Serialize a UTC datetime into an integer number of nanoseconds since the epoch","sig":null,"attributes":[{"value":"/ Serialize a UTC datetime into an integer number of nanoseconds since the epoch","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":116398,"byte_end":116480,"line_start":151,"line_end":151,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":116485,"byte_end":116488,"line_start":152,"line_end":152,"column_start":5,"column_end":8}},{"value":"/ Intended for use with `serde`s `serialize_with` attribute.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":116493,"byte_end":116555,"line_start":153,"line_end":153,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":116560,"byte_end":116563,"line_start":154,"line_end":154,"column_start":5,"column_end":8}},{"value":"/ # Example:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":116568,"byte_end":116582,"line_start":155,"line_end":155,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":116587,"byte_end":116590,"line_start":156,"line_end":156,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":116595,"byte_end":116606,"line_start":157,"line_end":157,"column_start":5,"column_end":16}},{"value":"/ # use chrono::{TimeZone, DateTime, Utc};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":116611,"byte_end":116655,"line_start":158,"line_end":158,"column_start":5,"column_end":49}},{"value":"/ # use serde_derive::Serialize;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":116660,"byte_end":116694,"line_start":159,"line_end":159,"column_start":5,"column_end":39}},{"value":"/ use chrono::serde::ts_nanoseconds::serialize as to_nano_ts;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":116699,"byte_end":116762,"line_start":160,"line_end":160,"column_start":5,"column_end":68}},{"value":"/ #[derive(Serialize)]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":116767,"byte_end":116791,"line_start":161,"line_end":161,"column_start":5,"column_end":29}},{"value":"/ struct S {","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":116796,"byte_end":116810,"line_start":162,"line_end":162,"column_start":5,"column_end":19}},{"value":"/     #[serde(serialize_with = \"to_nano_ts\")]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":116815,"byte_end":116862,"line_start":163,"line_end":163,"column_start":5,"column_end":52}},{"value":"/     time: DateTime<Utc>","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":116867,"byte_end":116894,"line_start":164,"line_end":164,"column_start":5,"column_end":32}},{"value":"/ }","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":116899,"byte_end":116904,"line_start":165,"line_end":165,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":116909,"byte_end":116912,"line_start":166,"line_end":166,"column_start":5,"column_end":8}},{"value":"/ let my_s = S {","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":116917,"byte_end":116935,"line_start":167,"line_end":167,"column_start":5,"column_end":23}},{"value":"/     time: Utc.ymd(2018, 5, 17).and_hms_nano(02, 04, 59, 918355733),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":116940,"byte_end":117011,"line_start":168,"line_end":168,"column_start":5,"column_end":76}},{"value":"/ };","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":117016,"byte_end":117022,"line_start":169,"line_end":169,"column_start":5,"column_end":11}},{"value":"/ let as_string = serde_json::to_string(&my_s)?;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":117027,"byte_end":117077,"line_start":170,"line_end":170,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(as_string, r#\"{\"time\":1526522699918355733}\"#);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":117082,"byte_end":117143,"line_start":171,"line_end":171,"column_start":5,"column_end":66}},{"value":"/ # Ok::<(), serde_json::Error>(())","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":117148,"byte_end":117185,"line_start":172,"line_end":172,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":117190,"byte_end":117197,"line_start":173,"line_end":173,"column_start":5,"column_end":12}}]},{"kind":"Function","id":{"krate":0,"index":563},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":118037,"byte_end":118048,"line_start":200,"line_end":200,"column_start":12,"column_end":23},"name":"deserialize","qualname":"::datetime::serde::ts_nanoseconds::deserialize","value":"fn deserialize<'de, D>(D) -> Result<DateTime<Utc>, D::Error> where\nD: de::Deserializer","parent":null,"children":[],"decl_id":null,"docs":" Deserialize a [`DateTime`] from a nanosecond timestamp","sig":null,"attributes":[{"value":"/ Deserialize a [`DateTime`] from a nanosecond timestamp","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":117394,"byte_end":117452,"line_start":181,"line_end":181,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":117457,"byte_end":117460,"line_start":182,"line_end":182,"column_start":5,"column_end":8}},{"value":"/ Intended for use with `serde`s `deserialize_with` attribute.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":117465,"byte_end":117529,"line_start":183,"line_end":183,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":117534,"byte_end":117537,"line_start":184,"line_end":184,"column_start":5,"column_end":8}},{"value":"/ # Example:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":117542,"byte_end":117556,"line_start":185,"line_end":185,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":117561,"byte_end":117564,"line_start":186,"line_end":186,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":117569,"byte_end":117580,"line_start":187,"line_end":187,"column_start":5,"column_end":16}},{"value":"/ # use chrono::{DateTime, Utc};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":117585,"byte_end":117619,"line_start":188,"line_end":188,"column_start":5,"column_end":39}},{"value":"/ # use serde_derive::Deserialize;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":117624,"byte_end":117660,"line_start":189,"line_end":189,"column_start":5,"column_end":41}},{"value":"/ use chrono::serde::ts_nanoseconds::deserialize as from_nano_ts;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":117665,"byte_end":117732,"line_start":190,"line_end":190,"column_start":5,"column_end":72}},{"value":"/ #[derive(Deserialize)]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":117737,"byte_end":117763,"line_start":191,"line_end":191,"column_start":5,"column_end":31}},{"value":"/ struct S {","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":117768,"byte_end":117782,"line_start":192,"line_end":192,"column_start":5,"column_end":19}},{"value":"/     #[serde(deserialize_with = \"from_nano_ts\")]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":117787,"byte_end":117838,"line_start":193,"line_end":193,"column_start":5,"column_end":56}},{"value":"/     time: DateTime<Utc>","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":117843,"byte_end":117870,"line_start":194,"line_end":194,"column_start":5,"column_end":32}},{"value":"/ }","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":117875,"byte_end":117880,"line_start":195,"line_end":195,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":117885,"byte_end":117888,"line_start":196,"line_end":196,"column_start":5,"column_end":8}},{"value":"/ let my_s: S = serde_json::from_str(r#\"{ \"time\": 1526522699918355733 }\"#)?;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":117893,"byte_end":117971,"line_start":197,"line_end":197,"column_start":5,"column_end":83}},{"value":"/ # Ok::<(), serde_json::Error>(())","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":117976,"byte_end":118013,"line_start":198,"line_end":198,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":118018,"byte_end":118025,"line_start":199,"line_end":199,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":569},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":118323,"byte_end":118332,"line_start":210,"line_end":210,"column_start":12,"column_end":21},"name":"expecting","qualname":"<NanoSecondsTimestampVisitor as serde::de::Visitor>::expecting","value":"fn expecting(&Self, &mut fmt::Formatter) -> fmt::Result","parent":{"krate":16,"index":1663},"children":[],"decl_id":{"krate":16,"index":1666},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":570},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":118545,"byte_end":118554,"line_start":215,"line_end":215,"column_start":12,"column_end":21},"name":"visit_i64","qualname":"<NanoSecondsTimestampVisitor as serde::de::Visitor>::visit_i64","value":"fn visit_i64<E>(Self, i64) -> Result<Self::Value, E> where E: de::Error","parent":{"krate":16,"index":1663},"children":[],"decl_id":{"krate":16,"index":1675},"docs":" Deserialize a timestamp in nanoseconds since the epoch\n","sig":null,"attributes":[{"value":"/ Deserialize a timestamp in nanoseconds since the epoch","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":118475,"byte_end":118533,"line_start":214,"line_end":214,"column_start":9,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":572},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":118893,"byte_end":118902,"line_start":226,"line_end":226,"column_start":12,"column_end":21},"name":"visit_u64","qualname":"<NanoSecondsTimestampVisitor as serde::de::Visitor>::visit_u64","value":"fn visit_u64<E>(Self, u64) -> Result<Self::Value, E> where E: de::Error","parent":{"krate":16,"index":1663},"children":[],"decl_id":{"krate":16,"index":1683},"docs":" Deserialize a timestamp in nanoseconds since the epoch\n","sig":null,"attributes":[{"value":"/ Deserialize a timestamp in nanoseconds since the epoch","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":118823,"byte_end":118881,"line_start":225,"line_end":225,"column_start":9,"column_end":67}}]},{"kind":"Mod","id":{"krate":0,"index":574},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":120006,"byte_end":120027,"line_start":265,"line_end":265,"column_start":9,"column_end":30},"name":"ts_nanoseconds_option","qualname":"::datetime::serde::ts_nanoseconds_option","value":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","parent":null,"children":[{"krate":0,"index":575},{"krate":0,"index":578},{"krate":0,"index":579},{"krate":0,"index":582},{"krate":0,"index":585},{"krate":0,"index":586},{"krate":0,"index":589},{"krate":0,"index":590},{"krate":0,"index":592},{"krate":0,"index":593},{"krate":0,"index":595},{"krate":0,"index":597},{"krate":0,"index":600},{"krate":0,"index":602}],"decl_id":null,"docs":" Ser/de to/from optional timestamps in nanoseconds","sig":null,"attributes":[{"value":"/ Ser/de to/from optional timestamps in nanoseconds","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":119180,"byte_end":119233,"line_start":238,"line_end":238,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":119234,"byte_end":119237,"line_start":239,"line_end":239,"column_start":1,"column_end":4}},{"value":"/ Intended for use with `serde`'s `with` attribute.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":119238,"byte_end":119291,"line_start":240,"line_end":240,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":119292,"byte_end":119295,"line_start":241,"line_end":241,"column_start":1,"column_end":4}},{"value":"/ # Example:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":119296,"byte_end":119310,"line_start":242,"line_end":242,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":119311,"byte_end":119314,"line_start":243,"line_end":243,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":119315,"byte_end":119326,"line_start":244,"line_end":244,"column_start":1,"column_end":12}},{"value":"/ # use chrono::{TimeZone, DateTime, Utc};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":119327,"byte_end":119371,"line_start":245,"line_end":245,"column_start":1,"column_end":45}},{"value":"/ # use serde_derive::{Deserialize, Serialize};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":119372,"byte_end":119421,"line_start":246,"line_end":246,"column_start":1,"column_end":50}},{"value":"/ use chrono::serde::ts_nanoseconds_option;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":119422,"byte_end":119467,"line_start":247,"line_end":247,"column_start":1,"column_end":46}},{"value":"/ #[derive(Deserialize, Serialize)]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":119468,"byte_end":119505,"line_start":248,"line_end":248,"column_start":1,"column_end":38}},{"value":"/ struct S {","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":119506,"byte_end":119520,"line_start":249,"line_end":249,"column_start":1,"column_end":15}},{"value":"/     #[serde(with = \"ts_nanoseconds_option\")]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":119521,"byte_end":119569,"line_start":250,"line_end":250,"column_start":1,"column_end":49}},{"value":"/     time: Option<DateTime<Utc>>","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":119570,"byte_end":119605,"line_start":251,"line_end":251,"column_start":1,"column_end":36}},{"value":"/ }","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":119606,"byte_end":119611,"line_start":252,"line_end":252,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":119612,"byte_end":119615,"line_start":253,"line_end":253,"column_start":1,"column_end":4}},{"value":"/ let time = Some(Utc.ymd(2018, 5, 17).and_hms_nano(02, 04, 59, 918355733));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":119616,"byte_end":119694,"line_start":254,"line_end":254,"column_start":1,"column_end":79}},{"value":"/ let my_s = S {","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":119695,"byte_end":119713,"line_start":255,"line_end":255,"column_start":1,"column_end":19}},{"value":"/     time: time.clone(),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":119714,"byte_end":119741,"line_start":256,"line_end":256,"column_start":1,"column_end":28}},{"value":"/ };","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":119742,"byte_end":119748,"line_start":257,"line_end":257,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":119749,"byte_end":119752,"line_start":258,"line_end":258,"column_start":1,"column_end":4}},{"value":"/ let as_string = serde_json::to_string(&my_s)?;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":119753,"byte_end":119803,"line_start":259,"line_end":259,"column_start":1,"column_end":51}},{"value":"/ assert_eq!(as_string, r#\"{\"time\":1526522699918355733}\"#);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":119804,"byte_end":119865,"line_start":260,"line_end":260,"column_start":1,"column_end":62}},{"value":"/ let my_s: S = serde_json::from_str(&as_string)?;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":119866,"byte_end":119918,"line_start":261,"line_end":261,"column_start":1,"column_end":53}},{"value":"/ assert_eq!(my_s.time, time);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":119919,"byte_end":119951,"line_start":262,"line_end":262,"column_start":1,"column_end":33}},{"value":"/ # Ok::<(), serde_json::Error>(())","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":119952,"byte_end":119989,"line_start":263,"line_end":263,"column_start":1,"column_end":38}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":119990,"byte_end":119997,"line_start":264,"line_end":264,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":595},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":121004,"byte_end":121013,"line_start":296,"line_end":296,"column_start":12,"column_end":21},"name":"serialize","qualname":"::datetime::serde::ts_nanoseconds_option::serialize","value":"fn serialize<S>(&Option<DateTime<Utc>>, S) -> Result<S::Ok, S::Error> where\nS: ser::Serializer","parent":null,"children":[],"decl_id":null,"docs":" Serialize a UTC datetime into an integer number of nanoseconds since the epoch or none","sig":null,"attributes":[{"value":"/ Serialize a UTC datetime into an integer number of nanoseconds since the epoch or none","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":120158,"byte_end":120248,"line_start":273,"line_end":273,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":120253,"byte_end":120256,"line_start":274,"line_end":274,"column_start":5,"column_end":8}},{"value":"/ Intended for use with `serde`s `serialize_with` attribute.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":120261,"byte_end":120323,"line_start":275,"line_end":275,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":120328,"byte_end":120331,"line_start":276,"line_end":276,"column_start":5,"column_end":8}},{"value":"/ # Example:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":120336,"byte_end":120350,"line_start":277,"line_end":277,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":120355,"byte_end":120358,"line_start":278,"line_end":278,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":120363,"byte_end":120374,"line_start":279,"line_end":279,"column_start":5,"column_end":16}},{"value":"/ # use chrono::{TimeZone, DateTime, Utc};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":120379,"byte_end":120423,"line_start":280,"line_end":280,"column_start":5,"column_end":49}},{"value":"/ # use serde_derive::Serialize;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":120428,"byte_end":120462,"line_start":281,"line_end":281,"column_start":5,"column_end":39}},{"value":"/ use chrono::serde::ts_nanoseconds_option::serialize as to_nano_tsopt;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":120467,"byte_end":120540,"line_start":282,"line_end":282,"column_start":5,"column_end":78}},{"value":"/ #[derive(Serialize)]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":120545,"byte_end":120569,"line_start":283,"line_end":283,"column_start":5,"column_end":29}},{"value":"/ struct S {","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":120574,"byte_end":120588,"line_start":284,"line_end":284,"column_start":5,"column_end":19}},{"value":"/     #[serde(serialize_with = \"to_nano_tsopt\")]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":120593,"byte_end":120643,"line_start":285,"line_end":285,"column_start":5,"column_end":55}},{"value":"/     time: Option<DateTime<Utc>>","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":120648,"byte_end":120683,"line_start":286,"line_end":286,"column_start":5,"column_end":40}},{"value":"/ }","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":120688,"byte_end":120693,"line_start":287,"line_end":287,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":120698,"byte_end":120701,"line_start":288,"line_end":288,"column_start":5,"column_end":8}},{"value":"/ let my_s = S {","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":120706,"byte_end":120724,"line_start":289,"line_end":289,"column_start":5,"column_end":23}},{"value":"/     time: Some(Utc.ymd(2018, 5, 17).and_hms_nano(02, 04, 59, 918355733)),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":120729,"byte_end":120806,"line_start":290,"line_end":290,"column_start":5,"column_end":82}},{"value":"/ };","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":120811,"byte_end":120817,"line_start":291,"line_end":291,"column_start":5,"column_end":11}},{"value":"/ let as_string = serde_json::to_string(&my_s)?;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":120822,"byte_end":120872,"line_start":292,"line_end":292,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(as_string, r#\"{\"time\":1526522699918355733}\"#);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":120877,"byte_end":120938,"line_start":293,"line_end":293,"column_start":5,"column_end":66}},{"value":"/ # Ok::<(), serde_json::Error>(())","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":120943,"byte_end":120980,"line_start":294,"line_end":294,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":120985,"byte_end":120992,"line_start":295,"line_end":295,"column_start":5,"column_end":12}}]},{"kind":"Function","id":{"krate":0,"index":597},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":121971,"byte_end":121982,"line_start":325,"line_end":325,"column_start":12,"column_end":23},"name":"deserialize","qualname":"::datetime::serde::ts_nanoseconds_option::deserialize","value":"fn deserialize<'de, D>(D) -> Result<Option<DateTime<Utc>>, D::Error> where\nD: de::Deserializer","parent":null,"children":[],"decl_id":null,"docs":" Deserialize a `DateTime` from a nanosecond timestamp or none","sig":null,"attributes":[{"value":"/ Deserialize a `DateTime` from a nanosecond timestamp or none","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":121301,"byte_end":121365,"line_start":306,"line_end":306,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":121370,"byte_end":121373,"line_start":307,"line_end":307,"column_start":5,"column_end":8}},{"value":"/ Intended for use with `serde`s `deserialize_with` attribute.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":121378,"byte_end":121442,"line_start":308,"line_end":308,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":121447,"byte_end":121450,"line_start":309,"line_end":309,"column_start":5,"column_end":8}},{"value":"/ # Example:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":121455,"byte_end":121469,"line_start":310,"line_end":310,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":121474,"byte_end":121477,"line_start":311,"line_end":311,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":121482,"byte_end":121493,"line_start":312,"line_end":312,"column_start":5,"column_end":16}},{"value":"/ # use chrono::{DateTime, Utc};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":121498,"byte_end":121532,"line_start":313,"line_end":313,"column_start":5,"column_end":39}},{"value":"/ # use serde_derive::Deserialize;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":121537,"byte_end":121573,"line_start":314,"line_end":314,"column_start":5,"column_end":41}},{"value":"/ use chrono::serde::ts_nanoseconds_option::deserialize as from_nano_tsopt;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":121578,"byte_end":121655,"line_start":315,"line_end":315,"column_start":5,"column_end":82}},{"value":"/ #[derive(Deserialize)]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":121660,"byte_end":121686,"line_start":316,"line_end":316,"column_start":5,"column_end":31}},{"value":"/ struct S {","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":121691,"byte_end":121705,"line_start":317,"line_end":317,"column_start":5,"column_end":19}},{"value":"/     #[serde(deserialize_with = \"from_nano_tsopt\")]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":121710,"byte_end":121764,"line_start":318,"line_end":318,"column_start":5,"column_end":59}},{"value":"/     time: Option<DateTime<Utc>>","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":121769,"byte_end":121804,"line_start":319,"line_end":319,"column_start":5,"column_end":40}},{"value":"/ }","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":121809,"byte_end":121814,"line_start":320,"line_end":320,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":121819,"byte_end":121822,"line_start":321,"line_end":321,"column_start":5,"column_end":8}},{"value":"/ let my_s: S = serde_json::from_str(r#\"{ \"time\": 1526522699918355733 }\"#)?;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":121827,"byte_end":121905,"line_start":322,"line_end":322,"column_start":5,"column_end":83}},{"value":"/ # Ok::<(), serde_json::Error>(())","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":121910,"byte_end":121947,"line_start":323,"line_end":323,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":121952,"byte_end":121959,"line_start":324,"line_end":324,"column_start":5,"column_end":12}}]},{"kind":"Mod","id":{"krate":0,"index":612},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":123973,"byte_end":123988,"line_start":394,"line_end":394,"column_start":9,"column_end":24},"name":"ts_microseconds","qualname":"::datetime::serde::ts_microseconds","value":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","parent":null,"children":[{"krate":0,"index":613},{"krate":0,"index":616},{"krate":0,"index":617},{"krate":0,"index":620},{"krate":0,"index":623},{"krate":0,"index":624},{"krate":0,"index":627},{"krate":0,"index":628},{"krate":0,"index":630},{"krate":0,"index":633},{"krate":0,"index":634},{"krate":0,"index":637},{"krate":0,"index":638},{"krate":0,"index":640},{"krate":0,"index":642},{"krate":0,"index":645}],"decl_id":null,"docs":" Ser/de to/from timestamps in microseconds","sig":null,"attributes":[{"value":"/ Ser/de to/from timestamps in microseconds","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":123186,"byte_end":123231,"line_start":367,"line_end":367,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":123232,"byte_end":123235,"line_start":368,"line_end":368,"column_start":1,"column_end":4}},{"value":"/ Intended for use with `serde`'s `with` attribute.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":123236,"byte_end":123289,"line_start":369,"line_end":369,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":123290,"byte_end":123293,"line_start":370,"line_end":370,"column_start":1,"column_end":4}},{"value":"/ # Example:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":123294,"byte_end":123308,"line_start":371,"line_end":371,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":123309,"byte_end":123312,"line_start":372,"line_end":372,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":123313,"byte_end":123324,"line_start":373,"line_end":373,"column_start":1,"column_end":12}},{"value":"/ # use chrono::{TimeZone, DateTime, Utc};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":123325,"byte_end":123369,"line_start":374,"line_end":374,"column_start":1,"column_end":45}},{"value":"/ # use serde_derive::{Deserialize, Serialize};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":123370,"byte_end":123419,"line_start":375,"line_end":375,"column_start":1,"column_end":50}},{"value":"/ use chrono::serde::ts_microseconds;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":123420,"byte_end":123459,"line_start":376,"line_end":376,"column_start":1,"column_end":40}},{"value":"/ #[derive(Deserialize, Serialize)]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":123460,"byte_end":123497,"line_start":377,"line_end":377,"column_start":1,"column_end":38}},{"value":"/ struct S {","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":123498,"byte_end":123512,"line_start":378,"line_end":378,"column_start":1,"column_end":15}},{"value":"/     #[serde(with = \"ts_microseconds\")]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":123513,"byte_end":123555,"line_start":379,"line_end":379,"column_start":1,"column_end":43}},{"value":"/     time: DateTime<Utc>","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":123556,"byte_end":123583,"line_start":380,"line_end":380,"column_start":1,"column_end":28}},{"value":"/ }","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":123584,"byte_end":123589,"line_start":381,"line_end":381,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":123590,"byte_end":123593,"line_start":382,"line_end":382,"column_start":1,"column_end":4}},{"value":"/ let time = Utc.ymd(2018, 5, 17).and_hms_micro(02, 04, 59, 918355);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":123594,"byte_end":123664,"line_start":383,"line_end":383,"column_start":1,"column_end":71}},{"value":"/ let my_s = S {","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":123665,"byte_end":123683,"line_start":384,"line_end":384,"column_start":1,"column_end":19}},{"value":"/     time: time.clone(),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":123684,"byte_end":123711,"line_start":385,"line_end":385,"column_start":1,"column_end":28}},{"value":"/ };","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":123712,"byte_end":123718,"line_start":386,"line_end":386,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":123719,"byte_end":123722,"line_start":387,"line_end":387,"column_start":1,"column_end":4}},{"value":"/ let as_string = serde_json::to_string(&my_s)?;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":123723,"byte_end":123773,"line_start":388,"line_end":388,"column_start":1,"column_end":51}},{"value":"/ assert_eq!(as_string, r#\"{\"time\":1526522699918355}\"#);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":123774,"byte_end":123832,"line_start":389,"line_end":389,"column_start":1,"column_end":59}},{"value":"/ let my_s: S = serde_json::from_str(&as_string)?;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":123833,"byte_end":123885,"line_start":390,"line_end":390,"column_start":1,"column_end":53}},{"value":"/ assert_eq!(my_s.time, time);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":123886,"byte_end":123918,"line_start":391,"line_end":391,"column_start":1,"column_end":33}},{"value":"/ # Ok::<(), serde_json::Error>(())","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":123919,"byte_end":123956,"line_start":392,"line_end":392,"column_start":1,"column_end":38}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":123957,"byte_end":123964,"line_start":393,"line_end":393,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":640},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":124976,"byte_end":124985,"line_start":425,"line_end":425,"column_start":12,"column_end":21},"name":"serialize","qualname":"::datetime::serde::ts_microseconds::serialize","value":"fn serialize<S>(&DateTime<Utc>, S) -> Result<S::Ok, S::Error> where\nS: ser::Serializer","parent":null,"children":[],"decl_id":null,"docs":" Serialize a UTC datetime into an integer number of microseconds since the epoch","sig":null,"attributes":[{"value":"/ Serialize a UTC datetime into an integer number of microseconds since the epoch","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":124166,"byte_end":124249,"line_start":402,"line_end":402,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":124254,"byte_end":124257,"line_start":403,"line_end":403,"column_start":5,"column_end":8}},{"value":"/ Intended for use with `serde`s `serialize_with` attribute.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":124262,"byte_end":124324,"line_start":404,"line_end":404,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":124329,"byte_end":124332,"line_start":405,"line_end":405,"column_start":5,"column_end":8}},{"value":"/ # Example:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":124337,"byte_end":124351,"line_start":406,"line_end":406,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":124356,"byte_end":124359,"line_start":407,"line_end":407,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":124364,"byte_end":124375,"line_start":408,"line_end":408,"column_start":5,"column_end":16}},{"value":"/ # use chrono::{TimeZone, DateTime, Utc};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":124380,"byte_end":124424,"line_start":409,"line_end":409,"column_start":5,"column_end":49}},{"value":"/ # use serde_derive::Serialize;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":124429,"byte_end":124463,"line_start":410,"line_end":410,"column_start":5,"column_end":39}},{"value":"/ use chrono::serde::ts_microseconds::serialize as to_micro_ts;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":124468,"byte_end":124533,"line_start":411,"line_end":411,"column_start":5,"column_end":70}},{"value":"/ #[derive(Serialize)]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":124538,"byte_end":124562,"line_start":412,"line_end":412,"column_start":5,"column_end":29}},{"value":"/ struct S {","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":124567,"byte_end":124581,"line_start":413,"line_end":413,"column_start":5,"column_end":19}},{"value":"/     #[serde(serialize_with = \"to_micro_ts\")]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":124586,"byte_end":124634,"line_start":414,"line_end":414,"column_start":5,"column_end":53}},{"value":"/     time: DateTime<Utc>","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":124639,"byte_end":124666,"line_start":415,"line_end":415,"column_start":5,"column_end":32}},{"value":"/ }","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":124671,"byte_end":124676,"line_start":416,"line_end":416,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":124681,"byte_end":124684,"line_start":417,"line_end":417,"column_start":5,"column_end":8}},{"value":"/ let my_s = S {","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":124689,"byte_end":124707,"line_start":418,"line_end":418,"column_start":5,"column_end":23}},{"value":"/     time: Utc.ymd(2018, 5, 17).and_hms_micro(02, 04, 59, 918355),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":124712,"byte_end":124781,"line_start":419,"line_end":419,"column_start":5,"column_end":74}},{"value":"/ };","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":124786,"byte_end":124792,"line_start":420,"line_end":420,"column_start":5,"column_end":11}},{"value":"/ let as_string = serde_json::to_string(&my_s)?;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":124797,"byte_end":124847,"line_start":421,"line_end":421,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(as_string, r#\"{\"time\":1526522699918355}\"#);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":124852,"byte_end":124910,"line_start":422,"line_end":422,"column_start":5,"column_end":63}},{"value":"/ # Ok::<(), serde_json::Error>(())","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":124915,"byte_end":124952,"line_start":423,"line_end":423,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":124957,"byte_end":124964,"line_start":424,"line_end":424,"column_start":5,"column_end":12}}]},{"kind":"Function","id":{"krate":0,"index":642},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":125804,"byte_end":125815,"line_start":451,"line_end":451,"column_start":12,"column_end":23},"name":"deserialize","qualname":"::datetime::serde::ts_microseconds::deserialize","value":"fn deserialize<'de, D>(D) -> Result<DateTime<Utc>, D::Error> where\nD: de::Deserializer","parent":null,"children":[],"decl_id":null,"docs":" Deserialize a `DateTime` from a microsecond timestamp","sig":null,"attributes":[{"value":"/ Deserialize a `DateTime` from a microsecond timestamp","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":125162,"byte_end":125219,"line_start":432,"line_end":432,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":125224,"byte_end":125227,"line_start":433,"line_end":433,"column_start":5,"column_end":8}},{"value":"/ Intended for use with `serde`s `deserialize_with` attribute.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":125232,"byte_end":125296,"line_start":434,"line_end":434,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":125301,"byte_end":125304,"line_start":435,"line_end":435,"column_start":5,"column_end":8}},{"value":"/ # Example:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":125309,"byte_end":125323,"line_start":436,"line_end":436,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":125328,"byte_end":125331,"line_start":437,"line_end":437,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":125336,"byte_end":125347,"line_start":438,"line_end":438,"column_start":5,"column_end":16}},{"value":"/ # use chrono::{DateTime, Utc};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":125352,"byte_end":125386,"line_start":439,"line_end":439,"column_start":5,"column_end":39}},{"value":"/ # use serde_derive::Deserialize;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":125391,"byte_end":125427,"line_start":440,"line_end":440,"column_start":5,"column_end":41}},{"value":"/ use chrono::serde::ts_microseconds::deserialize as from_micro_ts;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":125432,"byte_end":125501,"line_start":441,"line_end":441,"column_start":5,"column_end":74}},{"value":"/ #[derive(Deserialize)]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":125506,"byte_end":125532,"line_start":442,"line_end":442,"column_start":5,"column_end":31}},{"value":"/ struct S {","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":125537,"byte_end":125551,"line_start":443,"line_end":443,"column_start":5,"column_end":19}},{"value":"/     #[serde(deserialize_with = \"from_micro_ts\")]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":125556,"byte_end":125608,"line_start":444,"line_end":444,"column_start":5,"column_end":57}},{"value":"/     time: DateTime<Utc>","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":125613,"byte_end":125640,"line_start":445,"line_end":445,"column_start":5,"column_end":32}},{"value":"/ }","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":125645,"byte_end":125650,"line_start":446,"line_end":446,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":125655,"byte_end":125658,"line_start":447,"line_end":447,"column_start":5,"column_end":8}},{"value":"/ let my_s: S = serde_json::from_str(r#\"{ \"time\": 1526522699918355 }\"#)?;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":125663,"byte_end":125738,"line_start":448,"line_end":448,"column_start":5,"column_end":80}},{"value":"/ # Ok::<(), serde_json::Error>(())","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":125743,"byte_end":125780,"line_start":449,"line_end":449,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":125785,"byte_end":125792,"line_start":450,"line_end":450,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":648},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":126092,"byte_end":126101,"line_start":461,"line_end":461,"column_start":12,"column_end":21},"name":"expecting","qualname":"<MicroSecondsTimestampVisitor as serde::de::Visitor>::expecting","value":"fn expecting(&Self, &mut fmt::Formatter) -> fmt::Result","parent":{"krate":16,"index":1663},"children":[],"decl_id":{"krate":16,"index":1666},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":649},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":126316,"byte_end":126325,"line_start":466,"line_end":466,"column_start":12,"column_end":21},"name":"visit_i64","qualname":"<MicroSecondsTimestampVisitor as serde::de::Visitor>::visit_i64","value":"fn visit_i64<E>(Self, i64) -> Result<Self::Value, E> where E: de::Error","parent":{"krate":16,"index":1663},"children":[],"decl_id":{"krate":16,"index":1675},"docs":" Deserialize a timestamp in milliseconds since the epoch\n","sig":null,"attributes":[{"value":"/ Deserialize a timestamp in milliseconds since the epoch","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":126245,"byte_end":126304,"line_start":465,"line_end":465,"column_start":9,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":651},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":126667,"byte_end":126676,"line_start":477,"line_end":477,"column_start":12,"column_end":21},"name":"visit_u64","qualname":"<MicroSecondsTimestampVisitor as serde::de::Visitor>::visit_u64","value":"fn visit_u64<E>(Self, u64) -> Result<Self::Value, E> where E: de::Error","parent":{"krate":16,"index":1663},"children":[],"decl_id":{"krate":16,"index":1683},"docs":" Deserialize a timestamp in milliseconds since the epoch\n","sig":null,"attributes":[{"value":"/ Deserialize a timestamp in milliseconds since the epoch","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":126596,"byte_end":126655,"line_start":476,"line_end":476,"column_start":9,"column_end":68}}]},{"kind":"Mod","id":{"krate":0,"index":653},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":127780,"byte_end":127802,"line_start":516,"line_end":516,"column_start":9,"column_end":31},"name":"ts_microseconds_option","qualname":"::datetime::serde::ts_microseconds_option","value":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","parent":null,"children":[{"krate":0,"index":654},{"krate":0,"index":657},{"krate":0,"index":658},{"krate":0,"index":661},{"krate":0,"index":664},{"krate":0,"index":665},{"krate":0,"index":667},{"krate":0,"index":668},{"krate":0,"index":671},{"krate":0,"index":672},{"krate":0,"index":674},{"krate":0,"index":676},{"krate":0,"index":679},{"krate":0,"index":681}],"decl_id":null,"docs":" Ser/de to/from optional timestamps in microseconds","sig":null,"attributes":[{"value":"/ Ser/de to/from optional timestamps in microseconds","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":126956,"byte_end":127010,"line_start":489,"line_end":489,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":127011,"byte_end":127014,"line_start":490,"line_end":490,"column_start":1,"column_end":4}},{"value":"/ Intended for use with `serde`'s `with` attribute.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":127015,"byte_end":127068,"line_start":491,"line_end":491,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":127069,"byte_end":127072,"line_start":492,"line_end":492,"column_start":1,"column_end":4}},{"value":"/ # Example:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":127073,"byte_end":127087,"line_start":493,"line_end":493,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":127088,"byte_end":127091,"line_start":494,"line_end":494,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":127092,"byte_end":127103,"line_start":495,"line_end":495,"column_start":1,"column_end":12}},{"value":"/ # use chrono::{TimeZone, DateTime, Utc};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":127104,"byte_end":127148,"line_start":496,"line_end":496,"column_start":1,"column_end":45}},{"value":"/ # use serde_derive::{Deserialize, Serialize};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":127149,"byte_end":127198,"line_start":497,"line_end":497,"column_start":1,"column_end":50}},{"value":"/ use chrono::serde::ts_microseconds_option;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":127199,"byte_end":127245,"line_start":498,"line_end":498,"column_start":1,"column_end":47}},{"value":"/ #[derive(Deserialize, Serialize)]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":127246,"byte_end":127283,"line_start":499,"line_end":499,"column_start":1,"column_end":38}},{"value":"/ struct S {","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":127284,"byte_end":127298,"line_start":500,"line_end":500,"column_start":1,"column_end":15}},{"value":"/     #[serde(with = \"ts_microseconds_option\")]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":127299,"byte_end":127348,"line_start":501,"line_end":501,"column_start":1,"column_end":50}},{"value":"/     time: Option<DateTime<Utc>>","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":127349,"byte_end":127384,"line_start":502,"line_end":502,"column_start":1,"column_end":36}},{"value":"/ }","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":127385,"byte_end":127390,"line_start":503,"line_end":503,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":127391,"byte_end":127394,"line_start":504,"line_end":504,"column_start":1,"column_end":4}},{"value":"/ let time = Some(Utc.ymd(2018, 5, 17).and_hms_micro(02, 04, 59, 918355));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":127395,"byte_end":127471,"line_start":505,"line_end":505,"column_start":1,"column_end":77}},{"value":"/ let my_s = S {","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":127472,"byte_end":127490,"line_start":506,"line_end":506,"column_start":1,"column_end":19}},{"value":"/     time: time.clone(),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":127491,"byte_end":127518,"line_start":507,"line_end":507,"column_start":1,"column_end":28}},{"value":"/ };","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":127519,"byte_end":127525,"line_start":508,"line_end":508,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":127526,"byte_end":127529,"line_start":509,"line_end":509,"column_start":1,"column_end":4}},{"value":"/ let as_string = serde_json::to_string(&my_s)?;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":127530,"byte_end":127580,"line_start":510,"line_end":510,"column_start":1,"column_end":51}},{"value":"/ assert_eq!(as_string, r#\"{\"time\":1526522699918355}\"#);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":127581,"byte_end":127639,"line_start":511,"line_end":511,"column_start":1,"column_end":59}},{"value":"/ let my_s: S = serde_json::from_str(&as_string)?;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":127640,"byte_end":127692,"line_start":512,"line_end":512,"column_start":1,"column_end":53}},{"value":"/ assert_eq!(my_s.time, time);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":127693,"byte_end":127725,"line_start":513,"line_end":513,"column_start":1,"column_end":33}},{"value":"/ # Ok::<(), serde_json::Error>(())","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":127726,"byte_end":127763,"line_start":514,"line_end":514,"column_start":1,"column_end":38}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":127764,"byte_end":127771,"line_start":515,"line_end":515,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":674},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":128778,"byte_end":128787,"line_start":546,"line_end":546,"column_start":12,"column_end":21},"name":"serialize","qualname":"::datetime::serde::ts_microseconds_option::serialize","value":"fn serialize<S>(&Option<DateTime<Utc>>, S) -> Result<S::Ok, S::Error> where\nS: ser::Serializer","parent":null,"children":[],"decl_id":null,"docs":" Serialize a UTC datetime into an integer number of microseconds since the epoch or none","sig":null,"attributes":[{"value":"/ Serialize a UTC datetime into an integer number of microseconds since the epoch or none","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":127933,"byte_end":128024,"line_start":523,"line_end":523,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":128029,"byte_end":128032,"line_start":524,"line_end":524,"column_start":5,"column_end":8}},{"value":"/ Intended for use with `serde`s `serialize_with` attribute.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":128037,"byte_end":128099,"line_start":525,"line_end":525,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":128104,"byte_end":128107,"line_start":526,"line_end":526,"column_start":5,"column_end":8}},{"value":"/ # Example:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":128112,"byte_end":128126,"line_start":527,"line_end":527,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":128131,"byte_end":128134,"line_start":528,"line_end":528,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":128139,"byte_end":128150,"line_start":529,"line_end":529,"column_start":5,"column_end":16}},{"value":"/ # use chrono::{TimeZone, DateTime, Utc};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":128155,"byte_end":128199,"line_start":530,"line_end":530,"column_start":5,"column_end":49}},{"value":"/ # use serde_derive::Serialize;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":128204,"byte_end":128238,"line_start":531,"line_end":531,"column_start":5,"column_end":39}},{"value":"/ use chrono::serde::ts_microseconds_option::serialize as to_micro_tsopt;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":128243,"byte_end":128318,"line_start":532,"line_end":532,"column_start":5,"column_end":80}},{"value":"/ #[derive(Serialize)]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":128323,"byte_end":128347,"line_start":533,"line_end":533,"column_start":5,"column_end":29}},{"value":"/ struct S {","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":128352,"byte_end":128366,"line_start":534,"line_end":534,"column_start":5,"column_end":19}},{"value":"/     #[serde(serialize_with = \"to_micro_tsopt\")]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":128371,"byte_end":128422,"line_start":535,"line_end":535,"column_start":5,"column_end":56}},{"value":"/     time: Option<DateTime<Utc>>","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":128427,"byte_end":128462,"line_start":536,"line_end":536,"column_start":5,"column_end":40}},{"value":"/ }","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":128467,"byte_end":128472,"line_start":537,"line_end":537,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":128477,"byte_end":128480,"line_start":538,"line_end":538,"column_start":5,"column_end":8}},{"value":"/ let my_s = S {","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":128485,"byte_end":128503,"line_start":539,"line_end":539,"column_start":5,"column_end":23}},{"value":"/     time: Some(Utc.ymd(2018, 5, 17).and_hms_micro(02, 04, 59, 918355)),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":128508,"byte_end":128583,"line_start":540,"line_end":540,"column_start":5,"column_end":80}},{"value":"/ };","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":128588,"byte_end":128594,"line_start":541,"line_end":541,"column_start":5,"column_end":11}},{"value":"/ let as_string = serde_json::to_string(&my_s)?;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":128599,"byte_end":128649,"line_start":542,"line_end":542,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(as_string, r#\"{\"time\":1526522699918355}\"#);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":128654,"byte_end":128712,"line_start":543,"line_end":543,"column_start":5,"column_end":63}},{"value":"/ # Ok::<(), serde_json::Error>(())","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":128717,"byte_end":128754,"line_start":544,"line_end":544,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":128759,"byte_end":128766,"line_start":545,"line_end":545,"column_start":5,"column_end":12}}]},{"kind":"Function","id":{"krate":0,"index":676},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":129747,"byte_end":129758,"line_start":575,"line_end":575,"column_start":12,"column_end":23},"name":"deserialize","qualname":"::datetime::serde::ts_microseconds_option::deserialize","value":"fn deserialize<'de, D>(D) -> Result<Option<DateTime<Utc>>, D::Error> where\nD: de::Deserializer","parent":null,"children":[],"decl_id":null,"docs":" Deserialize a `DateTime` from a microsecond timestamp or none","sig":null,"attributes":[{"value":"/ Deserialize a `DateTime` from a microsecond timestamp or none","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":129076,"byte_end":129141,"line_start":556,"line_end":556,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":129146,"byte_end":129149,"line_start":557,"line_end":557,"column_start":5,"column_end":8}},{"value":"/ Intended for use with `serde`s `deserialize_with` attribute.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":129154,"byte_end":129218,"line_start":558,"line_end":558,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":129223,"byte_end":129226,"line_start":559,"line_end":559,"column_start":5,"column_end":8}},{"value":"/ # Example:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":129231,"byte_end":129245,"line_start":560,"line_end":560,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":129250,"byte_end":129253,"line_start":561,"line_end":561,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":129258,"byte_end":129269,"line_start":562,"line_end":562,"column_start":5,"column_end":16}},{"value":"/ # use chrono::{DateTime, Utc};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":129274,"byte_end":129308,"line_start":563,"line_end":563,"column_start":5,"column_end":39}},{"value":"/ # use serde_derive::Deserialize;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":129313,"byte_end":129349,"line_start":564,"line_end":564,"column_start":5,"column_end":41}},{"value":"/ use chrono::serde::ts_microseconds_option::deserialize as from_micro_tsopt;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":129354,"byte_end":129433,"line_start":565,"line_end":565,"column_start":5,"column_end":84}},{"value":"/ #[derive(Deserialize)]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":129438,"byte_end":129464,"line_start":566,"line_end":566,"column_start":5,"column_end":31}},{"value":"/ struct S {","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":129469,"byte_end":129483,"line_start":567,"line_end":567,"column_start":5,"column_end":19}},{"value":"/     #[serde(deserialize_with = \"from_micro_tsopt\")]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":129488,"byte_end":129543,"line_start":568,"line_end":568,"column_start":5,"column_end":60}},{"value":"/     time: Option<DateTime<Utc>>","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":129548,"byte_end":129583,"line_start":569,"line_end":569,"column_start":5,"column_end":40}},{"value":"/ }","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":129588,"byte_end":129593,"line_start":570,"line_end":570,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":129598,"byte_end":129601,"line_start":571,"line_end":571,"column_start":5,"column_end":8}},{"value":"/ let my_s: S = serde_json::from_str(r#\"{ \"time\": 1526522699918355 }\"#)?;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":129606,"byte_end":129681,"line_start":572,"line_end":572,"column_start":5,"column_end":80}},{"value":"/ # Ok::<(), serde_json::Error>(())","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":129686,"byte_end":129723,"line_start":573,"line_end":573,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":129728,"byte_end":129735,"line_start":574,"line_end":574,"column_start":5,"column_end":12}}]},{"kind":"Mod","id":{"krate":0,"index":691},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":131749,"byte_end":131764,"line_start":644,"line_end":644,"column_start":9,"column_end":24},"name":"ts_milliseconds","qualname":"::datetime::serde::ts_milliseconds","value":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","parent":null,"children":[{"krate":0,"index":692},{"krate":0,"index":695},{"krate":0,"index":696},{"krate":0,"index":699},{"krate":0,"index":702},{"krate":0,"index":703},{"krate":0,"index":706},{"krate":0,"index":707},{"krate":0,"index":709},{"krate":0,"index":712},{"krate":0,"index":713},{"krate":0,"index":716},{"krate":0,"index":717},{"krate":0,"index":719},{"krate":0,"index":721},{"krate":0,"index":725}],"decl_id":null,"docs":" Ser/de to/from timestamps in milliseconds","sig":null,"attributes":[{"value":"/ Ser/de to/from timestamps in milliseconds","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":130970,"byte_end":131015,"line_start":617,"line_end":617,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":131016,"byte_end":131019,"line_start":618,"line_end":618,"column_start":1,"column_end":4}},{"value":"/ Intended for use with `serde`s `with` attribute.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":131020,"byte_end":131072,"line_start":619,"line_end":619,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":131073,"byte_end":131076,"line_start":620,"line_end":620,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":131077,"byte_end":131090,"line_start":621,"line_end":621,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":131091,"byte_end":131094,"line_start":622,"line_end":622,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":131095,"byte_end":131106,"line_start":623,"line_end":623,"column_start":1,"column_end":12}},{"value":"/ # use chrono::{TimeZone, DateTime, Utc};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":131107,"byte_end":131151,"line_start":624,"line_end":624,"column_start":1,"column_end":45}},{"value":"/ # use serde_derive::{Deserialize, Serialize};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":131152,"byte_end":131201,"line_start":625,"line_end":625,"column_start":1,"column_end":50}},{"value":"/ use chrono::serde::ts_milliseconds;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":131202,"byte_end":131241,"line_start":626,"line_end":626,"column_start":1,"column_end":40}},{"value":"/ #[derive(Deserialize, Serialize)]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":131242,"byte_end":131279,"line_start":627,"line_end":627,"column_start":1,"column_end":38}},{"value":"/ struct S {","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":131280,"byte_end":131294,"line_start":628,"line_end":628,"column_start":1,"column_end":15}},{"value":"/     #[serde(with = \"ts_milliseconds\")]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":131295,"byte_end":131337,"line_start":629,"line_end":629,"column_start":1,"column_end":43}},{"value":"/     time: DateTime<Utc>","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":131338,"byte_end":131365,"line_start":630,"line_end":630,"column_start":1,"column_end":28}},{"value":"/ }","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":131366,"byte_end":131371,"line_start":631,"line_end":631,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":131372,"byte_end":131375,"line_start":632,"line_end":632,"column_start":1,"column_end":4}},{"value":"/ let time = Utc.ymd(2018, 5, 17).and_hms_milli(02, 04, 59, 918);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":131376,"byte_end":131443,"line_start":633,"line_end":633,"column_start":1,"column_end":68}},{"value":"/ let my_s = S {","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":131444,"byte_end":131462,"line_start":634,"line_end":634,"column_start":1,"column_end":19}},{"value":"/     time: time.clone(),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":131463,"byte_end":131490,"line_start":635,"line_end":635,"column_start":1,"column_end":28}},{"value":"/ };","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":131491,"byte_end":131497,"line_start":636,"line_end":636,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":131498,"byte_end":131501,"line_start":637,"line_end":637,"column_start":1,"column_end":4}},{"value":"/ let as_string = serde_json::to_string(&my_s)?;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":131502,"byte_end":131552,"line_start":638,"line_end":638,"column_start":1,"column_end":51}},{"value":"/ assert_eq!(as_string, r#\"{\"time\":1526522699918}\"#);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":131553,"byte_end":131608,"line_start":639,"line_end":639,"column_start":1,"column_end":56}},{"value":"/ let my_s: S = serde_json::from_str(&as_string)?;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":131609,"byte_end":131661,"line_start":640,"line_end":640,"column_start":1,"column_end":53}},{"value":"/ assert_eq!(my_s.time, time);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":131662,"byte_end":131694,"line_start":641,"line_end":641,"column_start":1,"column_end":33}},{"value":"/ # Ok::<(), serde_json::Error>(())","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":131695,"byte_end":131732,"line_start":642,"line_end":642,"column_start":1,"column_end":38}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":131733,"byte_end":131740,"line_start":643,"line_end":643,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":719},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":132746,"byte_end":132755,"line_start":675,"line_end":675,"column_start":12,"column_end":21},"name":"serialize","qualname":"::datetime::serde::ts_milliseconds::serialize","value":"fn serialize<S>(&DateTime<Utc>, S) -> Result<S::Ok, S::Error> where\nS: ser::Serializer","parent":null,"children":[],"decl_id":null,"docs":" Serialize a UTC datetime into an integer number of milliseconds since the epoch","sig":null,"attributes":[{"value":"/ Serialize a UTC datetime into an integer number of milliseconds since the epoch","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":131942,"byte_end":132025,"line_start":652,"line_end":652,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":132030,"byte_end":132033,"line_start":653,"line_end":653,"column_start":5,"column_end":8}},{"value":"/ Intended for use with `serde`s `serialize_with` attribute.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":132038,"byte_end":132100,"line_start":654,"line_end":654,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":132105,"byte_end":132108,"line_start":655,"line_end":655,"column_start":5,"column_end":8}},{"value":"/ # Example:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":132113,"byte_end":132127,"line_start":656,"line_end":656,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":132132,"byte_end":132135,"line_start":657,"line_end":657,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":132140,"byte_end":132151,"line_start":658,"line_end":658,"column_start":5,"column_end":16}},{"value":"/ # use chrono::{TimeZone, DateTime, Utc};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":132156,"byte_end":132200,"line_start":659,"line_end":659,"column_start":5,"column_end":49}},{"value":"/ # use serde_derive::Serialize;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":132205,"byte_end":132239,"line_start":660,"line_end":660,"column_start":5,"column_end":39}},{"value":"/ use chrono::serde::ts_milliseconds::serialize as to_milli_ts;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":132244,"byte_end":132309,"line_start":661,"line_end":661,"column_start":5,"column_end":70}},{"value":"/ #[derive(Serialize)]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":132314,"byte_end":132338,"line_start":662,"line_end":662,"column_start":5,"column_end":29}},{"value":"/ struct S {","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":132343,"byte_end":132357,"line_start":663,"line_end":663,"column_start":5,"column_end":19}},{"value":"/     #[serde(serialize_with = \"to_milli_ts\")]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":132362,"byte_end":132410,"line_start":664,"line_end":664,"column_start":5,"column_end":53}},{"value":"/     time: DateTime<Utc>","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":132415,"byte_end":132442,"line_start":665,"line_end":665,"column_start":5,"column_end":32}},{"value":"/ }","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":132447,"byte_end":132452,"line_start":666,"line_end":666,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":132457,"byte_end":132460,"line_start":667,"line_end":667,"column_start":5,"column_end":8}},{"value":"/ let my_s = S {","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":132465,"byte_end":132483,"line_start":668,"line_end":668,"column_start":5,"column_end":23}},{"value":"/     time: Utc.ymd(2018, 5, 17).and_hms_milli(02, 04, 59, 918),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":132488,"byte_end":132554,"line_start":669,"line_end":669,"column_start":5,"column_end":71}},{"value":"/ };","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":132559,"byte_end":132565,"line_start":670,"line_end":670,"column_start":5,"column_end":11}},{"value":"/ let as_string = serde_json::to_string(&my_s)?;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":132570,"byte_end":132620,"line_start":671,"line_end":671,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(as_string, r#\"{\"time\":1526522699918}\"#);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":132625,"byte_end":132680,"line_start":672,"line_end":672,"column_start":5,"column_end":60}},{"value":"/ # Ok::<(), serde_json::Error>(())","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":132685,"byte_end":132722,"line_start":673,"line_end":673,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":132727,"byte_end":132734,"line_start":674,"line_end":674,"column_start":5,"column_end":12}}]},{"kind":"Function","id":{"krate":0,"index":721},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":133571,"byte_end":133582,"line_start":701,"line_end":701,"column_start":12,"column_end":23},"name":"deserialize","qualname":"::datetime::serde::ts_milliseconds::deserialize","value":"fn deserialize<'de, D>(D) -> Result<DateTime<Utc>, D::Error> where\nD: de::Deserializer","parent":null,"children":[],"decl_id":null,"docs":" Deserialize a `DateTime` from a millisecond timestamp","sig":null,"attributes":[{"value":"/ Deserialize a `DateTime` from a millisecond timestamp","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":132932,"byte_end":132989,"line_start":682,"line_end":682,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":132994,"byte_end":132997,"line_start":683,"line_end":683,"column_start":5,"column_end":8}},{"value":"/ Intended for use with `serde`s `deserialize_with` attribute.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":133002,"byte_end":133066,"line_start":684,"line_end":684,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":133071,"byte_end":133074,"line_start":685,"line_end":685,"column_start":5,"column_end":8}},{"value":"/ # Example:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":133079,"byte_end":133093,"line_start":686,"line_end":686,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":133098,"byte_end":133101,"line_start":687,"line_end":687,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":133106,"byte_end":133117,"line_start":688,"line_end":688,"column_start":5,"column_end":16}},{"value":"/ # use chrono::{DateTime, Utc};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":133122,"byte_end":133156,"line_start":689,"line_end":689,"column_start":5,"column_end":39}},{"value":"/ # use serde_derive::Deserialize;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":133161,"byte_end":133197,"line_start":690,"line_end":690,"column_start":5,"column_end":41}},{"value":"/ use chrono::serde::ts_milliseconds::deserialize as from_milli_ts;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":133202,"byte_end":133271,"line_start":691,"line_end":691,"column_start":5,"column_end":74}},{"value":"/ #[derive(Deserialize)]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":133276,"byte_end":133302,"line_start":692,"line_end":692,"column_start":5,"column_end":31}},{"value":"/ struct S {","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":133307,"byte_end":133321,"line_start":693,"line_end":693,"column_start":5,"column_end":19}},{"value":"/     #[serde(deserialize_with = \"from_milli_ts\")]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":133326,"byte_end":133378,"line_start":694,"line_end":694,"column_start":5,"column_end":57}},{"value":"/     time: DateTime<Utc>","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":133383,"byte_end":133410,"line_start":695,"line_end":695,"column_start":5,"column_end":32}},{"value":"/ }","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":133415,"byte_end":133420,"line_start":696,"line_end":696,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":133425,"byte_end":133428,"line_start":697,"line_end":697,"column_start":5,"column_end":8}},{"value":"/ let my_s: S = serde_json::from_str(r#\"{ \"time\": 1526522699918 }\"#)?;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":133433,"byte_end":133505,"line_start":698,"line_end":698,"column_start":5,"column_end":77}},{"value":"/ # Ok::<(), serde_json::Error>(())","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":133510,"byte_end":133547,"line_start":699,"line_end":699,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":133552,"byte_end":133559,"line_start":700,"line_end":700,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":728},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":133892,"byte_end":133901,"line_start":711,"line_end":711,"column_start":12,"column_end":21},"name":"expecting","qualname":"<MilliSecondsTimestampVisitor as serde::de::Visitor>::expecting","value":"fn expecting(&Self, &mut fmt::Formatter) -> fmt::Result","parent":{"krate":16,"index":1663},"children":[],"decl_id":{"krate":16,"index":1666},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":729},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":134116,"byte_end":134125,"line_start":716,"line_end":716,"column_start":12,"column_end":21},"name":"visit_i64","qualname":"<MilliSecondsTimestampVisitor as serde::de::Visitor>::visit_i64","value":"fn visit_i64<E>(Self, i64) -> Result<Self::Value, E> where E: de::Error","parent":{"krate":16,"index":1663},"children":[],"decl_id":{"krate":16,"index":1675},"docs":" Deserialize a timestamp in milliseconds since the epoch\n","sig":null,"attributes":[{"value":"/ Deserialize a timestamp in milliseconds since the epoch","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":134045,"byte_end":134104,"line_start":715,"line_end":715,"column_start":9,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":731},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":134414,"byte_end":134423,"line_start":724,"line_end":724,"column_start":12,"column_end":21},"name":"visit_u64","qualname":"<MilliSecondsTimestampVisitor as serde::de::Visitor>::visit_u64","value":"fn visit_u64<E>(Self, u64) -> Result<Self::Value, E> where E: de::Error","parent":{"krate":16,"index":1663},"children":[],"decl_id":{"krate":16,"index":1683},"docs":" Deserialize a timestamp in milliseconds since the epoch\n","sig":null,"attributes":[{"value":"/ Deserialize a timestamp in milliseconds since the epoch","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":134343,"byte_end":134402,"line_start":723,"line_end":723,"column_start":9,"column_end":68}}]},{"kind":"Mod","id":{"krate":0,"index":733},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":135513,"byte_end":135535,"line_start":763,"line_end":763,"column_start":9,"column_end":31},"name":"ts_milliseconds_option","qualname":"::datetime::serde::ts_milliseconds_option","value":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","parent":null,"children":[{"krate":0,"index":734},{"krate":0,"index":737},{"krate":0,"index":738},{"krate":0,"index":741},{"krate":0,"index":744},{"krate":0,"index":745},{"krate":0,"index":747},{"krate":0,"index":748},{"krate":0,"index":751},{"krate":0,"index":752},{"krate":0,"index":754},{"krate":0,"index":756},{"krate":0,"index":761},{"krate":0,"index":763}],"decl_id":null,"docs":" Ser/de to/from optional timestamps in milliseconds","sig":null,"attributes":[{"value":"/ Ser/de to/from optional timestamps in milliseconds","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":134697,"byte_end":134751,"line_start":736,"line_end":736,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":134752,"byte_end":134755,"line_start":737,"line_end":737,"column_start":1,"column_end":4}},{"value":"/ Intended for use with `serde`s `with` attribute.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":134756,"byte_end":134808,"line_start":738,"line_end":738,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":134809,"byte_end":134812,"line_start":739,"line_end":739,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":134813,"byte_end":134826,"line_start":740,"line_end":740,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":134827,"byte_end":134830,"line_start":741,"line_end":741,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":134831,"byte_end":134842,"line_start":742,"line_end":742,"column_start":1,"column_end":12}},{"value":"/ # use chrono::{TimeZone, DateTime, Utc};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":134843,"byte_end":134887,"line_start":743,"line_end":743,"column_start":1,"column_end":45}},{"value":"/ # use serde_derive::{Deserialize, Serialize};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":134888,"byte_end":134937,"line_start":744,"line_end":744,"column_start":1,"column_end":50}},{"value":"/ use chrono::serde::ts_milliseconds_option;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":134938,"byte_end":134984,"line_start":745,"line_end":745,"column_start":1,"column_end":47}},{"value":"/ #[derive(Deserialize, Serialize)]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":134985,"byte_end":135022,"line_start":746,"line_end":746,"column_start":1,"column_end":38}},{"value":"/ struct S {","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":135023,"byte_end":135037,"line_start":747,"line_end":747,"column_start":1,"column_end":15}},{"value":"/     #[serde(with = \"ts_milliseconds_option\")]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":135038,"byte_end":135087,"line_start":748,"line_end":748,"column_start":1,"column_end":50}},{"value":"/     time: Option<DateTime<Utc>>","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":135088,"byte_end":135123,"line_start":749,"line_end":749,"column_start":1,"column_end":36}},{"value":"/ }","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":135124,"byte_end":135129,"line_start":750,"line_end":750,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":135130,"byte_end":135133,"line_start":751,"line_end":751,"column_start":1,"column_end":4}},{"value":"/ let time = Some(Utc.ymd(2018, 5, 17).and_hms_milli(02, 04, 59, 918));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":135134,"byte_end":135207,"line_start":752,"line_end":752,"column_start":1,"column_end":74}},{"value":"/ let my_s = S {","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":135208,"byte_end":135226,"line_start":753,"line_end":753,"column_start":1,"column_end":19}},{"value":"/     time: time.clone(),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":135227,"byte_end":135254,"line_start":754,"line_end":754,"column_start":1,"column_end":28}},{"value":"/ };","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":135255,"byte_end":135261,"line_start":755,"line_end":755,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":135262,"byte_end":135265,"line_start":756,"line_end":756,"column_start":1,"column_end":4}},{"value":"/ let as_string = serde_json::to_string(&my_s)?;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":135266,"byte_end":135316,"line_start":757,"line_end":757,"column_start":1,"column_end":51}},{"value":"/ assert_eq!(as_string, r#\"{\"time\":1526522699918}\"#);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":135317,"byte_end":135372,"line_start":758,"line_end":758,"column_start":1,"column_end":56}},{"value":"/ let my_s: S = serde_json::from_str(&as_string)?;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":135373,"byte_end":135425,"line_start":759,"line_end":759,"column_start":1,"column_end":53}},{"value":"/ assert_eq!(my_s.time, time);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":135426,"byte_end":135458,"line_start":760,"line_end":760,"column_start":1,"column_end":33}},{"value":"/ # Ok::<(), serde_json::Error>(())","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":135459,"byte_end":135496,"line_start":761,"line_end":761,"column_start":1,"column_end":38}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":135497,"byte_end":135504,"line_start":762,"line_end":762,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":754},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":136505,"byte_end":136514,"line_start":793,"line_end":793,"column_start":12,"column_end":21},"name":"serialize","qualname":"::datetime::serde::ts_milliseconds_option::serialize","value":"fn serialize<S>(&Option<DateTime<Utc>>, S) -> Result<S::Ok, S::Error> where\nS: ser::Serializer","parent":null,"children":[],"decl_id":null,"docs":" Serialize a UTC datetime into an integer number of milliseconds since the epoch or none","sig":null,"attributes":[{"value":"/ Serialize a UTC datetime into an integer number of milliseconds since the epoch or none","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":135666,"byte_end":135757,"line_start":770,"line_end":770,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":135762,"byte_end":135765,"line_start":771,"line_end":771,"column_start":5,"column_end":8}},{"value":"/ Intended for use with `serde`s `serialize_with` attribute.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":135770,"byte_end":135832,"line_start":772,"line_end":772,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":135837,"byte_end":135840,"line_start":773,"line_end":773,"column_start":5,"column_end":8}},{"value":"/ # Example:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":135845,"byte_end":135859,"line_start":774,"line_end":774,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":135864,"byte_end":135867,"line_start":775,"line_end":775,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":135872,"byte_end":135883,"line_start":776,"line_end":776,"column_start":5,"column_end":16}},{"value":"/ # use chrono::{TimeZone, DateTime, Utc};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":135888,"byte_end":135932,"line_start":777,"line_end":777,"column_start":5,"column_end":49}},{"value":"/ # use serde_derive::Serialize;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":135937,"byte_end":135971,"line_start":778,"line_end":778,"column_start":5,"column_end":39}},{"value":"/ use chrono::serde::ts_milliseconds_option::serialize as to_milli_tsopt;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":135976,"byte_end":136051,"line_start":779,"line_end":779,"column_start":5,"column_end":80}},{"value":"/ #[derive(Serialize)]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":136056,"byte_end":136080,"line_start":780,"line_end":780,"column_start":5,"column_end":29}},{"value":"/ struct S {","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":136085,"byte_end":136099,"line_start":781,"line_end":781,"column_start":5,"column_end":19}},{"value":"/     #[serde(serialize_with = \"to_milli_tsopt\")]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":136104,"byte_end":136155,"line_start":782,"line_end":782,"column_start":5,"column_end":56}},{"value":"/     time: Option<DateTime<Utc>>","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":136160,"byte_end":136195,"line_start":783,"line_end":783,"column_start":5,"column_end":40}},{"value":"/ }","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":136200,"byte_end":136205,"line_start":784,"line_end":784,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":136210,"byte_end":136213,"line_start":785,"line_end":785,"column_start":5,"column_end":8}},{"value":"/ let my_s = S {","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":136218,"byte_end":136236,"line_start":786,"line_end":786,"column_start":5,"column_end":23}},{"value":"/     time: Some(Utc.ymd(2018, 5, 17).and_hms_milli(02, 04, 59, 918)),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":136241,"byte_end":136313,"line_start":787,"line_end":787,"column_start":5,"column_end":77}},{"value":"/ };","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":136318,"byte_end":136324,"line_start":788,"line_end":788,"column_start":5,"column_end":11}},{"value":"/ let as_string = serde_json::to_string(&my_s)?;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":136329,"byte_end":136379,"line_start":789,"line_end":789,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(as_string, r#\"{\"time\":1526522699918}\"#);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":136384,"byte_end":136439,"line_start":790,"line_end":790,"column_start":5,"column_end":60}},{"value":"/ # Ok::<(), serde_json::Error>(())","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":136444,"byte_end":136481,"line_start":791,"line_end":791,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":136486,"byte_end":136493,"line_start":792,"line_end":792,"column_start":5,"column_end":12}}]},{"kind":"Function","id":{"krate":0,"index":756},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":137955,"byte_end":137966,"line_start":834,"line_end":834,"column_start":12,"column_end":23},"name":"deserialize","qualname":"::datetime::serde::ts_milliseconds_option::deserialize","value":"fn deserialize<'de, D>(D) -> Result<Option<DateTime<Utc>>, D::Error> where\nD: de::Deserializer","parent":null,"children":[],"decl_id":null,"docs":" Deserialize a `DateTime` from a millisecond timestamp or none","sig":null,"attributes":[{"value":"/ Deserialize a `DateTime` from a millisecond timestamp or none","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":136803,"byte_end":136868,"line_start":803,"line_end":803,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":136873,"byte_end":136876,"line_start":804,"line_end":804,"column_start":5,"column_end":8}},{"value":"/ Intended for use with `serde`s `deserialize_with` attribute.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":136881,"byte_end":136945,"line_start":805,"line_end":805,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":136950,"byte_end":136953,"line_start":806,"line_end":806,"column_start":5,"column_end":8}},{"value":"/ # Example:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":136958,"byte_end":136972,"line_start":807,"line_end":807,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":136977,"byte_end":136980,"line_start":808,"line_end":808,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":136985,"byte_end":136996,"line_start":809,"line_end":809,"column_start":5,"column_end":16}},{"value":"/ # use chrono::{TimeZone, DateTime, Utc};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":137001,"byte_end":137045,"line_start":810,"line_end":810,"column_start":5,"column_end":49}},{"value":"/ # use serde_derive::Deserialize;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":137050,"byte_end":137086,"line_start":811,"line_end":811,"column_start":5,"column_end":41}},{"value":"/ use chrono::serde::ts_milliseconds_option::deserialize as from_milli_tsopt;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":137091,"byte_end":137170,"line_start":812,"line_end":812,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":137175,"byte_end":137178,"line_start":813,"line_end":813,"column_start":5,"column_end":8}},{"value":"/ #[derive(Deserialize, PartialEq, Debug)]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":137183,"byte_end":137227,"line_start":814,"line_end":814,"column_start":5,"column_end":49}},{"value":"/ #[serde(untagged)]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":137232,"byte_end":137254,"line_start":815,"line_end":815,"column_start":5,"column_end":27}},{"value":"/ enum E<T> {","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":137259,"byte_end":137274,"line_start":816,"line_end":816,"column_start":5,"column_end":20}},{"value":"/     V(T),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":137279,"byte_end":137292,"line_start":817,"line_end":817,"column_start":5,"column_end":18}},{"value":"/ }","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":137297,"byte_end":137302,"line_start":818,"line_end":818,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":137307,"byte_end":137310,"line_start":819,"line_end":819,"column_start":5,"column_end":8}},{"value":"/ #[derive(Deserialize, PartialEq, Debug)]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":137315,"byte_end":137359,"line_start":820,"line_end":820,"column_start":5,"column_end":49}},{"value":"/ struct S {","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":137364,"byte_end":137378,"line_start":821,"line_end":821,"column_start":5,"column_end":19}},{"value":"/     #[serde(default, deserialize_with = \"from_milli_tsopt\")]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":137383,"byte_end":137447,"line_start":822,"line_end":822,"column_start":5,"column_end":69}},{"value":"/     time: Option<DateTime<Utc>>","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":137452,"byte_end":137487,"line_start":823,"line_end":823,"column_start":5,"column_end":40}},{"value":"/ }","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":137492,"byte_end":137497,"line_start":824,"line_end":824,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":137502,"byte_end":137505,"line_start":825,"line_end":825,"column_start":5,"column_end":8}},{"value":"/ let my_s: E<S> = serde_json::from_str(r#\"{ \"time\": 1526522699918 }\"#)?;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":137510,"byte_end":137585,"line_start":826,"line_end":826,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(my_s, E::V(S { time: Some(Utc.timestamp(1526522699, 918000000)) }));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":137590,"byte_end":137673,"line_start":827,"line_end":827,"column_start":5,"column_end":88}},{"value":"/ let s: E<S> = serde_json::from_str(r#\"{ \"time\": null }\"#)?;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":137678,"byte_end":137741,"line_start":828,"line_end":828,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(s, E::V(S { time: None }));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":137746,"byte_end":137788,"line_start":829,"line_end":829,"column_start":5,"column_end":47}},{"value":"/ let t: E<S> = serde_json::from_str(r#\"{}\"#)?;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":137793,"byte_end":137842,"line_start":830,"line_end":830,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(t, E::V(S { time: None }));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":137847,"byte_end":137889,"line_start":831,"line_end":831,"column_start":5,"column_end":47}},{"value":"/ # Ok::<(), serde_json::Error>(())","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":137894,"byte_end":137931,"line_start":832,"line_end":832,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":137936,"byte_end":137943,"line_start":833,"line_end":833,"column_start":5,"column_end":12}}]},{"kind":"Mod","id":{"krate":0,"index":773},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":139989,"byte_end":139999,"line_start":904,"line_end":904,"column_start":9,"column_end":19},"name":"ts_seconds","qualname":"::datetime::serde::ts_seconds","value":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","parent":null,"children":[{"krate":0,"index":774},{"krate":0,"index":777},{"krate":0,"index":778},{"krate":0,"index":781},{"krate":0,"index":784},{"krate":0,"index":785},{"krate":0,"index":788},{"krate":0,"index":789},{"krate":0,"index":791},{"krate":0,"index":794},{"krate":0,"index":795},{"krate":0,"index":798},{"krate":0,"index":799},{"krate":0,"index":801},{"krate":0,"index":803},{"krate":0,"index":806}],"decl_id":null,"docs":" Ser/de to/from timestamps in seconds","sig":null,"attributes":[{"value":"/ Ser/de to/from timestamps in seconds","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":139239,"byte_end":139279,"line_start":877,"line_end":877,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":139280,"byte_end":139283,"line_start":878,"line_end":878,"column_start":1,"column_end":4}},{"value":"/ Intended for use with `serde`'s `with` attribute.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":139284,"byte_end":139337,"line_start":879,"line_end":879,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":139338,"byte_end":139341,"line_start":880,"line_end":880,"column_start":1,"column_end":4}},{"value":"/ # Example:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":139342,"byte_end":139356,"line_start":881,"line_end":881,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":139357,"byte_end":139360,"line_start":882,"line_end":882,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":139361,"byte_end":139372,"line_start":883,"line_end":883,"column_start":1,"column_end":12}},{"value":"/ # use chrono::{TimeZone, DateTime, Utc};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":139373,"byte_end":139417,"line_start":884,"line_end":884,"column_start":1,"column_end":45}},{"value":"/ # use serde_derive::{Deserialize, Serialize};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":139418,"byte_end":139467,"line_start":885,"line_end":885,"column_start":1,"column_end":50}},{"value":"/ use chrono::serde::ts_seconds;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":139468,"byte_end":139502,"line_start":886,"line_end":886,"column_start":1,"column_end":35}},{"value":"/ #[derive(Deserialize, Serialize)]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":139503,"byte_end":139540,"line_start":887,"line_end":887,"column_start":1,"column_end":38}},{"value":"/ struct S {","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":139541,"byte_end":139555,"line_start":888,"line_end":888,"column_start":1,"column_end":15}},{"value":"/     #[serde(with = \"ts_seconds\")]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":139556,"byte_end":139593,"line_start":889,"line_end":889,"column_start":1,"column_end":38}},{"value":"/     time: DateTime<Utc>","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":139594,"byte_end":139621,"line_start":890,"line_end":890,"column_start":1,"column_end":28}},{"value":"/ }","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":139622,"byte_end":139627,"line_start":891,"line_end":891,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":139628,"byte_end":139631,"line_start":892,"line_end":892,"column_start":1,"column_end":4}},{"value":"/ let time = Utc.ymd(2015, 5, 15).and_hms(10, 0, 0);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":139632,"byte_end":139686,"line_start":893,"line_end":893,"column_start":1,"column_end":55}},{"value":"/ let my_s = S {","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":139687,"byte_end":139705,"line_start":894,"line_end":894,"column_start":1,"column_end":19}},{"value":"/     time: time.clone(),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":139706,"byte_end":139733,"line_start":895,"line_end":895,"column_start":1,"column_end":28}},{"value":"/ };","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":139734,"byte_end":139740,"line_start":896,"line_end":896,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":139741,"byte_end":139744,"line_start":897,"line_end":897,"column_start":1,"column_end":4}},{"value":"/ let as_string = serde_json::to_string(&my_s)?;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":139745,"byte_end":139795,"line_start":898,"line_end":898,"column_start":1,"column_end":51}},{"value":"/ assert_eq!(as_string, r#\"{\"time\":1431684000}\"#);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":139796,"byte_end":139848,"line_start":899,"line_end":899,"column_start":1,"column_end":53}},{"value":"/ let my_s: S = serde_json::from_str(&as_string)?;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":139849,"byte_end":139901,"line_start":900,"line_end":900,"column_start":1,"column_end":53}},{"value":"/ assert_eq!(my_s.time, time);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":139902,"byte_end":139934,"line_start":901,"line_end":901,"column_start":1,"column_end":33}},{"value":"/ # Ok::<(), serde_json::Error>(())","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":139935,"byte_end":139972,"line_start":902,"line_end":902,"column_start":1,"column_end":38}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":139973,"byte_end":139980,"line_start":903,"line_end":903,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":801},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":140938,"byte_end":140947,"line_start":935,"line_end":935,"column_start":12,"column_end":21},"name":"serialize","qualname":"::datetime::serde::ts_seconds::serialize","value":"fn serialize<S>(&DateTime<Utc>, S) -> Result<S::Ok, S::Error> where\nS: ser::Serializer","parent":null,"children":[],"decl_id":null,"docs":" Serialize a UTC datetime into an integer number of seconds since the epoch","sig":null,"attributes":[{"value":"/ Serialize a UTC datetime into an integer number of seconds since the epoch","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":140172,"byte_end":140250,"line_start":912,"line_end":912,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":140255,"byte_end":140258,"line_start":913,"line_end":913,"column_start":5,"column_end":8}},{"value":"/ Intended for use with `serde`s `serialize_with` attribute.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":140263,"byte_end":140325,"line_start":914,"line_end":914,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":140330,"byte_end":140333,"line_start":915,"line_end":915,"column_start":5,"column_end":8}},{"value":"/ # Example:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":140338,"byte_end":140352,"line_start":916,"line_end":916,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":140357,"byte_end":140360,"line_start":917,"line_end":917,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":140365,"byte_end":140376,"line_start":918,"line_end":918,"column_start":5,"column_end":16}},{"value":"/ # use chrono::{TimeZone, DateTime, Utc};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":140381,"byte_end":140425,"line_start":919,"line_end":919,"column_start":5,"column_end":49}},{"value":"/ # use serde_derive::Serialize;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":140430,"byte_end":140464,"line_start":920,"line_end":920,"column_start":5,"column_end":39}},{"value":"/ use chrono::serde::ts_seconds::serialize as to_ts;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":140469,"byte_end":140523,"line_start":921,"line_end":921,"column_start":5,"column_end":59}},{"value":"/ #[derive(Serialize)]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":140528,"byte_end":140552,"line_start":922,"line_end":922,"column_start":5,"column_end":29}},{"value":"/ struct S {","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":140557,"byte_end":140571,"line_start":923,"line_end":923,"column_start":5,"column_end":19}},{"value":"/     #[serde(serialize_with = \"to_ts\")]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":140576,"byte_end":140618,"line_start":924,"line_end":924,"column_start":5,"column_end":47}},{"value":"/     time: DateTime<Utc>","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":140623,"byte_end":140650,"line_start":925,"line_end":925,"column_start":5,"column_end":32}},{"value":"/ }","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":140655,"byte_end":140660,"line_start":926,"line_end":926,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":140665,"byte_end":140668,"line_start":927,"line_end":927,"column_start":5,"column_end":8}},{"value":"/ let my_s = S {","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":140673,"byte_end":140691,"line_start":928,"line_end":928,"column_start":5,"column_end":23}},{"value":"/     time: Utc.ymd(2015, 5, 15).and_hms(10, 0, 0),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":140696,"byte_end":140749,"line_start":929,"line_end":929,"column_start":5,"column_end":58}},{"value":"/ };","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":140754,"byte_end":140760,"line_start":930,"line_end":930,"column_start":5,"column_end":11}},{"value":"/ let as_string = serde_json::to_string(&my_s)?;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":140765,"byte_end":140815,"line_start":931,"line_end":931,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(as_string, r#\"{\"time\":1431684000}\"#);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":140820,"byte_end":140872,"line_start":932,"line_end":932,"column_start":5,"column_end":57}},{"value":"/ # Ok::<(), serde_json::Error>(())","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":140877,"byte_end":140914,"line_start":933,"line_end":933,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":140919,"byte_end":140926,"line_start":934,"line_end":934,"column_start":5,"column_end":12}}]},{"kind":"Function","id":{"krate":0,"index":803},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":141732,"byte_end":141743,"line_start":961,"line_end":961,"column_start":12,"column_end":23},"name":"deserialize","qualname":"::datetime::serde::ts_seconds::deserialize","value":"fn deserialize<'de, D>(D) -> Result<DateTime<Utc>, D::Error> where\nD: de::Deserializer","parent":null,"children":[],"decl_id":null,"docs":" Deserialize a `DateTime` from a seconds timestamp","sig":null,"attributes":[{"value":"/ Deserialize a `DateTime` from a seconds timestamp","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":141117,"byte_end":141170,"line_start":942,"line_end":942,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":141175,"byte_end":141178,"line_start":943,"line_end":943,"column_start":5,"column_end":8}},{"value":"/ Intended for use with `serde`s `deserialize_with` attribute.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":141183,"byte_end":141247,"line_start":944,"line_end":944,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":141252,"byte_end":141255,"line_start":945,"line_end":945,"column_start":5,"column_end":8}},{"value":"/ # Example:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":141260,"byte_end":141274,"line_start":946,"line_end":946,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":141279,"byte_end":141282,"line_start":947,"line_end":947,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":141287,"byte_end":141298,"line_start":948,"line_end":948,"column_start":5,"column_end":16}},{"value":"/ # use chrono::{DateTime, Utc};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":141303,"byte_end":141337,"line_start":949,"line_end":949,"column_start":5,"column_end":39}},{"value":"/ # use serde_derive::Deserialize;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":141342,"byte_end":141378,"line_start":950,"line_end":950,"column_start":5,"column_end":41}},{"value":"/ use chrono::serde::ts_seconds::deserialize as from_ts;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":141383,"byte_end":141441,"line_start":951,"line_end":951,"column_start":5,"column_end":63}},{"value":"/ #[derive(Deserialize)]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":141446,"byte_end":141472,"line_start":952,"line_end":952,"column_start":5,"column_end":31}},{"value":"/ struct S {","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":141477,"byte_end":141491,"line_start":953,"line_end":953,"column_start":5,"column_end":19}},{"value":"/     #[serde(deserialize_with = \"from_ts\")]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":141496,"byte_end":141542,"line_start":954,"line_end":954,"column_start":5,"column_end":51}},{"value":"/     time: DateTime<Utc>","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":141547,"byte_end":141574,"line_start":955,"line_end":955,"column_start":5,"column_end":32}},{"value":"/ }","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":141579,"byte_end":141584,"line_start":956,"line_end":956,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":141589,"byte_end":141592,"line_start":957,"line_end":957,"column_start":5,"column_end":8}},{"value":"/ let my_s: S = serde_json::from_str(r#\"{ \"time\": 1431684000 }\"#)?;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":141597,"byte_end":141666,"line_start":958,"line_end":958,"column_start":5,"column_end":74}},{"value":"/ # Ok::<(), serde_json::Error>(())","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":141671,"byte_end":141708,"line_start":959,"line_end":959,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":141713,"byte_end":141720,"line_start":960,"line_end":960,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":809},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":142010,"byte_end":142019,"line_start":971,"line_end":971,"column_start":12,"column_end":21},"name":"expecting","qualname":"<SecondsTimestampVisitor as serde::de::Visitor>::expecting","value":"fn expecting(&Self, &mut fmt::Formatter) -> fmt::Result","parent":{"krate":16,"index":1663},"children":[],"decl_id":{"krate":16,"index":1666},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":810},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":142224,"byte_end":142233,"line_start":976,"line_end":976,"column_start":12,"column_end":21},"name":"visit_i64","qualname":"<SecondsTimestampVisitor as serde::de::Visitor>::visit_i64","value":"fn visit_i64<E>(Self, i64) -> Result<Self::Value, E> where E: de::Error","parent":{"krate":16,"index":1663},"children":[],"decl_id":{"krate":16,"index":1675},"docs":" Deserialize a timestamp in seconds since the epoch\n","sig":null,"attributes":[{"value":"/ Deserialize a timestamp in seconds since the epoch","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":142158,"byte_end":142212,"line_start":975,"line_end":975,"column_start":9,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":812},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":142476,"byte_end":142485,"line_start":984,"line_end":984,"column_start":12,"column_end":21},"name":"visit_u64","qualname":"<SecondsTimestampVisitor as serde::de::Visitor>::visit_u64","value":"fn visit_u64<E>(Self, u64) -> Result<Self::Value, E> where E: de::Error","parent":{"krate":16,"index":1663},"children":[],"decl_id":{"krate":16,"index":1683},"docs":" Deserialize a timestamp in seconds since the epoch\n","sig":null,"attributes":[{"value":"/ Deserialize a timestamp in seconds since the epoch","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":142410,"byte_end":142464,"line_start":983,"line_end":983,"column_start":9,"column_end":63}}]},{"kind":"Mod","id":{"krate":0,"index":814},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":143456,"byte_end":143473,"line_start":1020,"line_end":1020,"column_start":9,"column_end":26},"name":"ts_seconds_option","qualname":"::datetime::serde::ts_seconds_option","value":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","parent":null,"children":[{"krate":0,"index":815},{"krate":0,"index":818},{"krate":0,"index":819},{"krate":0,"index":822},{"krate":0,"index":825},{"krate":0,"index":826},{"krate":0,"index":828},{"krate":0,"index":829},{"krate":0,"index":832},{"krate":0,"index":833},{"krate":0,"index":835},{"krate":0,"index":837},{"krate":0,"index":840},{"krate":0,"index":842}],"decl_id":null,"docs":" Ser/de to/from optional timestamps in seconds","sig":null,"attributes":[{"value":"/ Ser/de to/from optional timestamps in seconds","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":142669,"byte_end":142718,"line_start":993,"line_end":993,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":142719,"byte_end":142722,"line_start":994,"line_end":994,"column_start":1,"column_end":4}},{"value":"/ Intended for use with `serde`'s `with` attribute.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":142723,"byte_end":142776,"line_start":995,"line_end":995,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":142777,"byte_end":142780,"line_start":996,"line_end":996,"column_start":1,"column_end":4}},{"value":"/ # Example:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":142781,"byte_end":142795,"line_start":997,"line_end":997,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":142796,"byte_end":142799,"line_start":998,"line_end":998,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":142800,"byte_end":142811,"line_start":999,"line_end":999,"column_start":1,"column_end":12}},{"value":"/ # use chrono::{TimeZone, DateTime, Utc};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":142812,"byte_end":142856,"line_start":1000,"line_end":1000,"column_start":1,"column_end":45}},{"value":"/ # use serde_derive::{Deserialize, Serialize};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":142857,"byte_end":142906,"line_start":1001,"line_end":1001,"column_start":1,"column_end":50}},{"value":"/ use chrono::serde::ts_seconds_option;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":142907,"byte_end":142948,"line_start":1002,"line_end":1002,"column_start":1,"column_end":42}},{"value":"/ #[derive(Deserialize, Serialize)]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":142949,"byte_end":142986,"line_start":1003,"line_end":1003,"column_start":1,"column_end":38}},{"value":"/ struct S {","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":142987,"byte_end":143001,"line_start":1004,"line_end":1004,"column_start":1,"column_end":15}},{"value":"/     #[serde(with = \"ts_seconds_option\")]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":143002,"byte_end":143046,"line_start":1005,"line_end":1005,"column_start":1,"column_end":45}},{"value":"/     time: Option<DateTime<Utc>>","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":143047,"byte_end":143082,"line_start":1006,"line_end":1006,"column_start":1,"column_end":36}},{"value":"/ }","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":143083,"byte_end":143088,"line_start":1007,"line_end":1007,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":143089,"byte_end":143092,"line_start":1008,"line_end":1008,"column_start":1,"column_end":4}},{"value":"/ let time = Some(Utc.ymd(2015, 5, 15).and_hms(10, 0, 0));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":143093,"byte_end":143153,"line_start":1009,"line_end":1009,"column_start":1,"column_end":61}},{"value":"/ let my_s = S {","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":143154,"byte_end":143172,"line_start":1010,"line_end":1010,"column_start":1,"column_end":19}},{"value":"/     time: time.clone(),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":143173,"byte_end":143200,"line_start":1011,"line_end":1011,"column_start":1,"column_end":28}},{"value":"/ };","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":143201,"byte_end":143207,"line_start":1012,"line_end":1012,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":143208,"byte_end":143211,"line_start":1013,"line_end":1013,"column_start":1,"column_end":4}},{"value":"/ let as_string = serde_json::to_string(&my_s)?;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":143212,"byte_end":143262,"line_start":1014,"line_end":1014,"column_start":1,"column_end":51}},{"value":"/ assert_eq!(as_string, r#\"{\"time\":1431684000}\"#);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":143263,"byte_end":143315,"line_start":1015,"line_end":1015,"column_start":1,"column_end":53}},{"value":"/ let my_s: S = serde_json::from_str(&as_string)?;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":143316,"byte_end":143368,"line_start":1016,"line_end":1016,"column_start":1,"column_end":53}},{"value":"/ assert_eq!(my_s.time, time);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":143369,"byte_end":143401,"line_start":1017,"line_end":1017,"column_start":1,"column_end":33}},{"value":"/ # Ok::<(), serde_json::Error>(())","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":143402,"byte_end":143439,"line_start":1018,"line_end":1018,"column_start":1,"column_end":38}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":143440,"byte_end":143447,"line_start":1019,"line_end":1019,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":835},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":144400,"byte_end":144409,"line_start":1050,"line_end":1050,"column_start":12,"column_end":21},"name":"serialize","qualname":"::datetime::serde::ts_seconds_option::serialize","value":"fn serialize<S>(&Option<DateTime<Utc>>, S) -> Result<S::Ok, S::Error> where\nS: ser::Serializer","parent":null,"children":[],"decl_id":null,"docs":" Serialize a UTC datetime into an integer number of seconds since the epoch or none","sig":null,"attributes":[{"value":"/ Serialize a UTC datetime into an integer number of seconds since the epoch or none","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":143599,"byte_end":143685,"line_start":1027,"line_end":1027,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":143690,"byte_end":143693,"line_start":1028,"line_end":1028,"column_start":5,"column_end":8}},{"value":"/ Intended for use with `serde`s `serialize_with` attribute.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":143698,"byte_end":143760,"line_start":1029,"line_end":1029,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":143765,"byte_end":143768,"line_start":1030,"line_end":1030,"column_start":5,"column_end":8}},{"value":"/ # Example:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":143773,"byte_end":143787,"line_start":1031,"line_end":1031,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":143792,"byte_end":143795,"line_start":1032,"line_end":1032,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":143800,"byte_end":143811,"line_start":1033,"line_end":1033,"column_start":5,"column_end":16}},{"value":"/ # use chrono::{TimeZone, DateTime, Utc};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":143816,"byte_end":143860,"line_start":1034,"line_end":1034,"column_start":5,"column_end":49}},{"value":"/ # use serde_derive::Serialize;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":143865,"byte_end":143899,"line_start":1035,"line_end":1035,"column_start":5,"column_end":39}},{"value":"/ use chrono::serde::ts_seconds_option::serialize as to_tsopt;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":143904,"byte_end":143968,"line_start":1036,"line_end":1036,"column_start":5,"column_end":69}},{"value":"/ #[derive(Serialize)]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":143973,"byte_end":143997,"line_start":1037,"line_end":1037,"column_start":5,"column_end":29}},{"value":"/ struct S {","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":144002,"byte_end":144016,"line_start":1038,"line_end":1038,"column_start":5,"column_end":19}},{"value":"/     #[serde(serialize_with = \"to_tsopt\")]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":144021,"byte_end":144066,"line_start":1039,"line_end":1039,"column_start":5,"column_end":50}},{"value":"/     time: Option<DateTime<Utc>>","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":144071,"byte_end":144106,"line_start":1040,"line_end":1040,"column_start":5,"column_end":40}},{"value":"/ }","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":144111,"byte_end":144116,"line_start":1041,"line_end":1041,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":144121,"byte_end":144124,"line_start":1042,"line_end":1042,"column_start":5,"column_end":8}},{"value":"/ let my_s = S {","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":144129,"byte_end":144147,"line_start":1043,"line_end":1043,"column_start":5,"column_end":23}},{"value":"/     time: Some(Utc.ymd(2015, 5, 15).and_hms(10, 0, 0)),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":144152,"byte_end":144211,"line_start":1044,"line_end":1044,"column_start":5,"column_end":64}},{"value":"/ };","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":144216,"byte_end":144222,"line_start":1045,"line_end":1045,"column_start":5,"column_end":11}},{"value":"/ let as_string = serde_json::to_string(&my_s)?;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":144227,"byte_end":144277,"line_start":1046,"line_end":1046,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(as_string, r#\"{\"time\":1431684000}\"#);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":144282,"byte_end":144334,"line_start":1047,"line_end":1047,"column_start":5,"column_end":57}},{"value":"/ # Ok::<(), serde_json::Error>(())","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":144339,"byte_end":144376,"line_start":1048,"line_end":1048,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":144381,"byte_end":144388,"line_start":1049,"line_end":1049,"column_start":5,"column_end":12}}]},{"kind":"Function","id":{"krate":0,"index":837},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":145335,"byte_end":145346,"line_start":1079,"line_end":1079,"column_start":12,"column_end":23},"name":"deserialize","qualname":"::datetime::serde::ts_seconds_option::deserialize","value":"fn deserialize<'de, D>(D) -> Result<Option<DateTime<Utc>>, D::Error> where\nD: de::Deserializer","parent":null,"children":[],"decl_id":null,"docs":" Deserialize a `DateTime` from a seconds timestamp or none","sig":null,"attributes":[{"value":"/ Deserialize a `DateTime` from a seconds timestamp or none","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":144691,"byte_end":144752,"line_start":1060,"line_end":1060,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":144757,"byte_end":144760,"line_start":1061,"line_end":1061,"column_start":5,"column_end":8}},{"value":"/ Intended for use with `serde`s `deserialize_with` attribute.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":144765,"byte_end":144829,"line_start":1062,"line_end":1062,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":144834,"byte_end":144837,"line_start":1063,"line_end":1063,"column_start":5,"column_end":8}},{"value":"/ # Example:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":144842,"byte_end":144856,"line_start":1064,"line_end":1064,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":144861,"byte_end":144864,"line_start":1065,"line_end":1065,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":144869,"byte_end":144880,"line_start":1066,"line_end":1066,"column_start":5,"column_end":16}},{"value":"/ # use chrono::{DateTime, Utc};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":144885,"byte_end":144919,"line_start":1067,"line_end":1067,"column_start":5,"column_end":39}},{"value":"/ # use serde_derive::Deserialize;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":144924,"byte_end":144960,"line_start":1068,"line_end":1068,"column_start":5,"column_end":41}},{"value":"/ use chrono::serde::ts_seconds_option::deserialize as from_tsopt;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":144965,"byte_end":145033,"line_start":1069,"line_end":1069,"column_start":5,"column_end":73}},{"value":"/ #[derive(Deserialize)]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":145038,"byte_end":145064,"line_start":1070,"line_end":1070,"column_start":5,"column_end":31}},{"value":"/ struct S {","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":145069,"byte_end":145083,"line_start":1071,"line_end":1071,"column_start":5,"column_end":19}},{"value":"/     #[serde(deserialize_with = \"from_tsopt\")]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":145088,"byte_end":145137,"line_start":1072,"line_end":1072,"column_start":5,"column_end":54}},{"value":"/     time: Option<DateTime<Utc>>","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":145142,"byte_end":145177,"line_start":1073,"line_end":1073,"column_start":5,"column_end":40}},{"value":"/ }","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":145182,"byte_end":145187,"line_start":1074,"line_end":1074,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":145192,"byte_end":145195,"line_start":1075,"line_end":1075,"column_start":5,"column_end":8}},{"value":"/ let my_s: S = serde_json::from_str(r#\"{ \"time\": 1431684000 }\"#)?;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":145200,"byte_end":145269,"line_start":1076,"line_end":1076,"column_start":5,"column_end":74}},{"value":"/ # Ok::<(), serde_json::Error>(())","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":145274,"byte_end":145311,"line_start":1077,"line_end":1077,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":145316,"byte_end":145323,"line_start":1078,"line_end":1078,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3311},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":74340,"byte_end":74344,"line_start":55,"line_end":55,"column_start":5,"column_end":9},"name":"Secs","qualname":"::datetime::SecondsFormat::Secs","value":"SecondsFormat::Secs","parent":{"krate":0,"index":3310},"children":[],"decl_id":null,"docs":" Format whole seconds only, with no decimal point nor subseconds.\n","sig":null,"attributes":[{"value":"/ Format whole seconds only, with no decimal point nor subseconds.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":74267,"byte_end":74335,"line_start":54,"line_end":54,"column_start":5,"column_end":73}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3313},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":74483,"byte_end":74489,"line_start":59,"line_end":59,"column_start":5,"column_end":11},"name":"Millis","qualname":"::datetime::SecondsFormat::Millis","value":"SecondsFormat::Millis","parent":{"krate":0,"index":3310},"children":[],"decl_id":null,"docs":" Use fixed 3 subsecond digits. This corresponds to\n [Fixed::Nanosecond3](format/enum.Fixed.html#variant.Nanosecond3).\n","sig":null,"attributes":[{"value":"/ Use fixed 3 subsecond digits. This corresponds to","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":74351,"byte_end":74404,"line_start":57,"line_end":57,"column_start":5,"column_end":58}},{"value":"/ [Fixed::Nanosecond3](format/enum.Fixed.html#variant.Nanosecond3).","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":74409,"byte_end":74478,"line_start":58,"line_end":58,"column_start":5,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3315},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":74628,"byte_end":74634,"line_start":63,"line_end":63,"column_start":5,"column_end":11},"name":"Micros","qualname":"::datetime::SecondsFormat::Micros","value":"SecondsFormat::Micros","parent":{"krate":0,"index":3310},"children":[],"decl_id":null,"docs":" Use fixed 6 subsecond digits. This corresponds to\n [Fixed::Nanosecond6](format/enum.Fixed.html#variant.Nanosecond6).\n","sig":null,"attributes":[{"value":"/ Use fixed 6 subsecond digits. This corresponds to","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":74496,"byte_end":74549,"line_start":61,"line_end":61,"column_start":5,"column_end":58}},{"value":"/ [Fixed::Nanosecond6](format/enum.Fixed.html#variant.Nanosecond6).","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":74554,"byte_end":74623,"line_start":62,"line_end":62,"column_start":5,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3317},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":74773,"byte_end":74778,"line_start":67,"line_end":67,"column_start":5,"column_end":10},"name":"Nanos","qualname":"::datetime::SecondsFormat::Nanos","value":"SecondsFormat::Nanos","parent":{"krate":0,"index":3310},"children":[],"decl_id":null,"docs":" Use fixed 9 subsecond digits. This corresponds to\n [Fixed::Nanosecond9](format/enum.Fixed.html#variant.Nanosecond9).\n","sig":null,"attributes":[{"value":"/ Use fixed 9 subsecond digits. This corresponds to","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":74641,"byte_end":74694,"line_start":65,"line_end":65,"column_start":5,"column_end":58}},{"value":"/ [Fixed::Nanosecond9](format/enum.Fixed.html#variant.Nanosecond9).","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":74699,"byte_end":74768,"line_start":66,"line_end":66,"column_start":5,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3319},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":75014,"byte_end":75020,"line_start":72,"line_end":72,"column_start":5,"column_end":11},"name":"AutoSi","qualname":"::datetime::SecondsFormat::AutoSi","value":"SecondsFormat::AutoSi","parent":{"krate":0,"index":3310},"children":[],"decl_id":null,"docs":" Automatically select one of `Secs`, `Millis`, `Micros`, or `Nanos` to\n display all available non-zero sub-second digits.  This corresponds to\n [Fixed::Nanosecond](format/enum.Fixed.html#variant.Nanosecond).\n","sig":null,"attributes":[{"value":"/ Automatically select one of `Secs`, `Millis`, `Micros`, or `Nanos` to","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":74785,"byte_end":74858,"line_start":69,"line_end":69,"column_start":5,"column_end":78}},{"value":"/ display all available non-zero sub-second digits.  This corresponds to","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":74863,"byte_end":74937,"line_start":70,"line_end":70,"column_start":5,"column_end":79}},{"value":"/ [Fixed::Nanosecond](format/enum.Fixed.html#variant.Nanosecond).","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":74942,"byte_end":75009,"line_start":71,"line_end":71,"column_start":5,"column_end":72}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3321},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":75080,"byte_end":75095,"line_start":76,"line_end":76,"column_start":5,"column_end":20},"name":"__NonExhaustive","qualname":"::datetime::SecondsFormat::__NonExhaustive","value":"SecondsFormat::__NonExhaustive","parent":{"krate":0,"index":3310},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3310},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":74247,"byte_end":74260,"line_start":53,"line_end":53,"column_start":10,"column_end":23},"name":"SecondsFormat","qualname":"::datetime::SecondsFormat","value":"enum SecondsFormat { Secs, Millis, Micros, Nanos, AutoSi, __NonExhaustive, }","parent":null,"children":[{"krate":0,"index":3311},{"krate":0,"index":3313},{"krate":0,"index":3315},{"krate":0,"index":3317},{"krate":0,"index":3319},{"krate":0,"index":3321}],"decl_id":null,"docs":" Specific formatting options for seconds. This may be extended in the\n future, so exhaustive matching in external code is not recommended.","sig":null,"attributes":[{"value":"/ Specific formatting options for seconds. This may be extended in the","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":73984,"byte_end":74056,"line_start":48,"line_end":48,"column_start":1,"column_end":73}},{"value":"/ future, so exhaustive matching in external code is not recommended.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":74057,"byte_end":74128,"line_start":49,"line_end":49,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":74129,"byte_end":74132,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ See the `TimeZone::to_rfc3339_opts` function for usage.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":74133,"byte_end":74192,"line_start":51,"line_end":51,"column_start":1,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":3334},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":75464,"byte_end":75472,"line_start":86,"line_end":86,"column_start":12,"column_end":20},"name":"DateTime","qualname":"::datetime::DateTime","value":"DateTime {  }","parent":null,"children":[{"krate":0,"index":3336},{"krate":0,"index":3337}],"decl_id":null,"docs":" ISO 8601 combined date and time with time zone.","sig":null,"attributes":[{"value":"/ ISO 8601 combined date and time with time zone.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":75100,"byte_end":75151,"line_start":79,"line_end":79,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":75152,"byte_end":75155,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"/ There are some constructors implemented here (the `from_*` methods), but","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":75156,"byte_end":75232,"line_start":81,"line_end":81,"column_start":1,"column_end":77}},{"value":"/ the general-purpose constructors are all via the methods on the","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":75233,"byte_end":75300,"line_start":82,"line_end":82,"column_start":1,"column_end":68}},{"value":"/ [`TimeZone`](./offset/trait.TimeZone.html) implementations.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":75301,"byte_end":75364,"line_start":83,"line_end":83,"column_start":1,"column_end":64}}]},{"kind":"Const","id":{"krate":0,"index":852},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":75669,"byte_end":75681,"line_start":93,"line_end":93,"column_start":11,"column_end":23},"name":"MIN_DATETIME","qualname":"::datetime::MIN_DATETIME","value":"DateTime<Utc>","parent":null,"children":[],"decl_id":null,"docs":" The minimum possible `DateTime<Utc>`.\n","sig":null,"attributes":[{"value":"/ The minimum possible `DateTime<Utc>`.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":75545,"byte_end":75586,"line_start":91,"line_end":91,"column_start":1,"column_end":42}},{"value":"deprecated(since = \"0.4.20\", note = \"Use DateTime::MIN_UTC instead\")","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":75587,"byte_end":75658,"line_start":92,"line_end":92,"column_start":1,"column_end":72}}]},{"kind":"Const","id":{"krate":0,"index":853},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":75849,"byte_end":75861,"line_start":96,"line_end":96,"column_start":11,"column_end":23},"name":"MAX_DATETIME","qualname":"::datetime::MAX_DATETIME","value":"DateTime<Utc>","parent":null,"children":[],"decl_id":null,"docs":" The maximum possible `DateTime<Utc>`.\n","sig":null,"attributes":[{"value":"/ The maximum possible `DateTime<Utc>`.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":75725,"byte_end":75766,"line_start":94,"line_end":94,"column_start":1,"column_end":42}},{"value":"deprecated(since = \"0.4.20\", note = \"Use DateTime::MAX_UTC instead\")","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":75767,"byte_end":75838,"line_start":95,"line_end":95,"column_start":1,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":856},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":76471,"byte_end":76479,"line_start":113,"line_end":113,"column_start":12,"column_end":20},"name":"from_utc","qualname":"<DateTime<Tz>>::from_utc","value":"fn from_utc(NaiveDateTime, Tz::Offset) -> DateTime<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` with given *UTC* datetime and offset.\n The local datetime should be constructed via the `TimeZone` trait.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` with given *UTC* datetime and offset.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":75944,"byte_end":76008,"line_start":99,"line_end":99,"column_start":5,"column_end":69}},{"value":"/ The local datetime should be constructed via the `TimeZone` trait.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":76013,"byte_end":76083,"line_start":100,"line_end":100,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":76088,"byte_end":76091,"line_start":101,"line_end":101,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":76096,"byte_end":76109,"line_start":102,"line_end":102,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":76114,"byte_end":76117,"line_start":103,"line_end":103,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":76122,"byte_end":76129,"line_start":104,"line_end":104,"column_start":5,"column_end":12}},{"value":"/ use chrono::{DateTime, TimeZone, NaiveDateTime, Utc};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":76134,"byte_end":76191,"line_start":105,"line_end":105,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":76196,"byte_end":76199,"line_start":106,"line_end":106,"column_start":5,"column_end":8}},{"value":"/ let dt = DateTime::<Utc>::from_utc(NaiveDateTime::from_timestamp(61, 0), Utc);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":76204,"byte_end":76286,"line_start":107,"line_end":107,"column_start":5,"column_end":87}},{"value":"/ assert_eq!(Utc.timestamp(61, 0), dt);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":76291,"byte_end":76332,"line_start":108,"line_end":108,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":76337,"byte_end":76344,"line_start":109,"line_end":109,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":76450,"byte_end":76459,"line_start":112,"line_end":112,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":857},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":77731,"byte_end":77741,"line_start":142,"line_end":142,"column_start":12,"column_end":22},"name":"from_local","qualname":"<DateTime<Tz>>::from_local","value":"fn from_local(NaiveDateTime, Tz::Offset) -> DateTime<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` with given **local** datetime and offset that\n presents local timezone.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` with given **local** datetime and offset that","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":76592,"byte_end":76664,"line_start":117,"line_end":117,"column_start":5,"column_end":77}},{"value":"/ presents local timezone.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":76669,"byte_end":76697,"line_start":118,"line_end":118,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":76702,"byte_end":76705,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":76710,"byte_end":76723,"line_start":120,"line_end":120,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":76728,"byte_end":76731,"line_start":121,"line_end":121,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":76736,"byte_end":76743,"line_start":122,"line_end":122,"column_start":5,"column_end":12}},{"value":"/ use chrono::DateTime;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":76748,"byte_end":76773,"line_start":123,"line_end":123,"column_start":5,"column_end":30}},{"value":"/ use chrono::naive::NaiveDate;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":76778,"byte_end":76811,"line_start":124,"line_end":124,"column_start":5,"column_end":38}},{"value":"/ use chrono::offset::{Utc, FixedOffset};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":76816,"byte_end":76859,"line_start":125,"line_end":125,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":76864,"byte_end":76867,"line_start":126,"line_end":126,"column_start":5,"column_end":8}},{"value":"/ let naivedatetime_utc = NaiveDate::from_ymd(2000, 1, 12).and_hms(2, 0, 0);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":76872,"byte_end":76950,"line_start":127,"line_end":127,"column_start":5,"column_end":83}},{"value":"/ let datetime_utc = DateTime::<Utc>::from_utc(naivedatetime_utc, Utc);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":76955,"byte_end":77028,"line_start":128,"line_end":128,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":77033,"byte_end":77036,"line_start":129,"line_end":129,"column_start":5,"column_end":8}},{"value":"/ let timezone_east = FixedOffset::east(8 * 60 * 60);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":77041,"byte_end":77096,"line_start":130,"line_end":130,"column_start":5,"column_end":60}},{"value":"/ let naivedatetime_east = NaiveDate::from_ymd(2000, 1, 12).and_hms(10, 0, 0);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":77101,"byte_end":77181,"line_start":131,"line_end":131,"column_start":5,"column_end":85}},{"value":"/ let datetime_east = DateTime::<FixedOffset>::from_local(naivedatetime_east, timezone_east);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":77186,"byte_end":77281,"line_start":132,"line_end":132,"column_start":5,"column_end":100}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":77286,"byte_end":77289,"line_start":133,"line_end":133,"column_start":5,"column_end":8}},{"value":"/ let timezone_west = FixedOffset::west(7 * 60 * 60);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":77294,"byte_end":77349,"line_start":134,"line_end":134,"column_start":5,"column_end":60}},{"value":"/ let naivedatetime_west = NaiveDate::from_ymd(2000, 1, 11).and_hms(19, 0, 0);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":77354,"byte_end":77434,"line_start":135,"line_end":135,"column_start":5,"column_end":85}},{"value":"/ let datetime_west = DateTime::<FixedOffset>::from_local(naivedatetime_west, timezone_west);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":77439,"byte_end":77534,"line_start":136,"line_end":136,"column_start":5,"column_end":100}},{"value":"/ assert_eq!(datetime_east, datetime_utc.with_timezone(&timezone_east));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":77540,"byte_end":77614,"line_start":138,"line_end":138,"column_start":5,"column_end":79}},{"value":"/ assert_eq!(datetime_west, datetime_utc.with_timezone(&timezone_west));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":77619,"byte_end":77693,"line_start":139,"line_end":139,"column_start":5,"column_end":79}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":77698,"byte_end":77705,"line_start":140,"line_end":140,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":77710,"byte_end":77719,"line_start":141,"line_end":141,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":858},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":78468,"byte_end":78472,"line_start":165,"line_end":165,"column_start":12,"column_end":16},"name":"date","qualname":"<DateTime<Tz>>::date","value":"fn date(&Self) -> Date<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Retrieves a date component","sig":null,"attributes":[{"value":"/ Retrieves a date component","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":77921,"byte_end":77951,"line_start":148,"line_end":148,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":77956,"byte_end":77959,"line_start":149,"line_end":149,"column_start":5,"column_end":8}},{"value":"/ Unless you are immediately planning on turning this into a `DateTime`","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":77964,"byte_end":78037,"line_start":150,"line_end":150,"column_start":5,"column_end":78}},{"value":"/ with the same Timezone you should use the","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":78042,"byte_end":78087,"line_start":151,"line_end":151,"column_start":5,"column_end":50}},{"value":"/ [`date_naive`](DateTime::date_naive) method.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":78092,"byte_end":78140,"line_start":152,"line_end":152,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":78145,"byte_end":78148,"line_start":153,"line_end":153,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":78153,"byte_end":78160,"line_start":154,"line_end":154,"column_start":5,"column_end":12}},{"value":"/ use chrono::prelude::*;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":78165,"byte_end":78192,"line_start":155,"line_end":155,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":78197,"byte_end":78200,"line_start":156,"line_end":156,"column_start":5,"column_end":8}},{"value":"/ let date: Date<Utc> = Utc.ymd(2020, 1, 1);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":78205,"byte_end":78251,"line_start":157,"line_end":157,"column_start":5,"column_end":51}},{"value":"/ let dt: DateTime<Utc> = date.and_hms(0, 0, 0);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":78256,"byte_end":78306,"line_start":158,"line_end":158,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":78311,"byte_end":78314,"line_start":159,"line_end":159,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(dt.date(), date);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":78319,"byte_end":78351,"line_start":160,"line_end":160,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":78356,"byte_end":78359,"line_start":161,"line_end":161,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(dt.date().and_hms(1, 1, 1), date.and_hms(1, 1, 1));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":78364,"byte_end":78430,"line_start":162,"line_end":162,"column_start":5,"column_end":71}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":78435,"byte_end":78442,"line_start":163,"line_end":163,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":78447,"byte_end":78456,"line_start":164,"line_end":164,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":859},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":79143,"byte_end":79153,"line_start":182,"line_end":182,"column_start":12,"column_end":22},"name":"date_naive","qualname":"<DateTime<Tz>>::date_naive","value":"fn date_naive(&Self) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the Date without an associated timezone","sig":null,"attributes":[{"value":"/ Retrieves the Date without an associated timezone","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":78576,"byte_end":78629,"line_start":169,"line_end":169,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":78634,"byte_end":78637,"line_start":170,"line_end":170,"column_start":5,"column_end":8}},{"value":"/ [`NaiveDate`] is a more well-defined type, and has more traits implemented on it,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":78642,"byte_end":78727,"line_start":171,"line_end":171,"column_start":5,"column_end":90}},{"value":"/ so should be preferred to [`Date`] any time you truly want to operate on Dates.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":78732,"byte_end":78815,"line_start":172,"line_end":172,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":78820,"byte_end":78823,"line_start":173,"line_end":173,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":78828,"byte_end":78835,"line_start":174,"line_end":174,"column_start":5,"column_end":12}},{"value":"/ use chrono::prelude::*;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":78840,"byte_end":78867,"line_start":175,"line_end":175,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":78872,"byte_end":78875,"line_start":176,"line_end":176,"column_start":5,"column_end":8}},{"value":"/ let date: DateTime<Utc> = Utc.ymd(2020, 1, 1).and_hms(0, 0, 0);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":78880,"byte_end":78947,"line_start":177,"line_end":177,"column_start":5,"column_end":72}},{"value":"/ let other: DateTime<FixedOffset> = FixedOffset::east(23).ymd(2020, 1, 1).and_hms(0, 0, 0);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":78952,"byte_end":79046,"line_start":178,"line_end":178,"column_start":5,"column_end":99}},{"value":"/ assert_eq!(date.date_naive(), other.date_naive());","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":79051,"byte_end":79105,"line_start":179,"line_end":179,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":79110,"byte_end":79117,"line_start":180,"line_end":180,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":79122,"byte_end":79131,"line_start":181,"line_end":181,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":860},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":79418,"byte_end":79422,"line_start":190,"line_end":190,"column_start":12,"column_end":16},"name":"time","qualname":"<DateTime<Tz>>::time","value":"fn time(&Self) -> NaiveTime","parent":null,"children":[],"decl_id":null,"docs":" Retrieves a time component.\n Unlike `date`, this is not associated to the time zone.\n","sig":null,"attributes":[{"value":"/ Retrieves a time component.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":79297,"byte_end":79328,"line_start":187,"line_end":187,"column_start":5,"column_end":36}},{"value":"/ Unlike `date`, this is not associated to the time zone.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":79333,"byte_end":79392,"line_start":188,"line_end":188,"column_start":5,"column_end":64}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":79397,"byte_end":79406,"line_start":189,"line_end":189,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":861},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":79639,"byte_end":79648,"line_start":197,"line_end":197,"column_start":12,"column_end":21},"name":"timestamp","qualname":"<DateTime<Tz>>::timestamp","value":"fn timestamp(&Self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of non-leap seconds since January 1, 1970 0:00:00 UTC\n (aka \"UNIX timestamp\").\n","sig":null,"attributes":[{"value":"/ Returns the number of non-leap seconds since January 1, 1970 0:00:00 UTC","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":79505,"byte_end":79581,"line_start":194,"line_end":194,"column_start":5,"column_end":81}},{"value":"/ (aka \"UNIX timestamp\").","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":79586,"byte_end":79613,"line_start":195,"line_end":195,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":79618,"byte_end":79627,"line_start":196,"line_end":196,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":862},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":80467,"byte_end":80483,"line_start":221,"line_end":221,"column_start":12,"column_end":28},"name":"timestamp_millis","qualname":"<DateTime<Tz>>::timestamp_millis","value":"fn timestamp_millis(&Self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of non-leap-milliseconds since January 1, 1970 UTC","sig":null,"attributes":[{"value":"/ Returns the number of non-leap-milliseconds since January 1, 1970 UTC","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":79710,"byte_end":79783,"line_start":201,"line_end":201,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":79788,"byte_end":79791,"line_start":202,"line_end":202,"column_start":5,"column_end":8}},{"value":"/ Note that this does reduce the number of years that can be represented","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":79796,"byte_end":79870,"line_start":203,"line_end":203,"column_start":5,"column_end":79}},{"value":"/ from ~584 Billion to ~584 Million. (If this is a problem, please file","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":79875,"byte_end":79948,"line_start":204,"line_end":204,"column_start":5,"column_end":78}},{"value":"/ an issue to let me know what domain needs millisecond precision over","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":79953,"byte_end":80025,"line_start":205,"line_end":205,"column_start":5,"column_end":77}},{"value":"/ billions of years, I'm curious.)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":80030,"byte_end":80066,"line_start":206,"line_end":206,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":80071,"byte_end":80074,"line_start":207,"line_end":207,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":80079,"byte_end":80092,"line_start":208,"line_end":208,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":80097,"byte_end":80100,"line_start":209,"line_end":209,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":80105,"byte_end":80112,"line_start":210,"line_end":210,"column_start":5,"column_end":12}},{"value":"/ use chrono::Utc;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":80117,"byte_end":80137,"line_start":211,"line_end":211,"column_start":5,"column_end":25}},{"value":"/ use chrono::TimeZone;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":80142,"byte_end":80167,"line_start":212,"line_end":212,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":80172,"byte_end":80175,"line_start":213,"line_end":213,"column_start":5,"column_end":8}},{"value":"/ let dt = Utc.ymd(1970, 1, 1).and_hms_milli(0, 0, 1, 444);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":80180,"byte_end":80241,"line_start":214,"line_end":214,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(dt.timestamp_millis(), 1_444);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":80246,"byte_end":80291,"line_start":215,"line_end":215,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":80296,"byte_end":80299,"line_start":216,"line_end":216,"column_start":5,"column_end":8}},{"value":"/ let dt = Utc.ymd(2001, 9, 9).and_hms_milli(1, 46, 40, 555);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":80304,"byte_end":80367,"line_start":217,"line_end":217,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(dt.timestamp_millis(), 1_000_000_000_555);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":80372,"byte_end":80429,"line_start":218,"line_end":218,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":80434,"byte_end":80441,"line_start":219,"line_end":219,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":80446,"byte_end":80455,"line_start":220,"line_end":220,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":863},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":81310,"byte_end":81326,"line_start":245,"line_end":245,"column_start":12,"column_end":28},"name":"timestamp_micros","qualname":"<DateTime<Tz>>::timestamp_micros","value":"fn timestamp_micros(&Self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of non-leap-microseconds since January 1, 1970 UTC","sig":null,"attributes":[{"value":"/ Returns the number of non-leap-microseconds since January 1, 1970 UTC","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":80552,"byte_end":80625,"line_start":225,"line_end":225,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":80630,"byte_end":80633,"line_start":226,"line_end":226,"column_start":5,"column_end":8}},{"value":"/ Note that this does reduce the number of years that can be represented","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":80638,"byte_end":80712,"line_start":227,"line_end":227,"column_start":5,"column_end":79}},{"value":"/ from ~584 Billion to ~584 Thousand. (If this is a problem, please file","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":80717,"byte_end":80791,"line_start":228,"line_end":228,"column_start":5,"column_end":79}},{"value":"/ an issue to let me know what domain needs microsecond precision over","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":80796,"byte_end":80868,"line_start":229,"line_end":229,"column_start":5,"column_end":77}},{"value":"/ millennia, I'm curious.)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":80873,"byte_end":80901,"line_start":230,"line_end":230,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":80906,"byte_end":80909,"line_start":231,"line_end":231,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":80914,"byte_end":80927,"line_start":232,"line_end":232,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":80932,"byte_end":80935,"line_start":233,"line_end":233,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":80940,"byte_end":80947,"line_start":234,"line_end":234,"column_start":5,"column_end":12}},{"value":"/ use chrono::Utc;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":80952,"byte_end":80972,"line_start":235,"line_end":235,"column_start":5,"column_end":25}},{"value":"/ use chrono::TimeZone;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":80977,"byte_end":81002,"line_start":236,"line_end":236,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":81007,"byte_end":81010,"line_start":237,"line_end":237,"column_start":5,"column_end":8}},{"value":"/ let dt = Utc.ymd(1970, 1, 1).and_hms_micro(0, 0, 1, 444);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":81015,"byte_end":81076,"line_start":238,"line_end":238,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(dt.timestamp_micros(), 1_000_444);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":81081,"byte_end":81130,"line_start":239,"line_end":239,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":81135,"byte_end":81138,"line_start":240,"line_end":240,"column_start":5,"column_end":8}},{"value":"/ let dt = Utc.ymd(2001, 9, 9).and_hms_micro(1, 46, 40, 555);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":81143,"byte_end":81206,"line_start":241,"line_end":241,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(dt.timestamp_micros(), 1_000_000_000_000_555);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":81211,"byte_end":81272,"line_start":242,"line_end":242,"column_start":5,"column_end":66}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":81277,"byte_end":81284,"line_start":243,"line_end":243,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":81289,"byte_end":81298,"line_start":244,"line_end":244,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":864},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":82146,"byte_end":82161,"line_start":269,"line_end":269,"column_start":12,"column_end":27},"name":"timestamp_nanos","qualname":"<DateTime<Tz>>::timestamp_nanos","value":"fn timestamp_nanos(&Self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of non-leap-nanoseconds since January 1, 1970 UTC","sig":null,"attributes":[{"value":"/ Returns the number of non-leap-nanoseconds since January 1, 1970 UTC","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":81395,"byte_end":81467,"line_start":249,"line_end":249,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":81472,"byte_end":81475,"line_start":250,"line_end":250,"column_start":5,"column_end":8}},{"value":"/ Note that this does reduce the number of years that can be represented","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":81480,"byte_end":81554,"line_start":251,"line_end":251,"column_start":5,"column_end":79}},{"value":"/ from ~584 Billion to ~584. (If this is a problem, please file","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":81559,"byte_end":81624,"line_start":252,"line_end":252,"column_start":5,"column_end":70}},{"value":"/ an issue to let me know what domain needs nanosecond precision over","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":81629,"byte_end":81700,"line_start":253,"line_end":253,"column_start":5,"column_end":76}},{"value":"/ millennia, I'm curious.)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":81705,"byte_end":81733,"line_start":254,"line_end":254,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":81738,"byte_end":81741,"line_start":255,"line_end":255,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":81746,"byte_end":81759,"line_start":256,"line_end":256,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":81764,"byte_end":81767,"line_start":257,"line_end":257,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":81772,"byte_end":81779,"line_start":258,"line_end":258,"column_start":5,"column_end":12}},{"value":"/ use chrono::Utc;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":81784,"byte_end":81804,"line_start":259,"line_end":259,"column_start":5,"column_end":25}},{"value":"/ use chrono::TimeZone;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":81809,"byte_end":81834,"line_start":260,"line_end":260,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":81839,"byte_end":81842,"line_start":261,"line_end":261,"column_start":5,"column_end":8}},{"value":"/ let dt = Utc.ymd(1970, 1, 1).and_hms_nano(0, 0, 1, 444);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":81847,"byte_end":81907,"line_start":262,"line_end":262,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(dt.timestamp_nanos(), 1_000_000_444);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":81912,"byte_end":81964,"line_start":263,"line_end":263,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":81969,"byte_end":81972,"line_start":264,"line_end":264,"column_start":5,"column_end":8}},{"value":"/ let dt = Utc.ymd(2001, 9, 9).and_hms_nano(1, 46, 40, 555);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":81977,"byte_end":82039,"line_start":265,"line_end":265,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(dt.timestamp_nanos(), 1_000_000_000_000_000_555);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":82044,"byte_end":82108,"line_start":266,"line_end":266,"column_start":5,"column_end":69}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":82113,"byte_end":82120,"line_start":267,"line_end":267,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":82125,"byte_end":82134,"line_start":268,"line_end":268,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":865},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":82491,"byte_end":82514,"line_start":279,"line_end":279,"column_start":12,"column_end":35},"name":"timestamp_subsec_millis","qualname":"<DateTime<Tz>>::timestamp_subsec_millis","value":"fn timestamp_subsec_millis(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of milliseconds since the last second boundary","sig":null,"attributes":[{"value":"/ Returns the number of milliseconds since the last second boundary","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":82229,"byte_end":82298,"line_start":273,"line_end":273,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":82303,"byte_end":82306,"line_start":274,"line_end":274,"column_start":5,"column_end":8}},{"value":"/ warning: in event of a leap second, this may exceed 999","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":82311,"byte_end":82370,"line_start":275,"line_end":275,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":82375,"byte_end":82378,"line_start":276,"line_end":276,"column_start":5,"column_end":8}},{"value":"/ note: this is not the number of milliseconds since January 1, 1970 0:00:00 UTC","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":82383,"byte_end":82465,"line_start":277,"line_end":277,"column_start":5,"column_end":87}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":82470,"byte_end":82479,"line_start":278,"line_end":278,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":866},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":82856,"byte_end":82879,"line_start":289,"line_end":289,"column_start":12,"column_end":35},"name":"timestamp_subsec_micros","qualname":"<DateTime<Tz>>::timestamp_subsec_micros","value":"fn timestamp_subsec_micros(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of microseconds since the last second boundary","sig":null,"attributes":[{"value":"/ Returns the number of microseconds since the last second boundary","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":82590,"byte_end":82659,"line_start":283,"line_end":283,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":82664,"byte_end":82667,"line_start":284,"line_end":284,"column_start":5,"column_end":8}},{"value":"/ warning: in event of a leap second, this may exceed 999_999","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":82672,"byte_end":82735,"line_start":285,"line_end":285,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":82740,"byte_end":82743,"line_start":286,"line_end":286,"column_start":5,"column_end":8}},{"value":"/ note: this is not the number of microseconds since January 1, 1970 0:00:00 UTC","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":82748,"byte_end":82830,"line_start":287,"line_end":287,"column_start":5,"column_end":87}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":82835,"byte_end":82844,"line_start":288,"line_end":288,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":867},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":83223,"byte_end":83245,"line_start":299,"line_end":299,"column_start":12,"column_end":34},"name":"timestamp_subsec_nanos","qualname":"<DateTime<Tz>>::timestamp_subsec_nanos","value":"fn timestamp_subsec_nanos(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of nanoseconds since the last second boundary","sig":null,"attributes":[{"value":"/ Returns the number of nanoseconds since the last second boundary","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":82955,"byte_end":83023,"line_start":293,"line_end":293,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":83028,"byte_end":83031,"line_start":294,"line_end":294,"column_start":5,"column_end":8}},{"value":"/ warning: in event of a leap second, this may exceed 999_999_999","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":83036,"byte_end":83103,"line_start":295,"line_end":295,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":83108,"byte_end":83111,"line_start":296,"line_end":296,"column_start":5,"column_end":8}},{"value":"/ note: this is not the number of nanoseconds since January 1, 1970 0:00:00 UTC","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":83116,"byte_end":83197,"line_start":297,"line_end":297,"column_start":5,"column_end":86}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":83202,"byte_end":83211,"line_start":298,"line_end":298,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":868},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":83390,"byte_end":83396,"line_start":305,"line_end":305,"column_start":12,"column_end":18},"name":"offset","qualname":"<DateTime<Tz>>::offset","value":"fn offset(&Self) -> &Tz::Offset","parent":null,"children":[],"decl_id":null,"docs":" Retrieves an associated offset from UTC.\n","sig":null,"attributes":[{"value":"/ Retrieves an associated offset from UTC.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":83320,"byte_end":83364,"line_start":303,"line_end":303,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":83369,"byte_end":83378,"line_start":304,"line_end":304,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":869},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":83517,"byte_end":83525,"line_start":311,"line_end":311,"column_start":12,"column_end":20},"name":"timezone","qualname":"<DateTime<Tz>>::timezone","value":"fn timezone(&Self) -> Tz","parent":null,"children":[],"decl_id":null,"docs":" Retrieves an associated time zone.\n","sig":null,"attributes":[{"value":"/ Retrieves an associated time zone.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":83453,"byte_end":83491,"line_start":309,"line_end":309,"column_start":5,"column_end":43}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":83496,"byte_end":83505,"line_start":310,"line_end":310,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":870},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":83775,"byte_end":83788,"line_start":318,"line_end":318,"column_start":12,"column_end":25},"name":"with_timezone","qualname":"<DateTime<Tz>>::with_timezone","value":"fn with_timezone<Tz2>(&Self, &Tz2) -> DateTime<Tz2> where Tz2: TimeZone","parent":null,"children":[],"decl_id":null,"docs":" Changes the associated time zone.\n The returned `DateTime` references the same instant of time from the perspective of the provided time zone.\n","sig":null,"attributes":[{"value":"/ Changes the associated time zone.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":83596,"byte_end":83633,"line_start":315,"line_end":315,"column_start":5,"column_end":42}},{"value":"/ The returned `DateTime` references the same instant of time from the perspective of the provided time zone.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":83638,"byte_end":83749,"line_start":316,"line_end":316,"column_start":5,"column_end":116}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":83754,"byte_end":83763,"line_start":317,"line_end":317,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":872},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":84041,"byte_end":84059,"line_start":326,"line_end":326,"column_start":12,"column_end":30},"name":"checked_add_signed","qualname":"<DateTime<Tz>>::checked_add_signed","value":"fn checked_add_signed(Self, OldDuration) -> Option<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Adds given `Duration` to the current date and time.","sig":null,"attributes":[{"value":"/ Adds given `Duration` to the current date and time.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":83896,"byte_end":83951,"line_start":322,"line_end":322,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":83956,"byte_end":83959,"line_start":323,"line_end":323,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when it will result in overflow.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":83964,"byte_end":84015,"line_start":324,"line_end":324,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":84020,"byte_end":84029,"line_start":325,"line_end":325,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":873},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":84416,"byte_end":84434,"line_start":336,"line_end":336,"column_start":12,"column_end":30},"name":"checked_sub_signed","qualname":"<DateTime<Tz>>::checked_sub_signed","value":"fn checked_sub_signed(Self, OldDuration) -> Option<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Subtracts given `Duration` from the current date and time.","sig":null,"attributes":[{"value":"/ Subtracts given `Duration` from the current date and time.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":84264,"byte_end":84326,"line_start":332,"line_end":332,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":84331,"byte_end":84334,"line_start":333,"line_end":333,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when it will result in overflow.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":84339,"byte_end":84390,"line_start":334,"line_end":334,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":84395,"byte_end":84404,"line_start":335,"line_end":335,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":874},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":84781,"byte_end":84802,"line_start":345,"line_end":345,"column_start":12,"column_end":33},"name":"signed_duration_since","qualname":"<DateTime<Tz>>::signed_duration_since","value":"fn signed_duration_since<Tz2>(Self, DateTime<Tz2>) -> OldDuration where\nTz2: TimeZone","parent":null,"children":[],"decl_id":null,"docs":" Subtracts another `DateTime` from the current date and time.\n This does not overflow or underflow at all.\n","sig":null,"attributes":[{"value":"/ Subtracts another `DateTime` from the current date and time.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":84639,"byte_end":84703,"line_start":342,"line_end":342,"column_start":5,"column_end":69}},{"value":"/ This does not overflow or underflow at all.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":84708,"byte_end":84755,"line_start":343,"line_end":343,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":84760,"byte_end":84769,"line_start":344,"line_end":344,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":876},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":85001,"byte_end":85010,"line_start":351,"line_end":351,"column_start":12,"column_end":21},"name":"naive_utc","qualname":"<DateTime<Tz>>::naive_utc","value":"fn naive_utc(&Self) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Returns a view to the naive UTC datetime.\n","sig":null,"attributes":[{"value":"/ Returns a view to the naive UTC datetime.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":84930,"byte_end":84975,"line_start":349,"line_end":349,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":84980,"byte_end":84989,"line_start":350,"line_end":350,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":877},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":85143,"byte_end":85154,"line_start":357,"line_end":357,"column_start":12,"column_end":23},"name":"naive_local","qualname":"<DateTime<Tz>>::naive_local","value":"fn naive_local(&Self) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Returns a view to the naive local datetime.\n","sig":null,"attributes":[{"value":"/ Returns a view to the naive local datetime.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":85070,"byte_end":85117,"line_start":355,"line_end":355,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":85122,"byte_end":85131,"line_start":356,"line_end":356,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":878},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":85312,"byte_end":85323,"line_start":362,"line_end":362,"column_start":12,"column_end":23},"name":"years_since","qualname":"<DateTime<Tz>>::years_since","value":"fn years_since(&Self, Self) -> Option<u32>","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the elapsed years from now to the given [`DateTime`].\n","sig":null,"attributes":[{"value":"/ Retrieve the elapsed years from now to the given [`DateTime`].","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":85234,"byte_end":85300,"line_start":361,"line_end":361,"column_start":5,"column_end":71}}]},{"kind":"Const","id":{"krate":0,"index":879},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":85802,"byte_end":85809,"line_start":379,"line_end":379,"column_start":15,"column_end":22},"name":"MIN_UTC","qualname":"::datetime::DateTime::<Tz>::MIN_UTC","value":"DateTime<Utc>","parent":{"krate":0,"index":854},"children":[],"decl_id":null,"docs":" The minimum possible `DateTime<Utc>`.\n","sig":null,"attributes":[{"value":"/ The minimum possible `DateTime<Utc>`.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":85746,"byte_end":85787,"line_start":378,"line_end":378,"column_start":5,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":880},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":85943,"byte_end":85950,"line_start":381,"line_end":381,"column_start":15,"column_end":22},"name":"MAX_UTC","qualname":"::datetime::DateTime::<Tz>::MAX_UTC","value":"DateTime<Utc>","parent":{"krate":0,"index":854},"children":[],"decl_id":null,"docs":" The maximum possible `DateTime<Utc>`.\n","sig":null,"attributes":[{"value":"/ The maximum possible `DateTime<Utc>`.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":85887,"byte_end":85928,"line_start":380,"line_end":380,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":882},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":86067,"byte_end":86074,"line_start":385,"line_end":385,"column_start":8,"column_end":15},"name":"default","qualname":"<DateTime<Utc> as std::default::Default>::default","value":"fn default() -> Self","parent":{"krate":2,"index":3128},"children":[],"decl_id":{"krate":2,"index":3129},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":884},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":86221,"byte_end":86228,"line_start":392,"line_end":392,"column_start":8,"column_end":15},"name":"default","qualname":"<DateTime<Local> as std::default::Default>::default","value":"fn default() -> Self","parent":{"krate":2,"index":3128},"children":[],"decl_id":{"krate":2,"index":3129},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":886},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":86357,"byte_end":86364,"line_start":398,"line_end":398,"column_start":8,"column_end":15},"name":"default","qualname":"<DateTime<FixedOffset> as std::default::Default>::default","value":"fn default() -> Self","parent":{"krate":2,"index":3128},"children":[],"decl_id":{"krate":2,"index":3129},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":888},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":86861,"byte_end":86865,"line_start":409,"line_end":409,"column_start":8,"column_end":12},"name":"from","qualname":"<DateTime<FixedOffset> as std::convert::From>::from","value":"fn from(DateTime<Utc>) -> Self","parent":{"krate":2,"index":3056},"children":[],"decl_id":{"krate":2,"index":3058},"docs":" Convert this `DateTime<Utc>` instance into a `DateTime<FixedOffset>` instance.","sig":null,"attributes":[{"value":"/ Convert this `DateTime<Utc>` instance into a `DateTime<FixedOffset>` instance.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":86597,"byte_end":86679,"line_start":405,"line_end":405,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":86684,"byte_end":86687,"line_start":406,"line_end":406,"column_start":5,"column_end":8}},{"value":"/ Conversion is done via [`DateTime::with_timezone`]. Note that the converted value returned by","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":86692,"byte_end":86789,"line_start":407,"line_end":407,"column_start":5,"column_end":102}},{"value":"/ this will be created with a fixed timezone offset of 0.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":86794,"byte_end":86853,"line_start":408,"line_end":408,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":890},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":87306,"byte_end":87310,"line_start":420,"line_end":420,"column_start":8,"column_end":12},"name":"from","qualname":"<DateTime<Local> as std::convert::From>::from","value":"fn from(DateTime<Utc>) -> Self","parent":{"krate":2,"index":3056},"children":[],"decl_id":{"krate":2,"index":3058},"docs":" Convert this `DateTime<Utc>` instance into a `DateTime<Local>` instance.","sig":null,"attributes":[{"value":"/ Convert this `DateTime<Utc>` instance into a `DateTime<Local>` instance.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":87105,"byte_end":87181,"line_start":417,"line_end":417,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":87186,"byte_end":87189,"line_start":418,"line_end":418,"column_start":5,"column_end":8}},{"value":"/ Conversion is performed via [`DateTime::with_timezone`], accounting for the difference in timezones.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":87194,"byte_end":87298,"line_start":419,"line_end":419,"column_start":5,"column_end":109}}]},{"kind":"Method","id":{"krate":0,"index":892},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":87732,"byte_end":87736,"line_start":431,"line_end":431,"column_start":8,"column_end":12},"name":"from","qualname":"<DateTime<Utc> as std::convert::From>::from","value":"fn from(DateTime<FixedOffset>) -> Self","parent":{"krate":2,"index":3056},"children":[],"decl_id":{"krate":2,"index":3058},"docs":" Convert this `DateTime<FixedOffset>` instance into a `DateTime<Utc>` instance.","sig":null,"attributes":[{"value":"/ Convert this `DateTime<FixedOffset>` instance into a `DateTime<Utc>` instance.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":87521,"byte_end":87603,"line_start":427,"line_end":427,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":87608,"byte_end":87611,"line_start":428,"line_end":428,"column_start":5,"column_end":8}},{"value":"/ Conversion is performed via [`DateTime::with_timezone`], accounting for the timezone","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":87616,"byte_end":87704,"line_start":429,"line_end":429,"column_start":5,"column_end":93}},{"value":"/ difference.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":87709,"byte_end":87724,"line_start":430,"line_end":430,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":894},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":88200,"byte_end":88204,"line_start":443,"line_end":443,"column_start":8,"column_end":12},"name":"from","qualname":"<DateTime<Local> as std::convert::From>::from","value":"fn from(DateTime<FixedOffset>) -> Self","parent":{"krate":2,"index":3056},"children":[],"decl_id":{"krate":2,"index":3058},"docs":" Convert this `DateTime<FixedOffset>` instance into a `DateTime<Local>` instance.","sig":null,"attributes":[{"value":"/ Convert this `DateTime<FixedOffset>` instance into a `DateTime<Local>` instance.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":87983,"byte_end":88067,"line_start":439,"line_end":439,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":88072,"byte_end":88075,"line_start":440,"line_end":440,"column_start":5,"column_end":8}},{"value":"/ Conversion is performed via [`DateTime::with_timezone`]. Returns the equivalent value in local","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":88080,"byte_end":88178,"line_start":441,"line_end":441,"column_start":5,"column_end":103}},{"value":"/ time.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":88183,"byte_end":88192,"line_start":442,"line_end":442,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":896},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":88646,"byte_end":88650,"line_start":455,"line_end":455,"column_start":8,"column_end":12},"name":"from","qualname":"<DateTime<Utc> as std::convert::From>::from","value":"fn from(DateTime<Local>) -> Self","parent":{"krate":2,"index":3056},"children":[],"decl_id":{"krate":2,"index":3058},"docs":" Convert this `DateTime<Local>` instance into a `DateTime<Utc>` instance.","sig":null,"attributes":[{"value":"/ Convert this `DateTime<Local>` instance into a `DateTime<Utc>` instance.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":88437,"byte_end":88513,"line_start":451,"line_end":451,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":88518,"byte_end":88521,"line_start":452,"line_end":452,"column_start":5,"column_end":8}},{"value":"/ Conversion is performed via [`DateTime::with_timezone`], accounting for the difference in","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":88526,"byte_end":88619,"line_start":453,"line_end":453,"column_start":5,"column_end":98}},{"value":"/ timezones.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":88624,"byte_end":88638,"line_start":454,"line_end":454,"column_start":5,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":898},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":89162,"byte_end":89166,"line_start":467,"line_end":467,"column_start":8,"column_end":12},"name":"from","qualname":"<DateTime<FixedOffset> as std::convert::From>::from","value":"fn from(DateTime<Local>) -> Self","parent":{"krate":2,"index":3056},"children":[],"decl_id":{"krate":2,"index":3058},"docs":" Convert this `DateTime<Local>` instance into a `DateTime<FixedOffset>` instance.","sig":null,"attributes":[{"value":"/ Convert this `DateTime<Local>` instance into a `DateTime<FixedOffset>` instance.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":88891,"byte_end":88975,"line_start":463,"line_end":463,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":88980,"byte_end":88983,"line_start":464,"line_end":464,"column_start":5,"column_end":8}},{"value":"/ Conversion is performed via [`DateTime::with_timezone`]. Note that the converted value returned","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":88988,"byte_end":89087,"line_start":465,"line_end":465,"column_start":5,"column_end":104}},{"value":"/ by this will be created with a fixed timezone offset of 0.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":89092,"byte_end":89154,"line_start":466,"line_end":466,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":904},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":90192,"byte_end":90210,"line_start":494,"line_end":494,"column_start":12,"column_end":30},"name":"parse_from_rfc2822","qualname":"<DateTime<FixedOffset>>::parse_from_rfc2822","value":"fn parse_from_rfc2822(&str) -> ParseResult<DateTime<FixedOffset>>","parent":null,"children":[],"decl_id":null,"docs":" Parses an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`,\n then returns a new [`DateTime`] with a parsed [`FixedOffset`].","sig":null,"attributes":[{"value":"/ Parses an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":89615,"byte_end":89700,"line_start":481,"line_end":481,"column_start":5,"column_end":90}},{"value":"/ then returns a new [`DateTime`] with a parsed [`FixedOffset`].","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":89705,"byte_end":89771,"line_start":482,"line_end":482,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":89776,"byte_end":89779,"line_start":483,"line_end":483,"column_start":5,"column_end":8}},{"value":"/ RFC 2822 is the internet message standard that specifies the","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":89784,"byte_end":89848,"line_start":484,"line_end":484,"column_start":5,"column_end":69}},{"value":"/ representation of times in HTTP and email headers.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":89853,"byte_end":89907,"line_start":485,"line_end":485,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":89912,"byte_end":89915,"line_start":486,"line_end":486,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":89920,"byte_end":89927,"line_start":487,"line_end":487,"column_start":5,"column_end":12}},{"value":"/ # use chrono::{DateTime, FixedOffset, TimeZone};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":89932,"byte_end":89984,"line_start":488,"line_end":488,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":89989,"byte_end":90004,"line_start":489,"line_end":489,"column_start":5,"column_end":20}},{"value":"/     DateTime::parse_from_rfc2822(\"Wed, 18 Feb 2015 23:16:09 GMT\").unwrap(),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":90009,"byte_end":90088,"line_start":490,"line_end":490,"column_start":5,"column_end":84}},{"value":"/     FixedOffset::east(0).ymd(2015, 2, 18).and_hms(23, 16, 9)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":90093,"byte_end":90157,"line_start":491,"line_end":491,"column_start":5,"column_end":69}},{"value":"/ );","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":90162,"byte_end":90168,"line_start":492,"line_end":492,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":90173,"byte_end":90180,"line_start":493,"line_end":493,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":906},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":90831,"byte_end":90849,"line_start":506,"line_end":506,"column_start":12,"column_end":30},"name":"parse_from_rfc3339","qualname":"<DateTime<FixedOffset>>::parse_from_rfc3339","value":"fn parse_from_rfc3339(&str) -> ParseResult<DateTime<FixedOffset>>","parent":null,"children":[],"decl_id":null,"docs":" Parses an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`,\n then returns a new [`DateTime`] with a parsed [`FixedOffset`].","sig":null,"attributes":[{"value":"/ Parses an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":90458,"byte_end":90551,"line_start":501,"line_end":501,"column_start":5,"column_end":98}},{"value":"/ then returns a new [`DateTime`] with a parsed [`FixedOffset`].","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":90556,"byte_end":90622,"line_start":502,"line_end":502,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":90627,"byte_end":90630,"line_start":503,"line_end":503,"column_start":5,"column_end":8}},{"value":"/ Why isn't this named `parse_from_iso8601`? That's because ISO 8601 allows some freedom","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":90635,"byte_end":90725,"line_start":504,"line_end":504,"column_start":5,"column_end":95}},{"value":"/ over the syntax and RFC 3339 exercises that freedom to rigidly define a fixed format.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":90730,"byte_end":90819,"line_start":505,"line_end":505,"column_start":5,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":908},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":91995,"byte_end":92009,"line_start":535,"line_end":535,"column_start":12,"column_end":26},"name":"parse_from_str","qualname":"<DateTime<FixedOffset>>::parse_from_str","value":"fn parse_from_str(&str, &str) -> ParseResult<DateTime<FixedOffset>>","parent":null,"children":[],"decl_id":null,"docs":" Parses a string with the specified format string and returns a new\n [`DateTime`] with a parsed [`FixedOffset`].","sig":null,"attributes":[{"value":"/ Parses a string with the specified format string and returns a new","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":91097,"byte_end":91167,"line_start":513,"line_end":513,"column_start":5,"column_end":75}},{"value":"/ [`DateTime`] with a parsed [`FixedOffset`].","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":91172,"byte_end":91219,"line_start":514,"line_end":514,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":91224,"byte_end":91227,"line_start":515,"line_end":515,"column_start":5,"column_end":8}},{"value":"/ See the [`crate::format::strftime`] module on the supported escape","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":91232,"byte_end":91302,"line_start":516,"line_end":516,"column_start":5,"column_end":75}},{"value":"/ sequences.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":91307,"byte_end":91321,"line_start":517,"line_end":517,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":91326,"byte_end":91329,"line_start":518,"line_end":518,"column_start":5,"column_end":8}},{"value":"/ See also [`TimeZone::datetime_from_str`] which gives a local","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":91334,"byte_end":91398,"line_start":519,"line_end":519,"column_start":5,"column_end":69}},{"value":"/ [`DateTime`] on specific time zone.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":91403,"byte_end":91442,"line_start":520,"line_end":520,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":91447,"byte_end":91450,"line_start":521,"line_end":521,"column_start":5,"column_end":8}},{"value":"/ Note that this method *requires a timezone* in the string. See","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":91455,"byte_end":91521,"line_start":522,"line_end":522,"column_start":5,"column_end":71}},{"value":"/ [`NaiveDateTime::parse_from_str`]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":91526,"byte_end":91563,"line_start":523,"line_end":523,"column_start":5,"column_end":42}},{"value":"/ for a version that does not require a timezone in the to-be-parsed str.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":91568,"byte_end":91643,"line_start":524,"line_end":524,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":91648,"byte_end":91651,"line_start":525,"line_end":525,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":91656,"byte_end":91669,"line_start":526,"line_end":526,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":91674,"byte_end":91677,"line_start":527,"line_end":527,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":91682,"byte_end":91693,"line_start":528,"line_end":528,"column_start":5,"column_end":16}},{"value":"/ use chrono::{DateTime, FixedOffset, TimeZone};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":91698,"byte_end":91748,"line_start":529,"line_end":529,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":91753,"byte_end":91756,"line_start":530,"line_end":530,"column_start":5,"column_end":8}},{"value":"/ let dt = DateTime::parse_from_str(","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":91761,"byte_end":91799,"line_start":531,"line_end":531,"column_start":5,"column_end":43}},{"value":"/     \"1983 Apr 13 12:09:14.274 +0000\", \"%Y %b %d %H:%M:%S%.3f %z\");","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":91804,"byte_end":91874,"line_start":532,"line_end":532,"column_start":5,"column_end":75}},{"value":"/ assert_eq!(dt, Ok(FixedOffset::east(0).ymd(1983, 4, 13).and_hms_milli(12, 9, 14, 274)));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":91879,"byte_end":91971,"line_start":533,"line_end":533,"column_start":5,"column_end":97}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":91976,"byte_end":91983,"line_start":534,"line_end":534,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":911},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":92435,"byte_end":92445,"line_start":548,"line_end":548,"column_start":12,"column_end":22},"name":"to_rfc2822","qualname":"<DateTime<Tz>>::to_rfc2822","value":"fn to_rfc2822(&Self) -> String","parent":null,"children":[],"decl_id":null,"docs":" Returns an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`.\n","sig":null,"attributes":[{"value":"/ Returns an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":92279,"byte_end":92365,"line_start":546,"line_end":546,"column_start":5,"column_end":91}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":92370,"byte_end":92423,"line_start":547,"line_end":547,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":913},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":92769,"byte_end":92779,"line_start":555,"line_end":555,"column_start":12,"column_end":22},"name":"to_rfc3339","qualname":"<DateTime<Tz>>::to_rfc3339","value":"fn to_rfc3339(&Self) -> String","parent":null,"children":[],"decl_id":null,"docs":" Returns an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`.\n","sig":null,"attributes":[{"value":"/ Returns an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":92605,"byte_end":92699,"line_start":553,"line_end":553,"column_start":5,"column_end":99}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":92704,"byte_end":92757,"line_start":554,"line_end":554,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":915},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":94131,"byte_end":94146,"line_start":585,"line_end":585,"column_start":12,"column_end":27},"name":"to_rfc3339_opts","qualname":"<DateTime<Tz>>::to_rfc3339_opts","value":"fn to_rfc3339_opts(&Self, SecondsFormat, bool) -> String","parent":null,"children":[],"decl_id":null,"docs":" Return an RFC 3339 and ISO 8601 date and time string with subseconds\n formatted as per a `SecondsFormat`.","sig":null,"attributes":[{"value":"/ Return an RFC 3339 and ISO 8601 date and time string with subseconds","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":92939,"byte_end":93011,"line_start":560,"line_end":560,"column_start":5,"column_end":77}},{"value":"/ formatted as per a `SecondsFormat`.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":93016,"byte_end":93055,"line_start":561,"line_end":561,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":93060,"byte_end":93063,"line_start":562,"line_end":562,"column_start":5,"column_end":8}},{"value":"/ If passed `use_z` true and the timezone is UTC (offset 0), use 'Z', as","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":93068,"byte_end":93142,"line_start":563,"line_end":563,"column_start":5,"column_end":79}},{"value":"/ per [`Fixed::TimezoneOffsetColonZ`] If passed `use_z` false, use","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":93147,"byte_end":93215,"line_start":564,"line_end":564,"column_start":5,"column_end":73}},{"value":"/ [`Fixed::TimezoneOffsetColon`]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":93220,"byte_end":93254,"line_start":565,"line_end":565,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":93259,"byte_end":93262,"line_start":566,"line_end":566,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":93267,"byte_end":93281,"line_start":567,"line_end":567,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":93286,"byte_end":93289,"line_start":568,"line_end":568,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":93294,"byte_end":93305,"line_start":569,"line_end":569,"column_start":5,"column_end":16}},{"value":"/ # use chrono::{DateTime, FixedOffset, SecondsFormat, TimeZone, Utc};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":93310,"byte_end":93382,"line_start":570,"line_end":570,"column_start":5,"column_end":77}},{"value":"/ let dt = Utc.ymd(2018, 1, 26).and_hms_micro(18, 30, 9, 453_829);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":93387,"byte_end":93455,"line_start":571,"line_end":571,"column_start":5,"column_end":73}},{"value":"/ assert_eq!(dt.to_rfc3339_opts(SecondsFormat::Millis, false),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":93460,"byte_end":93524,"line_start":572,"line_end":572,"column_start":5,"column_end":69}},{"value":"/            \"2018-01-26T18:30:09.453+00:00\");","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":93529,"byte_end":93577,"line_start":573,"line_end":573,"column_start":5,"column_end":53}},{"value":"/ assert_eq!(dt.to_rfc3339_opts(SecondsFormat::Millis, true),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":93582,"byte_end":93645,"line_start":574,"line_end":574,"column_start":5,"column_end":68}},{"value":"/            \"2018-01-26T18:30:09.453Z\");","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":93650,"byte_end":93693,"line_start":575,"line_end":575,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(dt.to_rfc3339_opts(SecondsFormat::Secs, true),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":93698,"byte_end":93759,"line_start":576,"line_end":576,"column_start":5,"column_end":66}},{"value":"/            \"2018-01-26T18:30:09Z\");","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":93764,"byte_end":93803,"line_start":577,"line_end":577,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":93808,"byte_end":93811,"line_start":578,"line_end":578,"column_start":5,"column_end":8}},{"value":"/ let pst = FixedOffset::east(8 * 60 * 60);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":93816,"byte_end":93861,"line_start":579,"line_end":579,"column_start":5,"column_end":50}},{"value":"/ let dt = pst.ymd(2018, 1, 26).and_hms_micro(10, 30, 9, 453_829);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":93866,"byte_end":93934,"line_start":580,"line_end":580,"column_start":5,"column_end":73}},{"value":"/ assert_eq!(dt.to_rfc3339_opts(SecondsFormat::Secs, true),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":93939,"byte_end":94000,"line_start":581,"line_end":581,"column_start":5,"column_end":66}},{"value":"/            \"2018-01-26T10:30:09+08:00\");","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":94005,"byte_end":94049,"line_start":582,"line_end":582,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":94054,"byte_end":94061,"line_start":583,"line_end":583,"column_start":5,"column_end":12}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":94066,"byte_end":94119,"line_start":584,"line_end":584,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":922},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":95769,"byte_end":95786,"line_start":630,"line_end":630,"column_start":12,"column_end":29},"name":"format_with_items","qualname":"<DateTime<Tz>>::format_with_items","value":"fn format_with_items<'a, I, B>(&Self, I) -> DelayedFormat<I> where\nI: Iterator<Item = B> + Clone, B: Borrow<Item>","parent":null,"children":[],"decl_id":null,"docs":" Formats the combined date and time with the specified formatting items.\n","sig":null,"attributes":[{"value":"/ Formats the combined date and time with the specified formatting items.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":95610,"byte_end":95685,"line_start":627,"line_end":627,"column_start":5,"column_end":80}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":95690,"byte_end":95743,"line_start":628,"line_end":628,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":95748,"byte_end":95757,"line_start":629,"line_end":629,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":926},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":96621,"byte_end":96627,"line_start":653,"line_end":653,"column_start":12,"column_end":18},"name":"format","qualname":"<DateTime<Tz>>::format","value":"fn format<'a>(&Self, &'a str) -> DelayedFormat<StrftimeItems>","parent":null,"children":[],"decl_id":null,"docs":" Formats the combined date and time with the specified format string.\n See the [`crate::format::strftime`] module\n on the supported escape sequences.","sig":null,"attributes":[{"value":"/ Formats the combined date and time with the specified format string.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":96069,"byte_end":96141,"line_start":639,"line_end":639,"column_start":5,"column_end":77}},{"value":"/ See the [`crate::format::strftime`] module","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":96146,"byte_end":96192,"line_start":640,"line_end":640,"column_start":5,"column_end":51}},{"value":"/ on the supported escape sequences.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":96197,"byte_end":96235,"line_start":641,"line_end":641,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":96240,"byte_end":96243,"line_start":642,"line_end":642,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":96248,"byte_end":96261,"line_start":643,"line_end":643,"column_start":5,"column_end":18}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":96266,"byte_end":96277,"line_start":644,"line_end":644,"column_start":5,"column_end":16}},{"value":"/ use chrono::prelude::*;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":96282,"byte_end":96309,"line_start":645,"line_end":645,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":96314,"byte_end":96317,"line_start":646,"line_end":646,"column_start":5,"column_end":8}},{"value":"/ let date_time: DateTime<Utc> = Utc.ymd(2017, 04, 02).and_hms(12, 50, 32);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":96322,"byte_end":96399,"line_start":647,"line_end":647,"column_start":5,"column_end":82}},{"value":"/ let formatted = format!(\"{}\", date_time.format(\"%d/%m/%Y %H:%M\"));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":96404,"byte_end":96474,"line_start":648,"line_end":648,"column_start":5,"column_end":75}},{"value":"/ assert_eq!(formatted, \"02/04/2017 12:50\");","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":96479,"byte_end":96525,"line_start":649,"line_end":649,"column_start":5,"column_end":51}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":96530,"byte_end":96537,"line_start":650,"line_end":650,"column_start":5,"column_end":12}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":96542,"byte_end":96595,"line_start":651,"line_end":651,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":96600,"byte_end":96609,"line_start":652,"line_end":652,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":930},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":97911,"byte_end":97915,"line_start":697,"line_end":697,"column_start":8,"column_end":12},"name":"year","qualname":"<DateTime<Tz> as traits::Datelike>::year","value":"fn year(&Self) -> i32","parent":{"krate":0,"index":3214},"children":[],"decl_id":{"krate":0,"index":3215},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":97894,"byte_end":97903,"line_start":696,"line_end":696,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":931},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":97993,"byte_end":97998,"line_start":701,"line_end":701,"column_start":8,"column_end":13},"name":"month","qualname":"<DateTime<Tz> as traits::Datelike>::month","value":"fn month(&Self) -> u32","parent":{"krate":0,"index":3214},"children":[],"decl_id":{"krate":0,"index":3217},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":97976,"byte_end":97985,"line_start":700,"line_end":700,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":932},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":98077,"byte_end":98083,"line_start":705,"line_end":705,"column_start":8,"column_end":14},"name":"month0","qualname":"<DateTime<Tz> as traits::Datelike>::month0","value":"fn month0(&Self) -> u32","parent":{"krate":0,"index":3214},"children":[],"decl_id":{"krate":0,"index":3218},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":98060,"byte_end":98069,"line_start":704,"line_end":704,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":933},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":98163,"byte_end":98166,"line_start":709,"line_end":709,"column_start":8,"column_end":11},"name":"day","qualname":"<DateTime<Tz> as traits::Datelike>::day","value":"fn day(&Self) -> u32","parent":{"krate":0,"index":3214},"children":[],"decl_id":{"krate":0,"index":3219},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":98146,"byte_end":98155,"line_start":708,"line_end":708,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":934},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":98243,"byte_end":98247,"line_start":713,"line_end":713,"column_start":8,"column_end":12},"name":"day0","qualname":"<DateTime<Tz> as traits::Datelike>::day0","value":"fn day0(&Self) -> u32","parent":{"krate":0,"index":3214},"children":[],"decl_id":{"krate":0,"index":3220},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":98226,"byte_end":98235,"line_start":712,"line_end":712,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":935},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":98325,"byte_end":98332,"line_start":717,"line_end":717,"column_start":8,"column_end":15},"name":"ordinal","qualname":"<DateTime<Tz> as traits::Datelike>::ordinal","value":"fn ordinal(&Self) -> u32","parent":{"krate":0,"index":3214},"children":[],"decl_id":{"krate":0,"index":3221},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":98308,"byte_end":98317,"line_start":716,"line_end":716,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":936},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":98413,"byte_end":98421,"line_start":721,"line_end":721,"column_start":8,"column_end":16},"name":"ordinal0","qualname":"<DateTime<Tz> as traits::Datelike>::ordinal0","value":"fn ordinal0(&Self) -> u32","parent":{"krate":0,"index":3214},"children":[],"decl_id":{"krate":0,"index":3222},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":98396,"byte_end":98405,"line_start":720,"line_end":720,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":937},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":98503,"byte_end":98510,"line_start":725,"line_end":725,"column_start":8,"column_end":15},"name":"weekday","qualname":"<DateTime<Tz> as traits::Datelike>::weekday","value":"fn weekday(&Self) -> Weekday","parent":{"krate":0,"index":3214},"children":[],"decl_id":{"krate":0,"index":3223},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":98486,"byte_end":98495,"line_start":724,"line_end":724,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":938},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":98595,"byte_end":98603,"line_start":729,"line_end":729,"column_start":8,"column_end":16},"name":"iso_week","qualname":"<DateTime<Tz> as traits::Datelike>::iso_week","value":"fn iso_week(&Self) -> IsoWeek","parent":{"krate":0,"index":3214},"children":[],"decl_id":{"krate":0,"index":3224},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":98578,"byte_end":98587,"line_start":728,"line_end":728,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":939},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":98690,"byte_end":98699,"line_start":734,"line_end":734,"column_start":8,"column_end":17},"name":"with_year","qualname":"<DateTime<Tz> as traits::Datelike>::with_year","value":"fn with_year(&Self, i32) -> Option<DateTime<Tz>>","parent":{"krate":0,"index":3214},"children":[],"decl_id":{"krate":0,"index":3225},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":98673,"byte_end":98682,"line_start":733,"line_end":733,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":941},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":98833,"byte_end":98843,"line_start":739,"line_end":739,"column_start":8,"column_end":18},"name":"with_month","qualname":"<DateTime<Tz> as traits::Datelike>::with_month","value":"fn with_month(&Self, u32) -> Option<DateTime<Tz>>","parent":{"krate":0,"index":3214},"children":[],"decl_id":{"krate":0,"index":3226},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":98816,"byte_end":98825,"line_start":738,"line_end":738,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":943},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":98980,"byte_end":98991,"line_start":744,"line_end":744,"column_start":8,"column_end":19},"name":"with_month0","qualname":"<DateTime<Tz> as traits::Datelike>::with_month0","value":"fn with_month0(&Self, u32) -> Option<DateTime<Tz>>","parent":{"krate":0,"index":3214},"children":[],"decl_id":{"krate":0,"index":3227},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":98963,"byte_end":98972,"line_start":743,"line_end":743,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":945},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":99131,"byte_end":99139,"line_start":749,"line_end":749,"column_start":8,"column_end":16},"name":"with_day","qualname":"<DateTime<Tz> as traits::Datelike>::with_day","value":"fn with_day(&Self, u32) -> Option<DateTime<Tz>>","parent":{"krate":0,"index":3214},"children":[],"decl_id":{"krate":0,"index":3228},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":99114,"byte_end":99123,"line_start":748,"line_end":748,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":947},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":99270,"byte_end":99279,"line_start":754,"line_end":754,"column_start":8,"column_end":17},"name":"with_day0","qualname":"<DateTime<Tz> as traits::Datelike>::with_day0","value":"fn with_day0(&Self, u32) -> Option<DateTime<Tz>>","parent":{"krate":0,"index":3214},"children":[],"decl_id":{"krate":0,"index":3229},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":99253,"byte_end":99262,"line_start":753,"line_end":753,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":949},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":99413,"byte_end":99425,"line_start":759,"line_end":759,"column_start":8,"column_end":20},"name":"with_ordinal","qualname":"<DateTime<Tz> as traits::Datelike>::with_ordinal","value":"fn with_ordinal(&Self, u32) -> Option<DateTime<Tz>>","parent":{"krate":0,"index":3214},"children":[],"decl_id":{"krate":0,"index":3230},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":99396,"byte_end":99405,"line_start":758,"line_end":758,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":951},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":99568,"byte_end":99581,"line_start":764,"line_end":764,"column_start":8,"column_end":21},"name":"with_ordinal0","qualname":"<DateTime<Tz> as traits::Datelike>::with_ordinal0","value":"fn with_ordinal0(&Self, u32) -> Option<DateTime<Tz>>","parent":{"krate":0,"index":3214},"children":[],"decl_id":{"krate":0,"index":3231},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":99551,"byte_end":99560,"line_start":763,"line_end":763,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":955},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":99776,"byte_end":99780,"line_start":771,"line_end":771,"column_start":8,"column_end":12},"name":"hour","qualname":"<DateTime<Tz> as traits::Timelike>::hour","value":"fn hour(&Self) -> u32","parent":{"krate":0,"index":3233},"children":[],"decl_id":{"krate":0,"index":3234},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":99759,"byte_end":99768,"line_start":770,"line_end":770,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":956},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":99858,"byte_end":99864,"line_start":775,"line_end":775,"column_start":8,"column_end":14},"name":"minute","qualname":"<DateTime<Tz> as traits::Timelike>::minute","value":"fn minute(&Self) -> u32","parent":{"krate":0,"index":3233},"children":[],"decl_id":{"krate":0,"index":3236},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":99841,"byte_end":99850,"line_start":774,"line_end":774,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":957},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":99944,"byte_end":99950,"line_start":779,"line_end":779,"column_start":8,"column_end":14},"name":"second","qualname":"<DateTime<Tz> as traits::Timelike>::second","value":"fn second(&Self) -> u32","parent":{"krate":0,"index":3233},"children":[],"decl_id":{"krate":0,"index":3237},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":99927,"byte_end":99936,"line_start":778,"line_end":778,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":958},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":100030,"byte_end":100040,"line_start":783,"line_end":783,"column_start":8,"column_end":18},"name":"nanosecond","qualname":"<DateTime<Tz> as traits::Timelike>::nanosecond","value":"fn nanosecond(&Self) -> u32","parent":{"krate":0,"index":3233},"children":[],"decl_id":{"krate":0,"index":3238},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":100013,"byte_end":100022,"line_start":782,"line_end":782,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":959},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":100125,"byte_end":100134,"line_start":788,"line_end":788,"column_start":8,"column_end":17},"name":"with_hour","qualname":"<DateTime<Tz> as traits::Timelike>::with_hour","value":"fn with_hour(&Self, u32) -> Option<DateTime<Tz>>","parent":{"krate":0,"index":3233},"children":[],"decl_id":{"krate":0,"index":3239},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":100108,"byte_end":100117,"line_start":787,"line_end":787,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":961},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":100268,"byte_end":100279,"line_start":793,"line_end":793,"column_start":8,"column_end":19},"name":"with_minute","qualname":"<DateTime<Tz> as traits::Timelike>::with_minute","value":"fn with_minute(&Self, u32) -> Option<DateTime<Tz>>","parent":{"krate":0,"index":3233},"children":[],"decl_id":{"krate":0,"index":3240},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":100251,"byte_end":100260,"line_start":792,"line_end":792,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":963},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":100413,"byte_end":100424,"line_start":798,"line_end":798,"column_start":8,"column_end":19},"name":"with_second","qualname":"<DateTime<Tz> as traits::Timelike>::with_second","value":"fn with_second(&Self, u32) -> Option<DateTime<Tz>>","parent":{"krate":0,"index":3233},"children":[],"decl_id":{"krate":0,"index":3241},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":100396,"byte_end":100405,"line_start":797,"line_end":797,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":965},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":100558,"byte_end":100573,"line_start":803,"line_end":803,"column_start":8,"column_end":23},"name":"with_nanosecond","qualname":"<DateTime<Tz> as traits::Timelike>::with_nanosecond","value":"fn with_nanosecond(&Self, u32) -> Option<DateTime<Tz>>","parent":{"krate":0,"index":3233},"children":[],"decl_id":{"krate":0,"index":3242},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":100541,"byte_end":100550,"line_start":802,"line_end":802,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":974},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":101015,"byte_end":101017,"line_start":813,"line_end":813,"column_start":8,"column_end":10},"name":"eq","qualname":"<DateTime<Tz> as std::cmp::PartialEq>::eq","value":"fn eq(&Self, &DateTime<Tz2>) -> bool","parent":{"krate":2,"index":2802},"children":[],"decl_id":{"krate":2,"index":2804},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":980},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":101810,"byte_end":101821,"line_start":836,"line_end":836,"column_start":8,"column_end":19},"name":"partial_cmp","qualname":"<DateTime<Tz> as std::cmp::PartialOrd>::partial_cmp","value":"fn partial_cmp(&Self, &DateTime<Tz2>) -> Option<Ordering>","parent":{"krate":2,"index":2848},"children":[],"decl_id":{"krate":2,"index":2850},"docs":" Compare two DateTimes based on their true time, ignoring time zones","sig":null,"attributes":[{"value":"/ Compare two DateTimes based on their true time, ignoring time zones","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":101233,"byte_end":101304,"line_start":821,"line_end":821,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":101309,"byte_end":101312,"line_start":822,"line_end":822,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":101317,"byte_end":101330,"line_start":823,"line_end":823,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":101335,"byte_end":101338,"line_start":824,"line_end":824,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":101343,"byte_end":101350,"line_start":825,"line_end":825,"column_start":5,"column_end":12}},{"value":"/ use chrono::prelude::*;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":101355,"byte_end":101382,"line_start":826,"line_end":826,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":101387,"byte_end":101390,"line_start":827,"line_end":827,"column_start":5,"column_end":8}},{"value":"/ let earlier = Utc.ymd(2015, 5, 15).and_hms(2, 0, 0).with_timezone(&FixedOffset::west(1 * 3600));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":101395,"byte_end":101495,"line_start":828,"line_end":828,"column_start":5,"column_end":105}},{"value":"/ let later   = Utc.ymd(2015, 5, 15).and_hms(3, 0, 0).with_timezone(&FixedOffset::west(5 * 3600));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":101500,"byte_end":101600,"line_start":829,"line_end":829,"column_start":5,"column_end":105}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":101605,"byte_end":101608,"line_start":830,"line_end":830,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(earlier.to_string(), \"2015-05-15 01:00:00 -01:00\");","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":101613,"byte_end":101679,"line_start":831,"line_end":831,"column_start":5,"column_end":71}},{"value":"/ assert_eq!(later.to_string(), \"2015-05-14 22:00:00 -05:00\");","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":101684,"byte_end":101748,"line_start":832,"line_end":832,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":101753,"byte_end":101756,"line_start":833,"line_end":833,"column_start":5,"column_end":8}},{"value":"/ assert!(later > earlier);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":101761,"byte_end":101790,"line_start":834,"line_end":834,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":101795,"byte_end":101802,"line_start":835,"line_end":835,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":983},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":101983,"byte_end":101986,"line_start":842,"line_end":842,"column_start":8,"column_end":11},"name":"cmp","qualname":"<DateTime<Tz> as std::cmp::Ord>::cmp","value":"fn cmp(&Self, &DateTime<Tz>) -> Ordering","parent":{"krate":2,"index":2838},"children":[],"decl_id":{"krate":2,"index":2839},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":986},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":102138,"byte_end":102142,"line_start":848,"line_end":848,"column_start":8,"column_end":12},"name":"hash","qualname":"<DateTime<Tz> as std::hash::Hash>::hash","value":"fn hash<H>(&Self, &mut H) where H: hash::Hasher","parent":{"krate":2,"index":10120},"children":[],"decl_id":{"krate":2,"index":10121},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":991},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":102336,"byte_end":102339,"line_start":857,"line_end":857,"column_start":8,"column_end":11},"name":"add","qualname":"<DateTime<Tz> as std::ops::Add>::add","value":"fn add(Self, OldDuration) -> DateTime<Tz>","parent":{"krate":2,"index":3218},"children":[],"decl_id":{"krate":2,"index":3221},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":102319,"byte_end":102328,"line_start":856,"line_end":856,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":994},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":102553,"byte_end":102563,"line_start":864,"line_end":864,"column_start":8,"column_end":18},"name":"add_assign","qualname":"<DateTime<Tz> as std::ops::AddAssign>::add_assign","value":"fn add_assign(&mut Self, OldDuration)","parent":{"krate":2,"index":3249},"children":[],"decl_id":{"krate":2,"index":3251},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":102536,"byte_end":102545,"line_start":863,"line_end":863,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":998},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":102913,"byte_end":102916,"line_start":876,"line_end":876,"column_start":8,"column_end":11},"name":"sub","qualname":"<DateTime<Tz> as std::ops::Sub>::sub","value":"fn sub(Self, OldDuration) -> DateTime<Tz>","parent":{"krate":2,"index":3223},"children":[],"decl_id":{"krate":2,"index":3226},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":102896,"byte_end":102905,"line_start":875,"line_end":875,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1001},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":103130,"byte_end":103140,"line_start":883,"line_end":883,"column_start":8,"column_end":18},"name":"sub_assign","qualname":"<DateTime<Tz> as std::ops::SubAssign>::sub_assign","value":"fn sub_assign(&mut Self, OldDuration)","parent":{"krate":2,"index":3253},"children":[],"decl_id":{"krate":2,"index":3255},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":103113,"byte_end":103122,"line_start":882,"line_end":882,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1005},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":103489,"byte_end":103492,"line_start":895,"line_end":895,"column_start":8,"column_end":11},"name":"sub","qualname":"<DateTime<Tz> as std::ops::Sub>::sub","value":"fn sub(Self, DateTime<Tz>) -> OldDuration","parent":{"krate":2,"index":3223},"children":[],"decl_id":{"krate":2,"index":3226},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":103472,"byte_end":103481,"line_start":894,"line_end":894,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1008},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":103640,"byte_end":103643,"line_start":901,"line_end":901,"column_start":8,"column_end":11},"name":"fmt","qualname":"<DateTime<Tz> as std::fmt::Debug>::fmt","value":"fn fmt(&Self, &mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":9907},"children":[],"decl_id":{"krate":2,"index":9908},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1011},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":103858,"byte_end":103861,"line_start":910,"line_end":910,"column_start":8,"column_end":11},"name":"fmt","qualname":"<DateTime<Tz> as std::fmt::Display>::fmt","value":"fn fmt(&Self, &mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":9914},"children":[],"decl_id":{"krate":2,"index":9915},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1014},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":104492,"byte_end":104500,"line_start":929,"line_end":929,"column_start":8,"column_end":16},"name":"from_str","qualname":"<DateTime<Utc> as std::str::FromStr>::from_str","value":"fn from_str(&str) -> ParseResult<DateTime<Utc>>","parent":{"krate":2,"index":12561},"children":[],"decl_id":{"krate":2,"index":12563},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1018},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":105176,"byte_end":105184,"line_start":949,"line_end":949,"column_start":8,"column_end":16},"name":"from_str","qualname":"<DateTime<Local> as std::str::FromStr>::from_str","value":"fn from_str(&str) -> ParseResult<DateTime<Local>>","parent":{"krate":2,"index":12561},"children":[],"decl_id":{"krate":2,"index":12563},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1021},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":105399,"byte_end":105403,"line_start":956,"line_end":956,"column_start":8,"column_end":12},"name":"from","qualname":"<DateTime<Utc> as std::convert::From>::from","value":"fn from(SystemTime) -> DateTime<Utc>","parent":{"krate":2,"index":3056},"children":[],"decl_id":{"krate":2,"index":3058},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1023},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":106061,"byte_end":106065,"line_start":976,"line_end":976,"column_start":8,"column_end":12},"name":"from","qualname":"<DateTime<Local> as std::convert::From>::from","value":"fn from(SystemTime) -> DateTime<Local>","parent":{"krate":2,"index":3056},"children":[],"decl_id":{"krate":2,"index":3058},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1026},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":106263,"byte_end":106267,"line_start":983,"line_end":983,"column_start":8,"column_end":12},"name":"from","qualname":"<SystemTime as std::convert::From>::from","value":"fn from(DateTime<Tz>) -> SystemTime","parent":{"krate":2,"index":3056},"children":[],"decl_id":{"krate":2,"index":3058},"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1043},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"format","qualname":"::format","value":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","parent":null,"children":[{"krate":0,"index":1044},{"krate":0,"index":1047},{"krate":0,"index":1050},{"krate":0,"index":1053},{"krate":0,"index":1056},{"krate":0,"index":1057},{"krate":0,"index":1060},{"krate":0,"index":1063},{"krate":0,"index":1064},{"krate":0,"index":1067},{"krate":0,"index":1070},{"krate":0,"index":1071},{"krate":0,"index":1074},{"krate":0,"index":1077},{"krate":0,"index":1078},{"krate":0,"index":1081},{"krate":0,"index":1084},{"krate":0,"index":1087},{"krate":0,"index":1090},{"krate":0,"index":1093},{"krate":0,"index":1096},{"krate":0,"index":3341},{"krate":0,"index":3343},{"krate":0,"index":3345},{"krate":0,"index":3346},{"krate":0,"index":3348},{"krate":0,"index":3349},{"krate":0,"index":3351},{"krate":0,"index":3352},{"krate":0,"index":3354},{"krate":0,"index":3361},{"krate":0,"index":3362},{"krate":0,"index":3364},{"krate":0,"index":3365},{"krate":0,"index":3367},{"krate":0,"index":3368},{"krate":0,"index":3370},{"krate":0,"index":3372},{"krate":0,"index":3416},{"krate":0,"index":3418},{"krate":0,"index":3419},{"krate":0,"index":3422},{"krate":0,"index":3423},{"krate":0,"index":3425},{"krate":0,"index":1099},{"krate":0,"index":1101},{"krate":0,"index":1103},{"krate":0,"index":1105},{"krate":0,"index":1106},{"krate":0,"index":3427},{"krate":0,"index":3465},{"krate":0,"index":3467},{"krate":0,"index":3468},{"krate":0,"index":3471},{"krate":0,"index":3472},{"krate":0,"index":3474},{"krate":0,"index":3476},{"krate":0,"index":3478},{"krate":0,"index":3480},{"krate":0,"index":3482},{"krate":0,"index":3483},{"krate":0,"index":3486},{"krate":0,"index":3487},{"krate":0,"index":3489},{"krate":0,"index":3498},{"krate":0,"index":3500},{"krate":0,"index":3502},{"krate":0,"index":3503},{"krate":0,"index":3505},{"krate":0,"index":3506},{"krate":0,"index":3508},{"krate":0,"index":3531},{"krate":0,"index":3534},{"krate":0,"index":3536},{"krate":0,"index":3540},{"krate":0,"index":3542},{"krate":0,"index":3545},{"krate":0,"index":1108},{"krate":0,"index":1109},{"krate":0,"index":1110},{"krate":0,"index":1111},{"krate":0,"index":1112},{"krate":0,"index":1113},{"krate":0,"index":1114},{"krate":0,"index":3548},{"krate":0,"index":3551},{"krate":0,"index":3553},{"krate":0,"index":3555},{"krate":0,"index":3556},{"krate":0,"index":3559},{"krate":0,"index":3560},{"krate":0,"index":3562},{"krate":0,"index":1115},{"krate":0,"index":3563},{"krate":0,"index":3580},{"krate":0,"index":3582},{"krate":0,"index":3584},{"krate":0,"index":3585},{"krate":0,"index":3587},{"krate":0,"index":3588},{"krate":0,"index":3590},{"krate":0,"index":1117},{"krate":0,"index":1119},{"krate":0,"index":1121},{"krate":0,"index":1123},{"krate":0,"index":1124},{"krate":0,"index":1125},{"krate":0,"index":1126},{"krate":0,"index":1127},{"krate":0,"index":1128},{"krate":0,"index":1129},{"krate":0,"index":1130},{"krate":0,"index":1132},{"krate":0,"index":1186},{"krate":0,"index":1190},{"krate":0,"index":1299},{"krate":0,"index":1414},{"krate":0,"index":1480},{"krate":0,"index":3646},{"krate":0,"index":3652},{"krate":0,"index":1521},{"krate":0,"index":1528},{"krate":0,"index":1533},{"krate":0,"index":1536}],"decl_id":null,"docs":" Formatting (and parsing) utilities for date and time.","sig":null,"attributes":[{"value":"/ Formatting (and parsing) utilities for date and time.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":147369,"byte_end":147426,"line_start":4,"line_end":4,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":147427,"byte_end":147430,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ This module provides the common types and routines to implement,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":147431,"byte_end":147499,"line_start":6,"line_end":6,"column_start":1,"column_end":69}},{"value":"/ for example, [`DateTime::format`](../struct.DateTime.html#method.format) or","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":147500,"byte_end":147579,"line_start":7,"line_end":7,"column_start":1,"column_end":80}},{"value":"/ [`DateTime::parse_from_str`](../struct.DateTime.html#method.parse_from_str) methods.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":147580,"byte_end":147668,"line_start":8,"line_end":8,"column_start":1,"column_end":89}},{"value":"/ For most cases you should use these high-level interfaces.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":147669,"byte_end":147731,"line_start":9,"line_end":9,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":147732,"byte_end":147735,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ Internally the formatting and parsing shares the same abstract **formatting items**,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":147736,"byte_end":147824,"line_start":11,"line_end":11,"column_start":1,"column_end":89}},{"value":"/ which are just an [`Iterator`](https://doc.rust-lang.org/std/iter/trait.Iterator.html) of","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":147825,"byte_end":147918,"line_start":12,"line_end":12,"column_start":1,"column_end":94}},{"value":"/ the [`Item`](./enum.Item.html) type.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":147919,"byte_end":147959,"line_start":13,"line_end":13,"column_start":1,"column_end":41}},{"value":"/ They are generated from more readable **format strings**;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":147960,"byte_end":148021,"line_start":14,"line_end":14,"column_start":1,"column_end":62}},{"value":"/ currently Chrono supports a built-in syntax closely resembling","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":148022,"byte_end":148088,"line_start":15,"line_end":15,"column_start":1,"column_end":67}},{"value":"/ C's `strftime` format. The available options can be found [here](./strftime/index.html).","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":148089,"byte_end":148181,"line_start":16,"line_end":16,"column_start":1,"column_end":93}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":148182,"byte_end":148185,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":148186,"byte_end":148199,"line_start":18,"line_end":18,"column_start":1,"column_end":14}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":148200,"byte_end":148211,"line_start":19,"line_end":19,"column_start":1,"column_end":12}},{"value":"/ # use std::error::Error;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":148212,"byte_end":148240,"line_start":20,"line_end":20,"column_start":1,"column_end":29}},{"value":"/ use chrono::prelude::*;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":148241,"byte_end":148268,"line_start":21,"line_end":21,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":148269,"byte_end":148272,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ let date_time = Utc.ymd(2020, 11, 10).and_hms(0, 1, 32);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":148273,"byte_end":148333,"line_start":23,"line_end":23,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":148334,"byte_end":148337,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ let formatted = format!(\"{}\", date_time.format(\"%Y-%m-%d %H:%M:%S\"));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":148338,"byte_end":148411,"line_start":25,"line_end":25,"column_start":1,"column_end":74}},{"value":"/ assert_eq!(formatted, \"2020-11-10 00:01:32\");","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":148412,"byte_end":148461,"line_start":26,"line_end":26,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":148462,"byte_end":148465,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ let parsed = Utc.datetime_from_str(&formatted, \"%Y-%m-%d %H:%M:%S\")?;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":148466,"byte_end":148539,"line_start":28,"line_end":28,"column_start":1,"column_end":74}},{"value":"/ assert_eq!(parsed, date_time);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":148540,"byte_end":148574,"line_start":29,"line_end":29,"column_start":1,"column_end":35}},{"value":"/ # Ok::<(), chrono::ParseError>(())","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":148575,"byte_end":148613,"line_start":30,"line_end":30,"column_start":1,"column_end":39}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":148614,"byte_end":148621,"line_start":31,"line_end":31,"column_start":1,"column_end":8}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3355},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":149864,"byte_end":149868,"line_start":77,"line_end":77,"column_start":5,"column_end":9},"name":"None","qualname":"::format::Pad::None","value":"Pad::None","parent":{"krate":0,"index":3354},"children":[],"decl_id":null,"docs":" No padding.\n","sig":null,"attributes":[{"value":"/ No padding.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":149844,"byte_end":149859,"line_start":76,"line_end":76,"column_start":5,"column_end":20}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3357},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":149902,"byte_end":149906,"line_start":79,"line_end":79,"column_start":5,"column_end":9},"name":"Zero","qualname":"::format::Pad::Zero","value":"Pad::Zero","parent":{"krate":0,"index":3354},"children":[],"decl_id":null,"docs":" Zero (`0`) padding.\n","sig":null,"attributes":[{"value":"/ Zero (`0`) padding.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":149874,"byte_end":149897,"line_start":78,"line_end":78,"column_start":5,"column_end":28}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3359},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":149935,"byte_end":149940,"line_start":81,"line_end":81,"column_start":5,"column_end":10},"name":"Space","qualname":"::format::Pad::Space","value":"Pad::Space","parent":{"krate":0,"index":3354},"children":[],"decl_id":null,"docs":" Space padding.\n","sig":null,"attributes":[{"value":"/ Space padding.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":149912,"byte_end":149930,"line_start":80,"line_end":80,"column_start":5,"column_end":23}}]},{"kind":"Enum","id":{"krate":0,"index":3354},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":149834,"byte_end":149837,"line_start":75,"line_end":75,"column_start":10,"column_end":13},"name":"Pad","qualname":"::format::Pad","value":"enum Pad { None, Zero, Space, }","parent":null,"children":[{"krate":0,"index":3355},{"krate":0,"index":3357},{"krate":0,"index":3359}],"decl_id":null,"docs":" Padding characters for numeric items.\n","sig":null,"attributes":[{"value":"/ Padding characters for numeric items.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":149738,"byte_end":149779,"line_start":73,"line_end":73,"column_start":1,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3373},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":150836,"byte_end":150840,"line_start":101,"line_end":101,"column_start":5,"column_end":9},"name":"Year","qualname":"::format::Numeric::Year","value":"Numeric::Year","parent":{"krate":0,"index":3372},"children":[],"decl_id":null,"docs":" Full Gregorian year (FW=4, PW=∞).\n May accept years before 1 BCE or after 9999 CE, given an initial sign.\n","sig":null,"attributes":[{"value":"/ Full Gregorian year (FW=4, PW=∞).","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":150713,"byte_end":150752,"line_start":99,"line_end":99,"column_start":5,"column_end":42}},{"value":"/ May accept years before 1 BCE or after 9999 CE, given an initial sign.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":150757,"byte_end":150831,"line_start":100,"line_end":100,"column_start":5,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3375},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":150942,"byte_end":150952,"line_start":103,"line_end":103,"column_start":5,"column_end":15},"name":"YearDiv100","qualname":"::format::Numeric::YearDiv100","value":"Numeric::YearDiv100","parent":{"krate":0,"index":3372},"children":[],"decl_id":null,"docs":" Gregorian year divided by 100 (century number; FW=PW=2). Implies the non-negative year.\n","sig":null,"attributes":[{"value":"/ Gregorian year divided by 100 (century number; FW=PW=2). Implies the non-negative year.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":150846,"byte_end":150937,"line_start":102,"line_end":102,"column_start":5,"column_end":96}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3377},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":151023,"byte_end":151033,"line_start":105,"line_end":105,"column_start":5,"column_end":15},"name":"YearMod100","qualname":"::format::Numeric::YearMod100","value":"Numeric::YearMod100","parent":{"krate":0,"index":3372},"children":[],"decl_id":null,"docs":" Gregorian year modulo 100 (FW=PW=2). Cannot be negative.\n","sig":null,"attributes":[{"value":"/ Gregorian year modulo 100 (FW=PW=2). Cannot be negative.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":150958,"byte_end":151018,"line_start":104,"line_end":104,"column_start":5,"column_end":65}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3379},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":151168,"byte_end":151175,"line_start":108,"line_end":108,"column_start":5,"column_end":12},"name":"IsoYear","qualname":"::format::Numeric::IsoYear","value":"Numeric::IsoYear","parent":{"krate":0,"index":3372},"children":[],"decl_id":null,"docs":" Year in the ISO week date (FW=4, PW=∞).\n May accept years before 1 BCE or after 9999 CE, given an initial sign.\n","sig":null,"attributes":[{"value":"/ Year in the ISO week date (FW=4, PW=∞).","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":151039,"byte_end":151084,"line_start":106,"line_end":106,"column_start":5,"column_end":48}},{"value":"/ May accept years before 1 BCE or after 9999 CE, given an initial sign.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":151089,"byte_end":151163,"line_start":107,"line_end":107,"column_start":5,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3381},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":151273,"byte_end":151286,"line_start":110,"line_end":110,"column_start":5,"column_end":18},"name":"IsoYearDiv100","qualname":"::format::Numeric::IsoYearDiv100","value":"Numeric::IsoYearDiv100","parent":{"krate":0,"index":3372},"children":[],"decl_id":null,"docs":" Year in the ISO week date, divided by 100 (FW=PW=2). Implies the non-negative year.\n","sig":null,"attributes":[{"value":"/ Year in the ISO week date, divided by 100 (FW=PW=2). Implies the non-negative year.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":151181,"byte_end":151268,"line_start":109,"line_end":109,"column_start":5,"column_end":92}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3383},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":151369,"byte_end":151382,"line_start":112,"line_end":112,"column_start":5,"column_end":18},"name":"IsoYearMod100","qualname":"::format::Numeric::IsoYearMod100","value":"Numeric::IsoYearMod100","parent":{"krate":0,"index":3372},"children":[],"decl_id":null,"docs":" Year in the ISO week date, modulo 100 (FW=PW=2). Cannot be negative.\n","sig":null,"attributes":[{"value":"/ Year in the ISO week date, modulo 100 (FW=PW=2). Cannot be negative.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":151292,"byte_end":151364,"line_start":111,"line_end":111,"column_start":5,"column_end":77}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3385},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":151413,"byte_end":151418,"line_start":114,"line_end":114,"column_start":5,"column_end":10},"name":"Month","qualname":"::format::Numeric::Month","value":"Numeric::Month","parent":{"krate":0,"index":3372},"children":[],"decl_id":null,"docs":" Month (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ Month (FW=PW=2).","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":151388,"byte_end":151408,"line_start":113,"line_end":113,"column_start":5,"column_end":25}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3387},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":151460,"byte_end":151463,"line_start":116,"line_end":116,"column_start":5,"column_end":8},"name":"Day","qualname":"::format::Numeric::Day","value":"Numeric::Day","parent":{"krate":0,"index":3372},"children":[],"decl_id":null,"docs":" Day of the month (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ Day of the month (FW=PW=2).","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":151424,"byte_end":151455,"line_start":115,"line_end":115,"column_start":5,"column_end":36}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3389},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":151556,"byte_end":151567,"line_start":118,"line_end":118,"column_start":5,"column_end":16},"name":"WeekFromSun","qualname":"::format::Numeric::WeekFromSun","value":"Numeric::WeekFromSun","parent":{"krate":0,"index":3372},"children":[],"decl_id":null,"docs":" Week number, where the week 1 starts at the first Sunday of January (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ Week number, where the week 1 starts at the first Sunday of January (FW=PW=2).","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":151469,"byte_end":151551,"line_start":117,"line_end":117,"column_start":5,"column_end":87}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3391},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":151660,"byte_end":151671,"line_start":120,"line_end":120,"column_start":5,"column_end":16},"name":"WeekFromMon","qualname":"::format::Numeric::WeekFromMon","value":"Numeric::WeekFromMon","parent":{"krate":0,"index":3372},"children":[],"decl_id":null,"docs":" Week number, where the week 1 starts at the first Monday of January (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ Week number, where the week 1 starts at the first Monday of January (FW=PW=2).","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":151573,"byte_end":151655,"line_start":119,"line_end":119,"column_start":5,"column_end":87}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3393},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":151729,"byte_end":151736,"line_start":122,"line_end":122,"column_start":5,"column_end":12},"name":"IsoWeek","qualname":"::format::Numeric::IsoWeek","value":"Numeric::IsoWeek","parent":{"krate":0,"index":3372},"children":[],"decl_id":null,"docs":" Week number in the ISO week date (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ Week number in the ISO week date (FW=PW=2).","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":151677,"byte_end":151724,"line_start":121,"line_end":121,"column_start":5,"column_end":52}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3395},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":151812,"byte_end":151826,"line_start":124,"line_end":124,"column_start":5,"column_end":19},"name":"NumDaysFromSun","qualname":"::format::Numeric::NumDaysFromSun","value":"Numeric::NumDaysFromSun","parent":{"krate":0,"index":3372},"children":[],"decl_id":null,"docs":" Day of the week, where Sunday = 0 and Saturday = 6 (FW=PW=1).\n","sig":null,"attributes":[{"value":"/ Day of the week, where Sunday = 0 and Saturday = 6 (FW=PW=1).","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":151742,"byte_end":151807,"line_start":123,"line_end":123,"column_start":5,"column_end":70}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3397},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":151900,"byte_end":151914,"line_start":126,"line_end":126,"column_start":5,"column_end":19},"name":"WeekdayFromMon","qualname":"::format::Numeric::WeekdayFromMon","value":"Numeric::WeekdayFromMon","parent":{"krate":0,"index":3372},"children":[],"decl_id":null,"docs":" Day of the week, where Monday = 1 and Sunday = 7 (FW=PW=1).\n","sig":null,"attributes":[{"value":"/ Day of the week, where Monday = 1 and Sunday = 7 (FW=PW=1).","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":151832,"byte_end":151895,"line_start":125,"line_end":125,"column_start":5,"column_end":68}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3399},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":151955,"byte_end":151962,"line_start":128,"line_end":128,"column_start":5,"column_end":12},"name":"Ordinal","qualname":"::format::Numeric::Ordinal","value":"Numeric::Ordinal","parent":{"krate":0,"index":3372},"children":[],"decl_id":null,"docs":" Day of the year (FW=PW=3).\n","sig":null,"attributes":[{"value":"/ Day of the year (FW=PW=3).","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":151920,"byte_end":151950,"line_start":127,"line_end":127,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3401},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":152021,"byte_end":152025,"line_start":130,"line_end":130,"column_start":5,"column_end":9},"name":"Hour","qualname":"::format::Numeric::Hour","value":"Numeric::Hour","parent":{"krate":0,"index":3372},"children":[],"decl_id":null,"docs":" Hour number in the 24-hour clocks (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ Hour number in the 24-hour clocks (FW=PW=2).","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":151968,"byte_end":152016,"line_start":129,"line_end":129,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3403},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":152084,"byte_end":152090,"line_start":132,"line_end":132,"column_start":5,"column_end":11},"name":"Hour12","qualname":"::format::Numeric::Hour12","value":"Numeric::Hour12","parent":{"krate":0,"index":3372},"children":[],"decl_id":null,"docs":" Hour number in the 12-hour clocks (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ Hour number in the 12-hour clocks (FW=PW=2).","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":152031,"byte_end":152079,"line_start":131,"line_end":131,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3405},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":152163,"byte_end":152169,"line_start":134,"line_end":134,"column_start":5,"column_end":11},"name":"Minute","qualname":"::format::Numeric::Minute","value":"Numeric::Minute","parent":{"krate":0,"index":3372},"children":[],"decl_id":null,"docs":" The number of minutes since the last whole hour (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ The number of minutes since the last whole hour (FW=PW=2).","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":152096,"byte_end":152158,"line_start":133,"line_end":133,"column_start":5,"column_end":67}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3407},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":152244,"byte_end":152250,"line_start":136,"line_end":136,"column_start":5,"column_end":11},"name":"Second","qualname":"::format::Numeric::Second","value":"Numeric::Second","parent":{"krate":0,"index":3372},"children":[],"decl_id":null,"docs":" The number of seconds since the last whole minute (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ The number of seconds since the last whole minute (FW=PW=2).","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":152175,"byte_end":152239,"line_start":135,"line_end":135,"column_start":5,"column_end":69}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3409},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":152453,"byte_end":152463,"line_start":140,"line_end":140,"column_start":5,"column_end":15},"name":"Nanosecond","qualname":"::format::Numeric::Nanosecond","value":"Numeric::Nanosecond","parent":{"krate":0,"index":3372},"children":[],"decl_id":null,"docs":" The number of nanoseconds since the last whole second (FW=PW=9).\n Note that this is *not* left-aligned;\n see also [`Fixed::Nanosecond`](./enum.Fixed.html#variant.Nanosecond).\n","sig":null,"attributes":[{"value":"/ The number of nanoseconds since the last whole second (FW=PW=9).","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":152256,"byte_end":152324,"line_start":137,"line_end":137,"column_start":5,"column_end":73}},{"value":"/ Note that this is *not* left-aligned;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":152329,"byte_end":152370,"line_start":138,"line_end":138,"column_start":5,"column_end":46}},{"value":"/ see also [`Fixed::Nanosecond`](./enum.Fixed.html#variant.Nanosecond).","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":152375,"byte_end":152448,"line_start":139,"line_end":139,"column_start":5,"column_end":78}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3411},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":152643,"byte_end":152652,"line_start":143,"line_end":143,"column_start":5,"column_end":14},"name":"Timestamp","qualname":"::format::Numeric::Timestamp","value":"Numeric::Timestamp","parent":{"krate":0,"index":3372},"children":[],"decl_id":null,"docs":" The number of non-leap seconds since the midnight UTC on January 1, 1970 (FW=1, PW=∞).\n For formatting, it assumes UTC upon the absence of time zone offset.\n","sig":null,"attributes":[{"value":"/ The number of non-leap seconds since the midnight UTC on January 1, 1970 (FW=1, PW=∞).","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":152469,"byte_end":152561,"line_start":141,"line_end":141,"column_start":5,"column_end":95}},{"value":"/ For formatting, it assumes UTC upon the absence of time zone offset.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":152566,"byte_end":152638,"line_start":142,"line_end":142,"column_start":5,"column_end":77}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3413},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":152871,"byte_end":152879,"line_start":149,"line_end":149,"column_start":5,"column_end":13},"name":"Internal","qualname":"::format::Numeric::Internal","value":"Numeric::Internal(InternalNumeric)","parent":{"krate":0,"index":3372},"children":[],"decl_id":null,"docs":" Internal uses only.","sig":null,"attributes":[{"value":"/ Internal uses only.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":152659,"byte_end":152682,"line_start":145,"line_end":145,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":152687,"byte_end":152690,"line_start":146,"line_end":146,"column_start":5,"column_end":8}},{"value":"/ This item exists so that one can add additional internal-only formatting","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":152695,"byte_end":152771,"line_start":147,"line_end":147,"column_start":5,"column_end":81}},{"value":"/ without breaking major compatibility (as enum variants cannot be selectively private).","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":152776,"byte_end":152866,"line_start":148,"line_end":148,"column_start":5,"column_end":95}}]},{"kind":"Field","id":{"krate":0,"index":3415},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":152880,"byte_end":152895,"line_start":149,"line_end":149,"column_start":14,"column_end":29},"name":"0","qualname":"::format::Numeric::Internal::0","value":"format::InternalNumeric","parent":{"krate":0,"index":3413},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3372},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":150699,"byte_end":150706,"line_start":98,"line_end":98,"column_start":10,"column_end":17},"name":"Numeric","qualname":"::format::Numeric","value":"enum Numeric {\n    Year,\n    YearDiv100,\n    YearMod100,\n    IsoYear,\n    IsoYearDiv100,\n    IsoYearMod100,\n    Month,\n    Day,\n    WeekFromSun,\n    WeekFromMon,\n    IsoWeek,\n    NumDaysFromSun,\n    WeekdayFromMon,\n    Ordinal,\n    Hour,\n    Hour12,\n    Minute,\n    Second,\n    Nanosecond,\n    Timestamp,\n    Internal(InternalNumeric),\n}","parent":null,"children":[{"krate":0,"index":3373},{"krate":0,"index":3375},{"krate":0,"index":3377},{"krate":0,"index":3379},{"krate":0,"index":3381},{"krate":0,"index":3383},{"krate":0,"index":3385},{"krate":0,"index":3387},{"krate":0,"index":3389},{"krate":0,"index":3391},{"krate":0,"index":3393},{"krate":0,"index":3395},{"krate":0,"index":3397},{"krate":0,"index":3399},{"krate":0,"index":3401},{"krate":0,"index":3403},{"krate":0,"index":3405},{"krate":0,"index":3407},{"krate":0,"index":3409},{"krate":0,"index":3411},{"krate":0,"index":3413}],"decl_id":null,"docs":" Numeric item types.\n They have associated formatting width (FW) and parsing width (PW).","sig":null,"attributes":[{"value":"/ Numeric item types.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":149945,"byte_end":149968,"line_start":84,"line_end":84,"column_start":1,"column_end":24}},{"value":"/ They have associated formatting width (FW) and parsing width (PW).","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":149969,"byte_end":150039,"line_start":85,"line_end":85,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":150040,"byte_end":150043,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"/ The **formatting width** is the minimal width to be formatted.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":150044,"byte_end":150110,"line_start":87,"line_end":87,"column_start":1,"column_end":67}},{"value":"/ If the number is too short, and the padding is not [`Pad::None`](./enum.Pad.html#variant.None),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":150111,"byte_end":150210,"line_start":88,"line_end":88,"column_start":1,"column_end":100}},{"value":"/ then it is left-padded.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":150211,"byte_end":150238,"line_start":89,"line_end":89,"column_start":1,"column_end":28}},{"value":"/ If the number is too long or (in some cases) negative, it is printed as is.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":150239,"byte_end":150318,"line_start":90,"line_end":90,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":150319,"byte_end":150322,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ The **parsing width** is the maximal width to be scanned.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":150323,"byte_end":150384,"line_start":92,"line_end":92,"column_start":1,"column_end":62}},{"value":"/ The parser only tries to consume from one to given number of digits (greedily).","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":150385,"byte_end":150468,"line_start":93,"line_end":93,"column_start":1,"column_end":84}},{"value":"/ It also trims the preceding whitespace if any.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":150469,"byte_end":150519,"line_start":94,"line_end":94,"column_start":1,"column_end":51}},{"value":"/ It cannot parse the negative number, so some date and time cannot be formatted then","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":150520,"byte_end":150607,"line_start":95,"line_end":95,"column_start":1,"column_end":88}},{"value":"/ parsed with the same formatting items.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":150608,"byte_end":150650,"line_start":96,"line_end":96,"column_start":1,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":1099},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":152987,"byte_end":153002,"line_start":153,"line_end":153,"column_start":12,"column_end":27},"name":"InternalNumeric","qualname":"::format::InternalNumeric","value":"InternalNumeric {  }","parent":null,"children":[{"krate":0,"index":1100}],"decl_id":null,"docs":" An opaque type representing numeric item types for internal uses only.\n","sig":null,"attributes":[{"value":"/ An opaque type representing numeric item types for internal uses only.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":152901,"byte_end":152975,"line_start":152,"line_end":152,"column_start":1,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":1102},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":153066,"byte_end":153071,"line_start":158,"line_end":158,"column_start":8,"column_end":13},"name":"clone","qualname":"<InternalNumeric as std::clone::Clone>::clone","value":"fn clone(&Self) -> Self","parent":{"krate":2,"index":2772},"children":[],"decl_id":{"krate":2,"index":2773},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1104},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":153171,"byte_end":153173,"line_start":164,"line_end":164,"column_start":8,"column_end":10},"name":"eq","qualname":"<InternalNumeric as std::cmp::PartialEq>::eq","value":"fn eq(&Self, &InternalNumeric) -> bool","parent":{"krate":2,"index":2802},"children":[],"decl_id":{"krate":2,"index":2804},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1107},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":153332,"byte_end":153335,"line_start":172,"line_end":172,"column_start":8,"column_end":11},"name":"fmt","qualname":"<InternalNumeric as std::fmt::Debug>::fmt","value":"fn fmt(&Self, &mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":9907},"children":[],"decl_id":{"krate":2,"index":9908},"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3428},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":153800,"byte_end":153814,"line_start":186,"line_end":186,"column_start":5,"column_end":19},"name":"ShortMonthName","qualname":"::format::Fixed::ShortMonthName","value":"Fixed::ShortMonthName","parent":{"krate":0,"index":3427},"children":[],"decl_id":null,"docs":" Abbreviated month names.","sig":null,"attributes":[{"value":"/ Abbreviated month names.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":153667,"byte_end":153695,"line_start":183,"line_end":183,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":153700,"byte_end":153703,"line_start":184,"line_end":184,"column_start":5,"column_end":8}},{"value":"/ Prints a three-letter-long name in the title case, reads the same name in any case.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":153708,"byte_end":153795,"line_start":185,"line_end":185,"column_start":5,"column_end":92}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3430},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":153947,"byte_end":153960,"line_start":190,"line_end":190,"column_start":5,"column_end":18},"name":"LongMonthName","qualname":"::format::Fixed::LongMonthName","value":"Fixed::LongMonthName","parent":{"krate":0,"index":3427},"children":[],"decl_id":null,"docs":" Full month names.","sig":null,"attributes":[{"value":"/ Full month names.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":153820,"byte_end":153841,"line_start":187,"line_end":187,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":153846,"byte_end":153849,"line_start":188,"line_end":188,"column_start":5,"column_end":8}},{"value":"/ Prints a full name in the title case, reads either a short or full name in any case.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":153854,"byte_end":153942,"line_start":189,"line_end":189,"column_start":5,"column_end":93}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3432},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":154109,"byte_end":154125,"line_start":194,"line_end":194,"column_start":5,"column_end":21},"name":"ShortWeekdayName","qualname":"::format::Fixed::ShortWeekdayName","value":"Fixed::ShortWeekdayName","parent":{"krate":0,"index":3427},"children":[],"decl_id":null,"docs":" Abbreviated day of the week names.","sig":null,"attributes":[{"value":"/ Abbreviated day of the week names.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":153966,"byte_end":154004,"line_start":191,"line_end":191,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":154009,"byte_end":154012,"line_start":192,"line_end":192,"column_start":5,"column_end":8}},{"value":"/ Prints a three-letter-long name in the title case, reads the same name in any case.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":154017,"byte_end":154104,"line_start":193,"line_end":193,"column_start":5,"column_end":92}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3434},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":154268,"byte_end":154283,"line_start":198,"line_end":198,"column_start":5,"column_end":20},"name":"LongWeekdayName","qualname":"::format::Fixed::LongWeekdayName","value":"Fixed::LongWeekdayName","parent":{"krate":0,"index":3427},"children":[],"decl_id":null,"docs":" Full day of the week names.","sig":null,"attributes":[{"value":"/ Full day of the week names.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":154131,"byte_end":154162,"line_start":195,"line_end":195,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":154167,"byte_end":154170,"line_start":196,"line_end":196,"column_start":5,"column_end":8}},{"value":"/ Prints a full name in the title case, reads either a short or full name in any case.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":154175,"byte_end":154263,"line_start":197,"line_end":197,"column_start":5,"column_end":93}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3436},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":154361,"byte_end":154370,"line_start":202,"line_end":202,"column_start":5,"column_end":14},"name":"LowerAmPm","qualname":"::format::Fixed::LowerAmPm","value":"Fixed::LowerAmPm","parent":{"krate":0,"index":3427},"children":[],"decl_id":null,"docs":" AM/PM.","sig":null,"attributes":[{"value":"/ AM/PM.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":154289,"byte_end":154299,"line_start":199,"line_end":199,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":154304,"byte_end":154307,"line_start":200,"line_end":200,"column_start":5,"column_end":8}},{"value":"/ Prints in lower case, reads in any case.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":154312,"byte_end":154356,"line_start":201,"line_end":201,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3438},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":154448,"byte_end":154457,"line_start":206,"line_end":206,"column_start":5,"column_end":14},"name":"UpperAmPm","qualname":"::format::Fixed::UpperAmPm","value":"Fixed::UpperAmPm","parent":{"krate":0,"index":3427},"children":[],"decl_id":null,"docs":" AM/PM.","sig":null,"attributes":[{"value":"/ AM/PM.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":154376,"byte_end":154386,"line_start":203,"line_end":203,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":154391,"byte_end":154394,"line_start":204,"line_end":204,"column_start":5,"column_end":8}},{"value":"/ Prints in upper case, reads in any case.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":154399,"byte_end":154443,"line_start":205,"line_end":205,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3440},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":154704,"byte_end":154714,"line_start":210,"line_end":210,"column_start":5,"column_end":15},"name":"Nanosecond","qualname":"::format::Fixed::Nanosecond","value":"Fixed::Nanosecond","parent":{"krate":0,"index":3427},"children":[],"decl_id":null,"docs":" An optional dot plus one or more digits for left-aligned nanoseconds.\n May print nothing, 3, 6 or 9 digits according to the available accuracy.\n See also [`Numeric::Nanosecond`](./enum.Numeric.html#variant.Nanosecond).\n","sig":null,"attributes":[{"value":"/ An optional dot plus one or more digits for left-aligned nanoseconds.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":154463,"byte_end":154536,"line_start":207,"line_end":207,"column_start":5,"column_end":78}},{"value":"/ May print nothing, 3, 6 or 9 digits according to the available accuracy.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":154541,"byte_end":154617,"line_start":208,"line_end":208,"column_start":5,"column_end":81}},{"value":"/ See also [`Numeric::Nanosecond`](./enum.Numeric.html#variant.Nanosecond).","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":154622,"byte_end":154699,"line_start":209,"line_end":209,"column_start":5,"column_end":82}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3442},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":154804,"byte_end":154815,"line_start":212,"line_end":212,"column_start":5,"column_end":16},"name":"Nanosecond3","qualname":"::format::Fixed::Nanosecond3","value":"Fixed::Nanosecond3","parent":{"krate":0,"index":3427},"children":[],"decl_id":null,"docs":" Same as [`Nanosecond`](#variant.Nanosecond) but the accuracy is fixed to 3.\n","sig":null,"attributes":[{"value":"/ Same as [`Nanosecond`](#variant.Nanosecond) but the accuracy is fixed to 3.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":154720,"byte_end":154799,"line_start":211,"line_end":211,"column_start":5,"column_end":84}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3444},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":154905,"byte_end":154916,"line_start":214,"line_end":214,"column_start":5,"column_end":16},"name":"Nanosecond6","qualname":"::format::Fixed::Nanosecond6","value":"Fixed::Nanosecond6","parent":{"krate":0,"index":3427},"children":[],"decl_id":null,"docs":" Same as [`Nanosecond`](#variant.Nanosecond) but the accuracy is fixed to 6.\n","sig":null,"attributes":[{"value":"/ Same as [`Nanosecond`](#variant.Nanosecond) but the accuracy is fixed to 6.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":154821,"byte_end":154900,"line_start":213,"line_end":213,"column_start":5,"column_end":84}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3446},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":155006,"byte_end":155017,"line_start":216,"line_end":216,"column_start":5,"column_end":16},"name":"Nanosecond9","qualname":"::format::Fixed::Nanosecond9","value":"Fixed::Nanosecond9","parent":{"krate":0,"index":3427},"children":[],"decl_id":null,"docs":" Same as [`Nanosecond`](#variant.Nanosecond) but the accuracy is fixed to 9.\n","sig":null,"attributes":[{"value":"/ Same as [`Nanosecond`](#variant.Nanosecond) but the accuracy is fixed to 9.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":154922,"byte_end":155001,"line_start":215,"line_end":215,"column_start":5,"column_end":84}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3448},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":155138,"byte_end":155150,"line_start":220,"line_end":220,"column_start":5,"column_end":17},"name":"TimezoneName","qualname":"::format::Fixed::TimezoneName","value":"Fixed::TimezoneName","parent":{"krate":0,"index":3427},"children":[],"decl_id":null,"docs":" Timezone name.","sig":null,"attributes":[{"value":"/ Timezone name.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":155023,"byte_end":155041,"line_start":217,"line_end":217,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":155046,"byte_end":155049,"line_start":218,"line_end":218,"column_start":5,"column_end":8}},{"value":"/ It does not support parsing, its use in the parser is an immediate failure.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":155054,"byte_end":155133,"line_start":219,"line_end":219,"column_start":5,"column_end":84}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3450},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":155485,"byte_end":155504,"line_start":226,"line_end":226,"column_start":5,"column_end":24},"name":"TimezoneOffsetColon","qualname":"::format::Fixed::TimezoneOffsetColon","value":"Fixed::TimezoneOffsetColon","parent":{"krate":0,"index":3427},"children":[],"decl_id":null,"docs":" Offset from the local time to UTC (`+09:00` or `-04:00` or `+00:00`).","sig":null,"attributes":[{"value":"/ Offset from the local time to UTC (`+09:00` or `-04:00` or `+00:00`).","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":155156,"byte_end":155229,"line_start":221,"line_end":221,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":155234,"byte_end":155237,"line_start":222,"line_end":222,"column_start":5,"column_end":8}},{"value":"/ In the parser, the colon can be omitted and/or surrounded with any amount of whitespace.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":155242,"byte_end":155334,"line_start":223,"line_end":223,"column_start":5,"column_end":97}},{"value":"/ The offset is limited from `-24:00` to `+24:00`,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":155339,"byte_end":155391,"line_start":224,"line_end":224,"column_start":5,"column_end":57}},{"value":"/ which is the same as [`FixedOffset`](../offset/struct.FixedOffset.html)'s range.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":155396,"byte_end":155480,"line_start":225,"line_end":225,"column_start":5,"column_end":89}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3452},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":155896,"byte_end":155916,"line_start":233,"line_end":233,"column_start":5,"column_end":25},"name":"TimezoneOffsetColonZ","qualname":"::format::Fixed::TimezoneOffsetColonZ","value":"Fixed::TimezoneOffsetColonZ","parent":{"krate":0,"index":3427},"children":[],"decl_id":null,"docs":" Offset from the local time to UTC (`+09:00` or `-04:00` or `Z`).","sig":null,"attributes":[{"value":"/ Offset from the local time to UTC (`+09:00` or `-04:00` or `Z`).","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":155510,"byte_end":155578,"line_start":227,"line_end":227,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":155583,"byte_end":155586,"line_start":228,"line_end":228,"column_start":5,"column_end":8}},{"value":"/ In the parser, the colon can be omitted and/or surrounded with any amount of whitespace,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":155591,"byte_end":155683,"line_start":229,"line_end":229,"column_start":5,"column_end":97}},{"value":"/ and `Z` can be either in upper case or in lower case.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":155688,"byte_end":155745,"line_start":230,"line_end":230,"column_start":5,"column_end":62}},{"value":"/ The offset is limited from `-24:00` to `+24:00`,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":155750,"byte_end":155802,"line_start":231,"line_end":231,"column_start":5,"column_end":57}},{"value":"/ which is the same as [`FixedOffset`](../offset/struct.FixedOffset.html)'s range.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":155807,"byte_end":155891,"line_start":232,"line_end":232,"column_start":5,"column_end":89}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3454},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":156055,"byte_end":156069,"line_start":236,"line_end":236,"column_start":5,"column_end":19},"name":"TimezoneOffset","qualname":"::format::Fixed::TimezoneOffset","value":"Fixed::TimezoneOffset","parent":{"krate":0,"index":3427},"children":[],"decl_id":null,"docs":" Same as [`TimezoneOffsetColon`](#variant.TimezoneOffsetColon) but prints no colon.\n Parsing allows an optional colon.\n","sig":null,"attributes":[{"value":"/ Same as [`TimezoneOffsetColon`](#variant.TimezoneOffsetColon) but prints no colon.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":155922,"byte_end":156008,"line_start":234,"line_end":234,"column_start":5,"column_end":91}},{"value":"/ Parsing allows an optional colon.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":156013,"byte_end":156050,"line_start":235,"line_end":235,"column_start":5,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3456},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":156210,"byte_end":156225,"line_start":239,"line_end":239,"column_start":5,"column_end":20},"name":"TimezoneOffsetZ","qualname":"::format::Fixed::TimezoneOffsetZ","value":"Fixed::TimezoneOffsetZ","parent":{"krate":0,"index":3427},"children":[],"decl_id":null,"docs":" Same as [`TimezoneOffsetColonZ`](#variant.TimezoneOffsetColonZ) but prints no colon.\n Parsing allows an optional colon.\n","sig":null,"attributes":[{"value":"/ Same as [`TimezoneOffsetColonZ`](#variant.TimezoneOffsetColonZ) but prints no colon.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":156075,"byte_end":156163,"line_start":237,"line_end":237,"column_start":5,"column_end":93}},{"value":"/ Parsing allows an optional colon.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":156168,"byte_end":156205,"line_start":238,"line_end":238,"column_start":5,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3458},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":156318,"byte_end":156325,"line_start":241,"line_end":241,"column_start":5,"column_end":12},"name":"RFC2822","qualname":"::format::Fixed::RFC2822","value":"Fixed::RFC2822","parent":{"krate":0,"index":3427},"children":[],"decl_id":null,"docs":" RFC 2822 date and time syntax. Commonly used for email and MIME date and time.\n","sig":null,"attributes":[{"value":"/ RFC 2822 date and time syntax. Commonly used for email and MIME date and time.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":156231,"byte_end":156313,"line_start":240,"line_end":240,"column_start":5,"column_end":87}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3460},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":156381,"byte_end":156388,"line_start":243,"line_end":243,"column_start":5,"column_end":12},"name":"RFC3339","qualname":"::format::Fixed::RFC3339","value":"Fixed::RFC3339","parent":{"krate":0,"index":3427},"children":[],"decl_id":null,"docs":" RFC 3339 & ISO 8601 date and time syntax.\n","sig":null,"attributes":[{"value":"/ RFC 3339 & ISO 8601 date and time syntax.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":156331,"byte_end":156376,"line_start":242,"line_end":242,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3462},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":156607,"byte_end":156615,"line_start":249,"line_end":249,"column_start":5,"column_end":13},"name":"Internal","qualname":"::format::Fixed::Internal","value":"Fixed::Internal(InternalFixed)","parent":{"krate":0,"index":3427},"children":[],"decl_id":null,"docs":" Internal uses only.","sig":null,"attributes":[{"value":"/ Internal uses only.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":156395,"byte_end":156418,"line_start":245,"line_end":245,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":156423,"byte_end":156426,"line_start":246,"line_end":246,"column_start":5,"column_end":8}},{"value":"/ This item exists so that one can add additional internal-only formatting","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":156431,"byte_end":156507,"line_start":247,"line_end":247,"column_start":5,"column_end":81}},{"value":"/ without breaking major compatibility (as enum variants cannot be selectively private).","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":156512,"byte_end":156602,"line_start":248,"line_end":248,"column_start":5,"column_end":95}}]},{"kind":"Field","id":{"krate":0,"index":3464},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":156616,"byte_end":156629,"line_start":249,"line_end":249,"column_start":14,"column_end":27},"name":"0","qualname":"::format::Fixed::Internal::0","value":"format::InternalFixed","parent":{"krate":0,"index":3462},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3427},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":153655,"byte_end":153660,"line_start":182,"line_end":182,"column_start":10,"column_end":15},"name":"Fixed","qualname":"::format::Fixed","value":"enum Fixed {\n    ShortMonthName,\n    LongMonthName,\n    ShortWeekdayName,\n    LongWeekdayName,\n    LowerAmPm,\n    UpperAmPm,\n    Nanosecond,\n    Nanosecond3,\n    Nanosecond6,\n    Nanosecond9,\n    TimezoneName,\n    TimezoneOffsetColon,\n    TimezoneOffsetColonZ,\n    TimezoneOffset,\n    TimezoneOffsetZ,\n    RFC2822,\n    RFC3339,\n    Internal(InternalFixed),\n}","parent":null,"children":[{"krate":0,"index":3428},{"krate":0,"index":3430},{"krate":0,"index":3432},{"krate":0,"index":3434},{"krate":0,"index":3436},{"krate":0,"index":3438},{"krate":0,"index":3440},{"krate":0,"index":3442},{"krate":0,"index":3444},{"krate":0,"index":3446},{"krate":0,"index":3448},{"krate":0,"index":3450},{"krate":0,"index":3452},{"krate":0,"index":3454},{"krate":0,"index":3456},{"krate":0,"index":3458},{"krate":0,"index":3460},{"krate":0,"index":3462}],"decl_id":null,"docs":" Fixed-format item types.","sig":null,"attributes":[{"value":"/ Fixed-format item types.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":153432,"byte_end":153460,"line_start":177,"line_end":177,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":153461,"byte_end":153464,"line_start":178,"line_end":178,"column_start":1,"column_end":4}},{"value":"/ They have their own rules of formatting and parsing.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":153465,"byte_end":153521,"line_start":179,"line_end":179,"column_start":1,"column_end":57}},{"value":"/ Otherwise noted, they print in the specified cases but parse case-insensitively.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":153522,"byte_end":153606,"line_start":180,"line_end":180,"column_start":1,"column_end":85}}]},{"kind":"Struct","id":{"krate":0,"index":3476},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":156765,"byte_end":156778,"line_start":254,"line_end":254,"column_start":12,"column_end":25},"name":"InternalFixed","qualname":"::format::InternalFixed","value":"InternalFixed {  }","parent":null,"children":[{"krate":0,"index":3477}],"decl_id":null,"docs":" An opaque type representing fixed-format item types for internal uses only.\n","sig":null,"attributes":[{"value":"/ An opaque type representing fixed-format item types for internal uses only.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":156635,"byte_end":156714,"line_start":252,"line_end":252,"column_start":1,"column_end":80}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3510},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":157794,"byte_end":157801,"line_start":281,"line_end":281,"column_start":5,"column_end":12},"name":"Literal","qualname":"::format::Item::Literal","value":"Item::Literal(&'a str)","parent":{"krate":0,"index":3508},"children":[],"decl_id":null,"docs":" A literally printed and parsed text.\n","sig":null,"attributes":[{"value":"/ A literally printed and parsed text.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":157749,"byte_end":157789,"line_start":280,"line_end":280,"column_start":5,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":3512},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":157802,"byte_end":157809,"line_start":281,"line_end":281,"column_start":13,"column_end":20},"name":"0","qualname":"::format::Item::Literal::0","value":"&'a str","parent":{"krate":0,"index":3510},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3513},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":157939,"byte_end":157951,"line_start":284,"line_end":284,"column_start":5,"column_end":17},"name":"OwnedLiteral","qualname":"::format::Item::OwnedLiteral","value":"Item::OwnedLiteral(Box<str>)","parent":{"krate":0,"index":3508},"children":[],"decl_id":null,"docs":" Same as `Literal` but with the string owned by the item.\n","sig":null,"attributes":[{"value":"/ Same as `Literal` but with the string owned by the item.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":157816,"byte_end":157876,"line_start":282,"line_end":282,"column_start":5,"column_end":65}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":157881,"byte_end":157934,"line_start":283,"line_end":283,"column_start":5,"column_end":58}}]},{"kind":"Field","id":{"krate":0,"index":3515},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":157952,"byte_end":157960,"line_start":284,"line_end":284,"column_start":18,"column_end":26},"name":"0","qualname":"::format::Item::OwnedLiteral::0","value":"std::boxed::Box<str>","parent":{"krate":0,"index":3513},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3516},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":158039,"byte_end":158044,"line_start":286,"line_end":286,"column_start":5,"column_end":10},"name":"Space","qualname":"::format::Item::Space","value":"Item::Space(&'a str)","parent":{"krate":0,"index":3508},"children":[],"decl_id":null,"docs":" Whitespace. Prints literally but reads zero or more whitespace.\n","sig":null,"attributes":[{"value":"/ Whitespace. Prints literally but reads zero or more whitespace.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":157967,"byte_end":158034,"line_start":285,"line_end":285,"column_start":5,"column_end":72}}]},{"kind":"Field","id":{"krate":0,"index":3518},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":158045,"byte_end":158052,"line_start":286,"line_end":286,"column_start":11,"column_end":18},"name":"0","qualname":"::format::Item::Space::0","value":"&'a str","parent":{"krate":0,"index":3516},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3519},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":158180,"byte_end":158190,"line_start":289,"line_end":289,"column_start":5,"column_end":15},"name":"OwnedSpace","qualname":"::format::Item::OwnedSpace","value":"Item::OwnedSpace(Box<str>)","parent":{"krate":0,"index":3508},"children":[],"decl_id":null,"docs":" Same as `Space` but with the string owned by the item.\n","sig":null,"attributes":[{"value":"/ Same as `Space` but with the string owned by the item.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":158059,"byte_end":158117,"line_start":287,"line_end":287,"column_start":5,"column_end":63}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":158122,"byte_end":158175,"line_start":288,"line_end":288,"column_start":5,"column_end":58}}]},{"kind":"Field","id":{"krate":0,"index":3521},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":158191,"byte_end":158199,"line_start":289,"line_end":289,"column_start":16,"column_end":24},"name":"0","qualname":"::format::Item::OwnedSpace::0","value":"std::boxed::Box<str>","parent":{"krate":0,"index":3519},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3522},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":158369,"byte_end":158376,"line_start":292,"line_end":292,"column_start":5,"column_end":12},"name":"Numeric","qualname":"::format::Item::Numeric","value":"Item::Numeric(Numeric, Pad)","parent":{"krate":0,"index":3508},"children":[],"decl_id":null,"docs":" Numeric item. Can be optionally padded to the maximal length (if any) when formatting;\n the parser simply ignores any padded whitespace and zeroes.\n","sig":null,"attributes":[{"value":"/ Numeric item. Can be optionally padded to the maximal length (if any) when formatting;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":158206,"byte_end":158296,"line_start":290,"line_end":290,"column_start":5,"column_end":95}},{"value":"/ the parser simply ignores any padded whitespace and zeroes.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":158301,"byte_end":158364,"line_start":291,"line_end":291,"column_start":5,"column_end":68}}]},{"kind":"Field","id":{"krate":0,"index":3524},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":158377,"byte_end":158384,"line_start":292,"line_end":292,"column_start":13,"column_end":20},"name":"0","qualname":"::format::Item::Numeric::0","value":"format::Numeric","parent":{"krate":0,"index":3522},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3525},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":158386,"byte_end":158389,"line_start":292,"line_end":292,"column_start":22,"column_end":25},"name":"1","qualname":"::format::Item::Numeric::1","value":"format::Pad","parent":{"krate":0,"index":3522},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3526},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":158423,"byte_end":158428,"line_start":294,"line_end":294,"column_start":5,"column_end":10},"name":"Fixed","qualname":"::format::Item::Fixed","value":"Item::Fixed(Fixed)","parent":{"krate":0,"index":3508},"children":[],"decl_id":null,"docs":" Fixed-format item.\n","sig":null,"attributes":[{"value":"/ Fixed-format item.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":158396,"byte_end":158418,"line_start":293,"line_end":293,"column_start":5,"column_end":27}}]},{"kind":"Field","id":{"krate":0,"index":3528},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":158429,"byte_end":158434,"line_start":294,"line_end":294,"column_start":11,"column_end":16},"name":"0","qualname":"::format::Item::Fixed::0","value":"format::Fixed","parent":{"krate":0,"index":3526},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3529},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":158517,"byte_end":158522,"line_start":296,"line_end":296,"column_start":5,"column_end":10},"name":"Error","qualname":"::format::Item::Error","value":"Item::Error","parent":{"krate":0,"index":3508},"children":[],"decl_id":null,"docs":" Issues a formatting error. Used to signal an invalid format string.\n","sig":null,"attributes":[{"value":"/ Issues a formatting error. Used to signal an invalid format string.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":158441,"byte_end":158512,"line_start":295,"line_end":295,"column_start":5,"column_end":76}}]},{"kind":"Enum","id":{"krate":0,"index":3508},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":157734,"byte_end":157738,"line_start":279,"line_end":279,"column_start":10,"column_end":14},"name":"Item","qualname":"::format::Item","value":"enum Item<'a> {\n    Literal(&'a str),\n    OwnedLiteral(Box<str>),\n    Space(&'a str),\n    OwnedSpace(Box<str>),\n    Numeric(Numeric, Pad),\n    Fixed(Fixed),\n    Error,\n}","parent":null,"children":[{"krate":0,"index":3510},{"krate":0,"index":3513},{"krate":0,"index":3516},{"krate":0,"index":3519},{"krate":0,"index":3522},{"krate":0,"index":3526},{"krate":0,"index":3529}],"decl_id":null,"docs":" A single formatting item. This is used for both formatting and parsing.\n","sig":null,"attributes":[{"value":"/ A single formatting item. This is used for both formatting and parsing.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":157610,"byte_end":157685,"line_start":277,"line_end":277,"column_start":1,"column_end":76}}]},{"kind":"Struct","id":{"krate":0,"index":3548},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":159270,"byte_end":159280,"line_start":337,"line_end":337,"column_start":12,"column_end":22},"name":"ParseError","qualname":"::format::ParseError","value":"","parent":null,"children":[],"decl_id":null,"docs":" An error from the `parse` function.\n","sig":null,"attributes":[{"value":"/ An error from the `parse` function.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":159174,"byte_end":159213,"line_start":335,"line_end":335,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1116},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":159364,"byte_end":159368,"line_start":341,"line_end":341,"column_start":12,"column_end":16},"name":"kind","qualname":"<ParseError>::kind","value":"fn kind(&Self) -> ParseErrorKind","parent":null,"children":[],"decl_id":null,"docs":" The category of parse error\n","sig":null,"attributes":[{"value":"/ The category of parse error","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":159321,"byte_end":159352,"line_start":340,"line_end":340,"column_start":5,"column_end":36}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3564},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":159574,"byte_end":159584,"line_start":350,"line_end":350,"column_start":5,"column_end":15},"name":"OutOfRange","qualname":"::format::ParseErrorKind::OutOfRange","value":"ParseErrorKind::OutOfRange","parent":{"krate":0,"index":3563},"children":[],"decl_id":null,"docs":" Given field is out of permitted range.\n","sig":null,"attributes":[{"value":"/ Given field is out of permitted range.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":159527,"byte_end":159569,"line_start":349,"line_end":349,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3566},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":159862,"byte_end":159872,"line_start":356,"line_end":356,"column_start":5,"column_end":15},"name":"Impossible","qualname":"::format::ParseErrorKind::Impossible","value":"ParseErrorKind::Impossible","parent":{"krate":0,"index":3563},"children":[],"decl_id":null,"docs":" There is no possible date and time value with given set of fields.","sig":null,"attributes":[{"value":"/ There is no possible date and time value with given set of fields.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":159591,"byte_end":159661,"line_start":352,"line_end":352,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":159666,"byte_end":159669,"line_start":353,"line_end":353,"column_start":5,"column_end":8}},{"value":"/ This does not include the out-of-range conditions, which are trivially invalid.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":159674,"byte_end":159757,"line_start":354,"line_end":354,"column_start":5,"column_end":88}},{"value":"/ It includes the case that there are one or more fields that are inconsistent to each other.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":159762,"byte_end":159857,"line_start":355,"line_end":355,"column_start":5,"column_end":100}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3568},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":160238,"byte_end":160247,"line_start":363,"line_end":363,"column_start":5,"column_end":14},"name":"NotEnough","qualname":"::format::ParseErrorKind::NotEnough","value":"ParseErrorKind::NotEnough","parent":{"krate":0,"index":3563},"children":[],"decl_id":null,"docs":" Given set of fields is not enough to make a requested date and time value.","sig":null,"attributes":[{"value":"/ Given set of fields is not enough to make a requested date and time value.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":159879,"byte_end":159957,"line_start":358,"line_end":358,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":159962,"byte_end":159965,"line_start":359,"line_end":359,"column_start":5,"column_end":8}},{"value":"/ Note that there *may* be a case that given fields constrain the possible values so much","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":159970,"byte_end":160061,"line_start":360,"line_end":360,"column_start":5,"column_end":96}},{"value":"/ that there is a unique possible value. Chrono only tries to be correct for","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":160066,"byte_end":160144,"line_start":361,"line_end":361,"column_start":5,"column_end":83}},{"value":"/ most useful sets of fields however, as such constraint solving can be expensive.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":160149,"byte_end":160233,"line_start":362,"line_end":362,"column_start":5,"column_end":89}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3570},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":160343,"byte_end":160350,"line_start":366,"line_end":366,"column_start":5,"column_end":12},"name":"Invalid","qualname":"::format::ParseErrorKind::Invalid","value":"ParseErrorKind::Invalid","parent":{"krate":0,"index":3563},"children":[],"decl_id":null,"docs":" The input string has some invalid character sequence for given formatting items.\n","sig":null,"attributes":[{"value":"/ The input string has some invalid character sequence for given formatting items.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":160254,"byte_end":160338,"line_start":365,"line_end":365,"column_start":5,"column_end":89}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3572},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":160410,"byte_end":160418,"line_start":369,"line_end":369,"column_start":5,"column_end":13},"name":"TooShort","qualname":"::format::ParseErrorKind::TooShort","value":"ParseErrorKind::TooShort","parent":{"krate":0,"index":3563},"children":[],"decl_id":null,"docs":" The input string has been prematurely ended.\n","sig":null,"attributes":[{"value":"/ The input string has been prematurely ended.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":160357,"byte_end":160405,"line_start":368,"line_end":368,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3574},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":160501,"byte_end":160508,"line_start":372,"line_end":372,"column_start":5,"column_end":12},"name":"TooLong","qualname":"::format::ParseErrorKind::TooLong","value":"ParseErrorKind::TooLong","parent":{"krate":0,"index":3563},"children":[],"decl_id":null,"docs":" All formatting items have been read but there is a remaining input.\n","sig":null,"attributes":[{"value":"/ All formatting items have been read but there is a remaining input.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":160425,"byte_end":160496,"line_start":371,"line_end":371,"column_start":5,"column_end":76}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3576},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":160613,"byte_end":160622,"line_start":375,"line_end":375,"column_start":5,"column_end":14},"name":"BadFormat","qualname":"::format::ParseErrorKind::BadFormat","value":"ParseErrorKind::BadFormat","parent":{"krate":0,"index":3563},"children":[],"decl_id":null,"docs":" There was an error on the formatting string, or there were non-supported formating items.\n","sig":null,"attributes":[{"value":"/ There was an error on the formatting string, or there were non-supported formating items.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":160515,"byte_end":160608,"line_start":374,"line_end":374,"column_start":5,"column_end":98}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3578},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":160733,"byte_end":160748,"line_start":379,"line_end":379,"column_start":5,"column_end":20},"name":"__Nonexhaustive","qualname":"::format::ParseErrorKind::__Nonexhaustive","value":"ParseErrorKind::__Nonexhaustive","parent":{"krate":0,"index":3563},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3563},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":159506,"byte_end":159520,"line_start":348,"line_end":348,"column_start":10,"column_end":24},"name":"ParseErrorKind","qualname":"::format::ParseErrorKind","value":"enum ParseErrorKind {\n    OutOfRange,\n    Impossible,\n    NotEnough,\n    Invalid,\n    TooShort,\n    TooLong,\n    BadFormat,\n    __Nonexhaustive,\n}","parent":null,"children":[{"krate":0,"index":3564},{"krate":0,"index":3566},{"krate":0,"index":3568},{"krate":0,"index":3570},{"krate":0,"index":3572},{"krate":0,"index":3574},{"krate":0,"index":3576},{"krate":0,"index":3578}],"decl_id":null,"docs":" The category of parse error\n","sig":null,"attributes":[{"value":"/ The category of parse error","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":159420,"byte_end":159451,"line_start":346,"line_end":346,"column_start":1,"column_end":32}}]},{"kind":"Type","id":{"krate":0,"index":1117},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":160799,"byte_end":160810,"line_start":383,"line_end":383,"column_start":10,"column_end":21},"name":"ParseResult","qualname":"::format::ParseResult","value":"Result<T, ParseError>","parent":null,"children":[],"decl_id":null,"docs":" Same as `Result<T, ParseError>`.\n","sig":null,"attributes":[{"value":"/ Same as `Result<T, ParseError>`.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":160753,"byte_end":160789,"line_start":382,"line_end":382,"column_start":1,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":1120},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":160882,"byte_end":160885,"line_start":386,"line_end":386,"column_start":8,"column_end":11},"name":"fmt","qualname":"<ParseError as std::fmt::Display>::fmt","value":"fn fmt(&Self, &mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":9914},"children":[],"decl_id":{"krate":2,"index":9915},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1122},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":161699,"byte_end":161710,"line_start":403,"line_end":403,"column_start":8,"column_end":19},"name":"description","qualname":"<ParseError as std::error::Error>::description","value":"fn description(&Self) -> &str","parent":{"krate":1,"index":2555},"children":[],"decl_id":{"krate":1,"index":2559},"docs":"","sig":null,"attributes":[{"value":"allow(deprecated)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":161671,"byte_end":161691,"line_start":402,"line_end":402,"column_start":5,"column_end":25}}]},{"kind":"Function","id":{"krate":0,"index":1130},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":162413,"byte_end":162424,"line_start":419,"line_end":419,"column_start":8,"column_end":19},"name":"format_item","qualname":"::format::format_item","value":"fn format_item<'a>(&mut fmt::Formatter, Option<&NaiveDate>,\nOption<&NaiveTime>, Option<&(String, FixedOffset)>, &Item) -> fmt::Result","parent":null,"children":[],"decl_id":null,"docs":" Formats single formatting item\n","sig":null,"attributes":[{"value":"/ Formats single formatting item","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":162317,"byte_end":162351,"line_start":417,"line_end":417,"column_start":1,"column_end":35}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":162352,"byte_end":162405,"line_start":418,"line_end":418,"column_start":1,"column_end":54}}]},{"kind":"Function","id":{"krate":0,"index":1186},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":175759,"byte_end":175765,"line_start":717,"line_end":717,"column_start":8,"column_end":14},"name":"format","qualname":"::format::format","value":"fn format<'a, I,\nB>(&mut fmt::Formatter, Option<&NaiveDate>, Option<&NaiveTime>,\nOption<&(String, FixedOffset)>, I) -> fmt::Result where I: Iterator<Item =\nB> + Clone, B: Borrow<Item>","parent":null,"children":[],"decl_id":null,"docs":" Tries to format given arguments with given formatting items.\n Internally used by `DelayedFormat`.\n","sig":null,"attributes":[{"value":"/ Tries to format given arguments with given formatting items.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":175593,"byte_end":175657,"line_start":714,"line_end":714,"column_start":1,"column_end":65}},{"value":"/ Internally used by `DelayedFormat`.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":175658,"byte_end":175697,"line_start":715,"line_end":715,"column_start":1,"column_end":40}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":175698,"byte_end":175751,"line_start":716,"line_end":716,"column_start":1,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":3591},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":184338,"byte_end":184344,"line_start":26,"line_end":26,"column_start":12,"column_end":18},"name":"Parsed","qualname":"::format::parsed::Parsed","value":"Parsed { year, year_div_100, year_mod_100, isoyear, isoyear_div_100, isoyear_mod_100, month, week_from_sun, week_from_mon, isoweek, weekday, ordinal, day, hour_div_12, hour_mod_12, minute, second, nanosecond, timestamp, offset }","parent":null,"children":[{"krate":0,"index":3592},{"krate":0,"index":3593},{"krate":0,"index":3594},{"krate":0,"index":3595},{"krate":0,"index":3596},{"krate":0,"index":3597},{"krate":0,"index":3598},{"krate":0,"index":3599},{"krate":0,"index":3600},{"krate":0,"index":3601},{"krate":0,"index":3602},{"krate":0,"index":3603},{"krate":0,"index":3604},{"krate":0,"index":3605},{"krate":0,"index":3606},{"krate":0,"index":3607},{"krate":0,"index":3608},{"krate":0,"index":3609},{"krate":0,"index":3610},{"krate":0,"index":3611},{"krate":0,"index":3612}],"decl_id":null,"docs":" Parsed parts of date and time. There are two classes of methods:","sig":null,"attributes":[{"value":"/ Parsed parts of date and time. There are two classes of methods:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":183846,"byte_end":183914,"line_start":18,"line_end":18,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":183915,"byte_end":183918,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ - `set_*` methods try to set given field(s) while checking for the consistency.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":183919,"byte_end":184002,"line_start":20,"line_end":20,"column_start":1,"column_end":84}},{"value":"/   It may or may not check for the range constraint immediately (for efficiency reasons).","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":184003,"byte_end":184095,"line_start":21,"line_end":21,"column_start":1,"column_end":93}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":184096,"byte_end":184099,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ - `to_*` methods try to make a concrete date and time value out of set fields.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":184100,"byte_end":184182,"line_start":23,"line_end":23,"column_start":1,"column_end":83}},{"value":"/   It fully checks any remaining out-of-range conditions and inconsistent/impossible fields.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":184183,"byte_end":184278,"line_start":24,"line_end":24,"column_start":1,"column_end":96}}]},{"kind":"Field","id":{"krate":0,"index":3592},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":184521,"byte_end":184525,"line_start":31,"line_end":31,"column_start":9,"column_end":13},"name":"year","qualname":"::format::parsed::Parsed::year","value":"std::option::Option<i32>","parent":{"krate":0,"index":3591},"children":[],"decl_id":null,"docs":" Year.","sig":null,"attributes":[{"value":"/ Year.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":184351,"byte_end":184360,"line_start":27,"line_end":27,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":184365,"byte_end":184368,"line_start":28,"line_end":28,"column_start":5,"column_end":8}},{"value":"/ This can be negative unlike [`year_div_100`](#structfield.year_div_100)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":184373,"byte_end":184448,"line_start":29,"line_end":29,"column_start":5,"column_end":80}},{"value":"/ and [`year_mod_100`](#structfield.year_mod_100) fields.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":184453,"byte_end":184512,"line_start":30,"line_end":30,"column_start":5,"column_end":64}}]},{"kind":"Field","id":{"krate":0,"index":3593},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":184829,"byte_end":184841,"line_start":38,"line_end":38,"column_start":9,"column_end":21},"name":"year_div_100","qualname":"::format::parsed::Parsed::year_div_100","value":"std::option::Option<i32>","parent":{"krate":0,"index":3591},"children":[],"decl_id":null,"docs":" Year divided by 100. Implies that the year is >= 1 BCE when set.","sig":null,"attributes":[{"value":"/ Year divided by 100. Implies that the year is >= 1 BCE when set.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":184545,"byte_end":184613,"line_start":33,"line_end":33,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":184618,"byte_end":184621,"line_start":34,"line_end":34,"column_start":5,"column_end":8}},{"value":"/ Due to the common usage, if this field is missing but","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":184626,"byte_end":184683,"line_start":35,"line_end":35,"column_start":5,"column_end":62}},{"value":"/ [`year_mod_100`](#structfield.year_mod_100) is present,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":184688,"byte_end":184747,"line_start":36,"line_end":36,"column_start":5,"column_end":64}},{"value":"/ it is inferred to 19 when `year_mod_100 >= 70` and 20 otherwise.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":184752,"byte_end":184820,"line_start":37,"line_end":37,"column_start":5,"column_end":73}}]},{"kind":"Field","id":{"krate":0,"index":3594},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":184934,"byte_end":184946,"line_start":41,"line_end":41,"column_start":9,"column_end":21},"name":"year_mod_100","qualname":"::format::parsed::Parsed::year_mod_100","value":"std::option::Option<i32>","parent":{"krate":0,"index":3591},"children":[],"decl_id":null,"docs":" Year modulo 100. Implies that the year is >= 1 BCE when set.\n","sig":null,"attributes":[{"value":"/ Year modulo 100. Implies that the year is >= 1 BCE when set.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":184861,"byte_end":184925,"line_start":40,"line_end":40,"column_start":5,"column_end":69}}]},{"kind":"Field","id":{"krate":0,"index":3595},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":185213,"byte_end":185220,"line_start":47,"line_end":47,"column_start":9,"column_end":16},"name":"isoyear","qualname":"::format::parsed::Parsed::isoyear","value":"std::option::Option<i32>","parent":{"krate":0,"index":3591},"children":[],"decl_id":null,"docs":" Year in the [ISO week date](../naive/struct.NaiveDate.html#week-date).","sig":null,"attributes":[{"value":"/ Year in the [ISO week date](../naive/struct.NaiveDate.html#week-date).","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":184966,"byte_end":185040,"line_start":43,"line_end":43,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":185045,"byte_end":185048,"line_start":44,"line_end":44,"column_start":5,"column_end":8}},{"value":"/ This can be negative unlike [`isoyear_div_100`](#structfield.isoyear_div_100) and","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":185053,"byte_end":185138,"line_start":45,"line_end":45,"column_start":5,"column_end":90}},{"value":"/ [`isoyear_mod_100`](#structfield.isoyear_mod_100) fields.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":185143,"byte_end":185204,"line_start":46,"line_end":46,"column_start":5,"column_end":66}}]},{"kind":"Field","id":{"krate":0,"index":3596},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":185607,"byte_end":185622,"line_start":55,"line_end":55,"column_start":9,"column_end":24},"name":"isoyear_div_100","qualname":"::format::parsed::Parsed::isoyear_div_100","value":"std::option::Option<i32>","parent":{"krate":0,"index":3591},"children":[],"decl_id":null,"docs":" Year in the [ISO week date](../naive/struct.NaiveDate.html#week-date), divided by 100.\n Implies that the year is >= 1 BCE when set.","sig":null,"attributes":[{"value":"/ Year in the [ISO week date](../naive/struct.NaiveDate.html#week-date), divided by 100.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":185240,"byte_end":185330,"line_start":49,"line_end":49,"column_start":5,"column_end":95}},{"value":"/ Implies that the year is >= 1 BCE when set.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":185335,"byte_end":185382,"line_start":50,"line_end":50,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":185387,"byte_end":185390,"line_start":51,"line_end":51,"column_start":5,"column_end":8}},{"value":"/ Due to the common usage, if this field is missing but","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":185395,"byte_end":185452,"line_start":52,"line_end":52,"column_start":5,"column_end":62}},{"value":"/ [`isoyear_mod_100`](#structfield.isoyear_mod_100) is present,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":185457,"byte_end":185522,"line_start":53,"line_end":53,"column_start":5,"column_end":70}},{"value":"/ it is inferred to 19 when `isoyear_mod_100 >= 70` and 20 otherwise.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":185527,"byte_end":185598,"line_start":54,"line_end":54,"column_start":5,"column_end":76}}]},{"kind":"Field","id":{"krate":0,"index":3597},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":185789,"byte_end":185804,"line_start":59,"line_end":59,"column_start":9,"column_end":24},"name":"isoyear_mod_100","qualname":"::format::parsed::Parsed::isoyear_mod_100","value":"std::option::Option<i32>","parent":{"krate":0,"index":3591},"children":[],"decl_id":null,"docs":" Year in the [ISO week date](../naive/struct.NaiveDate.html#week-date), modulo 100.\n Implies that the year is >= 1 BCE when set.\n","sig":null,"attributes":[{"value":"/ Year in the [ISO week date](../naive/struct.NaiveDate.html#week-date), modulo 100.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":185642,"byte_end":185728,"line_start":57,"line_end":57,"column_start":5,"column_end":91}},{"value":"/ Implies that the year is >= 1 BCE when set.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":185733,"byte_end":185780,"line_start":58,"line_end":58,"column_start":5,"column_end":52}}]},{"kind":"Field","id":{"krate":0,"index":3598},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":185851,"byte_end":185856,"line_start":62,"line_end":62,"column_start":9,"column_end":14},"name":"month","qualname":"::format::parsed::Parsed::month","value":"std::option::Option<u32>","parent":{"krate":0,"index":3591},"children":[],"decl_id":null,"docs":" Month (1--12).\n","sig":null,"attributes":[{"value":"/ Month (1--12).","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":185824,"byte_end":185842,"line_start":61,"line_end":61,"column_start":5,"column_end":23}}]},{"kind":"Field","id":{"krate":0,"index":3599},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":186011,"byte_end":186024,"line_start":66,"line_end":66,"column_start":9,"column_end":22},"name":"week_from_sun","qualname":"::format::parsed::Parsed::week_from_sun","value":"std::option::Option<u32>","parent":{"krate":0,"index":3591},"children":[],"decl_id":null,"docs":" Week number, where the week 1 starts at the first Sunday of January\n (0--53, 1--53 or 1--52 depending on the year).\n","sig":null,"attributes":[{"value":"/ Week number, where the week 1 starts at the first Sunday of January","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":185876,"byte_end":185947,"line_start":64,"line_end":64,"column_start":5,"column_end":76}},{"value":"/ (0--53, 1--53 or 1--52 depending on the year).","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":185952,"byte_end":186002,"line_start":65,"line_end":65,"column_start":5,"column_end":55}}]},{"kind":"Field","id":{"krate":0,"index":3600},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":186179,"byte_end":186192,"line_start":70,"line_end":70,"column_start":9,"column_end":22},"name":"week_from_mon","qualname":"::format::parsed::Parsed::week_from_mon","value":"std::option::Option<u32>","parent":{"krate":0,"index":3591},"children":[],"decl_id":null,"docs":" Week number, where the week 1 starts at the first Monday of January\n (0--53, 1--53 or 1--52 depending on the year).\n","sig":null,"attributes":[{"value":"/ Week number, where the week 1 starts at the first Monday of January","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":186044,"byte_end":186115,"line_start":68,"line_end":68,"column_start":5,"column_end":76}},{"value":"/ (0--53, 1--53 or 1--52 depending on the year).","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":186120,"byte_end":186170,"line_start":69,"line_end":69,"column_start":5,"column_end":55}}]},{"kind":"Field","id":{"krate":0,"index":3601},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":186332,"byte_end":186339,"line_start":74,"line_end":74,"column_start":9,"column_end":16},"name":"isoweek","qualname":"::format::parsed::Parsed::isoweek","value":"std::option::Option<u32>","parent":{"krate":0,"index":3591},"children":[],"decl_id":null,"docs":" [ISO week number](../naive/struct.NaiveDate.html#week-date)\n (1--52 or 1--53 depending on the year).\n","sig":null,"attributes":[{"value":"/ [ISO week number](../naive/struct.NaiveDate.html#week-date)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":186212,"byte_end":186275,"line_start":72,"line_end":72,"column_start":5,"column_end":68}},{"value":"/ (1--52 or 1--53 depending on the year).","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":186280,"byte_end":186323,"line_start":73,"line_end":73,"column_start":5,"column_end":48}}]},{"kind":"Field","id":{"krate":0,"index":3602},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":186388,"byte_end":186395,"line_start":77,"line_end":77,"column_start":9,"column_end":16},"name":"weekday","qualname":"::format::parsed::Parsed::weekday","value":"std::option::Option<weekday::Weekday>","parent":{"krate":0,"index":3591},"children":[],"decl_id":null,"docs":" Day of the week.\n","sig":null,"attributes":[{"value":"/ Day of the week.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":186359,"byte_end":186379,"line_start":76,"line_end":76,"column_start":5,"column_end":25}}]},{"kind":"Field","id":{"krate":0,"index":3603},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":186489,"byte_end":186496,"line_start":80,"line_end":80,"column_start":9,"column_end":16},"name":"ordinal","qualname":"::format::parsed::Parsed::ordinal","value":"std::option::Option<u32>","parent":{"krate":0,"index":3591},"children":[],"decl_id":null,"docs":" Day of the year (1--365 or 1--366 depending on the year).\n","sig":null,"attributes":[{"value":"/ Day of the year (1--365 or 1--366 depending on the year).","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":186419,"byte_end":186480,"line_start":79,"line_end":79,"column_start":5,"column_end":66}}]},{"kind":"Field","id":{"krate":0,"index":3604},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":186600,"byte_end":186603,"line_start":83,"line_end":83,"column_start":9,"column_end":12},"name":"day","qualname":"::format::parsed::Parsed::day","value":"std::option::Option<u32>","parent":{"krate":0,"index":3591},"children":[],"decl_id":null,"docs":" Day of the month (1--28, 1--29, 1--30 or 1--31 depending on the month).\n","sig":null,"attributes":[{"value":"/ Day of the month (1--28, 1--29, 1--30 or 1--31 depending on the month).","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":186516,"byte_end":186591,"line_start":82,"line_end":82,"column_start":5,"column_end":80}}]},{"kind":"Field","id":{"krate":0,"index":3605},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":186704,"byte_end":186715,"line_start":86,"line_end":86,"column_start":9,"column_end":20},"name":"hour_div_12","qualname":"::format::parsed::Parsed::hour_div_12","value":"std::option::Option<u32>","parent":{"krate":0,"index":3591},"children":[],"decl_id":null,"docs":" Hour number divided by 12 (0--1). 0 indicates AM and 1 indicates PM.\n","sig":null,"attributes":[{"value":"/ Hour number divided by 12 (0--1). 0 indicates AM and 1 indicates PM.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":186623,"byte_end":186695,"line_start":85,"line_end":85,"column_start":5,"column_end":77}}]},{"kind":"Field","id":{"krate":0,"index":3606},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":186778,"byte_end":186789,"line_start":89,"line_end":89,"column_start":9,"column_end":20},"name":"hour_mod_12","qualname":"::format::parsed::Parsed::hour_mod_12","value":"std::option::Option<u32>","parent":{"krate":0,"index":3591},"children":[],"decl_id":null,"docs":" Hour number modulo 12 (0--11).\n","sig":null,"attributes":[{"value":"/ Hour number modulo 12 (0--11).","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":186735,"byte_end":186769,"line_start":88,"line_end":88,"column_start":5,"column_end":39}}]},{"kind":"Field","id":{"krate":0,"index":3607},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":186844,"byte_end":186850,"line_start":92,"line_end":92,"column_start":9,"column_end":15},"name":"minute","qualname":"::format::parsed::Parsed::minute","value":"std::option::Option<u32>","parent":{"krate":0,"index":3591},"children":[],"decl_id":null,"docs":" Minute number (0--59).\n","sig":null,"attributes":[{"value":"/ Minute number (0--59).","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":186809,"byte_end":186835,"line_start":91,"line_end":91,"column_start":5,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":3608},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":186934,"byte_end":186940,"line_start":95,"line_end":95,"column_start":9,"column_end":15},"name":"second","qualname":"::format::parsed::Parsed::second","value":"std::option::Option<u32>","parent":{"krate":0,"index":3591},"children":[],"decl_id":null,"docs":" Second number (0--60, accounting for leap seconds).\n","sig":null,"attributes":[{"value":"/ Second number (0--60, accounting for leap seconds).","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":186870,"byte_end":186925,"line_start":94,"line_end":94,"column_start":5,"column_end":60}}]},{"kind":"Field","id":{"krate":0,"index":3609},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":187039,"byte_end":187049,"line_start":98,"line_end":98,"column_start":9,"column_end":19},"name":"nanosecond","qualname":"::format::parsed::Parsed::nanosecond","value":"std::option::Option<u32>","parent":{"krate":0,"index":3591},"children":[],"decl_id":null,"docs":" The number of nanoseconds since the whole second (0--999,999,999).\n","sig":null,"attributes":[{"value":"/ The number of nanoseconds since the whole second (0--999,999,999).","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":186960,"byte_end":187030,"line_start":97,"line_end":97,"column_start":5,"column_end":75}}]},{"kind":"Field","id":{"krate":0,"index":3610},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":187252,"byte_end":187261,"line_start":103,"line_end":103,"column_start":9,"column_end":18},"name":"timestamp","qualname":"::format::parsed::Parsed::timestamp","value":"std::option::Option<i64>","parent":{"krate":0,"index":3591},"children":[],"decl_id":null,"docs":" The number of non-leap seconds since the midnight UTC on January 1, 1970.","sig":null,"attributes":[{"value":"/ The number of non-leap seconds since the midnight UTC on January 1, 1970.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":187069,"byte_end":187146,"line_start":100,"line_end":100,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":187151,"byte_end":187154,"line_start":101,"line_end":101,"column_start":5,"column_end":8}},{"value":"/ This can be off by one if [`second`](#structfield.second) is 60 (a leap second).","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":187159,"byte_end":187243,"line_start":102,"line_end":102,"column_start":5,"column_end":89}}]},{"kind":"Field","id":{"krate":0,"index":3611},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":187340,"byte_end":187346,"line_start":106,"line_end":106,"column_start":9,"column_end":15},"name":"offset","qualname":"::format::parsed::Parsed::offset","value":"std::option::Option<i32>","parent":{"krate":0,"index":3591},"children":[],"decl_id":null,"docs":" Offset from the local time to UTC, in seconds.\n","sig":null,"attributes":[{"value":"/ Offset from the local time to UTC, in seconds.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":187281,"byte_end":187331,"line_start":105,"line_end":105,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1252},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":187981,"byte_end":187984,"line_start":130,"line_end":130,"column_start":12,"column_end":15},"name":"new","qualname":"<Parsed>::new","value":"fn new() -> Parsed","parent":null,"children":[],"decl_id":null,"docs":" Returns the initial value of parsed parts.\n","sig":null,"attributes":[{"value":"/ Returns the initial value of parsed parts.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":187923,"byte_end":187969,"line_start":129,"line_end":129,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1253},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":188134,"byte_end":188142,"line_start":136,"line_end":136,"column_start":12,"column_end":20},"name":"set_year","qualname":"<Parsed>::set_year","value":"fn set_year(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`year`](#structfield.year) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`year`](#structfield.year) field from given value.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":188036,"byte_end":188108,"line_start":134,"line_end":134,"column_start":5,"column_end":77}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":188113,"byte_end":188122,"line_start":135,"line_end":135,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1254},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":188391,"byte_end":188407,"line_start":142,"line_end":142,"column_start":12,"column_end":28},"name":"set_year_div_100","qualname":"<Parsed>::set_year_div_100","value":"fn set_year_div_100(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`year_div_100`](#structfield.year_div_100) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`year_div_100`](#structfield.year_div_100) field from given value.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":188277,"byte_end":188365,"line_start":140,"line_end":140,"column_start":5,"column_end":93}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":188370,"byte_end":188379,"line_start":141,"line_end":141,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1255},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":188735,"byte_end":188751,"line_start":151,"line_end":151,"column_start":12,"column_end":28},"name":"set_year_mod_100","qualname":"<Parsed>::set_year_mod_100","value":"fn set_year_mod_100(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`year_mod_100`](#structfield.year_mod_100) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`year_mod_100`](#structfield.year_mod_100) field from given value.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":188621,"byte_end":188709,"line_start":149,"line_end":149,"column_start":5,"column_end":93}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":188714,"byte_end":188723,"line_start":150,"line_end":150,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1256},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":189069,"byte_end":189080,"line_start":160,"line_end":160,"column_start":12,"column_end":23},"name":"set_isoyear","qualname":"<Parsed>::set_isoyear","value":"fn set_isoyear(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`isoyear`](#structfield.isoyear) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`isoyear`](#structfield.isoyear) field from given value.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":188965,"byte_end":189043,"line_start":158,"line_end":158,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":189048,"byte_end":189057,"line_start":159,"line_end":159,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1257},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":189338,"byte_end":189357,"line_start":166,"line_end":166,"column_start":12,"column_end":31},"name":"set_isoyear_div_100","qualname":"<Parsed>::set_isoyear_div_100","value":"fn set_isoyear_div_100(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`isoyear_div_100`](#structfield.isoyear_div_100) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`isoyear_div_100`](#structfield.isoyear_div_100) field from given value.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":189218,"byte_end":189312,"line_start":164,"line_end":164,"column_start":5,"column_end":99}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":189317,"byte_end":189326,"line_start":165,"line_end":165,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1258},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":189694,"byte_end":189713,"line_start":175,"line_end":175,"column_start":12,"column_end":31},"name":"set_isoyear_mod_100","qualname":"<Parsed>::set_isoyear_mod_100","value":"fn set_isoyear_mod_100(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`isoyear_mod_100`](#structfield.isoyear_mod_100) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`isoyear_mod_100`](#structfield.isoyear_mod_100) field from given value.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":189574,"byte_end":189668,"line_start":173,"line_end":173,"column_start":5,"column_end":99}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":189673,"byte_end":189682,"line_start":174,"line_end":174,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1259},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":190030,"byte_end":190039,"line_start":184,"line_end":184,"column_start":12,"column_end":21},"name":"set_month","qualname":"<Parsed>::set_month","value":"fn set_month(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`month`](#structfield.month) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`month`](#structfield.month) field from given value.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":189930,"byte_end":190004,"line_start":182,"line_end":182,"column_start":5,"column_end":79}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":190009,"byte_end":190018,"line_start":183,"line_end":183,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1260},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":190291,"byte_end":190308,"line_start":190,"line_end":190,"column_start":12,"column_end":29},"name":"set_week_from_sun","qualname":"<Parsed>::set_week_from_sun","value":"fn set_week_from_sun(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`week_from_sun`](#structfield.week_from_sun) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`week_from_sun`](#structfield.week_from_sun) field from given value.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":190175,"byte_end":190265,"line_start":188,"line_end":188,"column_start":5,"column_end":95}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":190270,"byte_end":190279,"line_start":189,"line_end":189,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1261},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":190568,"byte_end":190585,"line_start":196,"line_end":196,"column_start":12,"column_end":29},"name":"set_week_from_mon","qualname":"<Parsed>::set_week_from_mon","value":"fn set_week_from_mon(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`week_from_mon`](#structfield.week_from_mon) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`week_from_mon`](#structfield.week_from_mon) field from given value.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":190452,"byte_end":190542,"line_start":194,"line_end":194,"column_start":5,"column_end":95}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":190547,"byte_end":190556,"line_start":195,"line_end":195,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1262},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":190833,"byte_end":190844,"line_start":202,"line_end":202,"column_start":12,"column_end":23},"name":"set_isoweek","qualname":"<Parsed>::set_isoweek","value":"fn set_isoweek(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`isoweek`](#structfield.isoweek) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`isoweek`](#structfield.isoweek) field from given value.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":190729,"byte_end":190807,"line_start":200,"line_end":200,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":190812,"byte_end":190821,"line_start":201,"line_end":201,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1263},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":191086,"byte_end":191097,"line_start":208,"line_end":208,"column_start":12,"column_end":23},"name":"set_weekday","qualname":"<Parsed>::set_weekday","value":"fn set_weekday(&mut Self, Weekday) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`weekday`](#structfield.weekday) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`weekday`](#structfield.weekday) field from given value.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":190982,"byte_end":191060,"line_start":206,"line_end":206,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":191065,"byte_end":191074,"line_start":207,"line_end":207,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1264},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":191313,"byte_end":191324,"line_start":214,"line_end":214,"column_start":12,"column_end":23},"name":"set_ordinal","qualname":"<Parsed>::set_ordinal","value":"fn set_ordinal(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`ordinal`](#structfield.ordinal) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`ordinal`](#structfield.ordinal) field from given value.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":191209,"byte_end":191287,"line_start":212,"line_end":212,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":191292,"byte_end":191301,"line_start":213,"line_end":213,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1265},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":191558,"byte_end":191565,"line_start":220,"line_end":220,"column_start":12,"column_end":19},"name":"set_day","qualname":"<Parsed>::set_day","value":"fn set_day(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`day`](#structfield.day) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`day`](#structfield.day) field from given value.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":191462,"byte_end":191532,"line_start":218,"line_end":218,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":191537,"byte_end":191546,"line_start":219,"line_end":219,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1266},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":191851,"byte_end":191859,"line_start":227,"line_end":227,"column_start":12,"column_end":20},"name":"set_ampm","qualname":"<Parsed>::set_ampm","value":"fn set_ampm(&mut Self, bool) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`hour_div_12`](#structfield.hour_div_12) field from given value.\n (`false` for AM, `true` for PM)\n","sig":null,"attributes":[{"value":"/ Tries to set the [`hour_div_12`](#structfield.hour_div_12) field from given value.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":191699,"byte_end":191785,"line_start":224,"line_end":224,"column_start":5,"column_end":91}},{"value":"/ (`false` for AM, `true` for PM)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":191790,"byte_end":191825,"line_start":225,"line_end":225,"column_start":5,"column_end":40}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":191830,"byte_end":191839,"line_start":226,"line_end":226,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1267},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":192136,"byte_end":192146,"line_start":234,"line_end":234,"column_start":12,"column_end":22},"name":"set_hour12","qualname":"<Parsed>::set_hour12","value":"fn set_hour12(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`hour_mod_12`](#structfield.hour_mod_12) field from\n given hour number in 12-hour clocks.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`hour_mod_12`](#structfield.hour_mod_12) field from","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":191992,"byte_end":192065,"line_start":231,"line_end":231,"column_start":5,"column_end":78}},{"value":"/ given hour number in 12-hour clocks.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":192070,"byte_end":192110,"line_start":232,"line_end":232,"column_start":5,"column_end":45}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":192115,"byte_end":192124,"line_start":233,"line_end":233,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1268},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":192526,"byte_end":192534,"line_start":244,"line_end":244,"column_start":12,"column_end":20},"name":"set_hour","qualname":"<Parsed>::set_hour","value":"fn set_hour(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set both [`hour_div_12`](#structfield.hour_div_12) and\n [`hour_mod_12`](#structfield.hour_mod_12) fields from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set both [`hour_div_12`](#structfield.hour_div_12) and","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":192358,"byte_end":192425,"line_start":241,"line_end":241,"column_start":5,"column_end":72}},{"value":"/ [`hour_mod_12`](#structfield.hour_mod_12) fields from given value.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":192430,"byte_end":192500,"line_start":242,"line_end":242,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":192505,"byte_end":192514,"line_start":243,"line_end":243,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1269},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":192878,"byte_end":192888,"line_start":253,"line_end":253,"column_start":12,"column_end":22},"name":"set_minute","qualname":"<Parsed>::set_minute","value":"fn set_minute(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`minute`](#structfield.minute) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`minute`](#structfield.minute) field from given value.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":192776,"byte_end":192852,"line_start":251,"line_end":251,"column_start":5,"column_end":81}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":192857,"byte_end":192866,"line_start":252,"line_end":252,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1270},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":193127,"byte_end":193137,"line_start":259,"line_end":259,"column_start":12,"column_end":22},"name":"set_second","qualname":"<Parsed>::set_second","value":"fn set_second(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`second`](#structfield.second) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`second`](#structfield.second) field from given value.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":193025,"byte_end":193101,"line_start":257,"line_end":257,"column_start":5,"column_end":81}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":193106,"byte_end":193115,"line_start":258,"line_end":258,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1271},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":193384,"byte_end":193398,"line_start":265,"line_end":265,"column_start":12,"column_end":26},"name":"set_nanosecond","qualname":"<Parsed>::set_nanosecond","value":"fn set_nanosecond(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`nanosecond`](#structfield.nanosecond) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`nanosecond`](#structfield.nanosecond) field from given value.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":193274,"byte_end":193358,"line_start":263,"line_end":263,"column_start":5,"column_end":89}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":193363,"byte_end":193372,"line_start":264,"line_end":264,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1272},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":193647,"byte_end":193660,"line_start":271,"line_end":271,"column_start":12,"column_end":25},"name":"set_timestamp","qualname":"<Parsed>::set_timestamp","value":"fn set_timestamp(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`timestamp`](#structfield.timestamp) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`timestamp`](#structfield.timestamp) field from given value.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":193539,"byte_end":193621,"line_start":269,"line_end":269,"column_start":5,"column_end":87}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":193626,"byte_end":193635,"line_start":270,"line_end":270,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1273},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":193872,"byte_end":193882,"line_start":277,"line_end":277,"column_start":12,"column_end":22},"name":"set_offset","qualname":"<Parsed>::set_offset","value":"fn set_offset(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`offset`](#structfield.offset) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`offset`](#structfield.offset) field from given value.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":193770,"byte_end":193846,"line_start":275,"line_end":275,"column_start":5,"column_end":81}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":193851,"byte_end":193860,"line_start":276,"line_end":276,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1274},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":194526,"byte_end":194539,"line_start":292,"line_end":292,"column_start":12,"column_end":25},"name":"to_naive_date","qualname":"<Parsed>::to_naive_date","value":"fn to_naive_date(&Self) -> ParseResult<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Returns a parsed naive date out of given fields.","sig":null,"attributes":[{"value":"/ Returns a parsed naive date out of given fields.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":194019,"byte_end":194071,"line_start":281,"line_end":281,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":194076,"byte_end":194079,"line_start":282,"line_end":282,"column_start":5,"column_end":8}},{"value":"/ This method is able to determine the date from given subset of fields:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":194084,"byte_end":194158,"line_start":283,"line_end":283,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":194163,"byte_end":194166,"line_start":284,"line_end":284,"column_start":5,"column_end":8}},{"value":"/ - Year, month, day.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":194171,"byte_end":194194,"line_start":285,"line_end":285,"column_start":5,"column_end":28}},{"value":"/ - Year, day of the year (ordinal).","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":194199,"byte_end":194237,"line_start":286,"line_end":286,"column_start":5,"column_end":43}},{"value":"/ - Year, week number counted from Sunday or Monday, day of the week.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":194242,"byte_end":194313,"line_start":287,"line_end":287,"column_start":5,"column_end":76}},{"value":"/ - ISO week date.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":194318,"byte_end":194338,"line_start":288,"line_end":288,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":194343,"byte_end":194346,"line_start":289,"line_end":289,"column_start":5,"column_end":8}},{"value":"/ Gregorian year and ISO week date year can have their century number (`*_div_100`) omitted,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":194351,"byte_end":194445,"line_start":290,"line_end":290,"column_start":5,"column_end":99}},{"value":"/ the two-digit year is used to guess the century number then.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":194450,"byte_end":194514,"line_start":291,"line_end":291,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1282},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":203858,"byte_end":203871,"line_start":500,"line_end":500,"column_start":12,"column_end":25},"name":"to_naive_time","qualname":"<Parsed>::to_naive_time","value":"fn to_naive_time(&Self) -> ParseResult<NaiveTime>","parent":null,"children":[],"decl_id":null,"docs":" Returns a parsed naive time out of given fields.","sig":null,"attributes":[{"value":"/ Returns a parsed naive time out of given fields.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":203455,"byte_end":203507,"line_start":491,"line_end":491,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":203512,"byte_end":203515,"line_start":492,"line_end":492,"column_start":5,"column_end":8}},{"value":"/ This method is able to determine the time from given subset of fields:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":203520,"byte_end":203594,"line_start":493,"line_end":493,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":203599,"byte_end":203602,"line_start":494,"line_end":494,"column_start":5,"column_end":8}},{"value":"/ - Hour, minute. (second and nanosecond assumed to be 0)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":203607,"byte_end":203666,"line_start":495,"line_end":495,"column_start":5,"column_end":64}},{"value":"/ - Hour, minute, second. (nanosecond assumed to be 0)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":203671,"byte_end":203727,"line_start":496,"line_end":496,"column_start":5,"column_end":61}},{"value":"/ - Hour, minute, second, nanosecond.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":203732,"byte_end":203771,"line_start":497,"line_end":497,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":203776,"byte_end":203779,"line_start":498,"line_end":498,"column_start":5,"column_end":8}},{"value":"/ It is able to handle leap seconds when given second is 60.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":203784,"byte_end":203846,"line_start":499,"line_end":499,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1283},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":205654,"byte_end":205683,"line_start":542,"line_end":542,"column_start":12,"column_end":41},"name":"to_naive_datetime_with_offset","qualname":"<Parsed>::to_naive_datetime_with_offset","value":"fn to_naive_datetime_with_offset(&Self, i32) -> ParseResult<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Returns a parsed naive date and time out of given fields,\n except for the [`offset`](#structfield.offset) field (assumed to have a given value).\n This is required for parsing a local time or other known-timezone inputs.","sig":null,"attributes":[{"value":"/ Returns a parsed naive date and time out of given fields,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":205169,"byte_end":205230,"line_start":535,"line_end":535,"column_start":5,"column_end":66}},{"value":"/ except for the [`offset`](#structfield.offset) field (assumed to have a given value).","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":205235,"byte_end":205324,"line_start":536,"line_end":536,"column_start":5,"column_end":94}},{"value":"/ This is required for parsing a local time or other known-timezone inputs.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":205329,"byte_end":205406,"line_start":537,"line_end":537,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":205411,"byte_end":205414,"line_start":538,"line_end":538,"column_start":5,"column_end":8}},{"value":"/ This method is able to determine the combined date and time","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":205419,"byte_end":205482,"line_start":539,"line_end":539,"column_start":5,"column_end":68}},{"value":"/ from date and time fields or a single [`timestamp`](#structfield.timestamp) field.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":205487,"byte_end":205573,"line_start":540,"line_end":540,"column_start":5,"column_end":91}},{"value":"/ Either way those fields have to be consistent to each other.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":205578,"byte_end":205642,"line_start":541,"line_end":541,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1294},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":209101,"byte_end":209116,"line_start":615,"line_end":615,"column_start":12,"column_end":27},"name":"to_fixed_offset","qualname":"<Parsed>::to_fixed_offset","value":"fn to_fixed_offset(&Self) -> ParseResult<FixedOffset>","parent":null,"children":[],"decl_id":null,"docs":" Returns a parsed fixed time zone offset out of given fields.\n","sig":null,"attributes":[{"value":"/ Returns a parsed fixed time zone offset out of given fields.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":209025,"byte_end":209089,"line_start":614,"line_end":614,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1295},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":209588,"byte_end":209599,"line_start":625,"line_end":625,"column_start":12,"column_end":23},"name":"to_datetime","qualname":"<Parsed>::to_datetime","value":"fn to_datetime(&Self) -> ParseResult<DateTime<FixedOffset>>","parent":null,"children":[],"decl_id":null,"docs":" Returns a parsed timezone-aware date and time out of given fields.","sig":null,"attributes":[{"value":"/ Returns a parsed timezone-aware date and time out of given fields.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":209237,"byte_end":209307,"line_start":619,"line_end":619,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":209312,"byte_end":209315,"line_start":620,"line_end":620,"column_start":5,"column_end":8}},{"value":"/ This method is able to determine the combined date and time","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":209320,"byte_end":209383,"line_start":621,"line_end":621,"column_start":5,"column_end":68}},{"value":"/ from date and time fields or a single [`timestamp`](#structfield.timestamp) field,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":209388,"byte_end":209474,"line_start":622,"line_end":622,"column_start":5,"column_end":91}},{"value":"/ plus a time zone offset.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":209479,"byte_end":209507,"line_start":623,"line_end":623,"column_start":5,"column_end":33}},{"value":"/ Either way those fields have to be consistent to each other.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":209512,"byte_end":209576,"line_start":624,"line_end":624,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1296},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":210865,"byte_end":210890,"line_start":651,"line_end":651,"column_start":12,"column_end":37},"name":"to_datetime_with_timezone","qualname":"<Parsed>::to_datetime_with_timezone","value":"fn to_datetime_with_timezone<Tz>(&Self, &Tz) -> ParseResult<DateTime<Tz>>\nwhere Tz: TimeZone","parent":null,"children":[],"decl_id":null,"docs":" Returns a parsed timezone-aware date and time out of given fields,\n with an additional `TimeZone` used to interpret and validate the local date.","sig":null,"attributes":[{"value":"/ Returns a parsed timezone-aware date and time out of given fields,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":210308,"byte_end":210378,"line_start":642,"line_end":642,"column_start":5,"column_end":75}},{"value":"/ with an additional `TimeZone` used to interpret and validate the local date.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":210383,"byte_end":210463,"line_start":643,"line_end":643,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":210468,"byte_end":210471,"line_start":644,"line_end":644,"column_start":5,"column_end":8}},{"value":"/ This method is able to determine the combined date and time","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":210476,"byte_end":210539,"line_start":645,"line_end":645,"column_start":5,"column_end":68}},{"value":"/ from date and time fields or a single [`timestamp`](#structfield.timestamp) field,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":210544,"byte_end":210630,"line_start":646,"line_end":646,"column_start":5,"column_end":91}},{"value":"/ plus a time zone offset.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":210635,"byte_end":210663,"line_start":647,"line_end":647,"column_start":5,"column_end":33}},{"value":"/ Either way those fields have to be consistent to each other.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":210668,"byte_end":210732,"line_start":648,"line_end":648,"column_start":5,"column_end":69}},{"value":"/ If parsed fields include an UTC offset, it also has to be consistent to","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":210737,"byte_end":210812,"line_start":649,"line_end":649,"column_start":5,"column_end":80}},{"value":"/ [`offset`](#structfield.offset).","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":210817,"byte_end":210853,"line_start":650,"line_end":650,"column_start":5,"column_end":41}}]},{"kind":"Function","id":{"krate":0,"index":1381},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parse.rs","byte_start":248448,"byte_end":248453,"line_start":243,"line_end":243,"column_start":8,"column_end":13},"name":"parse","qualname":"::format::parse::parse","value":"fn parse<'a, I, B>(&mut Parsed, &str, I) -> ParseResult<()> where\nI: Iterator<Item = B>, B: Borrow<Item>","parent":null,"children":[],"decl_id":null,"docs":" Tries to parse given string into `parsed` with given formatting items.\n Returns `Ok` when the entire string has been parsed (otherwise `parsed` should not be used).\n There should be no trailing string after parsing;\n use a stray [`Item::Space`](./enum.Item.html#variant.Space) to trim whitespaces.","sig":null,"attributes":[{"value":"/ Tries to parse given string into `parsed` with given formatting items.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parse.rs","byte_start":247545,"byte_end":247619,"line_start":227,"line_end":227,"column_start":1,"column_end":75}},{"value":"/ Returns `Ok` when the entire string has been parsed (otherwise `parsed` should not be used).","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parse.rs","byte_start":247620,"byte_end":247716,"line_start":228,"line_end":228,"column_start":1,"column_end":97}},{"value":"/ There should be no trailing string after parsing;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parse.rs","byte_start":247717,"byte_end":247770,"line_start":229,"line_end":229,"column_start":1,"column_end":54}},{"value":"/ use a stray [`Item::Space`](./enum.Item.html#variant.Space) to trim whitespaces.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parse.rs","byte_start":247771,"byte_end":247855,"line_start":230,"line_end":230,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parse.rs","byte_start":247856,"byte_end":247859,"line_start":231,"line_end":231,"column_start":1,"column_end":4}},{"value":"/ This particular date and time parser is:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parse.rs","byte_start":247860,"byte_end":247904,"line_start":232,"line_end":232,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parse.rs","byte_start":247905,"byte_end":247908,"line_start":233,"line_end":233,"column_start":1,"column_end":4}},{"value":"/ - Greedy. It will consume the longest possible prefix.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parse.rs","byte_start":247909,"byte_end":247967,"line_start":234,"line_end":234,"column_start":1,"column_end":59}},{"value":"/   For example, `April` is always consumed entirely when the long month name is requested;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parse.rs","byte_start":247968,"byte_end":248061,"line_start":235,"line_end":235,"column_start":1,"column_end":94}},{"value":"/   it equally accepts `Apr`, but prefers the longer prefix in this case.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parse.rs","byte_start":248062,"byte_end":248137,"line_start":236,"line_end":236,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parse.rs","byte_start":248138,"byte_end":248141,"line_start":237,"line_end":237,"column_start":1,"column_end":4}},{"value":"/ - Padding-agnostic (for numeric items).","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parse.rs","byte_start":248142,"byte_end":248185,"line_start":238,"line_end":238,"column_start":1,"column_end":44}},{"value":"/   The [`Pad`](./enum.Pad.html) field is completely ignored,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parse.rs","byte_start":248186,"byte_end":248249,"line_start":239,"line_end":239,"column_start":1,"column_end":64}},{"value":"/   so one can prepend any number of whitespace then any number of zeroes before numbers.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parse.rs","byte_start":248250,"byte_end":248341,"line_start":240,"line_end":240,"column_start":1,"column_end":92}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parse.rs","byte_start":248342,"byte_end":248345,"line_start":241,"line_end":241,"column_start":1,"column_end":4}},{"value":"/ - (Still) obeying the intrinsic parsing width. This allows, for example, parsing `HHMMSS`.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parse.rs","byte_start":248346,"byte_end":248440,"line_start":242,"line_end":242,"column_start":1,"column_end":95}}]},{"kind":"Method","id":{"krate":0,"index":1411},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parse.rs","byte_start":258017,"byte_end":258025,"line_start":481,"line_end":481,"column_start":8,"column_end":16},"name":"from_str","qualname":"<DateTime<FixedOffset> as std::str::FromStr>::from_str","value":"fn from_str(&str) -> ParseResult<DateTime<FixedOffset>>","parent":{"krate":2,"index":12561},"children":[],"decl_id":{"krate":2,"index":12563},"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1480},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\strftime.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"strftime","qualname":"::format::strftime","value":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\strftime.rs","parent":null,"children":[{"krate":0,"index":1481},{"krate":0,"index":1482},{"krate":0,"index":1485},{"krate":0,"index":1488},{"krate":0,"index":1491},{"krate":0,"index":1494},{"krate":0,"index":1497},{"krate":0,"index":1500},{"krate":0,"index":1502},{"krate":0,"index":1503},{"krate":0,"index":1504},{"krate":0,"index":3627},{"krate":0,"index":3634},{"krate":0,"index":3637},{"krate":0,"index":1505},{"krate":0,"index":1511},{"krate":0,"index":1512}],"decl_id":null,"docs":"`strftime`/`strptime`-inspired date and time formatting syntax.","sig":null,"attributes":[{"value":"*\n`strftime`/`strptime`-inspired date and time formatting syntax.\n\n## Specifiers\n\nThe following specifiers are available both to formatting and parsing.\n\n| Spec. | Example  | Description                                                                |\n|-------|----------|----------------------------------------------------------------------------|\n|       |          | **DATE SPECIFIERS:**                                                       |\n| `%Y`  | `2001`   | The full proleptic Gregorian year, zero-padded to 4 digits. chrono supports years from -262144 to 262143. |\n| `%C`  | `20`     | The proleptic Gregorian year divided by 100, zero-padded to 2 digits. [^1] |\n| `%y`  | `01`     | The proleptic Gregorian year modulo 100, zero-padded to 2 digits. [^1]     |\n|       |          |                                                                            |\n| `%m`  | `07`     | Month number (01--12), zero-padded to 2 digits.                            |\n| `%b`  | `Jul`    | Abbreviated month name. Always 3 letters.                                  |\n| `%B`  | `July`   | Full month name. Also accepts corresponding abbreviation in parsing.       |\n| `%h`  | `Jul`    | Same as `%b`.                                                              |\n|       |          |                                                                            |\n| `%d`  | `08`     | Day number (01--31), zero-padded to 2 digits.                              |\n| `%e`  | ` 8`     | Same as `%d` but space-padded. Same as `%_d`.                              |\n|       |          |                                                                            |\n| `%a`  | `Sun`    | Abbreviated weekday name. Always 3 letters.                                |\n| `%A`  | `Sunday` | Full weekday name. Also accepts corresponding abbreviation in parsing.     |\n| `%w`  | `0`      | Sunday = 0, Monday = 1, ..., Saturday = 6.                                 |\n| `%u`  | `7`      | Monday = 1, Tuesday = 2, ..., Sunday = 7. (ISO 8601)                       |\n|       |          |                                                                            |\n| `%U`  | `28`     | Week number starting with Sunday (00--53), zero-padded to 2 digits. [^2]   |\n| `%W`  | `27`     | Same as `%U`, but week 1 starts with the first Monday in that year instead.|\n|       |          |                                                                            |\n| `%G`  | `2001`   | Same as `%Y` but uses the year number in ISO 8601 week date. [^3]          |\n| `%g`  | `01`     | Same as `%y` but uses the year number in ISO 8601 week date. [^3]          |\n| `%V`  | `27`     | Same as `%U` but uses the week number in ISO 8601 week date (01--53). [^3] |\n|       |          |                                                                            |\n| `%j`  | `189`    | Day of the year (001--366), zero-padded to 3 digits.                       |\n|       |          |                                                                            |\n| `%D`  | `07/08/01`    | Month-day-year format. Same as `%m/%d/%y`.                            |\n| `%x`  | `07/08/01`    | Locale's date representation (e.g., 12/31/99).                        |\n| `%F`  | `2001-07-08`  | Year-month-day format (ISO 8601). Same as `%Y-%m-%d`.                 |\n| `%v`  | ` 8-Jul-2001` | Day-month-year format. Same as `%e-%b-%Y`.                            |\n|       |          |                                                                            |\n|       |          | **TIME SPECIFIERS:**                                                       |\n| `%H`  | `00`     | Hour number (00--23), zero-padded to 2 digits.                             |\n| `%k`  | ` 0`     | Same as `%H` but space-padded. Same as `%_H`.                              |\n| `%I`  | `12`     | Hour number in 12-hour clocks (01--12), zero-padded to 2 digits.           |\n| `%l`  | `12`     | Same as `%I` but space-padded. Same as `%_I`.                              |\n|       |          |                                                                            |\n| `%P`  | `am`     | `am` or `pm` in 12-hour clocks.                                            |\n| `%p`  | `AM`     | `AM` or `PM` in 12-hour clocks.                                            |\n|       |          |                                                                            |\n| `%M`  | `34`     | Minute number (00--59), zero-padded to 2 digits.                           |\n| `%S`  | `60`     | Second number (00--60), zero-padded to 2 digits. [^4]                      |\n| `%f`  | `026490000`   | The fractional seconds (in nanoseconds) since last whole second. [^7] |\n| `%.f` | `.026490`| Similar to `.%f` but left-aligned. These all consume the leading dot. [^7] |\n| `%.3f`| `.026`        | Similar to `.%f` but left-aligned but fixed to a length of 3. [^7]    |\n| `%.6f`| `.026490`     | Similar to `.%f` but left-aligned but fixed to a length of 6. [^7]    |\n| `%.9f`| `.026490000`  | Similar to `.%f` but left-aligned but fixed to a length of 9. [^7]    |\n| `%3f` | `026`         | Similar to `%.3f` but without the leading dot. [^7]                   |\n| `%6f` | `026490`      | Similar to `%.6f` but without the leading dot. [^7]                   |\n| `%9f` | `026490000`   | Similar to `%.9f` but without the leading dot. [^7]                   |\n|       |               |                                                                       |\n| `%R`  | `00:34`       | Hour-minute format. Same as `%H:%M`.                                  |\n| `%T`  | `00:34:60`    | Hour-minute-second format. Same as `%H:%M:%S`.                        |\n| `%X`  | `00:34:60`    | Locale's time representation (e.g., 23:13:48).                        |\n| `%r`  | `12:34:60 AM` | Hour-minute-second format in 12-hour clocks. Same as `%I:%M:%S %p`.   |\n|       |          |                                                                            |\n|       |          | **TIME ZONE SPECIFIERS:**                                                  |\n| `%Z`  | `ACST`   | Local time zone name. Skips all non-whitespace characters during parsing. [^8] |\n| `%z`  | `+0930`  | Offset from the local time to UTC (with UTC being `+0000`).                |\n| `%:z` | `+09:30` | Same as `%z` but with a colon.                                             |\n| `%#z` | `+09`    | *Parsing only:* Same as `%z` but allows minutes to be missing or present.  |\n|       |          |                                                                            |\n|       |          | **DATE & TIME SPECIFIERS:**                                                |\n|`%c`|`Sun Jul  8 00:34:60 2001`|Locale's date and time (e.g., Thu Mar  3 23:05:25 2005).       |\n| `%+`  | `2001-07-08T00:34:60.026490+09:30` | ISO 8601 / RFC 3339 date & time format. [^5]     |\n|       |               |                                                                       |\n| `%s`  | `994518299`   | UNIX timestamp, the number of seconds since 1970-01-01 00:00 UTC. [^6]|\n|       |          |                                                                            |\n|       |          | **SPECIAL SPECIFIERS:**                                                    |\n| `%t`  |          | Literal tab (`\\t`).                                                        |\n| `%n`  |          | Literal newline (`\\n`).                                                    |\n| `%%`  |          | Literal percent sign.                                                      |\n\nIt is possible to override the default padding behavior of numeric specifiers `%?`.\nThis is not allowed for other specifiers and will result in the `BAD_FORMAT` error.\n\nModifier | Description\n-------- | -----------\n`%-?`    | Suppresses any padding including spaces and zeroes. (e.g. `%j` = `012`, `%-j` = `12`)\n`%_?`    | Uses spaces as a padding. (e.g. `%j` = `012`, `%_j` = ` 12`)\n`%0?`    | Uses zeroes as a padding. (e.g. `%e` = ` 9`, `%0e` = `09`)\n\nNotes:\n\n[^1]: `%C`, `%y`:\n   This is floor division, so 100 BCE (year number -99) will print `-1` and `99` respectively.\n\n[^2]: `%U`:\n   Week 1 starts with the first Sunday in that year.\n   It is possible to have week 0 for days before the first Sunday.\n\n[^3]: `%G`, `%g`, `%V`:\n   Week 1 is the first week with at least 4 days in that year.\n   Week 0 does not exist, so this should be used with `%G` or `%g`.\n\n[^4]: `%S`:\n   It accounts for leap seconds, so `60` is possible.\n\n[^5]: `%+`: Same as `%Y-%m-%dT%H:%M:%S%.f%:z`, i.e. 0, 3, 6 or 9 fractional\n   digits for seconds and colons in the time zone offset.\n   <br>\n   <br>\n   The typical `strftime` implementations have different (and locale-dependent)\n   formats for this specifier. While Chrono's format for `%+` is far more\n   stable, it is best to avoid this specifier if you want to control the exact\n   output.\n\n[^6]: `%s`:\n   This is not padded and can be negative.\n   For the purpose of Chrono, it only accounts for non-leap seconds\n   so it slightly differs from ISO C `strftime` behavior.\n\n[^7]: `%f`, `%.f`, `%.3f`, `%.6f`, `%.9f`, `%3f`, `%6f`, `%9f`:\n   <br>\n   The default `%f` is right-aligned and always zero-padded to 9 digits\n   for the compatibility with glibc and others,\n   so it always counts the number of nanoseconds since the last whole second.\n   E.g. 7ms after the last second will print `007000000`,\n   and parsing `7000000` will yield the same.\n   <br>\n   <br>\n   The variant `%.f` is left-aligned and print 0, 3, 6 or 9 fractional digits\n   according to the precision.\n   E.g. 70ms after the last second under `%.f` will print `.070` (note: not `.07`),\n   and parsing `.07`, `.070000` etc. will yield the same.\n   Note that they can print or read nothing if the fractional part is zero or\n   the next character is not `.`.\n   <br>\n   <br>\n   The variant `%.3f`, `%.6f` and `%.9f` are left-aligned and print 3, 6 or 9 fractional digits\n   according to the number preceding `f`.\n   E.g. 70ms after the last second under `%.3f` will print `.070` (note: not `.07`),\n   and parsing `.07`, `.070000` etc. will yield the same.\n   Note that they can read nothing if the fractional part is zero or\n   the next character is not `.` however will print with the specified length.\n   <br>\n   <br>\n   The variant `%3f`, `%6f` and `%9f` are left-aligned and print 3, 6 or 9 fractional digits\n   according to the number preceding `f`, but without the leading dot.\n   E.g. 70ms after the last second under `%3f` will print `070` (note: not `07`),\n   and parsing `07`, `070000` etc. will yield the same.\n   Note that they can read nothing if the fractional part is zero.\n\n[^8]: `%Z`:\n   Offset will not be populated from the parsed data, nor will it be validated.\n   Timezone is completely ignored. Similar to the glibc `strptime` treatment of\n   this format code.\n   <br>\n   <br>\n   It is not possible to reliably convert from an abbreviation to an offset,\n   for example CDT can mean either Central Daylight Time (North America) or\n   China Daylight Time.\n*/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\strftime.rs","byte_start":296332,"byte_end":307356,"line_start":4,"line_end":166,"column_start":1,"column_end":3}}]},{"kind":"Struct","id":{"krate":0,"index":3627},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\strftime.rs","byte_start":308220,"byte_end":308233,"line_start":198,"line_end":198,"column_start":12,"column_end":25},"name":"StrftimeItems","qualname":"::format::strftime::StrftimeItems","value":"StrftimeItems {  }","parent":null,"children":[{"krate":0,"index":3629},{"krate":0,"index":3630},{"krate":0,"index":3631},{"krate":0,"index":3632},{"krate":0,"index":3633}],"decl_id":null,"docs":" Parsing iterator for `strftime`-like format strings.\n","sig":null,"attributes":[{"value":"/ Parsing iterator for `strftime`-like format strings.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\strftime.rs","byte_start":308128,"byte_end":308184,"line_start":196,"line_end":196,"column_start":1,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1507},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\strftime.rs","byte_start":308823,"byte_end":308826,"line_start":215,"line_end":215,"column_start":12,"column_end":15},"name":"new","qualname":"<StrftimeItems>::new","value":"fn new(&'a str) -> StrftimeItems","parent":null,"children":[],"decl_id":null,"docs":" Creates a new parsing iterator from the `strftime`-like format string.\n","sig":null,"attributes":[{"value":"/ Creates a new parsing iterator from the `strftime`-like format string.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\strftime.rs","byte_start":308737,"byte_end":308811,"line_start":214,"line_end":214,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":1515},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\strftime.rs","byte_start":310167,"byte_end":310171,"line_start":259,"line_end":259,"column_start":8,"column_end":12},"name":"next","qualname":"<StrftimeItems as std::iter::Iterator>::next","value":"fn next(&mut Self) -> Option<Item>","parent":{"krate":2,"index":8193},"children":[],"decl_id":{"krate":2,"index":8195},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3646},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":176537,"byte_end":176550,"line_start":747,"line_end":747,"column_start":12,"column_end":25},"name":"DelayedFormat","qualname":"::format::DelayedFormat","value":"DelayedFormat {  }","parent":null,"children":[{"krate":0,"index":3648},{"krate":0,"index":3649},{"krate":0,"index":3650},{"krate":0,"index":3651}],"decl_id":null,"docs":" A *temporary* object which can be used as an argument to `format!` or others.\n This is normally constructed via `format` methods of each date and time type.\n","sig":null,"attributes":[{"value":"/ A *temporary* object which can be used as an argument to `format!` or others.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":176291,"byte_end":176372,"line_start":743,"line_end":743,"column_start":1,"column_end":82}},{"value":"/ This is normally constructed via `format` methods of each date and time type.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":176373,"byte_end":176454,"line_start":744,"line_end":744,"column_start":1,"column_end":82}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":176455,"byte_end":176508,"line_start":745,"line_end":745,"column_start":1,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1525},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":177301,"byte_end":177304,"line_start":766,"line_end":766,"column_start":12,"column_end":15},"name":"new","qualname":"<DelayedFormat<I>>::new","value":"fn new(Option<NaiveDate>, Option<NaiveTime>, I) -> DelayedFormat<I>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DelayedFormat` value out of local date and time.\n","sig":null,"attributes":[{"value":"/ Makes a new `DelayedFormat` value out of local date and time.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":177224,"byte_end":177289,"line_start":765,"line_end":765,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":1526},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":177677,"byte_end":177692,"line_start":778,"line_end":778,"column_start":12,"column_end":27},"name":"new_with_offset","qualname":"<DelayedFormat<I>>::new_with_offset","value":"fn new_with_offset<Off>(Option<NaiveDate>, Option<NaiveTime>, &Off, I)\n-> DelayedFormat<I> where Off: Offset + fmt::Display","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DelayedFormat` value out of local date and time and UTC offset.\n","sig":null,"attributes":[{"value":"/ Makes a new `DelayedFormat` value out of local date and time and UTC offset.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":177585,"byte_end":177665,"line_start":777,"line_end":777,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":1532},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":179235,"byte_end":179238,"line_start":828,"line_end":828,"column_start":8,"column_end":11},"name":"fmt","qualname":"<DelayedFormat<I> as std::fmt::Display>::fmt","value":"fn fmt(&Self, &mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":9914},"children":[],"decl_id":{"krate":2,"index":9915},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1535},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":180555,"byte_end":180563,"line_start":876,"line_end":876,"column_start":8,"column_end":16},"name":"from_str","qualname":"<Weekday as std::str::FromStr>::from_str","value":"fn from_str(&str) -> Result<Self, Self::Err>","parent":{"krate":2,"index":12561},"children":[],"decl_id":{"krate":2,"index":12563},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1538},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":182510,"byte_end":182518,"line_start":950,"line_end":950,"column_start":8,"column_end":16},"name":"from_str","qualname":"<Month as std::str::FromStr>::from_str","value":"fn from_str(&str) -> Result<Self, Self::Err>","parent":{"krate":2,"index":12561},"children":[],"decl_id":{"krate":2,"index":12563},"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1546},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"naive","qualname":"::naive","value":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\mod.rs","parent":null,"children":[{"krate":0,"index":1547},{"krate":0,"index":1813},{"krate":0,"index":2334},{"krate":0,"index":2422},{"krate":0,"index":2443},{"krate":0,"index":2599},{"krate":0,"index":2600},{"krate":0,"index":2603},{"krate":0,"index":2606},{"krate":0,"index":2609},{"krate":0,"index":2612},{"krate":0,"index":2613},{"krate":0,"index":2616},{"krate":0,"index":2619},{"krate":0,"index":2622},{"krate":0,"index":2625},{"krate":0,"index":2628}],"decl_id":null,"docs":" Date and time types unconcerned with timezones.","sig":null,"attributes":[{"value":"/ Date and time types unconcerned with timezones.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\mod.rs","byte_start":326925,"byte_end":326976,"line_start":1,"line_end":1,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\mod.rs","byte_start":326977,"byte_end":326980,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ They are primarily building blocks for other types","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\mod.rs","byte_start":326981,"byte_end":327035,"line_start":3,"line_end":3,"column_start":1,"column_end":55}},{"value":"/ (e.g. [`TimeZone`](../offset/trait.TimeZone.html)),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\mod.rs","byte_start":327036,"byte_end":327091,"line_start":4,"line_end":4,"column_start":1,"column_end":56}},{"value":"/ but can be also used for the simpler date and time handling.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\mod.rs","byte_start":327092,"byte_end":327156,"line_start":5,"line_end":5,"column_start":1,"column_end":65}}]},{"kind":"Struct","id":{"krate":0,"index":3655},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":330201,"byte_end":330210,"line_start":57,"line_end":57,"column_start":12,"column_end":21},"name":"NaiveWeek","qualname":"::naive::date::NaiveWeek","value":"NaiveWeek {  }","parent":null,"children":[{"krate":0,"index":3656},{"krate":0,"index":3657}],"decl_id":null,"docs":" A week represented by a [`NaiveDate`] and a [`Weekday`] which is the first\n day of the week.\n","sig":null,"attributes":[{"value":"/ A week represented by a [`NaiveDate`] and a [`Weekday`] which is the first","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":330073,"byte_end":330151,"line_start":54,"line_end":54,"column_start":1,"column_end":79}},{"value":"/ day of the week.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":330152,"byte_end":330172,"line_start":55,"line_end":55,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":1657},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":330611,"byte_end":330620,"line_start":75,"line_end":75,"column_start":12,"column_end":21},"name":"first_day","qualname":"<NaiveWeek>::first_day","value":"fn first_day(&Self) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Returns a date representing the first day of the week.","sig":null,"attributes":[{"value":"/ Returns a date representing the first day of the week.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":330278,"byte_end":330336,"line_start":63,"line_end":63,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":330341,"byte_end":330344,"line_start":64,"line_end":64,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":330349,"byte_end":330363,"line_start":65,"line_end":65,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":330368,"byte_end":330371,"line_start":66,"line_end":66,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":330376,"byte_end":330383,"line_start":67,"line_end":67,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, Weekday};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":330388,"byte_end":330425,"line_start":68,"line_end":68,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":330430,"byte_end":330433,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ let date = NaiveDate::from_ymd(2022, 4, 18);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":330438,"byte_end":330486,"line_start":70,"line_end":70,"column_start":5,"column_end":53}},{"value":"/ let week = date.week(Weekday::Mon);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":330491,"byte_end":330530,"line_start":71,"line_end":71,"column_start":5,"column_end":44}},{"value":"/ assert!(week.first_day() <= date);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":330535,"byte_end":330573,"line_start":72,"line_end":72,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":330578,"byte_end":330585,"line_start":73,"line_end":73,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":330590,"byte_end":330599,"line_start":74,"line_end":74,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1658},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":331226,"byte_end":331234,"line_start":94,"line_end":94,"column_start":12,"column_end":20},"name":"last_day","qualname":"<NaiveWeek>::last_day","value":"fn last_day(&Self) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Returns a date representing the last day of the week.","sig":null,"attributes":[{"value":"/ Returns a date representing the last day of the week.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":330895,"byte_end":330952,"line_start":82,"line_end":82,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":330957,"byte_end":330960,"line_start":83,"line_end":83,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":330965,"byte_end":330979,"line_start":84,"line_end":84,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":330984,"byte_end":330987,"line_start":85,"line_end":85,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":330992,"byte_end":330999,"line_start":86,"line_end":86,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, Weekday};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":331004,"byte_end":331041,"line_start":87,"line_end":87,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":331046,"byte_end":331049,"line_start":88,"line_end":88,"column_start":5,"column_end":8}},{"value":"/ let date = NaiveDate::from_ymd(2022, 4, 18);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":331054,"byte_end":331102,"line_start":89,"line_end":89,"column_start":5,"column_end":53}},{"value":"/ let week = date.week(Weekday::Mon);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":331107,"byte_end":331146,"line_start":90,"line_end":90,"column_start":5,"column_end":44}},{"value":"/ assert!(week.last_day() >= date);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":331151,"byte_end":331188,"line_start":91,"line_end":91,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":331193,"byte_end":331200,"line_start":92,"line_end":92,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":331205,"byte_end":331214,"line_start":93,"line_end":93,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1659},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":331827,"byte_end":331831,"line_start":113,"line_end":113,"column_start":12,"column_end":16},"name":"days","qualname":"<NaiveWeek>::days","value":"fn days(&Self) -> RangeInclusive<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Returns a [`RangeInclusive<T>`] representing the whole week bounded by\n [first_day](./struct.NaiveWeek.html#method.first_day) and\n [last_day](./struct.NaiveWeek.html#method.last_day) functions.","sig":null,"attributes":[{"value":"/ Returns a [`RangeInclusive<T>`] representing the whole week bounded by","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":331313,"byte_end":331387,"line_start":98,"line_end":98,"column_start":5,"column_end":79}},{"value":"/ [first_day](./struct.NaiveWeek.html#method.first_day) and","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":331392,"byte_end":331453,"line_start":99,"line_end":99,"column_start":5,"column_end":66}},{"value":"/ [last_day](./struct.NaiveWeek.html#method.last_day) functions.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":331458,"byte_end":331524,"line_start":100,"line_end":100,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":331529,"byte_end":331532,"line_start":101,"line_end":101,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":331537,"byte_end":331551,"line_start":102,"line_end":102,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":331556,"byte_end":331559,"line_start":103,"line_end":103,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":331564,"byte_end":331571,"line_start":104,"line_end":104,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, Weekday};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":331576,"byte_end":331613,"line_start":105,"line_end":105,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":331618,"byte_end":331621,"line_start":106,"line_end":106,"column_start":5,"column_end":8}},{"value":"/ let date = NaiveDate::from_ymd(2022, 4, 18);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":331626,"byte_end":331674,"line_start":107,"line_end":107,"column_start":5,"column_end":53}},{"value":"/ let week = date.week(Weekday::Mon);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":331679,"byte_end":331718,"line_start":108,"line_end":108,"column_start":5,"column_end":44}},{"value":"/ let days = week.days();","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":331723,"byte_end":331750,"line_start":109,"line_end":109,"column_start":5,"column_end":32}},{"value":"/ assert!(days.contains(&date));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":331755,"byte_end":331789,"line_start":110,"line_end":110,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":331794,"byte_end":331801,"line_start":111,"line_end":111,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":331806,"byte_end":331815,"line_start":112,"line_end":112,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":3660},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":334571,"byte_end":334580,"line_start":168,"line_end":168,"column_start":12,"column_end":21},"name":"NaiveDate","qualname":"::naive::date::NaiveDate","value":"NaiveDate {  }","parent":null,"children":[{"krate":0,"index":3661}],"decl_id":null,"docs":" ISO 8601 calendar date without timezone.\n Allows for every [proleptic Gregorian date](#calendar-date)\n from Jan 1, 262145 BCE to Dec 31, 262143 CE.\n Also supports the conversion from ISO 8601 ordinal and week date.","sig":null,"attributes":[{"value":"/ ISO 8601 calendar date without timezone.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":331922,"byte_end":331966,"line_start":118,"line_end":118,"column_start":1,"column_end":45}},{"value":"/ Allows for every [proleptic Gregorian date](#calendar-date)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":331967,"byte_end":332030,"line_start":119,"line_end":119,"column_start":1,"column_end":64}},{"value":"/ from Jan 1, 262145 BCE to Dec 31, 262143 CE.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":332031,"byte_end":332079,"line_start":120,"line_end":120,"column_start":1,"column_end":49}},{"value":"/ Also supports the conversion from ISO 8601 ordinal and week date.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":332080,"byte_end":332149,"line_start":121,"line_end":121,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":332150,"byte_end":332153,"line_start":122,"line_end":122,"column_start":1,"column_end":4}},{"value":"/ # Calendar Date","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":332154,"byte_end":332173,"line_start":123,"line_end":123,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":332174,"byte_end":332177,"line_start":124,"line_end":124,"column_start":1,"column_end":4}},{"value":"/ The ISO 8601 **calendar date** follows the proleptic Gregorian calendar.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":332178,"byte_end":332254,"line_start":125,"line_end":125,"column_start":1,"column_end":77}},{"value":"/ It is like a normal civil calendar but note some slight differences:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":332255,"byte_end":332327,"line_start":126,"line_end":126,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":332328,"byte_end":332331,"line_start":127,"line_end":127,"column_start":1,"column_end":4}},{"value":"/ * Dates before the Gregorian calendar's inception in 1582 are defined via the extrapolation.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":332332,"byte_end":332428,"line_start":128,"line_end":128,"column_start":1,"column_end":97}},{"value":"/   Be careful, as historical dates are often noted in the Julian calendar and others","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":332429,"byte_end":332516,"line_start":129,"line_end":129,"column_start":1,"column_end":88}},{"value":"/   and the transition to Gregorian may differ across countries (as late as early 20C).","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":332517,"byte_end":332606,"line_start":130,"line_end":130,"column_start":1,"column_end":90}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":332607,"byte_end":332610,"line_start":131,"line_end":131,"column_start":1,"column_end":4}},{"value":"/   (Some example: Both Shakespeare from Britain and Cervantes from Spain seemingly died","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":332611,"byte_end":332701,"line_start":132,"line_end":132,"column_start":1,"column_end":91}},{"value":"/   on the same calendar date---April 23, 1616---but in the different calendar.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":332702,"byte_end":332783,"line_start":133,"line_end":133,"column_start":1,"column_end":82}},{"value":"/   Britain used the Julian calendar at that time, so Shakespeare's death is later.)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":332784,"byte_end":332870,"line_start":134,"line_end":134,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":332871,"byte_end":332874,"line_start":135,"line_end":135,"column_start":1,"column_end":4}},{"value":"/ * ISO 8601 calendars has the year 0, which is 1 BCE (a year before 1 CE).","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":332875,"byte_end":332952,"line_start":136,"line_end":136,"column_start":1,"column_end":78}},{"value":"/   If you need a typical BCE/BC and CE/AD notation for year numbers,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":332953,"byte_end":333024,"line_start":137,"line_end":137,"column_start":1,"column_end":72}},{"value":"/   use the [`Datelike::year_ce`](../trait.Datelike.html#method.year_ce) method.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":333025,"byte_end":333107,"line_start":138,"line_end":138,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":333108,"byte_end":333111,"line_start":139,"line_end":139,"column_start":1,"column_end":4}},{"value":"/ # Week Date","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":333112,"byte_end":333127,"line_start":140,"line_end":140,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":333128,"byte_end":333131,"line_start":141,"line_end":141,"column_start":1,"column_end":4}},{"value":"/ The ISO 8601 **week date** is a triple of year number, week number","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":333132,"byte_end":333202,"line_start":142,"line_end":142,"column_start":1,"column_end":71}},{"value":"/ and [day of the week](../enum.Weekday.html) with the following rules:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":333203,"byte_end":333276,"line_start":143,"line_end":143,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":333277,"byte_end":333280,"line_start":144,"line_end":144,"column_start":1,"column_end":4}},{"value":"/ * A week consists of Monday through Sunday, and is always numbered within some year.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":333281,"byte_end":333369,"line_start":145,"line_end":145,"column_start":1,"column_end":89}},{"value":"/   The week number ranges from 1 to 52 or 53 depending on the year.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":333370,"byte_end":333440,"line_start":146,"line_end":146,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":333441,"byte_end":333444,"line_start":147,"line_end":147,"column_start":1,"column_end":4}},{"value":"/ * The week 1 of given year is defined as the first week containing January 4 of that year,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":333445,"byte_end":333539,"line_start":148,"line_end":148,"column_start":1,"column_end":95}},{"value":"/   or equivalently, the first week containing four or more days in that year.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":333540,"byte_end":333620,"line_start":149,"line_end":149,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":333621,"byte_end":333624,"line_start":150,"line_end":150,"column_start":1,"column_end":4}},{"value":"/ * The year number in the week date may *not* correspond to the actual Gregorian year.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":333625,"byte_end":333714,"line_start":151,"line_end":151,"column_start":1,"column_end":90}},{"value":"/   For example, January 3, 2016 (Sunday) was on the last (53rd) week of 2015.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":333715,"byte_end":333795,"line_start":152,"line_end":152,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":333796,"byte_end":333799,"line_start":153,"line_end":153,"column_start":1,"column_end":4}},{"value":"/ Chrono's date types default to the ISO 8601 [calendar date](#calendar-date),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":333800,"byte_end":333880,"line_start":154,"line_end":154,"column_start":1,"column_end":81}},{"value":"/ but [`Datelike::iso_week`](../trait.Datelike.html#tymethod.iso_week) and","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":333881,"byte_end":333957,"line_start":155,"line_end":155,"column_start":1,"column_end":77}},{"value":"/ [`Datelike::weekday`](../trait.Datelike.html#tymethod.weekday) methods","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":333958,"byte_end":334032,"line_start":156,"line_end":156,"column_start":1,"column_end":75}},{"value":"/ can be used to get the corresponding week date.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":334033,"byte_end":334084,"line_start":157,"line_end":157,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":334085,"byte_end":334088,"line_start":158,"line_end":158,"column_start":1,"column_end":4}},{"value":"/ # Ordinal Date","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":334089,"byte_end":334107,"line_start":159,"line_end":159,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":334108,"byte_end":334111,"line_start":160,"line_end":160,"column_start":1,"column_end":4}},{"value":"/ The ISO 8601 **ordinal date** is a pair of year number and day of the year (\"ordinal\").","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":334112,"byte_end":334203,"line_start":161,"line_end":161,"column_start":1,"column_end":92}},{"value":"/ The ordinal number ranges from 1 to 365 or 366 depending on the year.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":334204,"byte_end":334277,"line_start":162,"line_end":162,"column_start":1,"column_end":74}},{"value":"/ The year number is the same as that of the [calendar date](#calendar-date).","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":334278,"byte_end":334357,"line_start":163,"line_end":163,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":334358,"byte_end":334361,"line_start":164,"line_end":164,"column_start":1,"column_end":4}},{"value":"/ This is currently the internal format of Chrono's date types.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":334362,"byte_end":334427,"line_start":165,"line_end":165,"column_start":1,"column_end":66}}]},{"kind":"Const","id":{"krate":0,"index":1660},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":334768,"byte_end":334776,"line_start":174,"line_end":174,"column_start":11,"column_end":19},"name":"MIN_DATE","qualname":"::naive::date::MIN_DATE","value":"NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" The minimum possible `NaiveDate` (January 1, 262145 BCE).\n","sig":null,"attributes":[{"value":"/ The minimum possible `NaiveDate` (January 1, 262145 BCE).","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":334627,"byte_end":334688,"line_start":172,"line_end":172,"column_start":1,"column_end":62}},{"value":"deprecated(since = \"0.4.20\", note = \"Use NaiveDate::MIN instead\")","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":334689,"byte_end":334757,"line_start":173,"line_end":173,"column_start":1,"column_end":69}}]},{"kind":"Const","id":{"krate":0,"index":1661},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":334948,"byte_end":334956,"line_start":177,"line_end":177,"column_start":11,"column_end":19},"name":"MAX_DATE","qualname":"::naive::date::MAX_DATE","value":"NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" The maximum possible `NaiveDate` (December 31, 262143 CE).\n","sig":null,"attributes":[{"value":"/ The maximum possible `NaiveDate` (December 31, 262143 CE).","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":334806,"byte_end":334868,"line_start":175,"line_end":175,"column_start":1,"column_end":63}},{"value":"deprecated(since = \"0.4.20\", note = \"Use NaiveDate::MAX instead\")","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":334869,"byte_end":334937,"line_start":176,"line_end":176,"column_start":1,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1665},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":337319,"byte_end":337327,"line_start":243,"line_end":243,"column_start":12,"column_end":20},"name":"from_ymd","qualname":"<NaiveDate>::from_ymd","value":"fn from_ymd(i32, u32, u32) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from the [calendar date](#calendar-date)\n (year, month and day).","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` from the [calendar date](#calendar-date)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":336591,"byte_end":336659,"line_start":223,"line_end":223,"column_start":5,"column_end":73}},{"value":"/ (year, month and day).","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":336664,"byte_end":336690,"line_start":224,"line_end":224,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":336695,"byte_end":336698,"line_start":225,"line_end":225,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-range date, invalid month and/or day.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":336703,"byte_end":336765,"line_start":226,"line_end":226,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":336770,"byte_end":336773,"line_start":227,"line_end":227,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":336778,"byte_end":336791,"line_start":228,"line_end":228,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":336796,"byte_end":336799,"line_start":229,"line_end":229,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":336804,"byte_end":336811,"line_start":230,"line_end":230,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, Datelike, Weekday};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":336816,"byte_end":336863,"line_start":231,"line_end":231,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":336868,"byte_end":336871,"line_start":232,"line_end":232,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 3, 14);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":336876,"byte_end":336921,"line_start":233,"line_end":233,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(d.year(), 2015);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":336926,"byte_end":336957,"line_start":234,"line_end":234,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(d.month(), 3);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":336962,"byte_end":336991,"line_start":235,"line_end":235,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(d.day(), 14);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":336996,"byte_end":337024,"line_start":236,"line_end":236,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(d.ordinal(), 73); // day of year","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":337029,"byte_end":337076,"line_start":237,"line_end":237,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(d.iso_week().year(), 2015);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":337081,"byte_end":337123,"line_start":238,"line_end":238,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(d.iso_week().week(), 11);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":337128,"byte_end":337168,"line_start":239,"line_end":239,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(d.weekday(), Weekday::Sat);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":337173,"byte_end":337215,"line_start":240,"line_end":240,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(d.num_days_from_ce(), 735671); // days since January 1, 1 CE","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":337220,"byte_end":337295,"line_start":241,"line_end":241,"column_start":5,"column_end":80}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":337300,"byte_end":337307,"line_start":242,"line_end":242,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1666},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":338176,"byte_end":338188,"line_start":266,"line_end":266,"column_start":12,"column_end":24},"name":"from_ymd_opt","qualname":"<NaiveDate>::from_ymd_opt","value":"fn from_ymd_opt(i32, u32, u32) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from the [calendar date](#calendar-date)\n (year, month and day).","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` from the [calendar date](#calendar-date)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":337476,"byte_end":337544,"line_start":247,"line_end":247,"column_start":5,"column_end":73}},{"value":"/ (year, month and day).","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":337549,"byte_end":337575,"line_start":248,"line_end":248,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":337580,"byte_end":337583,"line_start":249,"line_end":249,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-range date, invalid month and/or day.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":337588,"byte_end":337658,"line_start":250,"line_end":250,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":337663,"byte_end":337666,"line_start":251,"line_end":251,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":337671,"byte_end":337684,"line_start":252,"line_end":252,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":337689,"byte_end":337692,"line_start":253,"line_end":253,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":337697,"byte_end":337704,"line_start":254,"line_end":254,"column_start":5,"column_end":12}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":337709,"byte_end":337735,"line_start":255,"line_end":255,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":337740,"byte_end":337743,"line_start":256,"line_end":256,"column_start":5,"column_end":8}},{"value":"/ let from_ymd_opt = NaiveDate::from_ymd_opt;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":337748,"byte_end":337795,"line_start":257,"line_end":257,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":337800,"byte_end":337803,"line_start":258,"line_end":258,"column_start":5,"column_end":8}},{"value":"/ assert!(from_ymd_opt(2015, 3, 14).is_some());","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":337808,"byte_end":337857,"line_start":259,"line_end":259,"column_start":5,"column_end":54}},{"value":"/ assert!(from_ymd_opt(2015, 0, 14).is_none());","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":337862,"byte_end":337911,"line_start":260,"line_end":260,"column_start":5,"column_end":54}},{"value":"/ assert!(from_ymd_opt(2015, 2, 29).is_none());","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":337916,"byte_end":337965,"line_start":261,"line_end":261,"column_start":5,"column_end":54}},{"value":"/ assert!(from_ymd_opt(-4, 2, 29).is_some()); // 5 BCE is a leap year","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":337970,"byte_end":338041,"line_start":262,"line_end":262,"column_start":5,"column_end":76}},{"value":"/ assert!(from_ymd_opt(400000, 1, 1).is_none());","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":338046,"byte_end":338096,"line_start":263,"line_end":263,"column_start":5,"column_end":55}},{"value":"/ assert!(from_ymd_opt(-400000, 1, 1).is_none());","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":338101,"byte_end":338152,"line_start":264,"line_end":264,"column_start":5,"column_end":56}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":338157,"byte_end":338164,"line_start":265,"line_end":265,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1667},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":339080,"byte_end":339087,"line_start":291,"line_end":291,"column_start":12,"column_end":19},"name":"from_yo","qualname":"<NaiveDate>::from_yo","value":"fn from_yo(i32, u32) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from the [ordinal date](#ordinal-date)\n (year and day of the year).","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` from the [ordinal date](#ordinal-date)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":338367,"byte_end":338433,"line_start":271,"line_end":271,"column_start":5,"column_end":71}},{"value":"/ (year and day of the year).","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":338438,"byte_end":338469,"line_start":272,"line_end":272,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":338474,"byte_end":338477,"line_start":273,"line_end":273,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-range date and/or invalid day of year.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":338482,"byte_end":338545,"line_start":274,"line_end":274,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":338550,"byte_end":338553,"line_start":275,"line_end":275,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":338558,"byte_end":338571,"line_start":276,"line_end":276,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":338576,"byte_end":338579,"line_start":277,"line_end":277,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":338584,"byte_end":338591,"line_start":278,"line_end":278,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, Datelike, Weekday};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":338596,"byte_end":338643,"line_start":279,"line_end":279,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":338648,"byte_end":338651,"line_start":280,"line_end":280,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_yo(2015, 73);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":338656,"byte_end":338697,"line_start":281,"line_end":281,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(d.ordinal(), 73);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":338702,"byte_end":338734,"line_start":282,"line_end":282,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(d.year(), 2015);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":338739,"byte_end":338770,"line_start":283,"line_end":283,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(d.month(), 3);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":338775,"byte_end":338804,"line_start":284,"line_end":284,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(d.day(), 14);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":338809,"byte_end":338837,"line_start":285,"line_end":285,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(d.iso_week().year(), 2015);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":338842,"byte_end":338884,"line_start":286,"line_end":286,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(d.iso_week().week(), 11);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":338889,"byte_end":338929,"line_start":287,"line_end":287,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(d.weekday(), Weekday::Sat);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":338934,"byte_end":338976,"line_start":288,"line_end":288,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(d.num_days_from_ce(), 735671); // days since January 1, 1 CE","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":338981,"byte_end":339056,"line_start":289,"line_end":289,"column_start":5,"column_end":80}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":339061,"byte_end":339068,"line_start":290,"line_end":290,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1668},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":339955,"byte_end":339966,"line_start":315,"line_end":315,"column_start":12,"column_end":23},"name":"from_yo_opt","qualname":"<NaiveDate>::from_yo_opt","value":"fn from_yo_opt(i32, u32) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from the [ordinal date](#ordinal-date)\n (year and day of the year).","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` from the [ordinal date](#ordinal-date)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":339224,"byte_end":339290,"line_start":295,"line_end":295,"column_start":5,"column_end":71}},{"value":"/ (year and day of the year).","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":339295,"byte_end":339326,"line_start":296,"line_end":296,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":339331,"byte_end":339334,"line_start":297,"line_end":297,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-range date and/or invalid day of year.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":339339,"byte_end":339410,"line_start":298,"line_end":298,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":339415,"byte_end":339418,"line_start":299,"line_end":299,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":339423,"byte_end":339436,"line_start":300,"line_end":300,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":339441,"byte_end":339444,"line_start":301,"line_end":301,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":339449,"byte_end":339456,"line_start":302,"line_end":302,"column_start":5,"column_end":12}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":339461,"byte_end":339487,"line_start":303,"line_end":303,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":339492,"byte_end":339495,"line_start":304,"line_end":304,"column_start":5,"column_end":8}},{"value":"/ let from_yo_opt = NaiveDate::from_yo_opt;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":339500,"byte_end":339545,"line_start":305,"line_end":305,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":339550,"byte_end":339553,"line_start":306,"line_end":306,"column_start":5,"column_end":8}},{"value":"/ assert!(from_yo_opt(2015, 100).is_some());","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":339558,"byte_end":339604,"line_start":307,"line_end":307,"column_start":5,"column_end":51}},{"value":"/ assert!(from_yo_opt(2015, 0).is_none());","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":339609,"byte_end":339653,"line_start":308,"line_end":308,"column_start":5,"column_end":49}},{"value":"/ assert!(from_yo_opt(2015, 365).is_some());","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":339658,"byte_end":339704,"line_start":309,"line_end":309,"column_start":5,"column_end":51}},{"value":"/ assert!(from_yo_opt(2015, 366).is_none());","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":339709,"byte_end":339755,"line_start":310,"line_end":310,"column_start":5,"column_end":51}},{"value":"/ assert!(from_yo_opt(-4, 366).is_some()); // 5 BCE is a leap year","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":339760,"byte_end":339828,"line_start":311,"line_end":311,"column_start":5,"column_end":73}},{"value":"/ assert!(from_yo_opt(400000, 1).is_none());","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":339833,"byte_end":339879,"line_start":312,"line_end":312,"column_start":5,"column_end":51}},{"value":"/ assert!(from_yo_opt(-400000, 1).is_none());","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":339884,"byte_end":339931,"line_start":313,"line_end":313,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":339936,"byte_end":339943,"line_start":314,"line_end":314,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1669},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":340970,"byte_end":340981,"line_start":341,"line_end":341,"column_start":12,"column_end":23},"name":"from_isoywd","qualname":"<NaiveDate>::from_isoywd","value":"fn from_isoywd(i32, u32, Weekday) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from the [ISO week date](#week-date)\n (year, week number and day of the week).\n The resulting `NaiveDate` may have a different year from the input year.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` from the [ISO week date](#week-date)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":340132,"byte_end":340196,"line_start":320,"line_end":320,"column_start":5,"column_end":69}},{"value":"/ (year, week number and day of the week).","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":340201,"byte_end":340245,"line_start":321,"line_end":321,"column_start":5,"column_end":49}},{"value":"/ The resulting `NaiveDate` may have a different year from the input year.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":340250,"byte_end":340326,"line_start":322,"line_end":322,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":340331,"byte_end":340334,"line_start":323,"line_end":323,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-range date and/or invalid week number.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":340339,"byte_end":340402,"line_start":324,"line_end":324,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":340407,"byte_end":340410,"line_start":325,"line_end":325,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":340415,"byte_end":340428,"line_start":326,"line_end":326,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":340433,"byte_end":340436,"line_start":327,"line_end":327,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":340441,"byte_end":340448,"line_start":328,"line_end":328,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, Datelike, Weekday};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":340453,"byte_end":340500,"line_start":329,"line_end":329,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":340505,"byte_end":340508,"line_start":330,"line_end":330,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_isoywd(2015, 11, Weekday::Sat);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":340513,"byte_end":340572,"line_start":331,"line_end":331,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(d.iso_week().year(), 2015);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":340577,"byte_end":340619,"line_start":332,"line_end":332,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(d.iso_week().week(), 11);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":340624,"byte_end":340664,"line_start":333,"line_end":333,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(d.weekday(), Weekday::Sat);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":340669,"byte_end":340711,"line_start":334,"line_end":334,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(d.year(), 2015);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":340716,"byte_end":340747,"line_start":335,"line_end":335,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(d.month(), 3);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":340752,"byte_end":340781,"line_start":336,"line_end":336,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(d.day(), 14);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":340786,"byte_end":340814,"line_start":337,"line_end":337,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(d.ordinal(), 73); // day of year","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":340819,"byte_end":340866,"line_start":338,"line_end":338,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(d.num_days_from_ce(), 735671); // days since January 1, 1 CE","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":340871,"byte_end":340946,"line_start":339,"line_end":339,"column_start":5,"column_end":80}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":340951,"byte_end":340958,"line_start":340,"line_end":340,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1670},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":343340,"byte_end":343355,"line_start":389,"line_end":389,"column_start":12,"column_end":27},"name":"from_isoywd_opt","qualname":"<NaiveDate>::from_isoywd_opt","value":"fn from_isoywd_opt(i32, u32, Weekday) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from the [ISO week date](#week-date)\n (year, week number and day of the week).\n The resulting `NaiveDate` may have a different year from the input year.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` from the [ISO week date](#week-date)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":341143,"byte_end":341207,"line_start":345,"line_end":345,"column_start":5,"column_end":69}},{"value":"/ (year, week number and day of the week).","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":341212,"byte_end":341256,"line_start":346,"line_end":346,"column_start":5,"column_end":49}},{"value":"/ The resulting `NaiveDate` may have a different year from the input year.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":341261,"byte_end":341337,"line_start":347,"line_end":347,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":341342,"byte_end":341345,"line_start":348,"line_end":348,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-range date and/or invalid week number.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":341350,"byte_end":341421,"line_start":349,"line_end":349,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":341426,"byte_end":341429,"line_start":350,"line_end":350,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":341434,"byte_end":341447,"line_start":351,"line_end":351,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":341452,"byte_end":341455,"line_start":352,"line_end":352,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":341460,"byte_end":341467,"line_start":353,"line_end":353,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, Weekday};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":341472,"byte_end":341509,"line_start":354,"line_end":354,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":341514,"byte_end":341517,"line_start":355,"line_end":355,"column_start":5,"column_end":8}},{"value":"/ let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":341522,"byte_end":341561,"line_start":356,"line_end":356,"column_start":5,"column_end":44}},{"value":"/ let from_isoywd_opt = NaiveDate::from_isoywd_opt;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":341566,"byte_end":341619,"line_start":357,"line_end":357,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":341624,"byte_end":341627,"line_start":358,"line_end":358,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(from_isoywd_opt(2015, 0, Weekday::Sun), None);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":341632,"byte_end":341693,"line_start":359,"line_end":359,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(from_isoywd_opt(2015, 10, Weekday::Sun), Some(from_ymd(2015, 3, 8)));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":341698,"byte_end":341782,"line_start":360,"line_end":360,"column_start":5,"column_end":89}},{"value":"/ assert_eq!(from_isoywd_opt(2015, 30, Weekday::Mon), Some(from_ymd(2015, 7, 20)));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":341787,"byte_end":341872,"line_start":361,"line_end":361,"column_start":5,"column_end":90}},{"value":"/ assert_eq!(from_isoywd_opt(2015, 60, Weekday::Mon), None);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":341877,"byte_end":341939,"line_start":362,"line_end":362,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":341944,"byte_end":341947,"line_start":363,"line_end":363,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(from_isoywd_opt(400000, 10, Weekday::Fri), None);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":341952,"byte_end":342016,"line_start":364,"line_end":364,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(from_isoywd_opt(-400000, 10, Weekday::Sat), None);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":342021,"byte_end":342086,"line_start":365,"line_end":365,"column_start":5,"column_end":70}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":342091,"byte_end":342098,"line_start":366,"line_end":366,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":342103,"byte_end":342106,"line_start":367,"line_end":367,"column_start":5,"column_end":8}},{"value":"/ The year number of ISO week date may differ from that of the calendar date.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":342111,"byte_end":342190,"line_start":368,"line_end":368,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":342195,"byte_end":342198,"line_start":369,"line_end":369,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":342203,"byte_end":342210,"line_start":370,"line_end":370,"column_start":5,"column_end":12}},{"value":"/ # use chrono::{NaiveDate, Weekday};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":342215,"byte_end":342254,"line_start":371,"line_end":371,"column_start":5,"column_end":44}},{"value":"/ # let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":342259,"byte_end":342300,"line_start":372,"line_end":372,"column_start":5,"column_end":46}},{"value":"/ # let from_isoywd_opt = NaiveDate::from_isoywd_opt;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":342305,"byte_end":342360,"line_start":373,"line_end":373,"column_start":5,"column_end":60}},{"value":"/ //           Mo Tu We Th Fr Sa Su","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":342365,"byte_end":342402,"line_start":374,"line_end":374,"column_start":5,"column_end":42}},{"value":"/ // 2014-W52  22 23 24 25 26 27 28    has 4+ days of new year,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":342407,"byte_end":342472,"line_start":375,"line_end":375,"column_start":5,"column_end":70}},{"value":"/ // 2015-W01  29 30 31  1  2  3  4 <- so this is the first week","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":342477,"byte_end":342543,"line_start":376,"line_end":376,"column_start":5,"column_end":71}},{"value":"/ assert_eq!(from_isoywd_opt(2014, 52, Weekday::Sun), Some(from_ymd(2014, 12, 28)));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":342548,"byte_end":342634,"line_start":377,"line_end":377,"column_start":5,"column_end":91}},{"value":"/ assert_eq!(from_isoywd_opt(2014, 53, Weekday::Mon), None);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":342639,"byte_end":342701,"line_start":378,"line_end":378,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(from_isoywd_opt(2015, 1, Weekday::Mon), Some(from_ymd(2014, 12, 29)));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":342706,"byte_end":342791,"line_start":379,"line_end":379,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":342796,"byte_end":342799,"line_start":380,"line_end":380,"column_start":5,"column_end":8}},{"value":"/ // 2015-W52  21 22 23 24 25 26 27    has 4+ days of old year,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":342804,"byte_end":342869,"line_start":381,"line_end":381,"column_start":5,"column_end":70}},{"value":"/ // 2015-W53  28 29 30 31  1  2  3 <- so this is the last week","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":342874,"byte_end":342939,"line_start":382,"line_end":382,"column_start":5,"column_end":70}},{"value":"/ // 2016-W01   4  5  6  7  8  9 10","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":342944,"byte_end":342981,"line_start":383,"line_end":383,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(from_isoywd_opt(2015, 52, Weekday::Sun), Some(from_ymd(2015, 12, 27)));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":342986,"byte_end":343072,"line_start":384,"line_end":384,"column_start":5,"column_end":91}},{"value":"/ assert_eq!(from_isoywd_opt(2015, 53, Weekday::Sun), Some(from_ymd(2016, 1, 3)));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":343077,"byte_end":343161,"line_start":385,"line_end":385,"column_start":5,"column_end":89}},{"value":"/ assert_eq!(from_isoywd_opt(2015, 54, Weekday::Mon), None);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":343166,"byte_end":343228,"line_start":386,"line_end":386,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(from_isoywd_opt(2016, 1, Weekday::Mon), Some(from_ymd(2016, 1, 4)));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":343233,"byte_end":343316,"line_start":387,"line_end":387,"column_start":5,"column_end":88}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":343321,"byte_end":343328,"line_start":388,"line_end":388,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1671},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":346294,"byte_end":346315,"line_start":464,"line_end":464,"column_start":12,"column_end":33},"name":"from_num_days_from_ce","qualname":"<NaiveDate>::from_num_days_from_ce","value":"fn from_num_days_from_ce(i32) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from a day's number in the proleptic Gregorian calendar, with\n January 1, 1 being day 1.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` from a day's number in the proleptic Gregorian calendar, with","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":344567,"byte_end":344656,"line_start":420,"line_end":420,"column_start":5,"column_end":94}},{"value":"/ January 1, 1 being day 1.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":344661,"byte_end":344690,"line_start":421,"line_end":421,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":344695,"byte_end":344698,"line_start":422,"line_end":422,"column_start":5,"column_end":8}},{"value":"/ Panics if the date is out of range.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":344703,"byte_end":344742,"line_start":423,"line_end":423,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":344747,"byte_end":344750,"line_start":424,"line_end":424,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":344755,"byte_end":344768,"line_start":425,"line_end":425,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":344773,"byte_end":344776,"line_start":426,"line_end":426,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":344781,"byte_end":344788,"line_start":427,"line_end":427,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, Datelike, Weekday};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":344793,"byte_end":344840,"line_start":428,"line_end":428,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":344845,"byte_end":344848,"line_start":429,"line_end":429,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_num_days_from_ce(735671);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":344853,"byte_end":344906,"line_start":430,"line_end":430,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(d.num_days_from_ce(), 735671); // days since January 1, 1 CE","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":344911,"byte_end":344986,"line_start":431,"line_end":431,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(d.year(), 2015);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":344991,"byte_end":345022,"line_start":432,"line_end":432,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(d.month(), 3);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":345027,"byte_end":345056,"line_start":433,"line_end":433,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(d.day(), 14);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":345061,"byte_end":345089,"line_start":434,"line_end":434,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(d.ordinal(), 73); // day of year","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":345094,"byte_end":345141,"line_start":435,"line_end":435,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(d.iso_week().year(), 2015);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":345146,"byte_end":345188,"line_start":436,"line_end":436,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(d.iso_week().week(), 11);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":345193,"byte_end":345233,"line_start":437,"line_end":437,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(d.weekday(), Weekday::Sat);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":345238,"byte_end":345280,"line_start":438,"line_end":438,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":345285,"byte_end":345292,"line_start":439,"line_end":439,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":345297,"byte_end":345300,"line_start":440,"line_end":440,"column_start":5,"column_end":8}},{"value":"/ While not directly supported by Chrono,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":345305,"byte_end":345348,"line_start":441,"line_end":441,"column_start":5,"column_end":48}},{"value":"/ it is easy to convert from the Julian day number","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":345353,"byte_end":345405,"line_start":442,"line_end":442,"column_start":5,"column_end":57}},{"value":"/ (January 1, 4713 BCE in the *Julian* calendar being Day 0)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":345410,"byte_end":345472,"line_start":443,"line_end":443,"column_start":5,"column_end":67}},{"value":"/ to Gregorian with this method.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":345477,"byte_end":345511,"line_start":444,"line_end":444,"column_start":5,"column_end":39}},{"value":"/ (Note that this panics when `jd` is out of range.)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":345516,"byte_end":345570,"line_start":445,"line_end":445,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":345575,"byte_end":345578,"line_start":446,"line_end":446,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":345583,"byte_end":345590,"line_start":447,"line_end":447,"column_start":5,"column_end":12}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":345595,"byte_end":345621,"line_start":448,"line_end":448,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":345626,"byte_end":345629,"line_start":449,"line_end":449,"column_start":5,"column_end":8}},{"value":"/ fn jd_to_date(jd: i32) -> NaiveDate {","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":345634,"byte_end":345675,"line_start":450,"line_end":450,"column_start":5,"column_end":46}},{"value":"/     // keep in mind that the Julian day number is 0-based","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":345680,"byte_end":345741,"line_start":451,"line_end":451,"column_start":5,"column_end":66}},{"value":"/     // while this method requires an 1-based number.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":345746,"byte_end":345802,"line_start":452,"line_end":452,"column_start":5,"column_end":61}},{"value":"/     NaiveDate::from_num_days_from_ce(jd - 1721425)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":345807,"byte_end":345861,"line_start":453,"line_end":453,"column_start":5,"column_end":59}},{"value":"/ }","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":345866,"byte_end":345871,"line_start":454,"line_end":454,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":345876,"byte_end":345879,"line_start":455,"line_end":455,"column_start":5,"column_end":8}},{"value":"/ // January 1, 4713 BCE in Julian = November 24, 4714 BCE in Gregorian","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":345884,"byte_end":345957,"line_start":456,"line_end":456,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(jd_to_date(0), NaiveDate::from_ymd(-4713, 11, 24));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":345962,"byte_end":346028,"line_start":457,"line_end":457,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":346033,"byte_end":346036,"line_start":458,"line_end":458,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(jd_to_date(1721426), NaiveDate::from_ymd(1, 1, 1));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":346041,"byte_end":346107,"line_start":459,"line_end":459,"column_start":5,"column_end":71}},{"value":"/ assert_eq!(jd_to_date(2450000), NaiveDate::from_ymd(1995, 10, 9));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":346112,"byte_end":346182,"line_start":460,"line_end":460,"column_start":5,"column_end":75}},{"value":"/ assert_eq!(jd_to_date(2451545), NaiveDate::from_ymd(2000, 1, 1));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":346187,"byte_end":346256,"line_start":461,"line_end":461,"column_start":5,"column_end":74}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":346261,"byte_end":346268,"line_start":462,"line_end":462,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":346273,"byte_end":346282,"line_start":463,"line_end":463,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1672},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":347262,"byte_end":347287,"line_start":488,"line_end":488,"column_start":12,"column_end":37},"name":"from_num_days_from_ce_opt","qualname":"<NaiveDate>::from_num_days_from_ce_opt","value":"fn from_num_days_from_ce_opt(i32) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from a day's number in the proleptic Gregorian calendar, with\n January 1, 1 being day 1.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` from a day's number in the proleptic Gregorian calendar, with","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":346432,"byte_end":346521,"line_start":468,"line_end":468,"column_start":5,"column_end":94}},{"value":"/ January 1, 1 being day 1.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":346526,"byte_end":346555,"line_start":469,"line_end":469,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":346560,"byte_end":346563,"line_start":470,"line_end":470,"column_start":5,"column_end":8}},{"value":"/ Returns `None` if the date is out of range.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":346568,"byte_end":346615,"line_start":471,"line_end":471,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":346620,"byte_end":346623,"line_start":472,"line_end":472,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":346628,"byte_end":346641,"line_start":473,"line_end":473,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":346646,"byte_end":346649,"line_start":474,"line_end":474,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":346654,"byte_end":346661,"line_start":475,"line_end":475,"column_start":5,"column_end":12}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":346666,"byte_end":346692,"line_start":476,"line_end":476,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":346697,"byte_end":346700,"line_start":477,"line_end":477,"column_start":5,"column_end":8}},{"value":"/ let from_ndays_opt = NaiveDate::from_num_days_from_ce_opt;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":346705,"byte_end":346767,"line_start":478,"line_end":478,"column_start":5,"column_end":67}},{"value":"/ let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":346772,"byte_end":346811,"line_start":479,"line_end":479,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":346816,"byte_end":346819,"line_start":480,"line_end":480,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(from_ndays_opt(730_000),      Some(from_ymd(1999, 9, 3)));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":346824,"byte_end":346897,"line_start":481,"line_end":481,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(from_ndays_opt(1),            Some(from_ymd(1, 1, 1)));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":346902,"byte_end":346972,"line_start":482,"line_end":482,"column_start":5,"column_end":75}},{"value":"/ assert_eq!(from_ndays_opt(0),            Some(from_ymd(0, 12, 31)));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":346977,"byte_end":347049,"line_start":483,"line_end":483,"column_start":5,"column_end":77}},{"value":"/ assert_eq!(from_ndays_opt(-1),           Some(from_ymd(0, 12, 30)));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":347054,"byte_end":347126,"line_start":484,"line_end":484,"column_start":5,"column_end":77}},{"value":"/ assert_eq!(from_ndays_opt(100_000_000),  None);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":347131,"byte_end":347182,"line_start":485,"line_end":485,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(from_ndays_opt(-100_000_000), None);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":347187,"byte_end":347238,"line_start":486,"line_end":486,"column_start":5,"column_end":56}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":347243,"byte_end":347250,"line_start":487,"line_end":487,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1673},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":348995,"byte_end":349016,"line_start":521,"line_end":521,"column_start":12,"column_end":33},"name":"from_weekday_of_month","qualname":"<NaiveDate>::from_weekday_of_month","value":"fn from_weekday_of_month(i32, u32, Weekday, u8) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` by counting the number of occurrences of a particular day-of-week\n since the beginning of the given month.  For instance, if you want the 2nd Friday of March\n 2017, you would use `NaiveDate::from_weekday_of_month(2017, 3, Weekday::Fri, 2)`.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` by counting the number of occurrences of a particular day-of-week","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":347713,"byte_end":347806,"line_start":496,"line_end":496,"column_start":5,"column_end":98}},{"value":"/ since the beginning of the given month.  For instance, if you want the 2nd Friday of March","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":347811,"byte_end":347905,"line_start":497,"line_end":497,"column_start":5,"column_end":99}},{"value":"/ 2017, you would use `NaiveDate::from_weekday_of_month(2017, 3, Weekday::Fri, 2)`.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":347910,"byte_end":347995,"line_start":498,"line_end":498,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":348000,"byte_end":348003,"line_start":499,"line_end":499,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":348008,"byte_end":348020,"line_start":500,"line_end":500,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":348025,"byte_end":348028,"line_start":501,"line_end":501,"column_start":5,"column_end":8}},{"value":"/ The resulting `NaiveDate` is guaranteed to be in `month`.  If `n` is larger than the number","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":348033,"byte_end":348128,"line_start":502,"line_end":502,"column_start":5,"column_end":100}},{"value":"/ of `weekday` in `month` (eg. the 6th Friday of March 2017) then this function will panic.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":348133,"byte_end":348226,"line_start":503,"line_end":503,"column_start":5,"column_end":98}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":348231,"byte_end":348234,"line_start":504,"line_end":504,"column_start":5,"column_end":8}},{"value":"/ `n` is 1-indexed.  Passing `n=0` will cause a panic.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":348239,"byte_end":348295,"line_start":505,"line_end":505,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":348300,"byte_end":348303,"line_start":506,"line_end":506,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":348308,"byte_end":348321,"line_start":507,"line_end":507,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":348326,"byte_end":348329,"line_start":508,"line_end":508,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":348334,"byte_end":348341,"line_start":509,"line_end":509,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, Weekday};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":348346,"byte_end":348383,"line_start":510,"line_end":510,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":348388,"byte_end":348391,"line_start":511,"line_end":511,"column_start":5,"column_end":8}},{"value":"/ let from_weekday_of_month = NaiveDate::from_weekday_of_month;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":348396,"byte_end":348461,"line_start":512,"line_end":512,"column_start":5,"column_end":70}},{"value":"/ let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":348466,"byte_end":348505,"line_start":513,"line_end":513,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":348510,"byte_end":348513,"line_start":514,"line_end":514,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(from_weekday_of_month(2018, 8, Weekday::Wed, 1), from_ymd(2018, 8, 1));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":348518,"byte_end":348604,"line_start":515,"line_end":515,"column_start":5,"column_end":91}},{"value":"/ assert_eq!(from_weekday_of_month(2018, 8, Weekday::Fri, 1), from_ymd(2018, 8, 3));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":348609,"byte_end":348695,"line_start":516,"line_end":516,"column_start":5,"column_end":91}},{"value":"/ assert_eq!(from_weekday_of_month(2018, 8, Weekday::Tue, 2), from_ymd(2018, 8, 14));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":348700,"byte_end":348787,"line_start":517,"line_end":517,"column_start":5,"column_end":92}},{"value":"/ assert_eq!(from_weekday_of_month(2018, 8, Weekday::Fri, 4), from_ymd(2018, 8, 24));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":348792,"byte_end":348879,"line_start":518,"line_end":518,"column_start":5,"column_end":92}},{"value":"/ assert_eq!(from_weekday_of_month(2018, 8, Weekday::Fri, 5), from_ymd(2018, 8, 31));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":348884,"byte_end":348971,"line_start":519,"line_end":519,"column_start":5,"column_end":92}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":348976,"byte_end":348983,"line_start":520,"line_end":520,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1674},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":349889,"byte_end":349914,"line_start":537,"line_end":537,"column_start":12,"column_end":37},"name":"from_weekday_of_month_opt","qualname":"<NaiveDate>::from_weekday_of_month_opt","value":"fn from_weekday_of_month_opt(i32, u32, Weekday, u8) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` by counting the number of occurrences of a particular day-of-week\n since the beginning of the given month.  For instance, if you want the 2nd Friday of March\n 2017, you would use `NaiveDate::from_weekday_of_month(2017, 3, Weekday::Fri, 2)`.  `n` is 1-indexed.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` by counting the number of occurrences of a particular day-of-week","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":349189,"byte_end":349282,"line_start":525,"line_end":525,"column_start":5,"column_end":98}},{"value":"/ since the beginning of the given month.  For instance, if you want the 2nd Friday of March","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":349287,"byte_end":349381,"line_start":526,"line_end":526,"column_start":5,"column_end":99}},{"value":"/ 2017, you would use `NaiveDate::from_weekday_of_month(2017, 3, Weekday::Fri, 2)`.  `n` is 1-indexed.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":349386,"byte_end":349490,"line_start":527,"line_end":527,"column_start":5,"column_end":109}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":349495,"byte_end":349498,"line_start":528,"line_end":528,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":349503,"byte_end":349510,"line_start":529,"line_end":529,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, Weekday};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":349515,"byte_end":349552,"line_start":530,"line_end":530,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(NaiveDate::from_weekday_of_month_opt(2017, 3, Weekday::Fri, 2),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":349557,"byte_end":349635,"line_start":531,"line_end":531,"column_start":5,"column_end":83}},{"value":"/            NaiveDate::from_ymd_opt(2017, 3, 10))","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":349640,"byte_end":349692,"line_start":532,"line_end":532,"column_start":5,"column_end":57}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":349697,"byte_end":349704,"line_start":533,"line_end":533,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":349709,"byte_end":349712,"line_start":534,"line_end":534,"column_start":5,"column_end":8}},{"value":"/ Returns `None` if `n` out-of-range; ie. if `n` is larger than the number of `weekday` in","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":349717,"byte_end":349809,"line_start":535,"line_end":535,"column_start":5,"column_end":97}},{"value":"/ `month` (eg. the 6th Friday of March 2017), or if `n == 0`.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":349814,"byte_end":349877,"line_start":536,"line_end":536,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":1675},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":351926,"byte_end":351940,"line_start":594,"line_end":594,"column_start":12,"column_end":26},"name":"parse_from_str","qualname":"<NaiveDate>::parse_from_str","value":"fn parse_from_str(&str, &str) -> ParseResult<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Parses a string with the specified format string and returns a new `NaiveDate`.\n See the [`format::strftime` module](../format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[{"value":"/ Parses a string with the specified format string and returns a new `NaiveDate`.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":350365,"byte_end":350448,"line_start":552,"line_end":552,"column_start":5,"column_end":88}},{"value":"/ See the [`format::strftime` module](../format/strftime/index.html)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":350453,"byte_end":350523,"line_start":553,"line_end":553,"column_start":5,"column_end":75}},{"value":"/ on the supported escape sequences.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":350528,"byte_end":350566,"line_start":554,"line_end":554,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":350571,"byte_end":350574,"line_start":555,"line_end":555,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":350579,"byte_end":350592,"line_start":556,"line_end":556,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":350597,"byte_end":350600,"line_start":557,"line_end":557,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":350605,"byte_end":350612,"line_start":558,"line_end":558,"column_start":5,"column_end":12}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":350617,"byte_end":350643,"line_start":559,"line_end":559,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":350648,"byte_end":350651,"line_start":560,"line_end":560,"column_start":5,"column_end":8}},{"value":"/ let parse_from_str = NaiveDate::parse_from_str;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":350656,"byte_end":350707,"line_start":561,"line_end":561,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":350712,"byte_end":350715,"line_start":562,"line_end":562,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(parse_from_str(\"2015-09-05\", \"%Y-%m-%d\"),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":350720,"byte_end":350776,"line_start":563,"line_end":563,"column_start":5,"column_end":61}},{"value":"/            Ok(NaiveDate::from_ymd(2015, 9, 5)));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":350781,"byte_end":350833,"line_start":564,"line_end":564,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(parse_from_str(\"5sep2015\", \"%d%b%Y\"),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":350838,"byte_end":350890,"line_start":565,"line_end":565,"column_start":5,"column_end":57}},{"value":"/            Ok(NaiveDate::from_ymd(2015, 9, 5)));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":350895,"byte_end":350947,"line_start":566,"line_end":566,"column_start":5,"column_end":57}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":350952,"byte_end":350959,"line_start":567,"line_end":567,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":350964,"byte_end":350967,"line_start":568,"line_end":568,"column_start":5,"column_end":8}},{"value":"/ Time and offset is ignored for the purpose of parsing.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":350972,"byte_end":351030,"line_start":569,"line_end":569,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":351035,"byte_end":351038,"line_start":570,"line_end":570,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":351043,"byte_end":351050,"line_start":571,"line_end":571,"column_start":5,"column_end":12}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":351055,"byte_end":351083,"line_start":572,"line_end":572,"column_start":5,"column_end":33}},{"value":"/ # let parse_from_str = NaiveDate::parse_from_str;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":351088,"byte_end":351141,"line_start":573,"line_end":573,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(parse_from_str(\"2014-5-17T12:34:56+09:30\", \"%Y-%m-%dT%H:%M:%S%z\"),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":351146,"byte_end":351227,"line_start":574,"line_end":574,"column_start":5,"column_end":86}},{"value":"/            Ok(NaiveDate::from_ymd(2014, 5, 17)));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":351232,"byte_end":351285,"line_start":575,"line_end":575,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":351290,"byte_end":351297,"line_start":576,"line_end":576,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":351302,"byte_end":351305,"line_start":577,"line_end":577,"column_start":5,"column_end":8}},{"value":"/ Out-of-bound dates or insufficient fields are errors.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":351310,"byte_end":351367,"line_start":578,"line_end":578,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":351372,"byte_end":351375,"line_start":579,"line_end":579,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":351380,"byte_end":351387,"line_start":580,"line_end":580,"column_start":5,"column_end":12}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":351392,"byte_end":351420,"line_start":581,"line_end":581,"column_start":5,"column_end":33}},{"value":"/ # let parse_from_str = NaiveDate::parse_from_str;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":351425,"byte_end":351478,"line_start":582,"line_end":582,"column_start":5,"column_end":58}},{"value":"/ assert!(parse_from_str(\"2015/9\", \"%Y/%m\").is_err());","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":351483,"byte_end":351539,"line_start":583,"line_end":583,"column_start":5,"column_end":61}},{"value":"/ assert!(parse_from_str(\"2015/9/31\", \"%Y/%m/%d\").is_err());","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":351544,"byte_end":351606,"line_start":584,"line_end":584,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":351611,"byte_end":351618,"line_start":585,"line_end":585,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":351623,"byte_end":351626,"line_start":586,"line_end":586,"column_start":5,"column_end":8}},{"value":"/ All parsed fields should be consistent to each other, otherwise it's an error.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":351631,"byte_end":351713,"line_start":587,"line_end":587,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":351718,"byte_end":351721,"line_start":588,"line_end":588,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":351726,"byte_end":351733,"line_start":589,"line_end":589,"column_start":5,"column_end":12}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":351738,"byte_end":351766,"line_start":590,"line_end":590,"column_start":5,"column_end":33}},{"value":"/ # let parse_from_str = NaiveDate::parse_from_str;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":351771,"byte_end":351824,"line_start":591,"line_end":591,"column_start":5,"column_end":58}},{"value":"/ assert!(parse_from_str(\"Sat, 09 Aug 2013\", \"%a, %d %b %Y\").is_err());","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":351829,"byte_end":351902,"line_start":592,"line_end":592,"column_start":5,"column_end":78}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":351907,"byte_end":351914,"line_start":593,"line_end":593,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1676},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":352768,"byte_end":352786,"line_start":617,"line_end":617,"column_start":12,"column_end":30},"name":"checked_add_months","qualname":"<NaiveDate>::checked_add_months","value":"fn checked_add_months(Self, Months) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Add a duration in [`Months`] to the date","sig":null,"attributes":[{"value":"/ Add a duration in [`Months`] to the date","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":352128,"byte_end":352172,"line_start":600,"line_end":600,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":352177,"byte_end":352180,"line_start":601,"line_end":601,"column_start":5,"column_end":8}},{"value":"/ If the day would be out of range for the resulting month, use the last day for that month.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":352185,"byte_end":352279,"line_start":602,"line_end":602,"column_start":5,"column_end":99}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":352284,"byte_end":352287,"line_start":603,"line_end":603,"column_start":5,"column_end":8}},{"value":"/ Returns `None` if the resulting date would be out of range.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":352292,"byte_end":352355,"line_start":604,"line_end":604,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":352360,"byte_end":352363,"line_start":605,"line_end":605,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":352368,"byte_end":352375,"line_start":606,"line_end":606,"column_start":5,"column_end":12}},{"value":"/ # use chrono::{NaiveDate, Months};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":352380,"byte_end":352418,"line_start":607,"line_end":607,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":352423,"byte_end":352438,"line_start":608,"line_end":608,"column_start":5,"column_end":20}},{"value":"/     NaiveDate::from_ymd(2022, 2, 20).checked_add_months(Months::new(6)),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":352443,"byte_end":352519,"line_start":609,"line_end":609,"column_start":5,"column_end":81}},{"value":"/     Some(NaiveDate::from_ymd(2022, 8, 20))","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":352524,"byte_end":352570,"line_start":610,"line_end":610,"column_start":5,"column_end":51}},{"value":"/ );","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":352575,"byte_end":352581,"line_start":611,"line_end":611,"column_start":5,"column_end":11}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":352586,"byte_end":352601,"line_start":612,"line_end":612,"column_start":5,"column_end":20}},{"value":"/     NaiveDate::from_ymd(2022, 7, 31).checked_add_months(Months::new(2)),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":352606,"byte_end":352682,"line_start":613,"line_end":613,"column_start":5,"column_end":81}},{"value":"/     Some(NaiveDate::from_ymd(2022, 9, 30))","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":352687,"byte_end":352733,"line_start":614,"line_end":614,"column_start":5,"column_end":51}},{"value":"/ );","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":352738,"byte_end":352744,"line_start":615,"line_end":615,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":352749,"byte_end":352756,"line_start":616,"line_end":616,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1677},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":353533,"byte_end":353551,"line_start":641,"line_end":641,"column_start":12,"column_end":30},"name":"checked_sub_months","qualname":"<NaiveDate>::checked_sub_months","value":"fn checked_sub_months(Self, Months) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Subtract a duration in [`Months`] from the date","sig":null,"attributes":[{"value":"/ Subtract a duration in [`Months`] from the date","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":353049,"byte_end":353100,"line_start":628,"line_end":628,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":353105,"byte_end":353108,"line_start":629,"line_end":629,"column_start":5,"column_end":8}},{"value":"/ If the day would be out of range for the resulting month, use the last day for that month.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":353113,"byte_end":353207,"line_start":630,"line_end":630,"column_start":5,"column_end":99}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":353212,"byte_end":353215,"line_start":631,"line_end":631,"column_start":5,"column_end":8}},{"value":"/ Returns `None` if the resulting date would be out of range.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":353220,"byte_end":353283,"line_start":632,"line_end":632,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":353288,"byte_end":353291,"line_start":633,"line_end":633,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":353296,"byte_end":353303,"line_start":634,"line_end":634,"column_start":5,"column_end":12}},{"value":"/ # use chrono::{NaiveDate, Months};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":353308,"byte_end":353346,"line_start":635,"line_end":635,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":353351,"byte_end":353366,"line_start":636,"line_end":636,"column_start":5,"column_end":20}},{"value":"/     NaiveDate::from_ymd(2022, 2, 20).checked_sub_months(Months::new(6)),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":353371,"byte_end":353447,"line_start":637,"line_end":637,"column_start":5,"column_end":81}},{"value":"/     Some(NaiveDate::from_ymd(2021, 8, 20))","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":353452,"byte_end":353498,"line_start":638,"line_end":638,"column_start":5,"column_end":51}},{"value":"/ );","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":353503,"byte_end":353509,"line_start":639,"line_end":639,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":353514,"byte_end":353521,"line_start":640,"line_end":640,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1679},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":355595,"byte_end":355603,"line_start":710,"line_end":710,"column_start":12,"column_end":20},"name":"and_time","qualname":"<NaiveDate>::and_time","value":"fn and_time(&Self, NaiveTime) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date and given `NaiveTime`.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date and given `NaiveTime`.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":355136,"byte_end":355212,"line_start":695,"line_end":695,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":355217,"byte_end":355220,"line_start":696,"line_end":696,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":355225,"byte_end":355238,"line_start":697,"line_end":697,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":355243,"byte_end":355246,"line_start":698,"line_end":698,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":355251,"byte_end":355258,"line_start":699,"line_end":699,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, NaiveTime, NaiveDateTime};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":355263,"byte_end":355317,"line_start":700,"line_end":700,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":355322,"byte_end":355325,"line_start":701,"line_end":701,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":355330,"byte_end":355374,"line_start":702,"line_end":702,"column_start":5,"column_end":49}},{"value":"/ let t = NaiveTime::from_hms_milli(12, 34, 56, 789);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":355379,"byte_end":355434,"line_start":703,"line_end":703,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":355439,"byte_end":355442,"line_start":704,"line_end":704,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = d.and_time(t);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":355447,"byte_end":355489,"line_start":705,"line_end":705,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(dt.date(), d);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":355494,"byte_end":355523,"line_start":706,"line_end":706,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(dt.time(), t);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":355528,"byte_end":355557,"line_start":707,"line_end":707,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":355562,"byte_end":355569,"line_start":708,"line_end":708,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":355574,"byte_end":355583,"line_start":709,"line_end":709,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1680},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":356417,"byte_end":356424,"line_start":734,"line_end":734,"column_start":12,"column_end":19},"name":"and_hms","qualname":"<NaiveDate>::and_hms","value":"fn and_hms(&Self, u32, u32, u32) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute and second.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date, hour, minute and second.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":355698,"byte_end":355777,"line_start":714,"line_end":714,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":355782,"byte_end":355785,"line_start":715,"line_end":715,"column_start":5,"column_end":8}},{"value":"/ No [leap second](./struct.NaiveTime.html#leap-second-handling) is allowed here;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":355790,"byte_end":355873,"line_start":716,"line_end":716,"column_start":5,"column_end":88}},{"value":"/ use `NaiveDate::and_hms_*` methods with a subsecond parameter instead.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":355878,"byte_end":355952,"line_start":717,"line_end":717,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":355957,"byte_end":355960,"line_start":718,"line_end":718,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute and/or second.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":355965,"byte_end":356014,"line_start":719,"line_end":719,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":356019,"byte_end":356022,"line_start":720,"line_end":720,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":356027,"byte_end":356040,"line_start":721,"line_end":721,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":356045,"byte_end":356048,"line_start":722,"line_end":722,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":356053,"byte_end":356060,"line_start":723,"line_end":723,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime, Datelike, Timelike, Weekday};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":356065,"byte_end":356137,"line_start":724,"line_end":724,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":356142,"byte_end":356145,"line_start":725,"line_end":725,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":356150,"byte_end":356194,"line_start":726,"line_end":726,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":356199,"byte_end":356202,"line_start":727,"line_end":727,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = d.and_hms(12, 34, 56);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":356207,"byte_end":356257,"line_start":728,"line_end":728,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(dt.year(), 2015);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":356262,"byte_end":356294,"line_start":729,"line_end":729,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(dt.weekday(), Weekday::Wed);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":356299,"byte_end":356342,"line_start":730,"line_end":730,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(dt.second(), 56);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":356347,"byte_end":356379,"line_start":731,"line_end":731,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":356384,"byte_end":356391,"line_start":732,"line_end":732,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":356396,"byte_end":356405,"line_start":733,"line_end":733,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1681},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":357308,"byte_end":357319,"line_start":757,"line_end":757,"column_start":12,"column_end":23},"name":"and_hms_opt","qualname":"<NaiveDate>::and_hms_opt","value":"fn and_hms_opt(&Self, u32, u32, u32) -> Option<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute and second.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date, hour, minute and second.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":356557,"byte_end":356636,"line_start":738,"line_end":738,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":356641,"byte_end":356644,"line_start":739,"line_end":739,"column_start":5,"column_end":8}},{"value":"/ No [leap second](./struct.NaiveTime.html#leap-second-handling) is allowed here;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":356649,"byte_end":356732,"line_start":740,"line_end":740,"column_start":5,"column_end":88}},{"value":"/ use `NaiveDate::and_hms_*_opt` methods with a subsecond parameter instead.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":356737,"byte_end":356815,"line_start":741,"line_end":741,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":356820,"byte_end":356823,"line_start":742,"line_end":742,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute and/or second.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":356828,"byte_end":356885,"line_start":743,"line_end":743,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":356890,"byte_end":356893,"line_start":744,"line_end":744,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":356898,"byte_end":356911,"line_start":745,"line_end":745,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":356916,"byte_end":356919,"line_start":746,"line_end":746,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":356924,"byte_end":356931,"line_start":747,"line_end":747,"column_start":5,"column_end":12}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":356936,"byte_end":356962,"line_start":748,"line_end":748,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":356967,"byte_end":356970,"line_start":749,"line_end":749,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":356975,"byte_end":357019,"line_start":750,"line_end":750,"column_start":5,"column_end":49}},{"value":"/ assert!(d.and_hms_opt(12, 34, 56).is_some());","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":357024,"byte_end":357073,"line_start":751,"line_end":751,"column_start":5,"column_end":54}},{"value":"/ assert!(d.and_hms_opt(12, 34, 60).is_none()); // use `and_hms_milli_opt` instead","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":357078,"byte_end":357162,"line_start":752,"line_end":752,"column_start":5,"column_end":89}},{"value":"/ assert!(d.and_hms_opt(12, 60, 56).is_none());","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":357167,"byte_end":357216,"line_start":753,"line_end":753,"column_start":5,"column_end":54}},{"value":"/ assert!(d.and_hms_opt(24, 34, 56).is_none());","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":357221,"byte_end":357270,"line_start":754,"line_end":754,"column_start":5,"column_end":54}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":357275,"byte_end":357282,"line_start":755,"line_end":755,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":357287,"byte_end":357296,"line_start":756,"line_end":756,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1683},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":358256,"byte_end":358269,"line_start":782,"line_end":782,"column_start":12,"column_end":25},"name":"and_hms_milli","qualname":"<NaiveDate>::and_hms_milli","value":"fn and_hms_milli(&Self, u32, u32, u32, u32) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":357476,"byte_end":357568,"line_start":761,"line_end":761,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":357573,"byte_end":357576,"line_start":762,"line_end":762,"column_start":5,"column_end":8}},{"value":"/ The millisecond part can exceed 1,000","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":357581,"byte_end":357622,"line_start":763,"line_end":763,"column_start":5,"column_end":46}},{"value":"/ in order to represent the [leap second](./struct.NaiveTime.html#leap-second-handling).","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":357627,"byte_end":357717,"line_start":764,"line_end":764,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":357722,"byte_end":357725,"line_start":765,"line_end":765,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or millisecond.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":357730,"byte_end":357792,"line_start":766,"line_end":766,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":357797,"byte_end":357800,"line_start":767,"line_end":767,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":357805,"byte_end":357818,"line_start":768,"line_end":768,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":357823,"byte_end":357826,"line_start":769,"line_end":769,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":357831,"byte_end":357838,"line_start":770,"line_end":770,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime, Datelike, Timelike, Weekday};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":357843,"byte_end":357915,"line_start":771,"line_end":771,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":357920,"byte_end":357923,"line_start":772,"line_end":772,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":357928,"byte_end":357972,"line_start":773,"line_end":773,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":357977,"byte_end":357980,"line_start":774,"line_end":774,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = d.and_hms_milli(12, 34, 56, 789);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":357985,"byte_end":358046,"line_start":775,"line_end":775,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(dt.year(), 2015);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":358051,"byte_end":358083,"line_start":776,"line_end":776,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(dt.weekday(), Weekday::Wed);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":358088,"byte_end":358131,"line_start":777,"line_end":777,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(dt.second(), 56);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":358136,"byte_end":358168,"line_start":778,"line_end":778,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(dt.nanosecond(), 789_000_000);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":358173,"byte_end":358218,"line_start":779,"line_end":779,"column_start":5,"column_end":50}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":358223,"byte_end":358230,"line_start":780,"line_end":780,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":358235,"byte_end":358244,"line_start":781,"line_end":781,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1684},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":359340,"byte_end":359357,"line_start":807,"line_end":807,"column_start":12,"column_end":29},"name":"and_hms_milli_opt","qualname":"<NaiveDate>::and_hms_milli_opt","value":"fn and_hms_milli_opt(&Self, u32, u32, u32, u32) -> Option<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":358427,"byte_end":358519,"line_start":786,"line_end":786,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":358524,"byte_end":358527,"line_start":787,"line_end":787,"column_start":5,"column_end":8}},{"value":"/ The millisecond part can exceed 1,000","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":358532,"byte_end":358573,"line_start":788,"line_end":788,"column_start":5,"column_end":46}},{"value":"/ in order to represent the [leap second](./struct.NaiveTime.html#leap-second-handling).","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":358578,"byte_end":358668,"line_start":789,"line_end":789,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":358673,"byte_end":358676,"line_start":790,"line_end":790,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or millisecond.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":358681,"byte_end":358751,"line_start":791,"line_end":791,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":358756,"byte_end":358759,"line_start":792,"line_end":792,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":358764,"byte_end":358777,"line_start":793,"line_end":793,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":358782,"byte_end":358785,"line_start":794,"line_end":794,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":358790,"byte_end":358797,"line_start":795,"line_end":795,"column_start":5,"column_end":12}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":358802,"byte_end":358828,"line_start":796,"line_end":796,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":358833,"byte_end":358836,"line_start":797,"line_end":797,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":358841,"byte_end":358885,"line_start":798,"line_end":798,"column_start":5,"column_end":49}},{"value":"/ assert!(d.and_hms_milli_opt(12, 34, 56,   789).is_some());","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":358890,"byte_end":358952,"line_start":799,"line_end":799,"column_start":5,"column_end":67}},{"value":"/ assert!(d.and_hms_milli_opt(12, 34, 59, 1_789).is_some()); // leap second","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":358957,"byte_end":359034,"line_start":800,"line_end":800,"column_start":5,"column_end":82}},{"value":"/ assert!(d.and_hms_milli_opt(12, 34, 59, 2_789).is_none());","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":359039,"byte_end":359101,"line_start":801,"line_end":801,"column_start":5,"column_end":67}},{"value":"/ assert!(d.and_hms_milli_opt(12, 34, 60,   789).is_none());","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":359106,"byte_end":359168,"line_start":802,"line_end":802,"column_start":5,"column_end":67}},{"value":"/ assert!(d.and_hms_milli_opt(12, 60, 56,   789).is_none());","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":359173,"byte_end":359235,"line_start":803,"line_end":803,"column_start":5,"column_end":67}},{"value":"/ assert!(d.and_hms_milli_opt(24, 34, 56,   789).is_none());","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":359240,"byte_end":359302,"line_start":804,"line_end":804,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":359307,"byte_end":359314,"line_start":805,"line_end":805,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":359319,"byte_end":359328,"line_start":806,"line_end":806,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1686},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":360374,"byte_end":360387,"line_start":838,"line_end":838,"column_start":12,"column_end":25},"name":"and_hms_micro","qualname":"<NaiveDate>::and_hms_micro","value":"fn and_hms_micro(&Self, u32, u32, u32, u32) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":359586,"byte_end":359678,"line_start":817,"line_end":817,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":359683,"byte_end":359686,"line_start":818,"line_end":818,"column_start":5,"column_end":8}},{"value":"/ The microsecond part can exceed 1,000,000","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":359691,"byte_end":359736,"line_start":819,"line_end":819,"column_start":5,"column_end":50}},{"value":"/ in order to represent the [leap second](./struct.NaiveTime.html#leap-second-handling).","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":359741,"byte_end":359831,"line_start":820,"line_end":820,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":359836,"byte_end":359839,"line_start":821,"line_end":821,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or microsecond.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":359844,"byte_end":359906,"line_start":822,"line_end":822,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":359911,"byte_end":359914,"line_start":823,"line_end":823,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":359919,"byte_end":359932,"line_start":824,"line_end":824,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":359937,"byte_end":359940,"line_start":825,"line_end":825,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":359945,"byte_end":359952,"line_start":826,"line_end":826,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime, Datelike, Timelike, Weekday};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":359957,"byte_end":360029,"line_start":827,"line_end":827,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":360034,"byte_end":360037,"line_start":828,"line_end":828,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":360042,"byte_end":360086,"line_start":829,"line_end":829,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":360091,"byte_end":360094,"line_start":830,"line_end":830,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = d.and_hms_micro(12, 34, 56, 789_012);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":360099,"byte_end":360164,"line_start":831,"line_end":831,"column_start":5,"column_end":70}},{"value":"/ assert_eq!(dt.year(), 2015);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":360169,"byte_end":360201,"line_start":832,"line_end":832,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(dt.weekday(), Weekday::Wed);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":360206,"byte_end":360249,"line_start":833,"line_end":833,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(dt.second(), 56);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":360254,"byte_end":360286,"line_start":834,"line_end":834,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(dt.nanosecond(), 789_012_000);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":360291,"byte_end":360336,"line_start":835,"line_end":835,"column_start":5,"column_end":50}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":360341,"byte_end":360348,"line_start":836,"line_end":836,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":360353,"byte_end":360362,"line_start":837,"line_end":837,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1687},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":361486,"byte_end":361503,"line_start":863,"line_end":863,"column_start":12,"column_end":29},"name":"and_hms_micro_opt","qualname":"<NaiveDate>::and_hms_micro_opt","value":"fn and_hms_micro_opt(&Self, u32, u32, u32, u32) -> Option<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":360545,"byte_end":360637,"line_start":842,"line_end":842,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":360642,"byte_end":360645,"line_start":843,"line_end":843,"column_start":5,"column_end":8}},{"value":"/ The microsecond part can exceed 1,000,000","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":360650,"byte_end":360695,"line_start":844,"line_end":844,"column_start":5,"column_end":50}},{"value":"/ in order to represent the [leap second](./struct.NaiveTime.html#leap-second-handling).","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":360700,"byte_end":360790,"line_start":845,"line_end":845,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":360795,"byte_end":360798,"line_start":846,"line_end":846,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or microsecond.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":360803,"byte_end":360873,"line_start":847,"line_end":847,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":360878,"byte_end":360881,"line_start":848,"line_end":848,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":360886,"byte_end":360899,"line_start":849,"line_end":849,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":360904,"byte_end":360907,"line_start":850,"line_end":850,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":360912,"byte_end":360919,"line_start":851,"line_end":851,"column_start":5,"column_end":12}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":360924,"byte_end":360950,"line_start":852,"line_end":852,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":360955,"byte_end":360958,"line_start":853,"line_end":853,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":360963,"byte_end":361007,"line_start":854,"line_end":854,"column_start":5,"column_end":49}},{"value":"/ assert!(d.and_hms_micro_opt(12, 34, 56,   789_012).is_some());","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":361012,"byte_end":361078,"line_start":855,"line_end":855,"column_start":5,"column_end":71}},{"value":"/ assert!(d.and_hms_micro_opt(12, 34, 59, 1_789_012).is_some()); // leap second","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":361083,"byte_end":361164,"line_start":856,"line_end":856,"column_start":5,"column_end":86}},{"value":"/ assert!(d.and_hms_micro_opt(12, 34, 59, 2_789_012).is_none());","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":361169,"byte_end":361235,"line_start":857,"line_end":857,"column_start":5,"column_end":71}},{"value":"/ assert!(d.and_hms_micro_opt(12, 34, 60,   789_012).is_none());","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":361240,"byte_end":361306,"line_start":858,"line_end":858,"column_start":5,"column_end":71}},{"value":"/ assert!(d.and_hms_micro_opt(12, 60, 56,   789_012).is_none());","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":361311,"byte_end":361377,"line_start":859,"line_end":859,"column_start":5,"column_end":71}},{"value":"/ assert!(d.and_hms_micro_opt(24, 34, 56,   789_012).is_none());","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":361382,"byte_end":361448,"line_start":860,"line_end":860,"column_start":5,"column_end":71}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":361453,"byte_end":361460,"line_start":861,"line_end":861,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":361465,"byte_end":361474,"line_start":862,"line_end":862,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1689},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":362524,"byte_end":362536,"line_start":894,"line_end":894,"column_start":12,"column_end":24},"name":"and_hms_nano","qualname":"<NaiveDate>::and_hms_nano","value":"fn and_hms_nano(&Self, u32, u32, u32, u32) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":361732,"byte_end":361823,"line_start":873,"line_end":873,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":361828,"byte_end":361831,"line_start":874,"line_end":874,"column_start":5,"column_end":8}},{"value":"/ The nanosecond part can exceed 1,000,000,000","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":361836,"byte_end":361884,"line_start":875,"line_end":875,"column_start":5,"column_end":53}},{"value":"/ in order to represent the [leap second](./struct.NaiveTime.html#leap-second-handling).","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":361889,"byte_end":361979,"line_start":876,"line_end":876,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":361984,"byte_end":361987,"line_start":877,"line_end":877,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or nanosecond.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":361992,"byte_end":362053,"line_start":878,"line_end":878,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":362058,"byte_end":362061,"line_start":879,"line_end":879,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":362066,"byte_end":362079,"line_start":880,"line_end":880,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":362084,"byte_end":362087,"line_start":881,"line_end":881,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":362092,"byte_end":362099,"line_start":882,"line_end":882,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime, Datelike, Timelike, Weekday};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":362104,"byte_end":362176,"line_start":883,"line_end":883,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":362181,"byte_end":362184,"line_start":884,"line_end":884,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":362189,"byte_end":362233,"line_start":885,"line_end":885,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":362238,"byte_end":362241,"line_start":886,"line_end":886,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = d.and_hms_nano(12, 34, 56, 789_012_345);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":362246,"byte_end":362314,"line_start":887,"line_end":887,"column_start":5,"column_end":73}},{"value":"/ assert_eq!(dt.year(), 2015);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":362319,"byte_end":362351,"line_start":888,"line_end":888,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(dt.weekday(), Weekday::Wed);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":362356,"byte_end":362399,"line_start":889,"line_end":889,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(dt.second(), 56);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":362404,"byte_end":362436,"line_start":890,"line_end":890,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(dt.nanosecond(), 789_012_345);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":362441,"byte_end":362486,"line_start":891,"line_end":891,"column_start":5,"column_end":50}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":362491,"byte_end":362498,"line_start":892,"line_end":892,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":362503,"byte_end":362512,"line_start":893,"line_end":893,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1690},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":363651,"byte_end":363667,"line_start":919,"line_end":919,"column_start":12,"column_end":28},"name":"and_hms_nano_opt","qualname":"<NaiveDate>::and_hms_nano_opt","value":"fn and_hms_nano_opt(&Self, u32, u32, u32, u32) -> Option<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":362691,"byte_end":362782,"line_start":898,"line_end":898,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":362787,"byte_end":362790,"line_start":899,"line_end":899,"column_start":5,"column_end":8}},{"value":"/ The nanosecond part can exceed 1,000,000,000","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":362795,"byte_end":362843,"line_start":900,"line_end":900,"column_start":5,"column_end":53}},{"value":"/ in order to represent the [leap second](./struct.NaiveTime.html#leap-second-handling).","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":362848,"byte_end":362938,"line_start":901,"line_end":901,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":362943,"byte_end":362946,"line_start":902,"line_end":902,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or nanosecond.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":362951,"byte_end":363020,"line_start":903,"line_end":903,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":363025,"byte_end":363028,"line_start":904,"line_end":904,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":363033,"byte_end":363046,"line_start":905,"line_end":905,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":363051,"byte_end":363054,"line_start":906,"line_end":906,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":363059,"byte_end":363066,"line_start":907,"line_end":907,"column_start":5,"column_end":12}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":363071,"byte_end":363097,"line_start":908,"line_end":908,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":363102,"byte_end":363105,"line_start":909,"line_end":909,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":363110,"byte_end":363154,"line_start":910,"line_end":910,"column_start":5,"column_end":49}},{"value":"/ assert!(d.and_hms_nano_opt(12, 34, 56,   789_012_345).is_some());","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":363159,"byte_end":363228,"line_start":911,"line_end":911,"column_start":5,"column_end":74}},{"value":"/ assert!(d.and_hms_nano_opt(12, 34, 59, 1_789_012_345).is_some()); // leap second","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":363233,"byte_end":363317,"line_start":912,"line_end":912,"column_start":5,"column_end":89}},{"value":"/ assert!(d.and_hms_nano_opt(12, 34, 59, 2_789_012_345).is_none());","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":363322,"byte_end":363391,"line_start":913,"line_end":913,"column_start":5,"column_end":74}},{"value":"/ assert!(d.and_hms_nano_opt(12, 34, 60,   789_012_345).is_none());","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":363396,"byte_end":363465,"line_start":914,"line_end":914,"column_start":5,"column_end":74}},{"value":"/ assert!(d.and_hms_nano_opt(12, 60, 56,   789_012_345).is_none());","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":363470,"byte_end":363539,"line_start":915,"line_end":915,"column_start":5,"column_end":74}},{"value":"/ assert!(d.and_hms_nano_opt(24, 34, 56,   789_012_345).is_none());","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":363544,"byte_end":363613,"line_start":916,"line_end":916,"column_start":5,"column_end":74}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":363618,"byte_end":363625,"line_start":917,"line_end":917,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":363630,"byte_end":363639,"line_start":918,"line_end":918,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1696},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":365357,"byte_end":365361,"line_start":976,"line_end":976,"column_start":12,"column_end":16},"name":"succ","qualname":"<NaiveDate>::succ","value":"fn succ(&Self) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` for the next calendar date.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` for the next calendar date.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":364827,"byte_end":364882,"line_start":962,"line_end":962,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":364887,"byte_end":364890,"line_start":963,"line_end":963,"column_start":5,"column_end":8}},{"value":"/ Panics when `self` is the last representable date.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":364895,"byte_end":364949,"line_start":964,"line_end":964,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":364954,"byte_end":364957,"line_start":965,"line_end":965,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":364962,"byte_end":364975,"line_start":966,"line_end":966,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":364980,"byte_end":364983,"line_start":967,"line_end":967,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":364988,"byte_end":364995,"line_start":968,"line_end":968,"column_start":5,"column_end":12}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":365000,"byte_end":365026,"line_start":969,"line_end":969,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":365031,"byte_end":365034,"line_start":970,"line_end":970,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015,  6,  3).succ(), NaiveDate::from_ymd(2015, 6, 4));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":365039,"byte_end":365129,"line_start":971,"line_end":971,"column_start":5,"column_end":95}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015,  6, 30).succ(), NaiveDate::from_ymd(2015, 7, 1));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":365134,"byte_end":365224,"line_start":972,"line_end":972,"column_start":5,"column_end":95}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 12, 31).succ(), NaiveDate::from_ymd(2016, 1, 1));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":365229,"byte_end":365319,"line_start":973,"line_end":973,"column_start":5,"column_end":95}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":365324,"byte_end":365331,"line_start":974,"line_end":974,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":365336,"byte_end":365345,"line_start":975,"line_end":975,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1697},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":365870,"byte_end":365878,"line_start":994,"line_end":994,"column_start":12,"column_end":20},"name":"succ_opt","qualname":"<NaiveDate>::succ_opt","value":"fn succ_opt(&Self) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` for the next calendar date.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` for the next calendar date.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":365442,"byte_end":365497,"line_start":980,"line_end":980,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":365502,"byte_end":365505,"line_start":981,"line_end":981,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when `self` is the last representable date.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":365510,"byte_end":365572,"line_start":982,"line_end":982,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":365577,"byte_end":365580,"line_start":983,"line_end":983,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":365585,"byte_end":365598,"line_start":984,"line_end":984,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":365603,"byte_end":365606,"line_start":985,"line_end":985,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":365611,"byte_end":365618,"line_start":986,"line_end":986,"column_start":5,"column_end":12}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":365623,"byte_end":365649,"line_start":987,"line_end":987,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":365654,"byte_end":365657,"line_start":988,"line_end":988,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 6, 3).succ_opt(),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":365662,"byte_end":365720,"line_start":989,"line_end":989,"column_start":5,"column_end":63}},{"value":"/            Some(NaiveDate::from_ymd(2015, 6, 4)));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":365725,"byte_end":365779,"line_start":990,"line_end":990,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(NaiveDate::MAX.succ_opt(), None);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":365784,"byte_end":365832,"line_start":991,"line_end":991,"column_start":5,"column_end":53}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":365837,"byte_end":365844,"line_start":992,"line_end":992,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":365849,"byte_end":365858,"line_start":993,"line_end":993,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1699},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":366553,"byte_end":366557,"line_start":1012,"line_end":1012,"column_start":12,"column_end":16},"name":"pred","qualname":"<NaiveDate>::pred","value":"fn pred(&Self) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` for the previous calendar date.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` for the previous calendar date.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":366018,"byte_end":366077,"line_start":998,"line_end":998,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":366082,"byte_end":366085,"line_start":999,"line_end":999,"column_start":5,"column_end":8}},{"value":"/ Panics when `self` is the first representable date.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":366090,"byte_end":366145,"line_start":1000,"line_end":1000,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":366150,"byte_end":366153,"line_start":1001,"line_end":1001,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":366158,"byte_end":366171,"line_start":1002,"line_end":1002,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":366176,"byte_end":366179,"line_start":1003,"line_end":1003,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":366184,"byte_end":366191,"line_start":1004,"line_end":1004,"column_start":5,"column_end":12}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":366196,"byte_end":366222,"line_start":1005,"line_end":1005,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":366227,"byte_end":366230,"line_start":1006,"line_end":1006,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 6, 3).pred(), NaiveDate::from_ymd(2015,  6,  2));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":366235,"byte_end":366325,"line_start":1007,"line_end":1007,"column_start":5,"column_end":95}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 6, 1).pred(), NaiveDate::from_ymd(2015,  5, 31));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":366330,"byte_end":366420,"line_start":1008,"line_end":1008,"column_start":5,"column_end":95}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 1, 1).pred(), NaiveDate::from_ymd(2014, 12, 31));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":366425,"byte_end":366515,"line_start":1009,"line_end":1009,"column_start":5,"column_end":95}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":366520,"byte_end":366527,"line_start":1010,"line_end":1010,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":366532,"byte_end":366541,"line_start":1011,"line_end":1011,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1700},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":367071,"byte_end":367079,"line_start":1030,"line_end":1030,"column_start":12,"column_end":20},"name":"pred_opt","qualname":"<NaiveDate>::pred_opt","value":"fn pred_opt(&Self) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` for the previous calendar date.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` for the previous calendar date.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":366638,"byte_end":366697,"line_start":1016,"line_end":1016,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":366702,"byte_end":366705,"line_start":1017,"line_end":1017,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when `self` is the first representable date.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":366710,"byte_end":366773,"line_start":1018,"line_end":1018,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":366778,"byte_end":366781,"line_start":1019,"line_end":1019,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":366786,"byte_end":366799,"line_start":1020,"line_end":1020,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":366804,"byte_end":366807,"line_start":1021,"line_end":1021,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":366812,"byte_end":366819,"line_start":1022,"line_end":1022,"column_start":5,"column_end":12}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":366824,"byte_end":366850,"line_start":1023,"line_end":1023,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":366855,"byte_end":366858,"line_start":1024,"line_end":1024,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 6, 3).pred_opt(),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":366863,"byte_end":366921,"line_start":1025,"line_end":1025,"column_start":5,"column_end":63}},{"value":"/            Some(NaiveDate::from_ymd(2015, 6, 2)));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":366926,"byte_end":366980,"line_start":1026,"line_end":1026,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(NaiveDate::MIN.pred_opt(), None);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":366985,"byte_end":367033,"line_start":1027,"line_end":1027,"column_start":5,"column_end":53}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":367038,"byte_end":367045,"line_start":1028,"line_end":1028,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":367050,"byte_end":367059,"line_start":1029,"line_end":1029,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1702},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":368003,"byte_end":368021,"line_start":1052,"line_end":1052,"column_start":12,"column_end":30},"name":"checked_add_signed","qualname":"<NaiveDate>::checked_add_signed","value":"fn checked_add_signed(Self, OldDuration) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Adds the `days` part of given `Duration` to the current date.","sig":null,"attributes":[{"value":"/ Adds the `days` part of given `Duration` to the current date.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":367221,"byte_end":367286,"line_start":1034,"line_end":1034,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":367291,"byte_end":367294,"line_start":1035,"line_end":1035,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when it will result in overflow.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":367299,"byte_end":367350,"line_start":1036,"line_end":1036,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":367355,"byte_end":367358,"line_start":1037,"line_end":1037,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":367363,"byte_end":367376,"line_start":1038,"line_end":1038,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":367381,"byte_end":367384,"line_start":1039,"line_end":1039,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":367389,"byte_end":367396,"line_start":1040,"line_end":1040,"column_start":5,"column_end":12}},{"value":"/ use chrono::{Duration, NaiveDate};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":367401,"byte_end":367439,"line_start":1041,"line_end":1041,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":367444,"byte_end":367447,"line_start":1042,"line_end":1042,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 9, 5);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":367452,"byte_end":367496,"line_start":1043,"line_end":1043,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(d.checked_add_signed(Duration::days(40)),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":367501,"byte_end":367557,"line_start":1044,"line_end":1044,"column_start":5,"column_end":61}},{"value":"/            Some(NaiveDate::from_ymd(2015, 10, 15)));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":367562,"byte_end":367618,"line_start":1045,"line_end":1045,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(d.checked_add_signed(Duration::days(-40)),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":367623,"byte_end":367680,"line_start":1046,"line_end":1046,"column_start":5,"column_end":62}},{"value":"/            Some(NaiveDate::from_ymd(2015, 7, 27)));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":367685,"byte_end":367740,"line_start":1047,"line_end":1047,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(d.checked_add_signed(Duration::days(1_000_000_000)), None);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":367745,"byte_end":367819,"line_start":1048,"line_end":1048,"column_start":5,"column_end":79}},{"value":"/ assert_eq!(d.checked_add_signed(Duration::days(-1_000_000_000)), None);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":367824,"byte_end":367899,"line_start":1049,"line_end":1049,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(NaiveDate::MAX.checked_add_signed(Duration::days(1)), None);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":367904,"byte_end":367979,"line_start":1050,"line_end":1050,"column_start":5,"column_end":80}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":367984,"byte_end":367991,"line_start":1051,"line_end":1051,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1703},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":369486,"byte_end":369504,"line_start":1083,"line_end":1083,"column_start":12,"column_end":30},"name":"checked_sub_signed","qualname":"<NaiveDate>::checked_sub_signed","value":"fn checked_sub_signed(Self, OldDuration) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Subtracts the `days` part of given `Duration` from the current date.","sig":null,"attributes":[{"value":"/ Subtracts the `days` part of given `Duration` from the current date.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":368697,"byte_end":368769,"line_start":1065,"line_end":1065,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":368774,"byte_end":368777,"line_start":1066,"line_end":1066,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when it will result in overflow.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":368782,"byte_end":368833,"line_start":1067,"line_end":1067,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":368838,"byte_end":368841,"line_start":1068,"line_end":1068,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":368846,"byte_end":368859,"line_start":1069,"line_end":1069,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":368864,"byte_end":368867,"line_start":1070,"line_end":1070,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":368872,"byte_end":368879,"line_start":1071,"line_end":1071,"column_start":5,"column_end":12}},{"value":"/ use chrono::{Duration, NaiveDate};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":368884,"byte_end":368922,"line_start":1072,"line_end":1072,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":368927,"byte_end":368930,"line_start":1073,"line_end":1073,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 9, 5);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":368935,"byte_end":368979,"line_start":1074,"line_end":1074,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(d.checked_sub_signed(Duration::days(40)),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":368984,"byte_end":369040,"line_start":1075,"line_end":1075,"column_start":5,"column_end":61}},{"value":"/            Some(NaiveDate::from_ymd(2015, 7, 27)));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":369045,"byte_end":369100,"line_start":1076,"line_end":1076,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(d.checked_sub_signed(Duration::days(-40)),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":369105,"byte_end":369162,"line_start":1077,"line_end":1077,"column_start":5,"column_end":62}},{"value":"/            Some(NaiveDate::from_ymd(2015, 10, 15)));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":369167,"byte_end":369223,"line_start":1078,"line_end":1078,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(d.checked_sub_signed(Duration::days(1_000_000_000)), None);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":369228,"byte_end":369302,"line_start":1079,"line_end":1079,"column_start":5,"column_end":79}},{"value":"/ assert_eq!(d.checked_sub_signed(Duration::days(-1_000_000_000)), None);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":369307,"byte_end":369382,"line_start":1080,"line_end":1080,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(NaiveDate::MIN.checked_sub_signed(Duration::days(1)), None);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":369387,"byte_end":369462,"line_start":1081,"line_end":1081,"column_start":5,"column_end":80}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":369467,"byte_end":369474,"line_start":1082,"line_end":1082,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1704},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":371293,"byte_end":371314,"line_start":1118,"line_end":1118,"column_start":12,"column_end":33},"name":"signed_duration_since","qualname":"<NaiveDate>::signed_duration_since","value":"fn signed_duration_since(Self, NaiveDate) -> OldDuration","parent":null,"children":[],"decl_id":null,"docs":" Subtracts another `NaiveDate` from the current date.\n Returns a `Duration` of integral numbers.","sig":null,"attributes":[{"value":"/ Subtracts another `NaiveDate` from the current date.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":370180,"byte_end":370236,"line_start":1096,"line_end":1096,"column_start":5,"column_end":61}},{"value":"/ Returns a `Duration` of integral numbers.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":370241,"byte_end":370286,"line_start":1097,"line_end":1097,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":370291,"byte_end":370294,"line_start":1098,"line_end":1098,"column_start":5,"column_end":8}},{"value":"/ This does not overflow or underflow at all,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":370299,"byte_end":370346,"line_start":1099,"line_end":1099,"column_start":5,"column_end":52}},{"value":"/ as all possible output fits in the range of `Duration`.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":370351,"byte_end":370410,"line_start":1100,"line_end":1100,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":370415,"byte_end":370418,"line_start":1101,"line_end":1101,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":370423,"byte_end":370436,"line_start":1102,"line_end":1102,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":370441,"byte_end":370444,"line_start":1103,"line_end":1103,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":370449,"byte_end":370456,"line_start":1104,"line_end":1104,"column_start":5,"column_end":12}},{"value":"/ use chrono::{Duration, NaiveDate};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":370461,"byte_end":370499,"line_start":1105,"line_end":1105,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":370504,"byte_end":370507,"line_start":1106,"line_end":1106,"column_start":5,"column_end":8}},{"value":"/ let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":370512,"byte_end":370551,"line_start":1107,"line_end":1107,"column_start":5,"column_end":44}},{"value":"/ let since = NaiveDate::signed_duration_since;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":370556,"byte_end":370605,"line_start":1108,"line_end":1108,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":370610,"byte_end":370613,"line_start":1109,"line_end":1109,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(since(from_ymd(2014, 1, 1), from_ymd(2014, 1, 1)), Duration::zero());","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":370618,"byte_end":370702,"line_start":1110,"line_end":1110,"column_start":5,"column_end":89}},{"value":"/ assert_eq!(since(from_ymd(2014, 1, 1), from_ymd(2013, 12, 31)), Duration::days(1));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":370707,"byte_end":370794,"line_start":1111,"line_end":1111,"column_start":5,"column_end":92}},{"value":"/ assert_eq!(since(from_ymd(2014, 1, 1), from_ymd(2014, 1, 2)), Duration::days(-1));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":370799,"byte_end":370885,"line_start":1112,"line_end":1112,"column_start":5,"column_end":91}},{"value":"/ assert_eq!(since(from_ymd(2014, 1, 1), from_ymd(2013, 9, 23)), Duration::days(100));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":370890,"byte_end":370978,"line_start":1113,"line_end":1113,"column_start":5,"column_end":93}},{"value":"/ assert_eq!(since(from_ymd(2014, 1, 1), from_ymd(2013, 1, 1)), Duration::days(365));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":370983,"byte_end":371070,"line_start":1114,"line_end":1114,"column_start":5,"column_end":92}},{"value":"/ assert_eq!(since(from_ymd(2014, 1, 1), from_ymd(2010, 1, 1)), Duration::days(365*4 + 1));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":371075,"byte_end":371168,"line_start":1115,"line_end":1115,"column_start":5,"column_end":98}},{"value":"/ assert_eq!(since(from_ymd(2014, 1, 1), from_ymd(1614, 1, 1)), Duration::days(365*400 + 97));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":371173,"byte_end":371269,"line_start":1116,"line_end":1116,"column_start":5,"column_end":101}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":371274,"byte_end":371281,"line_start":1117,"line_end":1117,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1705},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":373070,"byte_end":373087,"line_start":1159,"line_end":1159,"column_start":12,"column_end":29},"name":"format_with_items","qualname":"<NaiveDate>::format_with_items","value":"fn format_with_items<'a, I, B>(&Self, I) -> DelayedFormat<I> where\nI: Iterator<Item = B> + Clone, B: Borrow<Item>","parent":null,"children":[],"decl_id":null,"docs":" Formats the date with the specified formatting items.\n Otherwise it is the same as the ordinary `format` method.","sig":null,"attributes":[{"value":"/ Formats the date with the specified formatting items.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":371905,"byte_end":371962,"line_start":1130,"line_end":1130,"column_start":5,"column_end":62}},{"value":"/ Otherwise it is the same as the ordinary `format` method.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":371967,"byte_end":372028,"line_start":1131,"line_end":1131,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":372033,"byte_end":372036,"line_start":1132,"line_end":1132,"column_start":5,"column_end":8}},{"value":"/ The `Iterator` of items should be `Clone`able,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":372041,"byte_end":372091,"line_start":1133,"line_end":1133,"column_start":5,"column_end":55}},{"value":"/ since the resulting `DelayedFormat` value may be formatted multiple times.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":372096,"byte_end":372174,"line_start":1134,"line_end":1134,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":372179,"byte_end":372182,"line_start":1135,"line_end":1135,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":372187,"byte_end":372200,"line_start":1136,"line_end":1136,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":372205,"byte_end":372208,"line_start":1137,"line_end":1137,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":372213,"byte_end":372220,"line_start":1138,"line_end":1138,"column_start":5,"column_end":12}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":372225,"byte_end":372251,"line_start":1139,"line_end":1139,"column_start":5,"column_end":31}},{"value":"/ use chrono::format::strftime::StrftimeItems;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":372256,"byte_end":372304,"line_start":1140,"line_end":1140,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":372309,"byte_end":372312,"line_start":1141,"line_end":1141,"column_start":5,"column_end":8}},{"value":"/ let fmt = StrftimeItems::new(\"%Y-%m-%d\");","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":372317,"byte_end":372362,"line_start":1142,"line_end":1142,"column_start":5,"column_end":50}},{"value":"/ let d = NaiveDate::from_ymd(2015, 9, 5);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":372367,"byte_end":372411,"line_start":1143,"line_end":1143,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(d.format_with_items(fmt.clone()).to_string(), \"2015-09-05\");","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":372416,"byte_end":372491,"line_start":1144,"line_end":1144,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(d.format(\"%Y-%m-%d\").to_string(),             \"2015-09-05\");","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":372496,"byte_end":372571,"line_start":1145,"line_end":1145,"column_start":5,"column_end":80}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":372576,"byte_end":372583,"line_start":1146,"line_end":1146,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":372588,"byte_end":372591,"line_start":1147,"line_end":1147,"column_start":5,"column_end":8}},{"value":"/ The resulting `DelayedFormat` can be formatted directly via the `Display` trait.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":372596,"byte_end":372680,"line_start":1148,"line_end":1148,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":372685,"byte_end":372688,"line_start":1149,"line_end":1149,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":372693,"byte_end":372700,"line_start":1150,"line_end":1150,"column_start":5,"column_end":12}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":372705,"byte_end":372733,"line_start":1151,"line_end":1151,"column_start":5,"column_end":33}},{"value":"/ # use chrono::format::strftime::StrftimeItems;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":372738,"byte_end":372788,"line_start":1152,"line_end":1152,"column_start":5,"column_end":55}},{"value":"/ # let fmt = StrftimeItems::new(\"%Y-%m-%d\").clone();","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":372793,"byte_end":372848,"line_start":1153,"line_end":1153,"column_start":5,"column_end":60}},{"value":"/ # let d = NaiveDate::from_ymd(2015, 9, 5);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":372853,"byte_end":372899,"line_start":1154,"line_end":1154,"column_start":5,"column_end":51}},{"value":"/ assert_eq!(format!(\"{}\", d.format_with_items(fmt)), \"2015-09-05\");","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":372904,"byte_end":372974,"line_start":1155,"line_end":1155,"column_start":5,"column_end":75}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":372979,"byte_end":372986,"line_start":1156,"line_end":1156,"column_start":5,"column_end":12}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":372991,"byte_end":373044,"line_start":1157,"line_end":1157,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":373049,"byte_end":373058,"line_start":1158,"line_end":1158,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1709},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":374771,"byte_end":374777,"line_start":1201,"line_end":1201,"column_start":12,"column_end":18},"name":"format","qualname":"<NaiveDate>::format","value":"fn format<'a>(&Self, &'a str) -> DelayedFormat<StrftimeItems>","parent":null,"children":[],"decl_id":null,"docs":" Formats the date with the specified format string.\n See the [`format::strftime` module](../format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[{"value":"/ Formats the date with the specified format string.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":373283,"byte_end":373337,"line_start":1167,"line_end":1167,"column_start":5,"column_end":59}},{"value":"/ See the [`format::strftime` module](../format/strftime/index.html)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":373342,"byte_end":373412,"line_start":1168,"line_end":1168,"column_start":5,"column_end":75}},{"value":"/ on the supported escape sequences.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":373417,"byte_end":373455,"line_start":1169,"line_end":1169,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":373460,"byte_end":373463,"line_start":1170,"line_end":1170,"column_start":5,"column_end":8}},{"value":"/ This returns a `DelayedFormat`,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":373468,"byte_end":373503,"line_start":1171,"line_end":1171,"column_start":5,"column_end":40}},{"value":"/ which gets converted to a string only when actual formatting happens.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":373508,"byte_end":373581,"line_start":1172,"line_end":1172,"column_start":5,"column_end":78}},{"value":"/ You may use the `to_string` method to get a `String`,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":373586,"byte_end":373643,"line_start":1173,"line_end":1173,"column_start":5,"column_end":62}},{"value":"/ or just feed it into `print!` and other formatting macros.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":373648,"byte_end":373710,"line_start":1174,"line_end":1174,"column_start":5,"column_end":67}},{"value":"/ (In this way it avoids the redundant memory allocation.)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":373715,"byte_end":373775,"line_start":1175,"line_end":1175,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":373780,"byte_end":373783,"line_start":1176,"line_end":1176,"column_start":5,"column_end":8}},{"value":"/ A wrong format string does *not* issue an error immediately.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":373788,"byte_end":373852,"line_start":1177,"line_end":1177,"column_start":5,"column_end":69}},{"value":"/ Rather, converting or formatting the `DelayedFormat` fails.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":373857,"byte_end":373920,"line_start":1178,"line_end":1178,"column_start":5,"column_end":68}},{"value":"/ You are recommended to immediately use `DelayedFormat` for this reason.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":373925,"byte_end":374000,"line_start":1179,"line_end":1179,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":374005,"byte_end":374008,"line_start":1180,"line_end":1180,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":374013,"byte_end":374026,"line_start":1181,"line_end":1181,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":374031,"byte_end":374034,"line_start":1182,"line_end":1182,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":374039,"byte_end":374046,"line_start":1183,"line_end":1183,"column_start":5,"column_end":12}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":374051,"byte_end":374077,"line_start":1184,"line_end":1184,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":374082,"byte_end":374085,"line_start":1185,"line_end":1185,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 9, 5);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":374090,"byte_end":374134,"line_start":1186,"line_end":1186,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(d.format(\"%Y-%m-%d\").to_string(), \"2015-09-05\");","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":374139,"byte_end":374202,"line_start":1187,"line_end":1187,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(d.format(\"%A, %-d %B, %C%y\").to_string(), \"Saturday, 5 September, 2015\");","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":374207,"byte_end":374295,"line_start":1188,"line_end":1188,"column_start":5,"column_end":93}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":374300,"byte_end":374307,"line_start":1189,"line_end":1189,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":374312,"byte_end":374315,"line_start":1190,"line_end":1190,"column_start":5,"column_end":8}},{"value":"/ The resulting `DelayedFormat` can be formatted directly via the `Display` trait.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":374320,"byte_end":374404,"line_start":1191,"line_end":1191,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":374409,"byte_end":374412,"line_start":1192,"line_end":1192,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":374417,"byte_end":374424,"line_start":1193,"line_end":1193,"column_start":5,"column_end":12}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":374429,"byte_end":374457,"line_start":1194,"line_end":1194,"column_start":5,"column_end":33}},{"value":"/ # let d = NaiveDate::from_ymd(2015, 9, 5);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":374462,"byte_end":374508,"line_start":1195,"line_end":1195,"column_start":5,"column_end":51}},{"value":"/ assert_eq!(format!(\"{}\", d.format(\"%Y-%m-%d\")), \"2015-09-05\");","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":374513,"byte_end":374579,"line_start":1196,"line_end":1196,"column_start":5,"column_end":71}},{"value":"/ assert_eq!(format!(\"{}\", d.format(\"%A, %-d %B, %C%y\")), \"Saturday, 5 September, 2015\");","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":374584,"byte_end":374675,"line_start":1197,"line_end":1197,"column_start":5,"column_end":96}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":374680,"byte_end":374687,"line_start":1198,"line_end":1198,"column_start":5,"column_end":12}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":374692,"byte_end":374745,"line_start":1199,"line_end":1199,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":374750,"byte_end":374759,"line_start":1200,"line_end":1200,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1711},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":375719,"byte_end":375728,"line_start":1232,"line_end":1232,"column_start":12,"column_end":21},"name":"iter_days","qualname":"<NaiveDate>::iter_days","value":"fn iter_days(&Self) -> NaiveDateDaysIterator","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator that steps by days across all representable dates.","sig":null,"attributes":[{"value":"/ Returns an iterator that steps by days across all representable dates.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":374908,"byte_end":374982,"line_start":1205,"line_end":1205,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":374987,"byte_end":374990,"line_start":1206,"line_end":1206,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":374995,"byte_end":375008,"line_start":1207,"line_end":1207,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":375013,"byte_end":375016,"line_start":1208,"line_end":1208,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":375021,"byte_end":375028,"line_start":1209,"line_end":1209,"column_start":5,"column_end":12}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":375033,"byte_end":375061,"line_start":1210,"line_end":1210,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":375066,"byte_end":375069,"line_start":1211,"line_end":1211,"column_start":5,"column_end":8}},{"value":"/ let expected = [","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":375074,"byte_end":375094,"line_start":1212,"line_end":1212,"column_start":5,"column_end":25}},{"value":"/     NaiveDate::from_ymd(2016, 2, 27),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":375099,"byte_end":375140,"line_start":1213,"line_end":1213,"column_start":5,"column_end":46}},{"value":"/     NaiveDate::from_ymd(2016, 2, 28),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":375145,"byte_end":375186,"line_start":1214,"line_end":1214,"column_start":5,"column_end":46}},{"value":"/     NaiveDate::from_ymd(2016, 2, 29),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":375191,"byte_end":375232,"line_start":1215,"line_end":1215,"column_start":5,"column_end":46}},{"value":"/     NaiveDate::from_ymd(2016, 3, 1),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":375237,"byte_end":375277,"line_start":1216,"line_end":1216,"column_start":5,"column_end":45}},{"value":"/ ];","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":375282,"byte_end":375288,"line_start":1217,"line_end":1217,"column_start":5,"column_end":11}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":375293,"byte_end":375296,"line_start":1218,"line_end":1218,"column_start":5,"column_end":8}},{"value":"/ let mut count = 0;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":375301,"byte_end":375323,"line_start":1219,"line_end":1219,"column_start":5,"column_end":27}},{"value":"/ for (idx, d) in NaiveDate::from_ymd(2016, 2, 27).iter_days().take(4).enumerate() {","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":375328,"byte_end":375414,"line_start":1220,"line_end":1220,"column_start":5,"column_end":91}},{"value":"/    assert_eq!(d, expected[idx]);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":375419,"byte_end":375455,"line_start":1221,"line_end":1221,"column_start":5,"column_end":41}},{"value":"/    count += 1;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":375460,"byte_end":375478,"line_start":1222,"line_end":1222,"column_start":5,"column_end":23}},{"value":"/ }","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":375483,"byte_end":375488,"line_start":1223,"line_end":1223,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(count, 4);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":375493,"byte_end":375518,"line_start":1224,"line_end":1224,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":375523,"byte_end":375526,"line_start":1225,"line_end":1225,"column_start":5,"column_end":8}},{"value":"/ for d in NaiveDate::from_ymd(2016, 3, 1).iter_days().rev().take(4) {","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":375531,"byte_end":375603,"line_start":1226,"line_end":1226,"column_start":5,"column_end":77}},{"value":"/     count -= 1;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":375608,"byte_end":375627,"line_start":1227,"line_end":1227,"column_start":5,"column_end":24}},{"value":"/     assert_eq!(d, expected[count]);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":375632,"byte_end":375671,"line_start":1228,"line_end":1228,"column_start":5,"column_end":44}},{"value":"/ }","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":375676,"byte_end":375681,"line_start":1229,"line_end":1229,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":375686,"byte_end":375693,"line_start":1230,"line_end":1230,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":375698,"byte_end":375707,"line_start":1231,"line_end":1231,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1712},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":376636,"byte_end":376646,"line_start":1263,"line_end":1263,"column_start":12,"column_end":22},"name":"iter_weeks","qualname":"<NaiveDate>::iter_weeks","value":"fn iter_weeks(&Self) -> NaiveDateWeeksIterator","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator that steps by weeks across all representable dates.","sig":null,"attributes":[{"value":"/ Returns an iterator that steps by weeks across all representable dates.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":375821,"byte_end":375896,"line_start":1236,"line_end":1236,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":375901,"byte_end":375904,"line_start":1237,"line_end":1237,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":375909,"byte_end":375922,"line_start":1238,"line_end":1238,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":375927,"byte_end":375930,"line_start":1239,"line_end":1239,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":375935,"byte_end":375942,"line_start":1240,"line_end":1240,"column_start":5,"column_end":12}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":375947,"byte_end":375975,"line_start":1241,"line_end":1241,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":375980,"byte_end":375983,"line_start":1242,"line_end":1242,"column_start":5,"column_end":8}},{"value":"/ let expected = [","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":375988,"byte_end":376008,"line_start":1243,"line_end":1243,"column_start":5,"column_end":25}},{"value":"/     NaiveDate::from_ymd(2016, 2, 27),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":376013,"byte_end":376054,"line_start":1244,"line_end":1244,"column_start":5,"column_end":46}},{"value":"/     NaiveDate::from_ymd(2016, 3, 5),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":376059,"byte_end":376099,"line_start":1245,"line_end":1245,"column_start":5,"column_end":45}},{"value":"/     NaiveDate::from_ymd(2016, 3, 12),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":376104,"byte_end":376145,"line_start":1246,"line_end":1246,"column_start":5,"column_end":46}},{"value":"/     NaiveDate::from_ymd(2016, 3, 19),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":376150,"byte_end":376191,"line_start":1247,"line_end":1247,"column_start":5,"column_end":46}},{"value":"/ ];","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":376196,"byte_end":376202,"line_start":1248,"line_end":1248,"column_start":5,"column_end":11}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":376207,"byte_end":376210,"line_start":1249,"line_end":1249,"column_start":5,"column_end":8}},{"value":"/ let mut count = 0;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":376215,"byte_end":376237,"line_start":1250,"line_end":1250,"column_start":5,"column_end":27}},{"value":"/ for (idx, d) in NaiveDate::from_ymd(2016, 2, 27).iter_weeks().take(4).enumerate() {","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":376242,"byte_end":376329,"line_start":1251,"line_end":1251,"column_start":5,"column_end":92}},{"value":"/    assert_eq!(d, expected[idx]);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":376334,"byte_end":376370,"line_start":1252,"line_end":1252,"column_start":5,"column_end":41}},{"value":"/    count += 1;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":376375,"byte_end":376393,"line_start":1253,"line_end":1253,"column_start":5,"column_end":23}},{"value":"/ }","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":376398,"byte_end":376403,"line_start":1254,"line_end":1254,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(count, 4);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":376408,"byte_end":376433,"line_start":1255,"line_end":1255,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":376438,"byte_end":376441,"line_start":1256,"line_end":1256,"column_start":5,"column_end":8}},{"value":"/ for d in NaiveDate::from_ymd(2016, 3, 19).iter_weeks().rev().take(4) {","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":376446,"byte_end":376520,"line_start":1257,"line_end":1257,"column_start":5,"column_end":79}},{"value":"/     count -= 1;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":376525,"byte_end":376544,"line_start":1258,"line_end":1258,"column_start":5,"column_end":24}},{"value":"/     assert_eq!(d, expected[count]);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":376549,"byte_end":376588,"line_start":1259,"line_end":1259,"column_start":5,"column_end":44}},{"value":"/ }","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":376593,"byte_end":376598,"line_start":1260,"line_end":1260,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":376603,"byte_end":376610,"line_start":1261,"line_end":1261,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":376615,"byte_end":376624,"line_start":1262,"line_end":1262,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1713},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":376871,"byte_end":376875,"line_start":1270,"line_end":1270,"column_start":12,"column_end":16},"name":"week","qualname":"<NaiveDate>::week","value":"fn week(&Self, Weekday) -> NaiveWeek","parent":null,"children":[],"decl_id":null,"docs":" Returns the [`NaiveWeek`] that the date belongs to, starting with the [`Weekday`]\n specified.\n","sig":null,"attributes":[{"value":"/ Returns the [`NaiveWeek`] that the date belongs to, starting with the [`Weekday`]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":376741,"byte_end":376826,"line_start":1267,"line_end":1267,"column_start":5,"column_end":90}},{"value":"/ specified.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":376831,"byte_end":376845,"line_start":1268,"line_end":1268,"column_start":5,"column_end":19}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":376850,"byte_end":376859,"line_start":1269,"line_end":1269,"column_start":5,"column_end":14}}]},{"kind":"Const","id":{"krate":0,"index":1714},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":377042,"byte_end":377045,"line_start":1275,"line_end":1275,"column_start":15,"column_end":18},"name":"MIN","qualname":"::naive::date::NaiveDate::MIN","value":"NaiveDate","parent":{"krate":0,"index":1662},"children":[],"decl_id":null,"docs":" The minimum possible `NaiveDate` (January 1, 262145 BCE).\n","sig":null,"attributes":[{"value":"/ The minimum possible `NaiveDate` (January 1, 262145 BCE).","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":376966,"byte_end":377027,"line_start":1274,"line_end":1274,"column_start":5,"column_end":66}}]},{"kind":"Const","id":{"krate":0,"index":1715},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":377203,"byte_end":377206,"line_start":1277,"line_end":1277,"column_start":15,"column_end":18},"name":"MAX","qualname":"::naive::date::NaiveDate::MAX","value":"NaiveDate","parent":{"krate":0,"index":1662},"children":[],"decl_id":null,"docs":" The maximum possible `NaiveDate` (December 31, 262143 CE).\n","sig":null,"attributes":[{"value":"/ The maximum possible `NaiveDate` (December 31, 262143 CE).","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":377126,"byte_end":377188,"line_start":1276,"line_end":1276,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1717},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":377663,"byte_end":377667,"line_start":1292,"line_end":1292,"column_start":8,"column_end":12},"name":"year","qualname":"<NaiveDate as traits::Datelike>::year","value":"fn year(&Self) -> i32","parent":{"krate":0,"index":3214},"children":[],"decl_id":{"krate":0,"index":3215},"docs":" Returns the year number in the [calendar date](#calendar-date).","sig":null,"attributes":[{"value":"/ Returns the year number in the [calendar date](#calendar-date).","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":377321,"byte_end":377388,"line_start":1281,"line_end":1281,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":377393,"byte_end":377396,"line_start":1282,"line_end":1282,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":377401,"byte_end":377414,"line_start":1283,"line_end":1283,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":377419,"byte_end":377422,"line_start":1284,"line_end":1284,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":377427,"byte_end":377434,"line_start":1285,"line_end":1285,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, Datelike};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":377439,"byte_end":377477,"line_start":1286,"line_end":1286,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":377482,"byte_end":377485,"line_start":1287,"line_end":1287,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 9, 8).year(), 2015);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":377490,"byte_end":377551,"line_start":1288,"line_end":1288,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(NaiveDate::from_ymd(-308, 3, 14).year(), -308); // 309 BCE","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":377556,"byte_end":377629,"line_start":1289,"line_end":1289,"column_start":5,"column_end":78}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":377634,"byte_end":377641,"line_start":1290,"line_end":1290,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":377646,"byte_end":377655,"line_start":1291,"line_end":1291,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1718},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":378078,"byte_end":378083,"line_start":1309,"line_end":1309,"column_start":8,"column_end":13},"name":"month","qualname":"<NaiveDate as traits::Datelike>::month","value":"fn month(&Self) -> u32","parent":{"krate":0,"index":3214},"children":[],"decl_id":{"krate":0,"index":3217},"docs":" Returns the month number starting from 1.","sig":null,"attributes":[{"value":"/ Returns the month number starting from 1.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":377719,"byte_end":377764,"line_start":1296,"line_end":1296,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":377769,"byte_end":377772,"line_start":1297,"line_end":1297,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 1 to 12.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":377777,"byte_end":377818,"line_start":1298,"line_end":1298,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":377823,"byte_end":377826,"line_start":1299,"line_end":1299,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":377831,"byte_end":377844,"line_start":1300,"line_end":1300,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":377849,"byte_end":377852,"line_start":1301,"line_end":1301,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":377857,"byte_end":377864,"line_start":1302,"line_end":1302,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, Datelike};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":377869,"byte_end":377907,"line_start":1303,"line_end":1303,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":377912,"byte_end":377915,"line_start":1304,"line_end":1304,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 9, 8).month(), 9);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":377920,"byte_end":377979,"line_start":1305,"line_end":1305,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(NaiveDate::from_ymd(-308, 3, 14).month(), 3);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":377984,"byte_end":378044,"line_start":1306,"line_end":1306,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":378049,"byte_end":378056,"line_start":1307,"line_end":1307,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":378061,"byte_end":378070,"line_start":1308,"line_end":1308,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1719},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":378499,"byte_end":378505,"line_start":1326,"line_end":1326,"column_start":8,"column_end":14},"name":"month0","qualname":"<NaiveDate as traits::Datelike>::month0","value":"fn month0(&Self) -> u32","parent":{"krate":0,"index":3214},"children":[],"decl_id":{"krate":0,"index":3218},"docs":" Returns the month number starting from 0.","sig":null,"attributes":[{"value":"/ Returns the month number starting from 0.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":378138,"byte_end":378183,"line_start":1313,"line_end":1313,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":378188,"byte_end":378191,"line_start":1314,"line_end":1314,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 0 to 11.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":378196,"byte_end":378237,"line_start":1315,"line_end":1315,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":378242,"byte_end":378245,"line_start":1316,"line_end":1316,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":378250,"byte_end":378263,"line_start":1317,"line_end":1317,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":378268,"byte_end":378271,"line_start":1318,"line_end":1318,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":378276,"byte_end":378283,"line_start":1319,"line_end":1319,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, Datelike};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":378288,"byte_end":378326,"line_start":1320,"line_end":1320,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":378331,"byte_end":378334,"line_start":1321,"line_end":1321,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 9, 8).month0(), 8);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":378339,"byte_end":378399,"line_start":1322,"line_end":1322,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(NaiveDate::from_ymd(-308, 3, 14).month0(), 2);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":378404,"byte_end":378465,"line_start":1323,"line_end":1323,"column_start":5,"column_end":66}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":378470,"byte_end":378477,"line_start":1324,"line_end":1324,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":378482,"byte_end":378491,"line_start":1325,"line_end":1325,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1720},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":379851,"byte_end":379854,"line_start":1366,"line_end":1366,"column_start":8,"column_end":11},"name":"day","qualname":"<NaiveDate as traits::Datelike>::day","value":"fn day(&Self) -> u32","parent":{"krate":0,"index":3214},"children":[],"decl_id":{"krate":0,"index":3219},"docs":" Returns the day of month starting from 1.","sig":null,"attributes":[{"value":"/ Returns the day of month starting from 1.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":378564,"byte_end":378609,"line_start":1330,"line_end":1330,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":378614,"byte_end":378617,"line_start":1331,"line_end":1331,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 1 to 31. (The last day of month differs by months.)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":378622,"byte_end":378706,"line_start":1332,"line_end":1332,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":378711,"byte_end":378714,"line_start":1333,"line_end":1333,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":378719,"byte_end":378732,"line_start":1334,"line_end":1334,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":378737,"byte_end":378740,"line_start":1335,"line_end":1335,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":378745,"byte_end":378752,"line_start":1336,"line_end":1336,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, Datelike};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":378757,"byte_end":378795,"line_start":1337,"line_end":1337,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":378800,"byte_end":378803,"line_start":1338,"line_end":1338,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 9, 8).day(), 8);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":378808,"byte_end":378865,"line_start":1339,"line_end":1339,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(NaiveDate::from_ymd(-308, 3, 14).day(), 14);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":378870,"byte_end":378929,"line_start":1340,"line_end":1340,"column_start":5,"column_end":64}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":378934,"byte_end":378941,"line_start":1341,"line_end":1341,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":378946,"byte_end":378949,"line_start":1342,"line_end":1342,"column_start":5,"column_end":8}},{"value":"/ Combined with [`NaiveDate::pred`](#method.pred),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":378954,"byte_end":379006,"line_start":1343,"line_end":1343,"column_start":5,"column_end":57}},{"value":"/ one can determine the number of days in a particular month.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":379011,"byte_end":379074,"line_start":1344,"line_end":1344,"column_start":5,"column_end":68}},{"value":"/ (Note that this panics when `year` is out of range.)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":379079,"byte_end":379135,"line_start":1345,"line_end":1345,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":379140,"byte_end":379143,"line_start":1346,"line_end":1346,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":379148,"byte_end":379155,"line_start":1347,"line_end":1347,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, Datelike};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":379160,"byte_end":379198,"line_start":1348,"line_end":1348,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":379203,"byte_end":379206,"line_start":1349,"line_end":1349,"column_start":5,"column_end":8}},{"value":"/ fn ndays_in_month(year: i32, month: u32) -> u32 {","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":379211,"byte_end":379264,"line_start":1350,"line_end":1350,"column_start":5,"column_end":58}},{"value":"/     // the first day of the next month...","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":379269,"byte_end":379314,"line_start":1351,"line_end":1351,"column_start":5,"column_end":50}},{"value":"/     let (y, m) = if month == 12 { (year + 1, 1) } else { (year, month + 1) };","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":379319,"byte_end":379400,"line_start":1352,"line_end":1352,"column_start":5,"column_end":86}},{"value":"/     let d = NaiveDate::from_ymd(y, m, 1);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":379405,"byte_end":379450,"line_start":1353,"line_end":1353,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":379455,"byte_end":379458,"line_start":1354,"line_end":1354,"column_start":5,"column_end":8}},{"value":"/     // ...is preceded by the last day of the original month","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":379463,"byte_end":379526,"line_start":1355,"line_end":1355,"column_start":5,"column_end":68}},{"value":"/     d.pred().day()","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":379531,"byte_end":379553,"line_start":1356,"line_end":1356,"column_start":5,"column_end":27}},{"value":"/ }","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":379558,"byte_end":379563,"line_start":1357,"line_end":1357,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":379568,"byte_end":379571,"line_start":1358,"line_end":1358,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(ndays_in_month(2015, 8), 31);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":379576,"byte_end":379620,"line_start":1359,"line_end":1359,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(ndays_in_month(2015, 9), 30);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":379625,"byte_end":379669,"line_start":1360,"line_end":1360,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(ndays_in_month(2015, 12), 31);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":379674,"byte_end":379719,"line_start":1361,"line_end":1361,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(ndays_in_month(2016, 2), 29);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":379724,"byte_end":379768,"line_start":1362,"line_end":1362,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(ndays_in_month(2017, 2), 28);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":379773,"byte_end":379817,"line_start":1363,"line_end":1363,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":379822,"byte_end":379829,"line_start":1364,"line_end":1364,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":379834,"byte_end":379843,"line_start":1365,"line_end":1365,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1721},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":380308,"byte_end":380312,"line_start":1383,"line_end":1383,"column_start":8,"column_end":12},"name":"day0","qualname":"<NaiveDate as traits::Datelike>::day0","value":"fn day0(&Self) -> u32","parent":{"krate":0,"index":3214},"children":[],"decl_id":{"krate":0,"index":3220},"docs":" Returns the day of month starting from 0.","sig":null,"attributes":[{"value":"/ Returns the day of month starting from 0.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":379907,"byte_end":379952,"line_start":1370,"line_end":1370,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":379957,"byte_end":379960,"line_start":1371,"line_end":1371,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 0 to 30. (The last day of month differs by months.)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":379965,"byte_end":380049,"line_start":1372,"line_end":1372,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":380054,"byte_end":380057,"line_start":1373,"line_end":1373,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":380062,"byte_end":380075,"line_start":1374,"line_end":1374,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":380080,"byte_end":380083,"line_start":1375,"line_end":1375,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":380088,"byte_end":380095,"line_start":1376,"line_end":1376,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, Datelike};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":380100,"byte_end":380138,"line_start":1377,"line_end":1377,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":380143,"byte_end":380146,"line_start":1378,"line_end":1378,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 9, 8).day0(), 7);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":380151,"byte_end":380209,"line_start":1379,"line_end":1379,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(NaiveDate::from_ymd(-308, 3, 14).day0(), 13);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":380214,"byte_end":380274,"line_start":1380,"line_end":1380,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":380279,"byte_end":380286,"line_start":1381,"line_end":1381,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":380291,"byte_end":380300,"line_start":1382,"line_end":1382,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1722},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":381557,"byte_end":381564,"line_start":1422,"line_end":1422,"column_start":8,"column_end":15},"name":"ordinal","qualname":"<NaiveDate as traits::Datelike>::ordinal","value":"fn ordinal(&Self) -> u32","parent":{"krate":0,"index":3214},"children":[],"decl_id":{"krate":0,"index":3221},"docs":" Returns the day of year starting from 1.","sig":null,"attributes":[{"value":"/ Returns the day of year starting from 1.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":380369,"byte_end":380413,"line_start":1387,"line_end":1387,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":380418,"byte_end":380421,"line_start":1388,"line_end":1388,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 1 to 366. (The last day of year differs by years.)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":380426,"byte_end":380509,"line_start":1389,"line_end":1389,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":380514,"byte_end":380517,"line_start":1390,"line_end":1390,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":380522,"byte_end":380535,"line_start":1391,"line_end":1391,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":380540,"byte_end":380543,"line_start":1392,"line_end":1392,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":380548,"byte_end":380555,"line_start":1393,"line_end":1393,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, Datelike};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":380560,"byte_end":380598,"line_start":1394,"line_end":1394,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":380603,"byte_end":380606,"line_start":1395,"line_end":1395,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 9, 8).ordinal(), 251);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":380611,"byte_end":380674,"line_start":1396,"line_end":1396,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(NaiveDate::from_ymd(-308, 3, 14).ordinal(), 74);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":380679,"byte_end":380742,"line_start":1397,"line_end":1397,"column_start":5,"column_end":68}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":380747,"byte_end":380754,"line_start":1398,"line_end":1398,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":380759,"byte_end":380762,"line_start":1399,"line_end":1399,"column_start":5,"column_end":8}},{"value":"/ Combined with [`NaiveDate::pred`](#method.pred),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":380767,"byte_end":380819,"line_start":1400,"line_end":1400,"column_start":5,"column_end":57}},{"value":"/ one can determine the number of days in a particular year.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":380824,"byte_end":380886,"line_start":1401,"line_end":1401,"column_start":5,"column_end":67}},{"value":"/ (Note that this panics when `year` is out of range.)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":380891,"byte_end":380947,"line_start":1402,"line_end":1402,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":380952,"byte_end":380955,"line_start":1403,"line_end":1403,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":380960,"byte_end":380967,"line_start":1404,"line_end":1404,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, Datelike};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":380972,"byte_end":381010,"line_start":1405,"line_end":1405,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":381015,"byte_end":381018,"line_start":1406,"line_end":1406,"column_start":5,"column_end":8}},{"value":"/ fn ndays_in_year(year: i32) -> u32 {","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":381023,"byte_end":381063,"line_start":1407,"line_end":1407,"column_start":5,"column_end":45}},{"value":"/     // the first day of the next year...","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":381068,"byte_end":381112,"line_start":1408,"line_end":1408,"column_start":5,"column_end":49}},{"value":"/     let d = NaiveDate::from_ymd(year + 1, 1, 1);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":381117,"byte_end":381169,"line_start":1409,"line_end":1409,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":381174,"byte_end":381177,"line_start":1410,"line_end":1410,"column_start":5,"column_end":8}},{"value":"/     // ...is preceded by the last day of the original year","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":381182,"byte_end":381244,"line_start":1411,"line_end":1411,"column_start":5,"column_end":67}},{"value":"/     d.pred().ordinal()","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":381249,"byte_end":381275,"line_start":1412,"line_end":1412,"column_start":5,"column_end":31}},{"value":"/ }","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":381280,"byte_end":381285,"line_start":1413,"line_end":1413,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":381290,"byte_end":381293,"line_start":1414,"line_end":1414,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(ndays_in_year(2015), 365);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":381298,"byte_end":381339,"line_start":1415,"line_end":1415,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(ndays_in_year(2016), 366);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":381344,"byte_end":381385,"line_start":1416,"line_end":1416,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(ndays_in_year(2017), 365);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":381390,"byte_end":381431,"line_start":1417,"line_end":1417,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(ndays_in_year(2000), 366);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":381436,"byte_end":381477,"line_start":1418,"line_end":1418,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(ndays_in_year(2100), 365);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":381482,"byte_end":381523,"line_start":1419,"line_end":1419,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":381528,"byte_end":381535,"line_start":1420,"line_end":1420,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":381540,"byte_end":381549,"line_start":1421,"line_end":1421,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1723},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":382029,"byte_end":382037,"line_start":1439,"line_end":1439,"column_start":8,"column_end":16},"name":"ordinal0","qualname":"<NaiveDate as traits::Datelike>::ordinal0","value":"fn ordinal0(&Self) -> u32","parent":{"krate":0,"index":3214},"children":[],"decl_id":{"krate":0,"index":3222},"docs":" Returns the day of year starting from 0.","sig":null,"attributes":[{"value":"/ Returns the day of year starting from 0.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":381620,"byte_end":381664,"line_start":1426,"line_end":1426,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":381669,"byte_end":381672,"line_start":1427,"line_end":1427,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 0 to 365. (The last day of year differs by years.)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":381677,"byte_end":381760,"line_start":1428,"line_end":1428,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":381765,"byte_end":381768,"line_start":1429,"line_end":1429,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":381773,"byte_end":381786,"line_start":1430,"line_end":1430,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":381791,"byte_end":381794,"line_start":1431,"line_end":1431,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":381799,"byte_end":381806,"line_start":1432,"line_end":1432,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, Datelike};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":381811,"byte_end":381849,"line_start":1433,"line_end":1433,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":381854,"byte_end":381857,"line_start":1434,"line_end":1434,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 9, 8).ordinal0(), 250);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":381862,"byte_end":381926,"line_start":1435,"line_end":1435,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(NaiveDate::from_ymd(-308, 3, 14).ordinal0(), 73);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":381931,"byte_end":381995,"line_start":1436,"line_end":1436,"column_start":5,"column_end":69}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":382000,"byte_end":382007,"line_start":1437,"line_end":1437,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":382012,"byte_end":382021,"line_start":1438,"line_end":1438,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1724},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":382420,"byte_end":382427,"line_start":1454,"line_end":1454,"column_start":8,"column_end":15},"name":"weekday","qualname":"<NaiveDate as traits::Datelike>::weekday","value":"fn weekday(&Self) -> Weekday","parent":{"krate":0,"index":3214},"children":[],"decl_id":{"krate":0,"index":3223},"docs":" Returns the day of week.","sig":null,"attributes":[{"value":"/ Returns the day of week.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":382097,"byte_end":382125,"line_start":1443,"line_end":1443,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":382130,"byte_end":382133,"line_start":1444,"line_end":1444,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":382138,"byte_end":382151,"line_start":1445,"line_end":1445,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":382156,"byte_end":382159,"line_start":1446,"line_end":1446,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":382164,"byte_end":382171,"line_start":1447,"line_end":1447,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, Datelike, Weekday};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":382176,"byte_end":382223,"line_start":1448,"line_end":1448,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":382228,"byte_end":382231,"line_start":1449,"line_end":1449,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 9, 8).weekday(), Weekday::Tue);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":382236,"byte_end":382308,"line_start":1450,"line_end":1450,"column_start":5,"column_end":77}},{"value":"/ assert_eq!(NaiveDate::from_ymd(-308, 3, 14).weekday(), Weekday::Fri);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":382313,"byte_end":382386,"line_start":1451,"line_end":1451,"column_start":5,"column_end":78}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":382391,"byte_end":382398,"line_start":1452,"line_end":1452,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":382403,"byte_end":382412,"line_start":1453,"line_end":1453,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1725},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":382504,"byte_end":382512,"line_start":1459,"line_end":1459,"column_start":8,"column_end":16},"name":"iso_week","qualname":"<NaiveDate as traits::Datelike>::iso_week","value":"fn iso_week(&Self) -> IsoWeek","parent":{"krate":0,"index":3214},"children":[],"decl_id":{"krate":0,"index":3224},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":382487,"byte_end":382496,"line_start":1458,"line_end":1458,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1726},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":383451,"byte_end":383460,"line_start":1486,"line_end":1486,"column_start":8,"column_end":17},"name":"with_year","qualname":"<NaiveDate as traits::Datelike>::with_year","value":"fn with_year(&Self, i32) -> Option<NaiveDate>","parent":{"krate":0,"index":3214},"children":[],"decl_id":{"krate":0,"index":3225},"docs":" Makes a new `NaiveDate` with the year number changed.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` with the year number changed.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":382603,"byte_end":382660,"line_start":1463,"line_end":1463,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":382665,"byte_end":382668,"line_start":1464,"line_end":1464,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting `NaiveDate` would be invalid.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":382673,"byte_end":382740,"line_start":1465,"line_end":1465,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":382745,"byte_end":382748,"line_start":1466,"line_end":1466,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":382753,"byte_end":382766,"line_start":1467,"line_end":1467,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":382771,"byte_end":382774,"line_start":1468,"line_end":1468,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":382779,"byte_end":382786,"line_start":1469,"line_end":1469,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, Datelike};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":382791,"byte_end":382829,"line_start":1470,"line_end":1470,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":382834,"byte_end":382837,"line_start":1471,"line_end":1471,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 9, 8).with_year(2016),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":382842,"byte_end":382905,"line_start":1472,"line_end":1472,"column_start":5,"column_end":68}},{"value":"/            Some(NaiveDate::from_ymd(2016, 9, 8)));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":382910,"byte_end":382964,"line_start":1473,"line_end":1473,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 9, 8).with_year(-308),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":382969,"byte_end":383032,"line_start":1474,"line_end":1474,"column_start":5,"column_end":68}},{"value":"/            Some(NaiveDate::from_ymd(-308, 9, 8)));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":383037,"byte_end":383091,"line_start":1475,"line_end":1475,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":383096,"byte_end":383103,"line_start":1476,"line_end":1476,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":383108,"byte_end":383111,"line_start":1477,"line_end":1477,"column_start":5,"column_end":8}},{"value":"/ A leap day (February 29) is a good example that this method can return `None`.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":383116,"byte_end":383198,"line_start":1478,"line_end":1478,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":383203,"byte_end":383206,"line_start":1479,"line_end":1479,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":383211,"byte_end":383218,"line_start":1480,"line_end":1480,"column_start":5,"column_end":12}},{"value":"/ # use chrono::{NaiveDate, Datelike};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":383223,"byte_end":383263,"line_start":1481,"line_end":1481,"column_start":5,"column_end":45}},{"value":"/ assert!(NaiveDate::from_ymd(2016, 2, 29).with_year(2015).is_none());","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":383268,"byte_end":383340,"line_start":1482,"line_end":1482,"column_start":5,"column_end":77}},{"value":"/ assert!(NaiveDate::from_ymd(2016, 2, 29).with_year(2020).is_some());","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":383345,"byte_end":383417,"line_start":1483,"line_end":1483,"column_start":5,"column_end":77}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":383422,"byte_end":383429,"line_start":1484,"line_end":1484,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":383434,"byte_end":383443,"line_start":1485,"line_end":1485,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1727},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":384399,"byte_end":384409,"line_start":1512,"line_end":1512,"column_start":8,"column_end":18},"name":"with_month","qualname":"<NaiveDate as traits::Datelike>::with_month","value":"fn with_month(&Self, u32) -> Option<NaiveDate>","parent":{"krate":0,"index":3214},"children":[],"decl_id":{"krate":0,"index":3226},"docs":" Makes a new `NaiveDate` with the month number (starting from 1) changed.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` with the month number (starting from 1) changed.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":383804,"byte_end":383880,"line_start":1497,"line_end":1497,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":383885,"byte_end":383888,"line_start":1498,"line_end":1498,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting `NaiveDate` would be invalid.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":383893,"byte_end":383960,"line_start":1499,"line_end":1499,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":383965,"byte_end":383968,"line_start":1500,"line_end":1500,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":383973,"byte_end":383986,"line_start":1501,"line_end":1501,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":383991,"byte_end":383994,"line_start":1502,"line_end":1502,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":383999,"byte_end":384006,"line_start":1503,"line_end":1503,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, Datelike};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":384011,"byte_end":384049,"line_start":1504,"line_end":1504,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":384054,"byte_end":384057,"line_start":1505,"line_end":1505,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 9, 8).with_month(10),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":384062,"byte_end":384124,"line_start":1506,"line_end":1506,"column_start":5,"column_end":67}},{"value":"/            Some(NaiveDate::from_ymd(2015, 10, 8)));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":384129,"byte_end":384184,"line_start":1507,"line_end":1507,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 9, 8).with_month(13), None); // no month 13","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":384189,"byte_end":384273,"line_start":1508,"line_end":1508,"column_start":5,"column_end":89}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 9, 30).with_month(2), None); // no February 30","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":384278,"byte_end":384365,"line_start":1509,"line_end":1509,"column_start":5,"column_end":92}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":384370,"byte_end":384377,"line_start":1510,"line_end":1510,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":384382,"byte_end":384391,"line_start":1511,"line_end":1511,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1728},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":385112,"byte_end":385123,"line_start":1531,"line_end":1531,"column_start":8,"column_end":19},"name":"with_month0","qualname":"<NaiveDate as traits::Datelike>::with_month0","value":"fn with_month0(&Self, u32) -> Option<NaiveDate>","parent":{"krate":0,"index":3214},"children":[],"decl_id":{"krate":0,"index":3227},"docs":" Makes a new `NaiveDate` with the month number (starting from 0) changed.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` with the month number (starting from 0) changed.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":384515,"byte_end":384591,"line_start":1516,"line_end":1516,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":384596,"byte_end":384599,"line_start":1517,"line_end":1517,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting `NaiveDate` would be invalid.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":384604,"byte_end":384671,"line_start":1518,"line_end":1518,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":384676,"byte_end":384679,"line_start":1519,"line_end":1519,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":384684,"byte_end":384697,"line_start":1520,"line_end":1520,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":384702,"byte_end":384705,"line_start":1521,"line_end":1521,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":384710,"byte_end":384717,"line_start":1522,"line_end":1522,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, Datelike};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":384722,"byte_end":384760,"line_start":1523,"line_end":1523,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":384765,"byte_end":384768,"line_start":1524,"line_end":1524,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 9, 8).with_month0(9),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":384773,"byte_end":384835,"line_start":1525,"line_end":1525,"column_start":5,"column_end":67}},{"value":"/            Some(NaiveDate::from_ymd(2015, 10, 8)));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":384840,"byte_end":384895,"line_start":1526,"line_end":1526,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 9, 8).with_month0(12), None); // no month 13","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":384900,"byte_end":384985,"line_start":1527,"line_end":1527,"column_start":5,"column_end":90}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 9, 30).with_month0(1), None); // no February 30","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":384990,"byte_end":385078,"line_start":1528,"line_end":1528,"column_start":5,"column_end":93}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":385083,"byte_end":385090,"line_start":1529,"line_end":1529,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":385095,"byte_end":385104,"line_start":1530,"line_end":1530,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1729},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":385757,"byte_end":385765,"line_start":1550,"line_end":1550,"column_start":8,"column_end":16},"name":"with_day","qualname":"<NaiveDate as traits::Datelike>::with_day","value":"fn with_day(&Self, u32) -> Option<NaiveDate>","parent":{"krate":0,"index":3214},"children":[],"decl_id":{"krate":0,"index":3228},"docs":" Makes a new `NaiveDate` with the day of month (starting from 1) changed.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` with the day of month (starting from 1) changed.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":385235,"byte_end":385311,"line_start":1535,"line_end":1535,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":385316,"byte_end":385319,"line_start":1536,"line_end":1536,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting `NaiveDate` would be invalid.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":385324,"byte_end":385391,"line_start":1537,"line_end":1537,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":385396,"byte_end":385399,"line_start":1538,"line_end":1538,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":385404,"byte_end":385417,"line_start":1539,"line_end":1539,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":385422,"byte_end":385425,"line_start":1540,"line_end":1540,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":385430,"byte_end":385437,"line_start":1541,"line_end":1541,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, Datelike};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":385442,"byte_end":385480,"line_start":1542,"line_end":1542,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":385485,"byte_end":385488,"line_start":1543,"line_end":1543,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 9, 8).with_day(30),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":385493,"byte_end":385553,"line_start":1544,"line_end":1544,"column_start":5,"column_end":65}},{"value":"/            Some(NaiveDate::from_ymd(2015, 9, 30)));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":385558,"byte_end":385613,"line_start":1545,"line_end":1545,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 9, 8).with_day(31),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":385618,"byte_end":385678,"line_start":1546,"line_end":1546,"column_start":5,"column_end":65}},{"value":"/            None); // no September 31","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":385683,"byte_end":385723,"line_start":1547,"line_end":1547,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":385728,"byte_end":385735,"line_start":1548,"line_end":1548,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":385740,"byte_end":385749,"line_start":1549,"line_end":1549,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1730},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":386389,"byte_end":386398,"line_start":1569,"line_end":1569,"column_start":8,"column_end":17},"name":"with_day0","qualname":"<NaiveDate as traits::Datelike>::with_day0","value":"fn with_day0(&Self, u32) -> Option<NaiveDate>","parent":{"krate":0,"index":3214},"children":[],"decl_id":{"krate":0,"index":3229},"docs":" Makes a new `NaiveDate` with the day of month (starting from 0) changed.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` with the day of month (starting from 0) changed.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":385865,"byte_end":385941,"line_start":1554,"line_end":1554,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":385946,"byte_end":385949,"line_start":1555,"line_end":1555,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting `NaiveDate` would be invalid.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":385954,"byte_end":386021,"line_start":1556,"line_end":1556,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":386026,"byte_end":386029,"line_start":1557,"line_end":1557,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":386034,"byte_end":386047,"line_start":1558,"line_end":1558,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":386052,"byte_end":386055,"line_start":1559,"line_end":1559,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":386060,"byte_end":386067,"line_start":1560,"line_end":1560,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, Datelike};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":386072,"byte_end":386110,"line_start":1561,"line_end":1561,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":386115,"byte_end":386118,"line_start":1562,"line_end":1562,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 9, 8).with_day0(29),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":386123,"byte_end":386184,"line_start":1563,"line_end":1563,"column_start":5,"column_end":66}},{"value":"/            Some(NaiveDate::from_ymd(2015, 9, 30)));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":386189,"byte_end":386244,"line_start":1564,"line_end":1564,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 9, 8).with_day0(30),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":386249,"byte_end":386310,"line_start":1565,"line_end":1565,"column_start":5,"column_end":66}},{"value":"/            None); // no September 31","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":386315,"byte_end":386355,"line_start":1566,"line_end":1566,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":386360,"byte_end":386367,"line_start":1567,"line_end":1567,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":386372,"byte_end":386381,"line_start":1568,"line_end":1568,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1731},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":387308,"byte_end":387320,"line_start":1593,"line_end":1593,"column_start":8,"column_end":20},"name":"with_ordinal","qualname":"<NaiveDate as traits::Datelike>::with_ordinal","value":"fn with_ordinal(&Self, u32) -> Option<NaiveDate>","parent":{"krate":0,"index":3214},"children":[],"decl_id":{"krate":0,"index":3230},"docs":" Makes a new `NaiveDate` with the day of year (starting from 1) changed.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` with the day of year (starting from 1) changed.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":386504,"byte_end":386579,"line_start":1573,"line_end":1573,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":386584,"byte_end":386587,"line_start":1574,"line_end":1574,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting `NaiveDate` would be invalid.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":386592,"byte_end":386659,"line_start":1575,"line_end":1575,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":386664,"byte_end":386667,"line_start":1576,"line_end":1576,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":386672,"byte_end":386685,"line_start":1577,"line_end":1577,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":386690,"byte_end":386693,"line_start":1578,"line_end":1578,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":386698,"byte_end":386705,"line_start":1579,"line_end":1579,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, Datelike};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":386710,"byte_end":386748,"line_start":1580,"line_end":1580,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":386753,"byte_end":386756,"line_start":1581,"line_end":1581,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 1, 1).with_ordinal(60),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":386761,"byte_end":386825,"line_start":1582,"line_end":1582,"column_start":5,"column_end":69}},{"value":"/            Some(NaiveDate::from_ymd(2015, 3, 1)));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":386830,"byte_end":386884,"line_start":1583,"line_end":1583,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 1, 1).with_ordinal(366),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":386889,"byte_end":386954,"line_start":1584,"line_end":1584,"column_start":5,"column_end":70}},{"value":"/            None); // 2015 had only 365 days","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":386959,"byte_end":387006,"line_start":1585,"line_end":1585,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":387011,"byte_end":387014,"line_start":1586,"line_end":1586,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2016, 1, 1).with_ordinal(60),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":387019,"byte_end":387083,"line_start":1587,"line_end":1587,"column_start":5,"column_end":69}},{"value":"/            Some(NaiveDate::from_ymd(2016, 2, 29)));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":387088,"byte_end":387143,"line_start":1588,"line_end":1588,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2016, 1, 1).with_ordinal(366),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":387148,"byte_end":387213,"line_start":1589,"line_end":1589,"column_start":5,"column_end":70}},{"value":"/            Some(NaiveDate::from_ymd(2016, 12, 31)));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":387218,"byte_end":387274,"line_start":1590,"line_end":1590,"column_start":5,"column_end":61}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":387279,"byte_end":387286,"line_start":1591,"line_end":1591,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":387291,"byte_end":387300,"line_start":1592,"line_end":1592,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1732},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":388238,"byte_end":388251,"line_start":1617,"line_end":1617,"column_start":8,"column_end":21},"name":"with_ordinal0","qualname":"<NaiveDate as traits::Datelike>::with_ordinal0","value":"fn with_ordinal0(&Self, u32) -> Option<NaiveDate>","parent":{"krate":0,"index":3214},"children":[],"decl_id":{"krate":0,"index":3231},"docs":" Makes a new `NaiveDate` with the day of year (starting from 0) changed.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` with the day of year (starting from 0) changed.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":387430,"byte_end":387505,"line_start":1597,"line_end":1597,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":387510,"byte_end":387513,"line_start":1598,"line_end":1598,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting `NaiveDate` would be invalid.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":387518,"byte_end":387585,"line_start":1599,"line_end":1599,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":387590,"byte_end":387593,"line_start":1600,"line_end":1600,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":387598,"byte_end":387611,"line_start":1601,"line_end":1601,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":387616,"byte_end":387619,"line_start":1602,"line_end":1602,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":387624,"byte_end":387631,"line_start":1603,"line_end":1603,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, Datelike};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":387636,"byte_end":387674,"line_start":1604,"line_end":1604,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":387679,"byte_end":387682,"line_start":1605,"line_end":1605,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 1, 1).with_ordinal0(59),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":387687,"byte_end":387752,"line_start":1606,"line_end":1606,"column_start":5,"column_end":70}},{"value":"/            Some(NaiveDate::from_ymd(2015, 3, 1)));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":387757,"byte_end":387811,"line_start":1607,"line_end":1607,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 1, 1).with_ordinal0(365),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":387816,"byte_end":387882,"line_start":1608,"line_end":1608,"column_start":5,"column_end":71}},{"value":"/            None); // 2015 had only 365 days","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":387887,"byte_end":387934,"line_start":1609,"line_end":1609,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":387939,"byte_end":387942,"line_start":1610,"line_end":1610,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2016, 1, 1).with_ordinal0(59),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":387947,"byte_end":388012,"line_start":1611,"line_end":1611,"column_start":5,"column_end":70}},{"value":"/            Some(NaiveDate::from_ymd(2016, 2, 29)));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":388017,"byte_end":388072,"line_start":1612,"line_end":1612,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2016, 1, 1).with_ordinal0(365),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":388077,"byte_end":388143,"line_start":1613,"line_end":1613,"column_start":5,"column_end":71}},{"value":"/            Some(NaiveDate::from_ymd(2016, 12, 31)));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":388148,"byte_end":388204,"line_start":1614,"line_end":1614,"column_start":5,"column_end":61}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":388209,"byte_end":388216,"line_start":1615,"line_end":1615,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":388221,"byte_end":388230,"line_start":1616,"line_end":1616,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1735},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":389593,"byte_end":389596,"line_start":1648,"line_end":1648,"column_start":8,"column_end":11},"name":"add","qualname":"<NaiveDate as std::ops::Add>::add","value":"fn add(Self, OldDuration) -> NaiveDate","parent":{"krate":2,"index":3218},"children":[],"decl_id":{"krate":2,"index":3221},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":389576,"byte_end":389585,"line_start":1647,"line_end":1647,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1737},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":389791,"byte_end":389801,"line_start":1655,"line_end":1655,"column_start":8,"column_end":18},"name":"add_assign","qualname":"<NaiveDate as std::ops::AddAssign>::add_assign","value":"fn add_assign(&mut Self, OldDuration)","parent":{"krate":2,"index":3249},"children":[],"decl_id":{"krate":2,"index":3251},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":389774,"byte_end":389783,"line_start":1654,"line_end":1654,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1740},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":390786,"byte_end":390789,"line_start":1683,"line_end":1683,"column_start":8,"column_end":11},"name":"add","qualname":"<NaiveDate as std::ops::Add>::add","value":"fn add(Self, Months) -> Self::Output","parent":{"krate":2,"index":3218},"children":[],"decl_id":{"krate":2,"index":3221},"docs":" An addition of months to `NaiveDate` clamped to valid days in resulting month.","sig":null,"attributes":[{"value":"/ An addition of months to `NaiveDate` clamped to valid days in resulting month.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":389940,"byte_end":390022,"line_start":1663,"line_end":1663,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":390027,"byte_end":390030,"line_start":1664,"line_end":1664,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":390035,"byte_end":390047,"line_start":1665,"line_end":1665,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":390052,"byte_end":390055,"line_start":1666,"line_end":1666,"column_start":5,"column_end":8}},{"value":"/ Panics if the resulting date would be out of range.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":390060,"byte_end":390115,"line_start":1667,"line_end":1667,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":390120,"byte_end":390123,"line_start":1668,"line_end":1668,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":390128,"byte_end":390141,"line_start":1669,"line_end":1669,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":390146,"byte_end":390149,"line_start":1670,"line_end":1670,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":390154,"byte_end":390161,"line_start":1671,"line_end":1671,"column_start":5,"column_end":12}},{"value":"/ use chrono::{Duration, NaiveDate, Months};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":390166,"byte_end":390212,"line_start":1672,"line_end":1672,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":390217,"byte_end":390220,"line_start":1673,"line_end":1673,"column_start":5,"column_end":8}},{"value":"/ let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":390225,"byte_end":390264,"line_start":1674,"line_end":1674,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":390269,"byte_end":390272,"line_start":1675,"line_end":1675,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(from_ymd(2014, 1, 1) + Months::new(1), from_ymd(2014, 2, 1));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":390277,"byte_end":390353,"line_start":1676,"line_end":1676,"column_start":5,"column_end":81}},{"value":"/ assert_eq!(from_ymd(2014, 1, 1) + Months::new(11), from_ymd(2014, 12, 1));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":390358,"byte_end":390436,"line_start":1677,"line_end":1677,"column_start":5,"column_end":83}},{"value":"/ assert_eq!(from_ymd(2014, 1, 1) + Months::new(12), from_ymd(2015, 1, 1));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":390441,"byte_end":390518,"line_start":1678,"line_end":1678,"column_start":5,"column_end":82}},{"value":"/ assert_eq!(from_ymd(2014, 1, 1) + Months::new(13), from_ymd(2015, 2, 1));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":390523,"byte_end":390600,"line_start":1679,"line_end":1679,"column_start":5,"column_end":82}},{"value":"/ assert_eq!(from_ymd(2014, 1, 31) + Months::new(1), from_ymd(2014, 2, 28));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":390605,"byte_end":390683,"line_start":1680,"line_end":1680,"column_start":5,"column_end":83}},{"value":"/ assert_eq!(from_ymd(2020, 1, 31) + Months::new(1), from_ymd(2020, 2, 29));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":390688,"byte_end":390766,"line_start":1681,"line_end":1681,"column_start":5,"column_end":83}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":390771,"byte_end":390778,"line_start":1682,"line_end":1682,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1743},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":391558,"byte_end":391561,"line_start":1708,"line_end":1708,"column_start":8,"column_end":11},"name":"sub","qualname":"<NaiveDate as std::ops::Sub>::sub","value":"fn sub(Self, Months) -> Self::Output","parent":{"krate":2,"index":3223},"children":[],"decl_id":{"krate":2,"index":3226},"docs":" A subtraction of Months from `NaiveDate` clamped to valid days in resulting month.","sig":null,"attributes":[{"value":"/ A subtraction of Months from `NaiveDate` clamped to valid days in resulting month.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":390955,"byte_end":391041,"line_start":1691,"line_end":1691,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":391046,"byte_end":391049,"line_start":1692,"line_end":1692,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":391054,"byte_end":391066,"line_start":1693,"line_end":1693,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":391071,"byte_end":391074,"line_start":1694,"line_end":1694,"column_start":5,"column_end":8}},{"value":"/ Panics if the resulting date would be out of range.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":391079,"byte_end":391134,"line_start":1695,"line_end":1695,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":391139,"byte_end":391142,"line_start":1696,"line_end":1696,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":391147,"byte_end":391160,"line_start":1697,"line_end":1697,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":391165,"byte_end":391168,"line_start":1698,"line_end":1698,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":391173,"byte_end":391180,"line_start":1699,"line_end":1699,"column_start":5,"column_end":12}},{"value":"/ use chrono::{Duration, NaiveDate, Months};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":391185,"byte_end":391231,"line_start":1700,"line_end":1700,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":391236,"byte_end":391239,"line_start":1701,"line_end":1701,"column_start":5,"column_end":8}},{"value":"/ let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":391244,"byte_end":391283,"line_start":1702,"line_end":1702,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":391288,"byte_end":391291,"line_start":1703,"line_end":1703,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(from_ymd(2014, 1, 1) - Months::new(11), from_ymd(2013, 2, 1));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":391296,"byte_end":391373,"line_start":1704,"line_end":1704,"column_start":5,"column_end":82}},{"value":"/ assert_eq!(from_ymd(2014, 1, 1) - Months::new(12), from_ymd(2013, 1, 1));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":391378,"byte_end":391455,"line_start":1705,"line_end":1705,"column_start":5,"column_end":82}},{"value":"/ assert_eq!(from_ymd(2014, 1, 1) - Months::new(13), from_ymd(2012, 12, 1));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":391460,"byte_end":391538,"line_start":1706,"line_end":1706,"column_start":5,"column_end":83}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":391543,"byte_end":391550,"line_start":1707,"line_end":1707,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1746},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":392952,"byte_end":392955,"line_start":1740,"line_end":1740,"column_start":8,"column_end":11},"name":"sub","qualname":"<NaiveDate as std::ops::Sub>::sub","value":"fn sub(Self, OldDuration) -> NaiveDate","parent":{"krate":2,"index":3223},"children":[],"decl_id":{"krate":2,"index":3226},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":392935,"byte_end":392944,"line_start":1739,"line_end":1739,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1748},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":393150,"byte_end":393160,"line_start":1747,"line_end":1747,"column_start":8,"column_end":18},"name":"sub_assign","qualname":"<NaiveDate as std::ops::SubAssign>::sub_assign","value":"fn sub_assign(&mut Self, OldDuration)","parent":{"krate":2,"index":3253},"children":[],"decl_id":{"krate":2,"index":3255},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":393133,"byte_end":393142,"line_start":1746,"line_end":1746,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1751},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":394367,"byte_end":394370,"line_start":1780,"line_end":1780,"column_start":8,"column_end":11},"name":"sub","qualname":"<NaiveDate as std::ops::Sub>::sub","value":"fn sub(Self, NaiveDate) -> OldDuration","parent":{"krate":2,"index":3223},"children":[],"decl_id":{"krate":2,"index":3226},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":394350,"byte_end":394359,"line_start":1779,"line_end":1779,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":3679},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":394597,"byte_end":394618,"line_start":1787,"line_end":1787,"column_start":12,"column_end":33},"name":"NaiveDateDaysIterator","qualname":"::naive::date::NaiveDateDaysIterator","value":"NaiveDateDaysIterator {  }","parent":null,"children":[{"krate":0,"index":3680}],"decl_id":null,"docs":" Iterator over `NaiveDate` with a step size of one day.\n","sig":null,"attributes":[{"value":"/ Iterator over `NaiveDate` with a step size of one day.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":394459,"byte_end":394517,"line_start":1785,"line_end":1785,"column_start":1,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":1754},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":394723,"byte_end":394727,"line_start":1794,"line_end":1794,"column_start":8,"column_end":12},"name":"next","qualname":"<NaiveDateDaysIterator as std::iter::Iterator>::next","value":"fn next(&mut Self) -> Option<Self::Item>","parent":{"krate":2,"index":8193},"children":[],"decl_id":{"krate":2,"index":8195},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1755},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":395062,"byte_end":395071,"line_start":1805,"line_end":1805,"column_start":8,"column_end":17},"name":"size_hint","qualname":"<NaiveDateDaysIterator as std::iter::Iterator>::size_hint","value":"fn size_hint(&Self) -> (usize, Option<usize>)","parent":{"krate":2,"index":8193},"children":[],"decl_id":{"krate":2,"index":8196},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1758},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":395372,"byte_end":395381,"line_start":1814,"line_end":1814,"column_start":8,"column_end":17},"name":"next_back","qualname":"<NaiveDateDaysIterator as std::iter::DoubleEndedIterator>::next_back","value":"fn next_back(&mut Self) -> Option<Self::Item>","parent":{"krate":2,"index":8042},"children":[],"decl_id":{"krate":2,"index":8043},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3700},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":395675,"byte_end":395697,"line_start":1825,"line_end":1825,"column_start":12,"column_end":34},"name":"NaiveDateWeeksIterator","qualname":"::naive::date::NaiveDateWeeksIterator","value":"NaiveDateWeeksIterator {  }","parent":null,"children":[{"krate":0,"index":3701}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1761},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":395803,"byte_end":395807,"line_start":1832,"line_end":1832,"column_start":8,"column_end":12},"name":"next","qualname":"<NaiveDateWeeksIterator as std::iter::Iterator>::next","value":"fn next(&mut Self) -> Option<Self::Item>","parent":{"krate":2,"index":8193},"children":[],"decl_id":{"krate":2,"index":8195},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1762},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":396067,"byte_end":396076,"line_start":1841,"line_end":1841,"column_start":8,"column_end":17},"name":"size_hint","qualname":"<NaiveDateWeeksIterator as std::iter::Iterator>::size_hint","value":"fn size_hint(&Self) -> (usize, Option<usize>)","parent":{"krate":2,"index":8193},"children":[],"decl_id":{"krate":2,"index":8196},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1765},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":396380,"byte_end":396389,"line_start":1850,"line_end":1850,"column_start":8,"column_end":17},"name":"next_back","qualname":"<NaiveDateWeeksIterator as std::iter::DoubleEndedIterator>::next_back","value":"fn next_back(&mut Self) -> Option<Self::Item>","parent":{"krate":2,"index":8042},"children":[],"decl_id":{"krate":2,"index":8043},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1767},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":397701,"byte_end":397704,"line_start":1887,"line_end":1887,"column_start":8,"column_end":11},"name":"fmt","qualname":"<NaiveDate as std::fmt::Debug>::fmt","value":"fn fmt(&Self, &mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":9907},"children":[],"decl_id":{"krate":2,"index":9908},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1769},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":398966,"byte_end":398969,"line_start":1922,"line_end":1922,"column_start":8,"column_end":11},"name":"fmt","qualname":"<NaiveDate as std::fmt::Display>::fmt","value":"fn fmt(&Self, &mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":9914},"children":[],"decl_id":{"krate":2,"index":9915},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1772},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":399603,"byte_end":399611,"line_start":1946,"line_end":1946,"column_start":8,"column_end":16},"name":"from_str","qualname":"<NaiveDate as std::str::FromStr>::from_str","value":"fn from_str(&str) -> ParseResult<NaiveDate>","parent":{"krate":2,"index":12561},"children":[],"decl_id":{"krate":2,"index":12563},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1775},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":400419,"byte_end":400426,"line_start":1975,"line_end":1975,"column_start":8,"column_end":15},"name":"default","qualname":"<NaiveDate as std::default::Default>::default","value":"fn default() -> Self","parent":{"krate":2,"index":3128},"children":[],"decl_id":{"krate":2,"index":3129},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1791},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":403903,"byte_end":403912,"line_start":2070,"line_end":2070,"column_start":12,"column_end":21},"name":"serialize","qualname":"<NaiveDate as serde::Serialize>::serialize","value":"fn serialize<S>(&Self, S) -> Result<S::Ok, S::Error> where S: ser::Serializer","parent":{"krate":16,"index":2117},"children":[],"decl_id":{"krate":16,"index":2118},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1811},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":405188,"byte_end":405199,"line_start":2115,"line_end":2115,"column_start":12,"column_end":23},"name":"deserialize","qualname":"<NaiveDate as serde::Deserialize>::deserialize","value":"fn deserialize<D>(D) -> Result<Self, D::Error> where D: de::Deserializer","parent":{"krate":16,"index":1577},"children":[],"decl_id":{"krate":16,"index":1579},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1925},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":496084,"byte_end":496093,"line_start":12,"line_end":12,"column_start":8,"column_end":17},"name":"serialize","qualname":"<NaiveDateTime as serde::Serialize>::serialize","value":"fn serialize<S>(&Self, S) -> Result<S::Ok, S::Error> where S: ser::Serializer","parent":{"krate":16,"index":2117},"children":[],"decl_id":{"krate":16,"index":2118},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1945},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":497012,"byte_end":497023,"line_start":48,"line_end":48,"column_start":8,"column_end":19},"name":"deserialize","qualname":"<NaiveDateTime as serde::Deserialize>::deserialize","value":"fn deserialize<D>(D) -> Result<Self, D::Error> where D: de::Deserializer","parent":{"krate":16,"index":1577},"children":[],"decl_id":{"krate":16,"index":1579},"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1947},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":497965,"byte_end":497979,"line_start":81,"line_end":81,"column_start":9,"column_end":23},"name":"ts_nanoseconds","qualname":"::naive::datetime::serde::ts_nanoseconds","value":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","parent":null,"children":[{"krate":0,"index":1948},{"krate":0,"index":1951},{"krate":0,"index":1952},{"krate":0,"index":1955},{"krate":0,"index":1958},{"krate":0,"index":1961},{"krate":0,"index":1964},{"krate":0,"index":1966},{"krate":0,"index":1969},{"krate":0,"index":1971}],"decl_id":null,"docs":" Used to serialize/deserialize from nanosecond-precision timestamps","sig":null,"attributes":[{"value":"/ Used to serialize/deserialize from nanosecond-precision timestamps","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":497188,"byte_end":497258,"line_start":56,"line_end":56,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":497259,"byte_end":497262,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ # Example:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":497263,"byte_end":497277,"line_start":58,"line_end":58,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":497278,"byte_end":497281,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":497282,"byte_end":497293,"line_start":60,"line_end":60,"column_start":1,"column_end":12}},{"value":"/ # use chrono::{NaiveDate, NaiveDateTime};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":497294,"byte_end":497339,"line_start":61,"line_end":61,"column_start":1,"column_end":46}},{"value":"/ # use serde_derive::{Deserialize, Serialize};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":497340,"byte_end":497389,"line_start":62,"line_end":62,"column_start":1,"column_end":50}},{"value":"/ use chrono::naive::serde::ts_nanoseconds;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":497390,"byte_end":497435,"line_start":63,"line_end":63,"column_start":1,"column_end":46}},{"value":"/ #[derive(Deserialize, Serialize)]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":497436,"byte_end":497473,"line_start":64,"line_end":64,"column_start":1,"column_end":38}},{"value":"/ struct S {","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":497474,"byte_end":497488,"line_start":65,"line_end":65,"column_start":1,"column_end":15}},{"value":"/     #[serde(with = \"ts_nanoseconds\")]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":497489,"byte_end":497530,"line_start":66,"line_end":66,"column_start":1,"column_end":42}},{"value":"/     time: NaiveDateTime","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":497531,"byte_end":497558,"line_start":67,"line_end":67,"column_start":1,"column_end":28}},{"value":"/ }","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":497559,"byte_end":497564,"line_start":68,"line_end":68,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":497565,"byte_end":497568,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ let time = NaiveDate::from_ymd(2018, 5, 17).and_hms_nano(02, 04, 59, 918355733);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":497569,"byte_end":497653,"line_start":70,"line_end":70,"column_start":1,"column_end":85}},{"value":"/ let my_s = S {","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":497654,"byte_end":497672,"line_start":71,"line_end":71,"column_start":1,"column_end":19}},{"value":"/     time: time.clone(),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":497673,"byte_end":497700,"line_start":72,"line_end":72,"column_start":1,"column_end":28}},{"value":"/ };","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":497701,"byte_end":497707,"line_start":73,"line_end":73,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":497708,"byte_end":497711,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ let as_string = serde_json::to_string(&my_s)?;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":497712,"byte_end":497762,"line_start":75,"line_end":75,"column_start":1,"column_end":51}},{"value":"/ assert_eq!(as_string, r#\"{\"time\":1526522699918355733}\"#);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":497763,"byte_end":497824,"line_start":76,"line_end":76,"column_start":1,"column_end":62}},{"value":"/ let my_s: S = serde_json::from_str(&as_string)?;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":497825,"byte_end":497877,"line_start":77,"line_end":77,"column_start":1,"column_end":53}},{"value":"/ assert_eq!(my_s.time, time);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":497878,"byte_end":497910,"line_start":78,"line_end":78,"column_start":1,"column_end":33}},{"value":"/ # Ok::<(), serde_json::Error>(())","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":497911,"byte_end":497948,"line_start":79,"line_end":79,"column_start":1,"column_end":38}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":497949,"byte_end":497956,"line_start":80,"line_end":80,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":1964},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":498919,"byte_end":498928,"line_start":111,"line_end":111,"column_start":12,"column_end":21},"name":"serialize","qualname":"::naive::datetime::serde::ts_nanoseconds::serialize","value":"fn serialize<S>(&NaiveDateTime, S) -> Result<S::Ok, S::Error> where\nS: ser::Serializer","parent":null,"children":[],"decl_id":null,"docs":" Serialize a datetime into an integer number of nanoseconds since the epoch","sig":null,"attributes":[{"value":"/ Serialize a datetime into an integer number of nanoseconds since the epoch","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":498092,"byte_end":498170,"line_start":88,"line_end":88,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":498175,"byte_end":498178,"line_start":89,"line_end":89,"column_start":5,"column_end":8}},{"value":"/ Intended for use with `serde`s `serialize_with` attribute.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":498183,"byte_end":498245,"line_start":90,"line_end":90,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":498250,"byte_end":498253,"line_start":91,"line_end":91,"column_start":5,"column_end":8}},{"value":"/ # Example:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":498258,"byte_end":498272,"line_start":92,"line_end":92,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":498277,"byte_end":498280,"line_start":93,"line_end":93,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":498285,"byte_end":498296,"line_start":94,"line_end":94,"column_start":5,"column_end":16}},{"value":"/ # use chrono::{NaiveDate, NaiveDateTime};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":498301,"byte_end":498346,"line_start":95,"line_end":95,"column_start":5,"column_end":50}},{"value":"/ # use serde_derive::Serialize;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":498351,"byte_end":498385,"line_start":96,"line_end":96,"column_start":5,"column_end":39}},{"value":"/ use chrono::naive::serde::ts_nanoseconds::serialize as to_nano_ts;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":498390,"byte_end":498460,"line_start":97,"line_end":97,"column_start":5,"column_end":75}},{"value":"/ #[derive(Serialize)]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":498465,"byte_end":498489,"line_start":98,"line_end":98,"column_start":5,"column_end":29}},{"value":"/ struct S {","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":498494,"byte_end":498508,"line_start":99,"line_end":99,"column_start":5,"column_end":19}},{"value":"/     #[serde(serialize_with = \"to_nano_ts\")]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":498513,"byte_end":498560,"line_start":100,"line_end":100,"column_start":5,"column_end":52}},{"value":"/     time: NaiveDateTime","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":498565,"byte_end":498592,"line_start":101,"line_end":101,"column_start":5,"column_end":32}},{"value":"/ }","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":498597,"byte_end":498602,"line_start":102,"line_end":102,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":498607,"byte_end":498610,"line_start":103,"line_end":103,"column_start":5,"column_end":8}},{"value":"/ let my_s = S {","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":498615,"byte_end":498633,"line_start":104,"line_end":104,"column_start":5,"column_end":23}},{"value":"/     time: NaiveDate::from_ymd(2018, 5, 17).and_hms_nano(02, 04, 59, 918355733),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":498638,"byte_end":498721,"line_start":105,"line_end":105,"column_start":5,"column_end":88}},{"value":"/ };","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":498726,"byte_end":498732,"line_start":106,"line_end":106,"column_start":5,"column_end":11}},{"value":"/ let as_string = serde_json::to_string(&my_s)?;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":498737,"byte_end":498787,"line_start":107,"line_end":107,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(as_string, r#\"{\"time\":1526522699918355733}\"#);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":498792,"byte_end":498853,"line_start":108,"line_end":108,"column_start":5,"column_end":66}},{"value":"/ # Ok::<(), serde_json::Error>(())","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":498858,"byte_end":498895,"line_start":109,"line_end":109,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":498900,"byte_end":498907,"line_start":110,"line_end":110,"column_start":5,"column_end":12}}]},{"kind":"Function","id":{"krate":0,"index":1966},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":499756,"byte_end":499767,"line_start":137,"line_end":137,"column_start":12,"column_end":23},"name":"deserialize","qualname":"::naive::datetime::serde::ts_nanoseconds::deserialize","value":"fn deserialize<'de, D>(D) -> Result<NaiveDateTime, D::Error> where\nD: de::Deserializer","parent":null,"children":[],"decl_id":null,"docs":" Deserialize a `NaiveDateTime` from a nanoseconds timestamp","sig":null,"attributes":[{"value":"/ Deserialize a `NaiveDateTime` from a nanoseconds timestamp","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":499104,"byte_end":499166,"line_start":118,"line_end":118,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":499171,"byte_end":499174,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ Intended for use with `serde`s `deserialize_with` attribute.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":499179,"byte_end":499243,"line_start":120,"line_end":120,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":499248,"byte_end":499251,"line_start":121,"line_end":121,"column_start":5,"column_end":8}},{"value":"/ # Example:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":499256,"byte_end":499270,"line_start":122,"line_end":122,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":499275,"byte_end":499278,"line_start":123,"line_end":123,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":499283,"byte_end":499294,"line_start":124,"line_end":124,"column_start":5,"column_end":16}},{"value":"/ # use chrono::NaiveDateTime;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":499299,"byte_end":499331,"line_start":125,"line_end":125,"column_start":5,"column_end":37}},{"value":"/ # use serde_derive::Deserialize;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":499336,"byte_end":499372,"line_start":126,"line_end":126,"column_start":5,"column_end":41}},{"value":"/ use chrono::naive::serde::ts_nanoseconds::deserialize as from_nano_ts;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":499377,"byte_end":499451,"line_start":127,"line_end":127,"column_start":5,"column_end":79}},{"value":"/ #[derive(Deserialize)]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":499456,"byte_end":499482,"line_start":128,"line_end":128,"column_start":5,"column_end":31}},{"value":"/ struct S {","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":499487,"byte_end":499501,"line_start":129,"line_end":129,"column_start":5,"column_end":19}},{"value":"/     #[serde(deserialize_with = \"from_nano_ts\")]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":499506,"byte_end":499557,"line_start":130,"line_end":130,"column_start":5,"column_end":56}},{"value":"/     time: NaiveDateTime","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":499562,"byte_end":499589,"line_start":131,"line_end":131,"column_start":5,"column_end":32}},{"value":"/ }","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":499594,"byte_end":499599,"line_start":132,"line_end":132,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":499604,"byte_end":499607,"line_start":133,"line_end":133,"column_start":5,"column_end":8}},{"value":"/ let my_s: S = serde_json::from_str(r#\"{ \"time\": 1526522699918355733 }\"#)?;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":499612,"byte_end":499690,"line_start":134,"line_end":134,"column_start":5,"column_end":83}},{"value":"/ # Ok::<(), serde_json::Error>(())","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":499695,"byte_end":499732,"line_start":135,"line_end":135,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":499737,"byte_end":499744,"line_start":136,"line_end":136,"column_start":5,"column_end":12}}]},{"kind":"Mod","id":{"krate":0,"index":1981},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":501727,"byte_end":501748,"line_start":201,"line_end":201,"column_start":9,"column_end":30},"name":"ts_nanoseconds_option","qualname":"::naive::datetime::serde::ts_nanoseconds_option","value":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","parent":null,"children":[{"krate":0,"index":1982},{"krate":0,"index":1985},{"krate":0,"index":1986},{"krate":0,"index":1989},{"krate":0,"index":1992},{"krate":0,"index":1993},{"krate":0,"index":1995},{"krate":0,"index":1998},{"krate":0,"index":2000},{"krate":0,"index":2003},{"krate":0,"index":2005}],"decl_id":null,"docs":" Ser/de to/from optional timestamps in nanoseconds","sig":null,"attributes":[{"value":"/ Ser/de to/from optional timestamps in nanoseconds","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":500874,"byte_end":500927,"line_start":174,"line_end":174,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":500928,"byte_end":500931,"line_start":175,"line_end":175,"column_start":1,"column_end":4}},{"value":"/ Intended for use with `serde`'s `with` attribute.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":500932,"byte_end":500985,"line_start":176,"line_end":176,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":500986,"byte_end":500989,"line_start":177,"line_end":177,"column_start":1,"column_end":4}},{"value":"/ # Example:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":500990,"byte_end":501004,"line_start":178,"line_end":178,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":501005,"byte_end":501008,"line_start":179,"line_end":179,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":501009,"byte_end":501020,"line_start":180,"line_end":180,"column_start":1,"column_end":12}},{"value":"/ # use chrono::naive::{NaiveDate, NaiveDateTime};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":501021,"byte_end":501073,"line_start":181,"line_end":181,"column_start":1,"column_end":53}},{"value":"/ # use serde_derive::{Deserialize, Serialize};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":501074,"byte_end":501123,"line_start":182,"line_end":182,"column_start":1,"column_end":50}},{"value":"/ use chrono::naive::serde::ts_nanoseconds_option;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":501124,"byte_end":501176,"line_start":183,"line_end":183,"column_start":1,"column_end":53}},{"value":"/ #[derive(Deserialize, Serialize)]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":501177,"byte_end":501214,"line_start":184,"line_end":184,"column_start":1,"column_end":38}},{"value":"/ struct S {","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":501215,"byte_end":501229,"line_start":185,"line_end":185,"column_start":1,"column_end":15}},{"value":"/     #[serde(with = \"ts_nanoseconds_option\")]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":501230,"byte_end":501278,"line_start":186,"line_end":186,"column_start":1,"column_end":49}},{"value":"/     time: Option<NaiveDateTime>","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":501279,"byte_end":501314,"line_start":187,"line_end":187,"column_start":1,"column_end":36}},{"value":"/ }","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":501315,"byte_end":501320,"line_start":188,"line_end":188,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":501321,"byte_end":501324,"line_start":189,"line_end":189,"column_start":1,"column_end":4}},{"value":"/ let time = Some(NaiveDate::from_ymd(2018, 5, 17).and_hms_nano(02, 04, 59, 918355733));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":501325,"byte_end":501415,"line_start":190,"line_end":190,"column_start":1,"column_end":91}},{"value":"/ let my_s = S {","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":501416,"byte_end":501434,"line_start":191,"line_end":191,"column_start":1,"column_end":19}},{"value":"/     time: time.clone(),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":501435,"byte_end":501462,"line_start":192,"line_end":192,"column_start":1,"column_end":28}},{"value":"/ };","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":501463,"byte_end":501469,"line_start":193,"line_end":193,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":501470,"byte_end":501473,"line_start":194,"line_end":194,"column_start":1,"column_end":4}},{"value":"/ let as_string = serde_json::to_string(&my_s)?;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":501474,"byte_end":501524,"line_start":195,"line_end":195,"column_start":1,"column_end":51}},{"value":"/ assert_eq!(as_string, r#\"{\"time\":1526522699918355733}\"#);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":501525,"byte_end":501586,"line_start":196,"line_end":196,"column_start":1,"column_end":62}},{"value":"/ let my_s: S = serde_json::from_str(&as_string)?;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":501587,"byte_end":501639,"line_start":197,"line_end":197,"column_start":1,"column_end":53}},{"value":"/ assert_eq!(my_s.time, time);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":501640,"byte_end":501672,"line_start":198,"line_end":198,"column_start":1,"column_end":33}},{"value":"/ # Ok::<(), serde_json::Error>(())","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":501673,"byte_end":501710,"line_start":199,"line_end":199,"column_start":1,"column_end":38}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":501711,"byte_end":501718,"line_start":200,"line_end":200,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":1998},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":502761,"byte_end":502770,"line_start":231,"line_end":231,"column_start":12,"column_end":21},"name":"serialize","qualname":"::naive::datetime::serde::ts_nanoseconds_option::serialize","value":"fn serialize<S>(&Option<NaiveDateTime>, S) -> Result<S::Ok, S::Error> where\nS: ser::Serializer","parent":null,"children":[],"decl_id":null,"docs":" Serialize a datetime into an integer number of nanoseconds since the epoch or none","sig":null,"attributes":[{"value":"/ Serialize a datetime into an integer number of nanoseconds since the epoch or none","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":501892,"byte_end":501978,"line_start":208,"line_end":208,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":501983,"byte_end":501986,"line_start":209,"line_end":209,"column_start":5,"column_end":8}},{"value":"/ Intended for use with `serde`s `serialize_with` attribute.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":501991,"byte_end":502053,"line_start":210,"line_end":210,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":502058,"byte_end":502061,"line_start":211,"line_end":211,"column_start":5,"column_end":8}},{"value":"/ # Example:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":502066,"byte_end":502080,"line_start":212,"line_end":212,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":502085,"byte_end":502088,"line_start":213,"line_end":213,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":502093,"byte_end":502104,"line_start":214,"line_end":214,"column_start":5,"column_end":16}},{"value":"/ # use chrono::naive::{NaiveDate, NaiveDateTime};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":502109,"byte_end":502161,"line_start":215,"line_end":215,"column_start":5,"column_end":57}},{"value":"/ # use serde_derive::Serialize;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":502166,"byte_end":502200,"line_start":216,"line_end":216,"column_start":5,"column_end":39}},{"value":"/ use chrono::naive::serde::ts_nanoseconds_option::serialize as to_nano_tsopt;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":502205,"byte_end":502285,"line_start":217,"line_end":217,"column_start":5,"column_end":85}},{"value":"/ #[derive(Serialize)]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":502290,"byte_end":502314,"line_start":218,"line_end":218,"column_start":5,"column_end":29}},{"value":"/ struct S {","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":502319,"byte_end":502333,"line_start":219,"line_end":219,"column_start":5,"column_end":19}},{"value":"/     #[serde(serialize_with = \"to_nano_tsopt\")]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":502338,"byte_end":502388,"line_start":220,"line_end":220,"column_start":5,"column_end":55}},{"value":"/     time: Option<NaiveDateTime>","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":502393,"byte_end":502428,"line_start":221,"line_end":221,"column_start":5,"column_end":40}},{"value":"/ }","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":502433,"byte_end":502438,"line_start":222,"line_end":222,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":502443,"byte_end":502446,"line_start":223,"line_end":223,"column_start":5,"column_end":8}},{"value":"/ let my_s = S {","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":502451,"byte_end":502469,"line_start":224,"line_end":224,"column_start":5,"column_end":23}},{"value":"/     time: Some(NaiveDate::from_ymd(2018, 5, 17).and_hms_nano(02, 04, 59, 918355733)),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":502474,"byte_end":502563,"line_start":225,"line_end":225,"column_start":5,"column_end":94}},{"value":"/ };","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":502568,"byte_end":502574,"line_start":226,"line_end":226,"column_start":5,"column_end":11}},{"value":"/ let as_string = serde_json::to_string(&my_s)?;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":502579,"byte_end":502629,"line_start":227,"line_end":227,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(as_string, r#\"{\"time\":1526522699918355733}\"#);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":502634,"byte_end":502695,"line_start":228,"line_end":228,"column_start":5,"column_end":66}},{"value":"/ # Ok::<(), serde_json::Error>(())","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":502700,"byte_end":502737,"line_start":229,"line_end":229,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":502742,"byte_end":502749,"line_start":230,"line_end":230,"column_start":5,"column_end":12}}]},{"kind":"Function","id":{"krate":0,"index":2000},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":503758,"byte_end":503769,"line_start":260,"line_end":260,"column_start":12,"column_end":23},"name":"deserialize","qualname":"::naive::datetime::serde::ts_nanoseconds_option::deserialize","value":"fn deserialize<'de, D>(D) -> Result<Option<NaiveDateTime>, D::Error> where\nD: de::Deserializer","parent":null,"children":[],"decl_id":null,"docs":" Deserialize a `NaiveDateTime` from a nanosecond timestamp or none","sig":null,"attributes":[{"value":"/ Deserialize a `NaiveDateTime` from a nanosecond timestamp or none","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":503058,"byte_end":503127,"line_start":241,"line_end":241,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":503132,"byte_end":503135,"line_start":242,"line_end":242,"column_start":5,"column_end":8}},{"value":"/ Intended for use with `serde`s `deserialize_with` attribute.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":503140,"byte_end":503204,"line_start":243,"line_end":243,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":503209,"byte_end":503212,"line_start":244,"line_end":244,"column_start":5,"column_end":8}},{"value":"/ # Example:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":503217,"byte_end":503231,"line_start":245,"line_end":245,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":503236,"byte_end":503239,"line_start":246,"line_end":246,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":503244,"byte_end":503255,"line_start":247,"line_end":247,"column_start":5,"column_end":16}},{"value":"/ # use chrono::naive::{NaiveDate, NaiveDateTime};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":503260,"byte_end":503312,"line_start":248,"line_end":248,"column_start":5,"column_end":57}},{"value":"/ # use serde_derive::Deserialize;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":503317,"byte_end":503353,"line_start":249,"line_end":249,"column_start":5,"column_end":41}},{"value":"/ use chrono::naive::serde::ts_nanoseconds_option::deserialize as from_nano_tsopt;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":503358,"byte_end":503442,"line_start":250,"line_end":250,"column_start":5,"column_end":89}},{"value":"/ #[derive(Deserialize)]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":503447,"byte_end":503473,"line_start":251,"line_end":251,"column_start":5,"column_end":31}},{"value":"/ struct S {","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":503478,"byte_end":503492,"line_start":252,"line_end":252,"column_start":5,"column_end":19}},{"value":"/     #[serde(deserialize_with = \"from_nano_tsopt\")]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":503497,"byte_end":503551,"line_start":253,"line_end":253,"column_start":5,"column_end":59}},{"value":"/     time: Option<NaiveDateTime>","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":503556,"byte_end":503591,"line_start":254,"line_end":254,"column_start":5,"column_end":40}},{"value":"/ }","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":503596,"byte_end":503601,"line_start":255,"line_end":255,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":503606,"byte_end":503609,"line_start":256,"line_end":256,"column_start":5,"column_end":8}},{"value":"/ let my_s: S = serde_json::from_str(r#\"{ \"time\": 1526522699918355733 }\"#)?;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":503614,"byte_end":503692,"line_start":257,"line_end":257,"column_start":5,"column_end":83}},{"value":"/ # Ok::<(), serde_json::Error>(())","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":503697,"byte_end":503734,"line_start":258,"line_end":258,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":503739,"byte_end":503746,"line_start":259,"line_end":259,"column_start":5,"column_end":12}}]},{"kind":"Mod","id":{"krate":0,"index":2015},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":505748,"byte_end":505763,"line_start":327,"line_end":327,"column_start":9,"column_end":24},"name":"ts_microseconds","qualname":"::naive::datetime::serde::ts_microseconds","value":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","parent":null,"children":[{"krate":0,"index":2016},{"krate":0,"index":2019},{"krate":0,"index":2020},{"krate":0,"index":2023},{"krate":0,"index":2026},{"krate":0,"index":2029},{"krate":0,"index":2032},{"krate":0,"index":2034},{"krate":0,"index":2037},{"krate":0,"index":2039}],"decl_id":null,"docs":" Used to serialize/deserialize from microsecond-precision timestamps","sig":null,"attributes":[{"value":"/ Used to serialize/deserialize from microsecond-precision timestamps","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":504973,"byte_end":505044,"line_start":302,"line_end":302,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":505045,"byte_end":505048,"line_start":303,"line_end":303,"column_start":1,"column_end":4}},{"value":"/ # Example:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":505049,"byte_end":505063,"line_start":304,"line_end":304,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":505064,"byte_end":505067,"line_start":305,"line_end":305,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":505068,"byte_end":505079,"line_start":306,"line_end":306,"column_start":1,"column_end":12}},{"value":"/ # use chrono::{NaiveDate, NaiveDateTime};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":505080,"byte_end":505125,"line_start":307,"line_end":307,"column_start":1,"column_end":46}},{"value":"/ # use serde_derive::{Deserialize, Serialize};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":505126,"byte_end":505175,"line_start":308,"line_end":308,"column_start":1,"column_end":50}},{"value":"/ use chrono::naive::serde::ts_microseconds;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":505176,"byte_end":505222,"line_start":309,"line_end":309,"column_start":1,"column_end":47}},{"value":"/ #[derive(Deserialize, Serialize)]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":505223,"byte_end":505260,"line_start":310,"line_end":310,"column_start":1,"column_end":38}},{"value":"/ struct S {","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":505261,"byte_end":505275,"line_start":311,"line_end":311,"column_start":1,"column_end":15}},{"value":"/     #[serde(with = \"ts_microseconds\")]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":505276,"byte_end":505318,"line_start":312,"line_end":312,"column_start":1,"column_end":43}},{"value":"/     time: NaiveDateTime","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":505319,"byte_end":505346,"line_start":313,"line_end":313,"column_start":1,"column_end":28}},{"value":"/ }","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":505347,"byte_end":505352,"line_start":314,"line_end":314,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":505353,"byte_end":505356,"line_start":315,"line_end":315,"column_start":1,"column_end":4}},{"value":"/ let time = NaiveDate::from_ymd(2018, 5, 17).and_hms_micro(02, 04, 59, 918355);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":505357,"byte_end":505439,"line_start":316,"line_end":316,"column_start":1,"column_end":83}},{"value":"/ let my_s = S {","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":505440,"byte_end":505458,"line_start":317,"line_end":317,"column_start":1,"column_end":19}},{"value":"/     time: time.clone(),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":505459,"byte_end":505486,"line_start":318,"line_end":318,"column_start":1,"column_end":28}},{"value":"/ };","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":505487,"byte_end":505493,"line_start":319,"line_end":319,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":505494,"byte_end":505497,"line_start":320,"line_end":320,"column_start":1,"column_end":4}},{"value":"/ let as_string = serde_json::to_string(&my_s)?;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":505498,"byte_end":505548,"line_start":321,"line_end":321,"column_start":1,"column_end":51}},{"value":"/ assert_eq!(as_string, r#\"{\"time\":1526522699918355}\"#);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":505549,"byte_end":505607,"line_start":322,"line_end":322,"column_start":1,"column_end":59}},{"value":"/ let my_s: S = serde_json::from_str(&as_string)?;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":505608,"byte_end":505660,"line_start":323,"line_end":323,"column_start":1,"column_end":53}},{"value":"/ assert_eq!(my_s.time, time);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":505661,"byte_end":505693,"line_start":324,"line_end":324,"column_start":1,"column_end":33}},{"value":"/ # Ok::<(), serde_json::Error>(())","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":505694,"byte_end":505731,"line_start":325,"line_end":325,"column_start":1,"column_end":38}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":505732,"byte_end":505739,"line_start":326,"line_end":326,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":2032},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":506702,"byte_end":506711,"line_start":357,"line_end":357,"column_start":12,"column_end":21},"name":"serialize","qualname":"::naive::datetime::serde::ts_microseconds::serialize","value":"fn serialize<S>(&NaiveDateTime, S) -> Result<S::Ok, S::Error> where\nS: ser::Serializer","parent":null,"children":[],"decl_id":null,"docs":" Serialize a datetime into an integer number of microseconds since the epoch","sig":null,"attributes":[{"value":"/ Serialize a datetime into an integer number of microseconds since the epoch","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":505876,"byte_end":505955,"line_start":334,"line_end":334,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":505960,"byte_end":505963,"line_start":335,"line_end":335,"column_start":5,"column_end":8}},{"value":"/ Intended for use with `serde`s `serialize_with` attribute.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":505968,"byte_end":506030,"line_start":336,"line_end":336,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":506035,"byte_end":506038,"line_start":337,"line_end":337,"column_start":5,"column_end":8}},{"value":"/ # Example:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":506043,"byte_end":506057,"line_start":338,"line_end":338,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":506062,"byte_end":506065,"line_start":339,"line_end":339,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":506070,"byte_end":506081,"line_start":340,"line_end":340,"column_start":5,"column_end":16}},{"value":"/ # use chrono::{NaiveDate, NaiveDateTime};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":506086,"byte_end":506131,"line_start":341,"line_end":341,"column_start":5,"column_end":50}},{"value":"/ # use serde_derive::Serialize;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":506136,"byte_end":506170,"line_start":342,"line_end":342,"column_start":5,"column_end":39}},{"value":"/ use chrono::naive::serde::ts_microseconds::serialize as to_micro_ts;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":506175,"byte_end":506247,"line_start":343,"line_end":343,"column_start":5,"column_end":77}},{"value":"/ #[derive(Serialize)]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":506252,"byte_end":506276,"line_start":344,"line_end":344,"column_start":5,"column_end":29}},{"value":"/ struct S {","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":506281,"byte_end":506295,"line_start":345,"line_end":345,"column_start":5,"column_end":19}},{"value":"/     #[serde(serialize_with = \"to_micro_ts\")]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":506300,"byte_end":506348,"line_start":346,"line_end":346,"column_start":5,"column_end":53}},{"value":"/     time: NaiveDateTime","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":506353,"byte_end":506380,"line_start":347,"line_end":347,"column_start":5,"column_end":32}},{"value":"/ }","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":506385,"byte_end":506390,"line_start":348,"line_end":348,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":506395,"byte_end":506398,"line_start":349,"line_end":349,"column_start":5,"column_end":8}},{"value":"/ let my_s = S {","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":506403,"byte_end":506421,"line_start":350,"line_end":350,"column_start":5,"column_end":23}},{"value":"/     time: NaiveDate::from_ymd(2018, 5, 17).and_hms_micro(02, 04, 59, 918355),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":506426,"byte_end":506507,"line_start":351,"line_end":351,"column_start":5,"column_end":86}},{"value":"/ };","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":506512,"byte_end":506518,"line_start":352,"line_end":352,"column_start":5,"column_end":11}},{"value":"/ let as_string = serde_json::to_string(&my_s)?;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":506523,"byte_end":506573,"line_start":353,"line_end":353,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(as_string, r#\"{\"time\":1526522699918355}\"#);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":506578,"byte_end":506636,"line_start":354,"line_end":354,"column_start":5,"column_end":63}},{"value":"/ # Ok::<(), serde_json::Error>(())","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":506641,"byte_end":506678,"line_start":355,"line_end":355,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":506683,"byte_end":506690,"line_start":356,"line_end":356,"column_start":5,"column_end":12}}]},{"kind":"Function","id":{"krate":0,"index":2034},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":507541,"byte_end":507552,"line_start":383,"line_end":383,"column_start":12,"column_end":23},"name":"deserialize","qualname":"::naive::datetime::serde::ts_microseconds::deserialize","value":"fn deserialize<'de, D>(D) -> Result<NaiveDateTime, D::Error> where\nD: de::Deserializer","parent":null,"children":[],"decl_id":null,"docs":" Deserialize a `NaiveDateTime` from a microseconds timestamp","sig":null,"attributes":[{"value":"/ Deserialize a `NaiveDateTime` from a microseconds timestamp","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":506888,"byte_end":506951,"line_start":364,"line_end":364,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":506956,"byte_end":506959,"line_start":365,"line_end":365,"column_start":5,"column_end":8}},{"value":"/ Intended for use with `serde`s `deserialize_with` attribute.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":506964,"byte_end":507028,"line_start":366,"line_end":366,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":507033,"byte_end":507036,"line_start":367,"line_end":367,"column_start":5,"column_end":8}},{"value":"/ # Example:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":507041,"byte_end":507055,"line_start":368,"line_end":368,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":507060,"byte_end":507063,"line_start":369,"line_end":369,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":507068,"byte_end":507079,"line_start":370,"line_end":370,"column_start":5,"column_end":16}},{"value":"/ # use chrono::NaiveDateTime;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":507084,"byte_end":507116,"line_start":371,"line_end":371,"column_start":5,"column_end":37}},{"value":"/ # use serde_derive::Deserialize;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":507121,"byte_end":507157,"line_start":372,"line_end":372,"column_start":5,"column_end":41}},{"value":"/ use chrono::naive::serde::ts_microseconds::deserialize as from_micro_ts;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":507162,"byte_end":507238,"line_start":373,"line_end":373,"column_start":5,"column_end":81}},{"value":"/ #[derive(Deserialize)]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":507243,"byte_end":507269,"line_start":374,"line_end":374,"column_start":5,"column_end":31}},{"value":"/ struct S {","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":507274,"byte_end":507288,"line_start":375,"line_end":375,"column_start":5,"column_end":19}},{"value":"/     #[serde(deserialize_with = \"from_micro_ts\")]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":507293,"byte_end":507345,"line_start":376,"line_end":376,"column_start":5,"column_end":57}},{"value":"/     time: NaiveDateTime","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":507350,"byte_end":507377,"line_start":377,"line_end":377,"column_start":5,"column_end":32}},{"value":"/ }","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":507382,"byte_end":507387,"line_start":378,"line_end":378,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":507392,"byte_end":507395,"line_start":379,"line_end":379,"column_start":5,"column_end":8}},{"value":"/ let my_s: S = serde_json::from_str(r#\"{ \"time\": 1526522699918355 }\"#)?;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":507400,"byte_end":507475,"line_start":380,"line_end":380,"column_start":5,"column_end":80}},{"value":"/ # Ok::<(), serde_json::Error>(())","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":507480,"byte_end":507517,"line_start":381,"line_end":381,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":507522,"byte_end":507529,"line_start":382,"line_end":382,"column_start":5,"column_end":12}}]},{"kind":"Mod","id":{"krate":0,"index":2049},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":509554,"byte_end":509576,"line_start":450,"line_end":450,"column_start":9,"column_end":31},"name":"ts_microseconds_option","qualname":"::naive::datetime::serde::ts_microseconds_option","value":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","parent":null,"children":[{"krate":0,"index":2050},{"krate":0,"index":2053},{"krate":0,"index":2054},{"krate":0,"index":2057},{"krate":0,"index":2060},{"krate":0,"index":2061},{"krate":0,"index":2063},{"krate":0,"index":2066},{"krate":0,"index":2068},{"krate":0,"index":2071},{"krate":0,"index":2073}],"decl_id":null,"docs":" Ser/de to/from optional timestamps in microseconds","sig":null,"attributes":[{"value":"/ Ser/de to/from optional timestamps in microseconds","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":508703,"byte_end":508757,"line_start":423,"line_end":423,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":508758,"byte_end":508761,"line_start":424,"line_end":424,"column_start":1,"column_end":4}},{"value":"/ Intended for use with `serde`'s `with` attribute.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":508762,"byte_end":508815,"line_start":425,"line_end":425,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":508816,"byte_end":508819,"line_start":426,"line_end":426,"column_start":1,"column_end":4}},{"value":"/ # Example:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":508820,"byte_end":508834,"line_start":427,"line_end":427,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":508835,"byte_end":508838,"line_start":428,"line_end":428,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":508839,"byte_end":508850,"line_start":429,"line_end":429,"column_start":1,"column_end":12}},{"value":"/ # use chrono::naive::{NaiveDate, NaiveDateTime};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":508851,"byte_end":508903,"line_start":430,"line_end":430,"column_start":1,"column_end":53}},{"value":"/ # use serde_derive::{Deserialize, Serialize};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":508904,"byte_end":508953,"line_start":431,"line_end":431,"column_start":1,"column_end":50}},{"value":"/ use chrono::naive::serde::ts_microseconds_option;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":508954,"byte_end":509007,"line_start":432,"line_end":432,"column_start":1,"column_end":54}},{"value":"/ #[derive(Deserialize, Serialize)]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":509008,"byte_end":509045,"line_start":433,"line_end":433,"column_start":1,"column_end":38}},{"value":"/ struct S {","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":509046,"byte_end":509060,"line_start":434,"line_end":434,"column_start":1,"column_end":15}},{"value":"/     #[serde(with = \"ts_microseconds_option\")]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":509061,"byte_end":509110,"line_start":435,"line_end":435,"column_start":1,"column_end":50}},{"value":"/     time: Option<NaiveDateTime>","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":509111,"byte_end":509146,"line_start":436,"line_end":436,"column_start":1,"column_end":36}},{"value":"/ }","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":509147,"byte_end":509152,"line_start":437,"line_end":437,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":509153,"byte_end":509156,"line_start":438,"line_end":438,"column_start":1,"column_end":4}},{"value":"/ let time = Some(NaiveDate::from_ymd(2018, 5, 17).and_hms_micro(02, 04, 59, 918355));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":509157,"byte_end":509245,"line_start":439,"line_end":439,"column_start":1,"column_end":89}},{"value":"/ let my_s = S {","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":509246,"byte_end":509264,"line_start":440,"line_end":440,"column_start":1,"column_end":19}},{"value":"/     time: time.clone(),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":509265,"byte_end":509292,"line_start":441,"line_end":441,"column_start":1,"column_end":28}},{"value":"/ };","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":509293,"byte_end":509299,"line_start":442,"line_end":442,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":509300,"byte_end":509303,"line_start":443,"line_end":443,"column_start":1,"column_end":4}},{"value":"/ let as_string = serde_json::to_string(&my_s)?;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":509304,"byte_end":509354,"line_start":444,"line_end":444,"column_start":1,"column_end":51}},{"value":"/ assert_eq!(as_string, r#\"{\"time\":1526522699918355}\"#);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":509355,"byte_end":509413,"line_start":445,"line_end":445,"column_start":1,"column_end":59}},{"value":"/ let my_s: S = serde_json::from_str(&as_string)?;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":509414,"byte_end":509466,"line_start":446,"line_end":446,"column_start":1,"column_end":53}},{"value":"/ assert_eq!(my_s.time, time);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":509467,"byte_end":509499,"line_start":447,"line_end":447,"column_start":1,"column_end":33}},{"value":"/ # Ok::<(), serde_json::Error>(())","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":509500,"byte_end":509537,"line_start":448,"line_end":448,"column_start":1,"column_end":38}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":509538,"byte_end":509545,"line_start":449,"line_end":449,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":2066},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":510590,"byte_end":510599,"line_start":480,"line_end":480,"column_start":12,"column_end":21},"name":"serialize","qualname":"::naive::datetime::serde::ts_microseconds_option::serialize","value":"fn serialize<S>(&Option<NaiveDateTime>, S) -> Result<S::Ok, S::Error> where\nS: ser::Serializer","parent":null,"children":[],"decl_id":null,"docs":" Serialize a datetime into an integer number of microseconds since the epoch or none","sig":null,"attributes":[{"value":"/ Serialize a datetime into an integer number of microseconds since the epoch or none","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":509722,"byte_end":509809,"line_start":457,"line_end":457,"column_start":5,"column_end":92}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":509814,"byte_end":509817,"line_start":458,"line_end":458,"column_start":5,"column_end":8}},{"value":"/ Intended for use with `serde`s `serialize_with` attribute.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":509822,"byte_end":509884,"line_start":459,"line_end":459,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":509889,"byte_end":509892,"line_start":460,"line_end":460,"column_start":5,"column_end":8}},{"value":"/ # Example:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":509897,"byte_end":509911,"line_start":461,"line_end":461,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":509916,"byte_end":509919,"line_start":462,"line_end":462,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":509924,"byte_end":509935,"line_start":463,"line_end":463,"column_start":5,"column_end":16}},{"value":"/ # use chrono::naive::{NaiveDate, NaiveDateTime};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":509940,"byte_end":509992,"line_start":464,"line_end":464,"column_start":5,"column_end":57}},{"value":"/ # use serde_derive::Serialize;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":509997,"byte_end":510031,"line_start":465,"line_end":465,"column_start":5,"column_end":39}},{"value":"/ use chrono::naive::serde::ts_microseconds_option::serialize as to_micro_tsopt;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":510036,"byte_end":510118,"line_start":466,"line_end":466,"column_start":5,"column_end":87}},{"value":"/ #[derive(Serialize)]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":510123,"byte_end":510147,"line_start":467,"line_end":467,"column_start":5,"column_end":29}},{"value":"/ struct S {","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":510152,"byte_end":510166,"line_start":468,"line_end":468,"column_start":5,"column_end":19}},{"value":"/     #[serde(serialize_with = \"to_micro_tsopt\")]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":510171,"byte_end":510222,"line_start":469,"line_end":469,"column_start":5,"column_end":56}},{"value":"/     time: Option<NaiveDateTime>","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":510227,"byte_end":510262,"line_start":470,"line_end":470,"column_start":5,"column_end":40}},{"value":"/ }","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":510267,"byte_end":510272,"line_start":471,"line_end":471,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":510277,"byte_end":510280,"line_start":472,"line_end":472,"column_start":5,"column_end":8}},{"value":"/ let my_s = S {","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":510285,"byte_end":510303,"line_start":473,"line_end":473,"column_start":5,"column_end":23}},{"value":"/     time: Some(NaiveDate::from_ymd(2018, 5, 17).and_hms_micro(02, 04, 59, 918355)),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":510308,"byte_end":510395,"line_start":474,"line_end":474,"column_start":5,"column_end":92}},{"value":"/ };","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":510400,"byte_end":510406,"line_start":475,"line_end":475,"column_start":5,"column_end":11}},{"value":"/ let as_string = serde_json::to_string(&my_s)?;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":510411,"byte_end":510461,"line_start":476,"line_end":476,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(as_string, r#\"{\"time\":1526522699918355}\"#);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":510466,"byte_end":510524,"line_start":477,"line_end":477,"column_start":5,"column_end":63}},{"value":"/ # Ok::<(), serde_json::Error>(())","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":510529,"byte_end":510566,"line_start":478,"line_end":478,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":510571,"byte_end":510578,"line_start":479,"line_end":479,"column_start":5,"column_end":12}}]},{"kind":"Function","id":{"krate":0,"index":2068},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":511588,"byte_end":511599,"line_start":509,"line_end":509,"column_start":12,"column_end":23},"name":"deserialize","qualname":"::naive::datetime::serde::ts_microseconds_option::deserialize","value":"fn deserialize<'de, D>(D) -> Result<Option<NaiveDateTime>, D::Error> where\nD: de::Deserializer","parent":null,"children":[],"decl_id":null,"docs":" Deserialize a `NaiveDateTime` from a nanosecond timestamp or none","sig":null,"attributes":[{"value":"/ Deserialize a `NaiveDateTime` from a nanosecond timestamp or none","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":510888,"byte_end":510957,"line_start":490,"line_end":490,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":510962,"byte_end":510965,"line_start":491,"line_end":491,"column_start":5,"column_end":8}},{"value":"/ Intended for use with `serde`s `deserialize_with` attribute.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":510970,"byte_end":511034,"line_start":492,"line_end":492,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":511039,"byte_end":511042,"line_start":493,"line_end":493,"column_start":5,"column_end":8}},{"value":"/ # Example:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":511047,"byte_end":511061,"line_start":494,"line_end":494,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":511066,"byte_end":511069,"line_start":495,"line_end":495,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":511074,"byte_end":511085,"line_start":496,"line_end":496,"column_start":5,"column_end":16}},{"value":"/ # use chrono::naive::{NaiveDate, NaiveDateTime};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":511090,"byte_end":511142,"line_start":497,"line_end":497,"column_start":5,"column_end":57}},{"value":"/ # use serde_derive::Deserialize;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":511147,"byte_end":511183,"line_start":498,"line_end":498,"column_start":5,"column_end":41}},{"value":"/ use chrono::naive::serde::ts_microseconds_option::deserialize as from_micro_tsopt;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":511188,"byte_end":511274,"line_start":499,"line_end":499,"column_start":5,"column_end":91}},{"value":"/ #[derive(Deserialize)]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":511279,"byte_end":511305,"line_start":500,"line_end":500,"column_start":5,"column_end":31}},{"value":"/ struct S {","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":511310,"byte_end":511324,"line_start":501,"line_end":501,"column_start":5,"column_end":19}},{"value":"/     #[serde(deserialize_with = \"from_micro_tsopt\")]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":511329,"byte_end":511384,"line_start":502,"line_end":502,"column_start":5,"column_end":60}},{"value":"/     time: Option<NaiveDateTime>","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":511389,"byte_end":511424,"line_start":503,"line_end":503,"column_start":5,"column_end":40}},{"value":"/ }","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":511429,"byte_end":511434,"line_start":504,"line_end":504,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":511439,"byte_end":511442,"line_start":505,"line_end":505,"column_start":5,"column_end":8}},{"value":"/ let my_s: S = serde_json::from_str(r#\"{ \"time\": 1526522699918355 }\"#)?;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":511447,"byte_end":511522,"line_start":506,"line_end":506,"column_start":5,"column_end":80}},{"value":"/ # Ok::<(), serde_json::Error>(())","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":511527,"byte_end":511564,"line_start":507,"line_end":507,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":511569,"byte_end":511576,"line_start":508,"line_end":508,"column_start":5,"column_end":12}}]},{"kind":"Mod","id":{"krate":0,"index":2083},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":513580,"byte_end":513595,"line_start":576,"line_end":576,"column_start":9,"column_end":24},"name":"ts_milliseconds","qualname":"::naive::datetime::serde::ts_milliseconds","value":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","parent":null,"children":[{"krate":0,"index":2084},{"krate":0,"index":2087},{"krate":0,"index":2088},{"krate":0,"index":2091},{"krate":0,"index":2094},{"krate":0,"index":2097},{"krate":0,"index":2100},{"krate":0,"index":2102},{"krate":0,"index":2105},{"krate":0,"index":2107}],"decl_id":null,"docs":" Used to serialize/deserialize from millisecond-precision timestamps","sig":null,"attributes":[{"value":"/ Used to serialize/deserialize from millisecond-precision timestamps","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":512811,"byte_end":512882,"line_start":551,"line_end":551,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":512883,"byte_end":512886,"line_start":552,"line_end":552,"column_start":1,"column_end":4}},{"value":"/ # Example:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":512887,"byte_end":512901,"line_start":553,"line_end":553,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":512902,"byte_end":512905,"line_start":554,"line_end":554,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":512906,"byte_end":512917,"line_start":555,"line_end":555,"column_start":1,"column_end":12}},{"value":"/ # use chrono::{NaiveDate, NaiveDateTime};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":512918,"byte_end":512963,"line_start":556,"line_end":556,"column_start":1,"column_end":46}},{"value":"/ # use serde_derive::{Deserialize, Serialize};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":512964,"byte_end":513013,"line_start":557,"line_end":557,"column_start":1,"column_end":50}},{"value":"/ use chrono::naive::serde::ts_milliseconds;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":513014,"byte_end":513060,"line_start":558,"line_end":558,"column_start":1,"column_end":47}},{"value":"/ #[derive(Deserialize, Serialize)]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":513061,"byte_end":513098,"line_start":559,"line_end":559,"column_start":1,"column_end":38}},{"value":"/ struct S {","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":513099,"byte_end":513113,"line_start":560,"line_end":560,"column_start":1,"column_end":15}},{"value":"/     #[serde(with = \"ts_milliseconds\")]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":513114,"byte_end":513156,"line_start":561,"line_end":561,"column_start":1,"column_end":43}},{"value":"/     time: NaiveDateTime","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":513157,"byte_end":513184,"line_start":562,"line_end":562,"column_start":1,"column_end":28}},{"value":"/ }","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":513185,"byte_end":513190,"line_start":563,"line_end":563,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":513191,"byte_end":513194,"line_start":564,"line_end":564,"column_start":1,"column_end":4}},{"value":"/ let time = NaiveDate::from_ymd(2018, 5, 17).and_hms_milli(02, 04, 59, 918);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":513195,"byte_end":513274,"line_start":565,"line_end":565,"column_start":1,"column_end":80}},{"value":"/ let my_s = S {","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":513275,"byte_end":513293,"line_start":566,"line_end":566,"column_start":1,"column_end":19}},{"value":"/     time: time.clone(),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":513294,"byte_end":513321,"line_start":567,"line_end":567,"column_start":1,"column_end":28}},{"value":"/ };","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":513322,"byte_end":513328,"line_start":568,"line_end":568,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":513329,"byte_end":513332,"line_start":569,"line_end":569,"column_start":1,"column_end":4}},{"value":"/ let as_string = serde_json::to_string(&my_s)?;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":513333,"byte_end":513383,"line_start":570,"line_end":570,"column_start":1,"column_end":51}},{"value":"/ assert_eq!(as_string, r#\"{\"time\":1526522699918}\"#);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":513384,"byte_end":513439,"line_start":571,"line_end":571,"column_start":1,"column_end":56}},{"value":"/ let my_s: S = serde_json::from_str(&as_string)?;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":513440,"byte_end":513492,"line_start":572,"line_end":572,"column_start":1,"column_end":53}},{"value":"/ assert_eq!(my_s.time, time);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":513493,"byte_end":513525,"line_start":573,"line_end":573,"column_start":1,"column_end":33}},{"value":"/ # Ok::<(), serde_json::Error>(())","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":513526,"byte_end":513563,"line_start":574,"line_end":574,"column_start":1,"column_end":38}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":513564,"byte_end":513571,"line_start":575,"line_end":575,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":2100},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":514528,"byte_end":514537,"line_start":606,"line_end":606,"column_start":12,"column_end":21},"name":"serialize","qualname":"::naive::datetime::serde::ts_milliseconds::serialize","value":"fn serialize<S>(&NaiveDateTime, S) -> Result<S::Ok, S::Error> where\nS: ser::Serializer","parent":null,"children":[],"decl_id":null,"docs":" Serialize a datetime into an integer number of milliseconds since the epoch","sig":null,"attributes":[{"value":"/ Serialize a datetime into an integer number of milliseconds since the epoch","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":513708,"byte_end":513787,"line_start":583,"line_end":583,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":513792,"byte_end":513795,"line_start":584,"line_end":584,"column_start":5,"column_end":8}},{"value":"/ Intended for use with `serde`s `serialize_with` attribute.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":513800,"byte_end":513862,"line_start":585,"line_end":585,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":513867,"byte_end":513870,"line_start":586,"line_end":586,"column_start":5,"column_end":8}},{"value":"/ # Example:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":513875,"byte_end":513889,"line_start":587,"line_end":587,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":513894,"byte_end":513897,"line_start":588,"line_end":588,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":513902,"byte_end":513913,"line_start":589,"line_end":589,"column_start":5,"column_end":16}},{"value":"/ # use chrono::{NaiveDate, NaiveDateTime};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":513918,"byte_end":513963,"line_start":590,"line_end":590,"column_start":5,"column_end":50}},{"value":"/ # use serde_derive::Serialize;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":513968,"byte_end":514002,"line_start":591,"line_end":591,"column_start":5,"column_end":39}},{"value":"/ use chrono::naive::serde::ts_milliseconds::serialize as to_milli_ts;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":514007,"byte_end":514079,"line_start":592,"line_end":592,"column_start":5,"column_end":77}},{"value":"/ #[derive(Serialize)]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":514084,"byte_end":514108,"line_start":593,"line_end":593,"column_start":5,"column_end":29}},{"value":"/ struct S {","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":514113,"byte_end":514127,"line_start":594,"line_end":594,"column_start":5,"column_end":19}},{"value":"/     #[serde(serialize_with = \"to_milli_ts\")]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":514132,"byte_end":514180,"line_start":595,"line_end":595,"column_start":5,"column_end":53}},{"value":"/     time: NaiveDateTime","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":514185,"byte_end":514212,"line_start":596,"line_end":596,"column_start":5,"column_end":32}},{"value":"/ }","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":514217,"byte_end":514222,"line_start":597,"line_end":597,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":514227,"byte_end":514230,"line_start":598,"line_end":598,"column_start":5,"column_end":8}},{"value":"/ let my_s = S {","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":514235,"byte_end":514253,"line_start":599,"line_end":599,"column_start":5,"column_end":23}},{"value":"/     time: NaiveDate::from_ymd(2018, 5, 17).and_hms_milli(02, 04, 59, 918),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":514258,"byte_end":514336,"line_start":600,"line_end":600,"column_start":5,"column_end":83}},{"value":"/ };","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":514341,"byte_end":514347,"line_start":601,"line_end":601,"column_start":5,"column_end":11}},{"value":"/ let as_string = serde_json::to_string(&my_s)?;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":514352,"byte_end":514402,"line_start":602,"line_end":602,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(as_string, r#\"{\"time\":1526522699918}\"#);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":514407,"byte_end":514462,"line_start":603,"line_end":603,"column_start":5,"column_end":60}},{"value":"/ # Ok::<(), serde_json::Error>(())","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":514467,"byte_end":514504,"line_start":604,"line_end":604,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":514509,"byte_end":514516,"line_start":605,"line_end":605,"column_start":5,"column_end":12}}]},{"kind":"Function","id":{"krate":0,"index":2102},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":515364,"byte_end":515375,"line_start":632,"line_end":632,"column_start":12,"column_end":23},"name":"deserialize","qualname":"::naive::datetime::serde::ts_milliseconds::deserialize","value":"fn deserialize<'de, D>(D) -> Result<NaiveDateTime, D::Error> where\nD: de::Deserializer","parent":null,"children":[],"decl_id":null,"docs":" Deserialize a `NaiveDateTime` from a milliseconds timestamp","sig":null,"attributes":[{"value":"/ Deserialize a `NaiveDateTime` from a milliseconds timestamp","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":514714,"byte_end":514777,"line_start":613,"line_end":613,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":514782,"byte_end":514785,"line_start":614,"line_end":614,"column_start":5,"column_end":8}},{"value":"/ Intended for use with `serde`s `deserialize_with` attribute.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":514790,"byte_end":514854,"line_start":615,"line_end":615,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":514859,"byte_end":514862,"line_start":616,"line_end":616,"column_start":5,"column_end":8}},{"value":"/ # Example:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":514867,"byte_end":514881,"line_start":617,"line_end":617,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":514886,"byte_end":514889,"line_start":618,"line_end":618,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":514894,"byte_end":514905,"line_start":619,"line_end":619,"column_start":5,"column_end":16}},{"value":"/ # use chrono::NaiveDateTime;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":514910,"byte_end":514942,"line_start":620,"line_end":620,"column_start":5,"column_end":37}},{"value":"/ # use serde_derive::Deserialize;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":514947,"byte_end":514983,"line_start":621,"line_end":621,"column_start":5,"column_end":41}},{"value":"/ use chrono::naive::serde::ts_milliseconds::deserialize as from_milli_ts;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":514988,"byte_end":515064,"line_start":622,"line_end":622,"column_start":5,"column_end":81}},{"value":"/ #[derive(Deserialize)]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":515069,"byte_end":515095,"line_start":623,"line_end":623,"column_start":5,"column_end":31}},{"value":"/ struct S {","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":515100,"byte_end":515114,"line_start":624,"line_end":624,"column_start":5,"column_end":19}},{"value":"/     #[serde(deserialize_with = \"from_milli_ts\")]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":515119,"byte_end":515171,"line_start":625,"line_end":625,"column_start":5,"column_end":57}},{"value":"/     time: NaiveDateTime","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":515176,"byte_end":515203,"line_start":626,"line_end":626,"column_start":5,"column_end":32}},{"value":"/ }","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":515208,"byte_end":515213,"line_start":627,"line_end":627,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":515218,"byte_end":515221,"line_start":628,"line_end":628,"column_start":5,"column_end":8}},{"value":"/ let my_s: S = serde_json::from_str(r#\"{ \"time\": 1526522699918 }\"#)?;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":515226,"byte_end":515298,"line_start":629,"line_end":629,"column_start":5,"column_end":77}},{"value":"/ # Ok::<(), serde_json::Error>(())","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":515303,"byte_end":515340,"line_start":630,"line_end":630,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":515345,"byte_end":515352,"line_start":631,"line_end":631,"column_start":5,"column_end":12}}]},{"kind":"Mod","id":{"krate":0,"index":2117},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":517317,"byte_end":517339,"line_start":696,"line_end":696,"column_start":9,"column_end":31},"name":"ts_milliseconds_option","qualname":"::naive::datetime::serde::ts_milliseconds_option","value":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","parent":null,"children":[{"krate":0,"index":2118},{"krate":0,"index":2121},{"krate":0,"index":2122},{"krate":0,"index":2125},{"krate":0,"index":2128},{"krate":0,"index":2129},{"krate":0,"index":2131},{"krate":0,"index":2134},{"krate":0,"index":2136},{"krate":0,"index":2139},{"krate":0,"index":2141}],"decl_id":null,"docs":" Ser/de to/from optional timestamps in milliseconds","sig":null,"attributes":[{"value":"/ Ser/de to/from optional timestamps in milliseconds","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":516472,"byte_end":516526,"line_start":669,"line_end":669,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":516527,"byte_end":516530,"line_start":670,"line_end":670,"column_start":1,"column_end":4}},{"value":"/ Intended for use with `serde`'s `with` attribute.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":516531,"byte_end":516584,"line_start":671,"line_end":671,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":516585,"byte_end":516588,"line_start":672,"line_end":672,"column_start":1,"column_end":4}},{"value":"/ # Example:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":516589,"byte_end":516603,"line_start":673,"line_end":673,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":516604,"byte_end":516607,"line_start":674,"line_end":674,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":516608,"byte_end":516619,"line_start":675,"line_end":675,"column_start":1,"column_end":12}},{"value":"/ # use chrono::naive::{NaiveDate, NaiveDateTime};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":516620,"byte_end":516672,"line_start":676,"line_end":676,"column_start":1,"column_end":53}},{"value":"/ # use serde_derive::{Deserialize, Serialize};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":516673,"byte_end":516722,"line_start":677,"line_end":677,"column_start":1,"column_end":50}},{"value":"/ use chrono::naive::serde::ts_milliseconds_option;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":516723,"byte_end":516776,"line_start":678,"line_end":678,"column_start":1,"column_end":54}},{"value":"/ #[derive(Deserialize, Serialize)]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":516777,"byte_end":516814,"line_start":679,"line_end":679,"column_start":1,"column_end":38}},{"value":"/ struct S {","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":516815,"byte_end":516829,"line_start":680,"line_end":680,"column_start":1,"column_end":15}},{"value":"/     #[serde(with = \"ts_milliseconds_option\")]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":516830,"byte_end":516879,"line_start":681,"line_end":681,"column_start":1,"column_end":50}},{"value":"/     time: Option<NaiveDateTime>","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":516880,"byte_end":516915,"line_start":682,"line_end":682,"column_start":1,"column_end":36}},{"value":"/ }","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":516916,"byte_end":516921,"line_start":683,"line_end":683,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":516922,"byte_end":516925,"line_start":684,"line_end":684,"column_start":1,"column_end":4}},{"value":"/ let time = Some(NaiveDate::from_ymd(2018, 5, 17).and_hms_milli(02, 04, 59, 918));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":516926,"byte_end":517011,"line_start":685,"line_end":685,"column_start":1,"column_end":86}},{"value":"/ let my_s = S {","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":517012,"byte_end":517030,"line_start":686,"line_end":686,"column_start":1,"column_end":19}},{"value":"/     time: time.clone(),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":517031,"byte_end":517058,"line_start":687,"line_end":687,"column_start":1,"column_end":28}},{"value":"/ };","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":517059,"byte_end":517065,"line_start":688,"line_end":688,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":517066,"byte_end":517069,"line_start":689,"line_end":689,"column_start":1,"column_end":4}},{"value":"/ let as_string = serde_json::to_string(&my_s)?;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":517070,"byte_end":517120,"line_start":690,"line_end":690,"column_start":1,"column_end":51}},{"value":"/ assert_eq!(as_string, r#\"{\"time\":1526522699918}\"#);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":517121,"byte_end":517176,"line_start":691,"line_end":691,"column_start":1,"column_end":56}},{"value":"/ let my_s: S = serde_json::from_str(&as_string)?;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":517177,"byte_end":517229,"line_start":692,"line_end":692,"column_start":1,"column_end":53}},{"value":"/ assert_eq!(my_s.time, time);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":517230,"byte_end":517262,"line_start":693,"line_end":693,"column_start":1,"column_end":33}},{"value":"/ # Ok::<(), serde_json::Error>(())","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":517263,"byte_end":517300,"line_start":694,"line_end":694,"column_start":1,"column_end":38}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":517301,"byte_end":517308,"line_start":695,"line_end":695,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":2134},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":518347,"byte_end":518356,"line_start":726,"line_end":726,"column_start":12,"column_end":21},"name":"serialize","qualname":"::naive::datetime::serde::ts_milliseconds_option::serialize","value":"fn serialize<S>(&Option<NaiveDateTime>, S) -> Result<S::Ok, S::Error> where\nS: ser::Serializer","parent":null,"children":[],"decl_id":null,"docs":" Serialize a datetime into an integer number of milliseconds since the epoch or none","sig":null,"attributes":[{"value":"/ Serialize a datetime into an integer number of milliseconds since the epoch or none","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":517485,"byte_end":517572,"line_start":703,"line_end":703,"column_start":5,"column_end":92}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":517577,"byte_end":517580,"line_start":704,"line_end":704,"column_start":5,"column_end":8}},{"value":"/ Intended for use with `serde`s `serialize_with` attribute.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":517585,"byte_end":517647,"line_start":705,"line_end":705,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":517652,"byte_end":517655,"line_start":706,"line_end":706,"column_start":5,"column_end":8}},{"value":"/ # Example:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":517660,"byte_end":517674,"line_start":707,"line_end":707,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":517679,"byte_end":517682,"line_start":708,"line_end":708,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":517687,"byte_end":517698,"line_start":709,"line_end":709,"column_start":5,"column_end":16}},{"value":"/ # use chrono::naive::{NaiveDate, NaiveDateTime};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":517703,"byte_end":517755,"line_start":710,"line_end":710,"column_start":5,"column_end":57}},{"value":"/ # use serde_derive::Serialize;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":517760,"byte_end":517794,"line_start":711,"line_end":711,"column_start":5,"column_end":39}},{"value":"/ use chrono::naive::serde::ts_milliseconds_option::serialize as to_milli_tsopt;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":517799,"byte_end":517881,"line_start":712,"line_end":712,"column_start":5,"column_end":87}},{"value":"/ #[derive(Serialize)]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":517886,"byte_end":517910,"line_start":713,"line_end":713,"column_start":5,"column_end":29}},{"value":"/ struct S {","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":517915,"byte_end":517929,"line_start":714,"line_end":714,"column_start":5,"column_end":19}},{"value":"/     #[serde(serialize_with = \"to_milli_tsopt\")]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":517934,"byte_end":517985,"line_start":715,"line_end":715,"column_start":5,"column_end":56}},{"value":"/     time: Option<NaiveDateTime>","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":517990,"byte_end":518025,"line_start":716,"line_end":716,"column_start":5,"column_end":40}},{"value":"/ }","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":518030,"byte_end":518035,"line_start":717,"line_end":717,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":518040,"byte_end":518043,"line_start":718,"line_end":718,"column_start":5,"column_end":8}},{"value":"/ let my_s = S {","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":518048,"byte_end":518066,"line_start":719,"line_end":719,"column_start":5,"column_end":23}},{"value":"/     time: Some(NaiveDate::from_ymd(2018, 5, 17).and_hms_milli(02, 04, 59, 918)),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":518071,"byte_end":518155,"line_start":720,"line_end":720,"column_start":5,"column_end":89}},{"value":"/ };","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":518160,"byte_end":518166,"line_start":721,"line_end":721,"column_start":5,"column_end":11}},{"value":"/ let as_string = serde_json::to_string(&my_s)?;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":518171,"byte_end":518221,"line_start":722,"line_end":722,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(as_string, r#\"{\"time\":1526522699918}\"#);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":518226,"byte_end":518281,"line_start":723,"line_end":723,"column_start":5,"column_end":60}},{"value":"/ # Ok::<(), serde_json::Error>(())","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":518286,"byte_end":518323,"line_start":724,"line_end":724,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":518328,"byte_end":518335,"line_start":725,"line_end":725,"column_start":5,"column_end":12}}]},{"kind":"Function","id":{"krate":0,"index":2136},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":519345,"byte_end":519356,"line_start":755,"line_end":755,"column_start":12,"column_end":23},"name":"deserialize","qualname":"::naive::datetime::serde::ts_milliseconds_option::deserialize","value":"fn deserialize<'de, D>(D) -> Result<Option<NaiveDateTime>, D::Error> where\nD: de::Deserializer","parent":null,"children":[],"decl_id":null,"docs":" Deserialize a `NaiveDateTime` from a nanosecond timestamp or none","sig":null,"attributes":[{"value":"/ Deserialize a `NaiveDateTime` from a nanosecond timestamp or none","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":518645,"byte_end":518714,"line_start":736,"line_end":736,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":518719,"byte_end":518722,"line_start":737,"line_end":737,"column_start":5,"column_end":8}},{"value":"/ Intended for use with `serde`s `deserialize_with` attribute.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":518727,"byte_end":518791,"line_start":738,"line_end":738,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":518796,"byte_end":518799,"line_start":739,"line_end":739,"column_start":5,"column_end":8}},{"value":"/ # Example:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":518804,"byte_end":518818,"line_start":740,"line_end":740,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":518823,"byte_end":518826,"line_start":741,"line_end":741,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":518831,"byte_end":518842,"line_start":742,"line_end":742,"column_start":5,"column_end":16}},{"value":"/ # use chrono::naive::{NaiveDate, NaiveDateTime};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":518847,"byte_end":518899,"line_start":743,"line_end":743,"column_start":5,"column_end":57}},{"value":"/ # use serde_derive::Deserialize;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":518904,"byte_end":518940,"line_start":744,"line_end":744,"column_start":5,"column_end":41}},{"value":"/ use chrono::naive::serde::ts_milliseconds_option::deserialize as from_milli_tsopt;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":518945,"byte_end":519031,"line_start":745,"line_end":745,"column_start":5,"column_end":91}},{"value":"/ #[derive(Deserialize)]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":519036,"byte_end":519062,"line_start":746,"line_end":746,"column_start":5,"column_end":31}},{"value":"/ struct S {","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":519067,"byte_end":519081,"line_start":747,"line_end":747,"column_start":5,"column_end":19}},{"value":"/     #[serde(deserialize_with = \"from_milli_tsopt\")]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":519086,"byte_end":519141,"line_start":748,"line_end":748,"column_start":5,"column_end":60}},{"value":"/     time: Option<NaiveDateTime>","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":519146,"byte_end":519181,"line_start":749,"line_end":749,"column_start":5,"column_end":40}},{"value":"/ }","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":519186,"byte_end":519191,"line_start":750,"line_end":750,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":519196,"byte_end":519199,"line_start":751,"line_end":751,"column_start":5,"column_end":8}},{"value":"/ let my_s: S = serde_json::from_str(r#\"{ \"time\": 1526522699918355 }\"#)?;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":519204,"byte_end":519279,"line_start":752,"line_end":752,"column_start":5,"column_end":80}},{"value":"/ # Ok::<(), serde_json::Error>(())","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":519284,"byte_end":519321,"line_start":753,"line_end":753,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":519326,"byte_end":519333,"line_start":754,"line_end":754,"column_start":5,"column_end":12}}]},{"kind":"Mod","id":{"krate":0,"index":2151},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":521306,"byte_end":521316,"line_start":822,"line_end":822,"column_start":9,"column_end":19},"name":"ts_seconds","qualname":"::naive::datetime::serde::ts_seconds","value":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","parent":null,"children":[{"krate":0,"index":2152},{"krate":0,"index":2155},{"krate":0,"index":2156},{"krate":0,"index":2159},{"krate":0,"index":2162},{"krate":0,"index":2165},{"krate":0,"index":2168},{"krate":0,"index":2170},{"krate":0,"index":2173},{"krate":0,"index":2175}],"decl_id":null,"docs":" Used to serialize/deserialize from second-precision timestamps","sig":null,"attributes":[{"value":"/ Used to serialize/deserialize from second-precision timestamps","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":520568,"byte_end":520634,"line_start":797,"line_end":797,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":520635,"byte_end":520638,"line_start":798,"line_end":798,"column_start":1,"column_end":4}},{"value":"/ # Example:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":520639,"byte_end":520653,"line_start":799,"line_end":799,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":520654,"byte_end":520657,"line_start":800,"line_end":800,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":520658,"byte_end":520669,"line_start":801,"line_end":801,"column_start":1,"column_end":12}},{"value":"/ # use chrono::{NaiveDate, NaiveDateTime};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":520670,"byte_end":520715,"line_start":802,"line_end":802,"column_start":1,"column_end":46}},{"value":"/ # use serde_derive::{Deserialize, Serialize};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":520716,"byte_end":520765,"line_start":803,"line_end":803,"column_start":1,"column_end":50}},{"value":"/ use chrono::naive::serde::ts_seconds;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":520766,"byte_end":520807,"line_start":804,"line_end":804,"column_start":1,"column_end":42}},{"value":"/ #[derive(Deserialize, Serialize)]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":520808,"byte_end":520845,"line_start":805,"line_end":805,"column_start":1,"column_end":38}},{"value":"/ struct S {","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":520846,"byte_end":520860,"line_start":806,"line_end":806,"column_start":1,"column_end":15}},{"value":"/     #[serde(with = \"ts_seconds\")]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":520861,"byte_end":520898,"line_start":807,"line_end":807,"column_start":1,"column_end":38}},{"value":"/     time: NaiveDateTime","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":520899,"byte_end":520926,"line_start":808,"line_end":808,"column_start":1,"column_end":28}},{"value":"/ }","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":520927,"byte_end":520932,"line_start":809,"line_end":809,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":520933,"byte_end":520936,"line_start":810,"line_end":810,"column_start":1,"column_end":4}},{"value":"/ let time = NaiveDate::from_ymd(2015, 5, 15).and_hms(10, 0, 0);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":520937,"byte_end":521003,"line_start":811,"line_end":811,"column_start":1,"column_end":67}},{"value":"/ let my_s = S {","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":521004,"byte_end":521022,"line_start":812,"line_end":812,"column_start":1,"column_end":19}},{"value":"/     time: time.clone(),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":521023,"byte_end":521050,"line_start":813,"line_end":813,"column_start":1,"column_end":28}},{"value":"/ };","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":521051,"byte_end":521057,"line_start":814,"line_end":814,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":521058,"byte_end":521061,"line_start":815,"line_end":815,"column_start":1,"column_end":4}},{"value":"/ let as_string = serde_json::to_string(&my_s)?;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":521062,"byte_end":521112,"line_start":816,"line_end":816,"column_start":1,"column_end":51}},{"value":"/ assert_eq!(as_string, r#\"{\"time\":1431684000}\"#);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":521113,"byte_end":521165,"line_start":817,"line_end":817,"column_start":1,"column_end":53}},{"value":"/ let my_s: S = serde_json::from_str(&as_string)?;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":521166,"byte_end":521218,"line_start":818,"line_end":818,"column_start":1,"column_end":53}},{"value":"/ assert_eq!(my_s.time, time);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":521219,"byte_end":521251,"line_start":819,"line_end":819,"column_start":1,"column_end":33}},{"value":"/ # Ok::<(), serde_json::Error>(())","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":521252,"byte_end":521289,"line_start":820,"line_end":820,"column_start":1,"column_end":38}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":521290,"byte_end":521297,"line_start":821,"line_end":821,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":2168},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":522211,"byte_end":522220,"line_start":852,"line_end":852,"column_start":12,"column_end":21},"name":"serialize","qualname":"::naive::datetime::serde::ts_seconds::serialize","value":"fn serialize<S>(&NaiveDateTime, S) -> Result<S::Ok, S::Error> where\nS: ser::Serializer","parent":null,"children":[],"decl_id":null,"docs":" Serialize a datetime into an integer number of seconds since the epoch","sig":null,"attributes":[{"value":"/ Serialize a datetime into an integer number of seconds since the epoch","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":521429,"byte_end":521503,"line_start":829,"line_end":829,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":521508,"byte_end":521511,"line_start":830,"line_end":830,"column_start":5,"column_end":8}},{"value":"/ Intended for use with `serde`s `serialize_with` attribute.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":521516,"byte_end":521578,"line_start":831,"line_end":831,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":521583,"byte_end":521586,"line_start":832,"line_end":832,"column_start":5,"column_end":8}},{"value":"/ # Example:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":521591,"byte_end":521605,"line_start":833,"line_end":833,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":521610,"byte_end":521613,"line_start":834,"line_end":834,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":521618,"byte_end":521629,"line_start":835,"line_end":835,"column_start":5,"column_end":16}},{"value":"/ # use chrono::{NaiveDate, NaiveDateTime};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":521634,"byte_end":521679,"line_start":836,"line_end":836,"column_start":5,"column_end":50}},{"value":"/ # use serde_derive::Serialize;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":521684,"byte_end":521718,"line_start":837,"line_end":837,"column_start":5,"column_end":39}},{"value":"/ use chrono::naive::serde::ts_seconds::serialize as to_ts;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":521723,"byte_end":521784,"line_start":838,"line_end":838,"column_start":5,"column_end":66}},{"value":"/ #[derive(Serialize)]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":521789,"byte_end":521813,"line_start":839,"line_end":839,"column_start":5,"column_end":29}},{"value":"/ struct S {","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":521818,"byte_end":521832,"line_start":840,"line_end":840,"column_start":5,"column_end":19}},{"value":"/     #[serde(serialize_with = \"to_ts\")]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":521837,"byte_end":521879,"line_start":841,"line_end":841,"column_start":5,"column_end":47}},{"value":"/     time: NaiveDateTime","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":521884,"byte_end":521911,"line_start":842,"line_end":842,"column_start":5,"column_end":32}},{"value":"/ }","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":521916,"byte_end":521921,"line_start":843,"line_end":843,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":521926,"byte_end":521929,"line_start":844,"line_end":844,"column_start":5,"column_end":8}},{"value":"/ let my_s = S {","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":521934,"byte_end":521952,"line_start":845,"line_end":845,"column_start":5,"column_end":23}},{"value":"/     time: NaiveDate::from_ymd(2015, 5, 15).and_hms(10, 0, 0),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":521957,"byte_end":522022,"line_start":846,"line_end":846,"column_start":5,"column_end":70}},{"value":"/ };","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":522027,"byte_end":522033,"line_start":847,"line_end":847,"column_start":5,"column_end":11}},{"value":"/ let as_string = serde_json::to_string(&my_s)?;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":522038,"byte_end":522088,"line_start":848,"line_end":848,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(as_string, r#\"{\"time\":1431684000}\"#);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":522093,"byte_end":522145,"line_start":849,"line_end":849,"column_start":5,"column_end":57}},{"value":"/ # Ok::<(), serde_json::Error>(())","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":522150,"byte_end":522187,"line_start":850,"line_end":850,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":522192,"byte_end":522199,"line_start":851,"line_end":851,"column_start":5,"column_end":12}}]},{"kind":"Function","id":{"krate":0,"index":2170},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":523015,"byte_end":523026,"line_start":878,"line_end":878,"column_start":12,"column_end":23},"name":"deserialize","qualname":"::naive::datetime::serde::ts_seconds::deserialize","value":"fn deserialize<'de, D>(D) -> Result<NaiveDateTime, D::Error> where\nD: de::Deserializer","parent":null,"children":[],"decl_id":null,"docs":" Deserialize a `NaiveDateTime` from a seconds timestamp","sig":null,"attributes":[{"value":"/ Deserialize a `NaiveDateTime` from a seconds timestamp","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":522390,"byte_end":522448,"line_start":859,"line_end":859,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":522453,"byte_end":522456,"line_start":860,"line_end":860,"column_start":5,"column_end":8}},{"value":"/ Intended for use with `serde`s `deserialize_with` attribute.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":522461,"byte_end":522525,"line_start":861,"line_end":861,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":522530,"byte_end":522533,"line_start":862,"line_end":862,"column_start":5,"column_end":8}},{"value":"/ # Example:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":522538,"byte_end":522552,"line_start":863,"line_end":863,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":522557,"byte_end":522560,"line_start":864,"line_end":864,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":522565,"byte_end":522576,"line_start":865,"line_end":865,"column_start":5,"column_end":16}},{"value":"/ # use chrono::NaiveDateTime;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":522581,"byte_end":522613,"line_start":866,"line_end":866,"column_start":5,"column_end":37}},{"value":"/ # use serde_derive::Deserialize;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":522618,"byte_end":522654,"line_start":867,"line_end":867,"column_start":5,"column_end":41}},{"value":"/ use chrono::naive::serde::ts_seconds::deserialize as from_ts;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":522659,"byte_end":522724,"line_start":868,"line_end":868,"column_start":5,"column_end":70}},{"value":"/ #[derive(Deserialize)]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":522729,"byte_end":522755,"line_start":869,"line_end":869,"column_start":5,"column_end":31}},{"value":"/ struct S {","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":522760,"byte_end":522774,"line_start":870,"line_end":870,"column_start":5,"column_end":19}},{"value":"/     #[serde(deserialize_with = \"from_ts\")]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":522779,"byte_end":522825,"line_start":871,"line_end":871,"column_start":5,"column_end":51}},{"value":"/     time: NaiveDateTime","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":522830,"byte_end":522857,"line_start":872,"line_end":872,"column_start":5,"column_end":32}},{"value":"/ }","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":522862,"byte_end":522867,"line_start":873,"line_end":873,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":522872,"byte_end":522875,"line_start":874,"line_end":874,"column_start":5,"column_end":8}},{"value":"/ let my_s: S = serde_json::from_str(r#\"{ \"time\": 1431684000 }\"#)?;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":522880,"byte_end":522949,"line_start":875,"line_end":875,"column_start":5,"column_end":74}},{"value":"/ # Ok::<(), serde_json::Error>(())","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":522954,"byte_end":522991,"line_start":876,"line_end":876,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":522996,"byte_end":523003,"line_start":877,"line_end":877,"column_start":5,"column_end":12}}]},{"kind":"Mod","id":{"krate":0,"index":2185},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":524797,"byte_end":524814,"line_start":939,"line_end":939,"column_start":9,"column_end":26},"name":"ts_seconds_option","qualname":"::naive::datetime::serde::ts_seconds_option","value":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","parent":null,"children":[{"krate":0,"index":2186},{"krate":0,"index":2189},{"krate":0,"index":2190},{"krate":0,"index":2193},{"krate":0,"index":2196},{"krate":0,"index":2197},{"krate":0,"index":2199},{"krate":0,"index":2202},{"krate":0,"index":2204},{"krate":0,"index":2207},{"krate":0,"index":2209}],"decl_id":null,"docs":" Ser/de to/from optional timestamps in seconds","sig":null,"attributes":[{"value":"/ Ser/de to/from optional timestamps in seconds","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":523981,"byte_end":524030,"line_start":912,"line_end":912,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":524031,"byte_end":524034,"line_start":913,"line_end":913,"column_start":1,"column_end":4}},{"value":"/ Intended for use with `serde`'s `with` attribute.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":524035,"byte_end":524088,"line_start":914,"line_end":914,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":524089,"byte_end":524092,"line_start":915,"line_end":915,"column_start":1,"column_end":4}},{"value":"/ # Example:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":524093,"byte_end":524107,"line_start":916,"line_end":916,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":524108,"byte_end":524111,"line_start":917,"line_end":917,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":524112,"byte_end":524123,"line_start":918,"line_end":918,"column_start":1,"column_end":12}},{"value":"/ # use chrono::naive::{NaiveDate, NaiveDateTime};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":524124,"byte_end":524176,"line_start":919,"line_end":919,"column_start":1,"column_end":53}},{"value":"/ # use serde_derive::{Deserialize, Serialize};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":524177,"byte_end":524226,"line_start":920,"line_end":920,"column_start":1,"column_end":50}},{"value":"/ use chrono::naive::serde::ts_seconds_option;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":524227,"byte_end":524275,"line_start":921,"line_end":921,"column_start":1,"column_end":49}},{"value":"/ #[derive(Deserialize, Serialize)]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":524276,"byte_end":524313,"line_start":922,"line_end":922,"column_start":1,"column_end":38}},{"value":"/ struct S {","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":524314,"byte_end":524328,"line_start":923,"line_end":923,"column_start":1,"column_end":15}},{"value":"/     #[serde(with = \"ts_seconds_option\")]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":524329,"byte_end":524373,"line_start":924,"line_end":924,"column_start":1,"column_end":45}},{"value":"/     time: Option<NaiveDateTime>","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":524374,"byte_end":524409,"line_start":925,"line_end":925,"column_start":1,"column_end":36}},{"value":"/ }","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":524410,"byte_end":524415,"line_start":926,"line_end":926,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":524416,"byte_end":524419,"line_start":927,"line_end":927,"column_start":1,"column_end":4}},{"value":"/ let time = Some(NaiveDate::from_ymd(2018, 5, 17).and_hms(02, 04, 59));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":524420,"byte_end":524494,"line_start":928,"line_end":928,"column_start":1,"column_end":75}},{"value":"/ let my_s = S {","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":524495,"byte_end":524513,"line_start":929,"line_end":929,"column_start":1,"column_end":19}},{"value":"/     time: time.clone(),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":524514,"byte_end":524541,"line_start":930,"line_end":930,"column_start":1,"column_end":28}},{"value":"/ };","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":524542,"byte_end":524548,"line_start":931,"line_end":931,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":524549,"byte_end":524552,"line_start":932,"line_end":932,"column_start":1,"column_end":4}},{"value":"/ let as_string = serde_json::to_string(&my_s)?;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":524553,"byte_end":524603,"line_start":933,"line_end":933,"column_start":1,"column_end":51}},{"value":"/ assert_eq!(as_string, r#\"{\"time\":1526522699}\"#);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":524604,"byte_end":524656,"line_start":934,"line_end":934,"column_start":1,"column_end":53}},{"value":"/ let my_s: S = serde_json::from_str(&as_string)?;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":524657,"byte_end":524709,"line_start":935,"line_end":935,"column_start":1,"column_end":53}},{"value":"/ assert_eq!(my_s.time, time);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":524710,"byte_end":524742,"line_start":936,"line_end":936,"column_start":1,"column_end":33}},{"value":"/ # Ok::<(), serde_json::Error>(())","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":524743,"byte_end":524780,"line_start":937,"line_end":937,"column_start":1,"column_end":38}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":524781,"byte_end":524788,"line_start":938,"line_end":938,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":2202},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":525776,"byte_end":525785,"line_start":969,"line_end":969,"column_start":12,"column_end":21},"name":"serialize","qualname":"::naive::datetime::serde::ts_seconds_option::serialize","value":"fn serialize<S>(&Option<NaiveDateTime>, S) -> Result<S::Ok, S::Error> where\nS: ser::Serializer","parent":null,"children":[],"decl_id":null,"docs":" Serialize a datetime into an integer number of seconds since the epoch or none","sig":null,"attributes":[{"value":"/ Serialize a datetime into an integer number of seconds since the epoch or none","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":524950,"byte_end":525032,"line_start":946,"line_end":946,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":525037,"byte_end":525040,"line_start":947,"line_end":947,"column_start":5,"column_end":8}},{"value":"/ Intended for use with `serde`s `serialize_with` attribute.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":525045,"byte_end":525107,"line_start":948,"line_end":948,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":525112,"byte_end":525115,"line_start":949,"line_end":949,"column_start":5,"column_end":8}},{"value":"/ # Example:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":525120,"byte_end":525134,"line_start":950,"line_end":950,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":525139,"byte_end":525142,"line_start":951,"line_end":951,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":525147,"byte_end":525158,"line_start":952,"line_end":952,"column_start":5,"column_end":16}},{"value":"/ # use chrono::naive::{NaiveDate, NaiveDateTime};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":525163,"byte_end":525215,"line_start":953,"line_end":953,"column_start":5,"column_end":57}},{"value":"/ # use serde_derive::Serialize;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":525220,"byte_end":525254,"line_start":954,"line_end":954,"column_start":5,"column_end":39}},{"value":"/ use chrono::naive::serde::ts_seconds_option::serialize as to_tsopt;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":525259,"byte_end":525330,"line_start":955,"line_end":955,"column_start":5,"column_end":76}},{"value":"/ #[derive(Serialize)]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":525335,"byte_end":525359,"line_start":956,"line_end":956,"column_start":5,"column_end":29}},{"value":"/ struct S {","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":525364,"byte_end":525378,"line_start":957,"line_end":957,"column_start":5,"column_end":19}},{"value":"/     #[serde(serialize_with = \"to_tsopt\")]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":525383,"byte_end":525428,"line_start":958,"line_end":958,"column_start":5,"column_end":50}},{"value":"/     time: Option<NaiveDateTime>","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":525433,"byte_end":525468,"line_start":959,"line_end":959,"column_start":5,"column_end":40}},{"value":"/ }","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":525473,"byte_end":525478,"line_start":960,"line_end":960,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":525483,"byte_end":525486,"line_start":961,"line_end":961,"column_start":5,"column_end":8}},{"value":"/ let my_s = S {","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":525491,"byte_end":525509,"line_start":962,"line_end":962,"column_start":5,"column_end":23}},{"value":"/     time: Some(NaiveDate::from_ymd(2018, 5, 17).and_hms(02, 04, 59)),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":525514,"byte_end":525587,"line_start":963,"line_end":963,"column_start":5,"column_end":78}},{"value":"/ };","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":525592,"byte_end":525598,"line_start":964,"line_end":964,"column_start":5,"column_end":11}},{"value":"/ let as_string = serde_json::to_string(&my_s)?;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":525603,"byte_end":525653,"line_start":965,"line_end":965,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(as_string, r#\"{\"time\":1526522699}\"#);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":525658,"byte_end":525710,"line_start":966,"line_end":966,"column_start":5,"column_end":57}},{"value":"/ # Ok::<(), serde_json::Error>(())","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":525715,"byte_end":525752,"line_start":967,"line_end":967,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":525757,"byte_end":525764,"line_start":968,"line_end":968,"column_start":5,"column_end":12}}]},{"kind":"Function","id":{"krate":0,"index":2204},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":526740,"byte_end":526751,"line_start":998,"line_end":998,"column_start":12,"column_end":23},"name":"deserialize","qualname":"::naive::datetime::serde::ts_seconds_option::deserialize","value":"fn deserialize<'de, D>(D) -> Result<Option<NaiveDateTime>, D::Error> where\nD: de::Deserializer","parent":null,"children":[],"decl_id":null,"docs":" Deserialize a `NaiveDateTime` from a second timestamp or none","sig":null,"attributes":[{"value":"/ Deserialize a `NaiveDateTime` from a second timestamp or none","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":526067,"byte_end":526132,"line_start":979,"line_end":979,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":526137,"byte_end":526140,"line_start":980,"line_end":980,"column_start":5,"column_end":8}},{"value":"/ Intended for use with `serde`s `deserialize_with` attribute.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":526145,"byte_end":526209,"line_start":981,"line_end":981,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":526214,"byte_end":526217,"line_start":982,"line_end":982,"column_start":5,"column_end":8}},{"value":"/ # Example:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":526222,"byte_end":526236,"line_start":983,"line_end":983,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":526241,"byte_end":526244,"line_start":984,"line_end":984,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":526249,"byte_end":526260,"line_start":985,"line_end":985,"column_start":5,"column_end":16}},{"value":"/ # use chrono::naive::{NaiveDate, NaiveDateTime};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":526265,"byte_end":526317,"line_start":986,"line_end":986,"column_start":5,"column_end":57}},{"value":"/ # use serde_derive::Deserialize;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":526322,"byte_end":526358,"line_start":987,"line_end":987,"column_start":5,"column_end":41}},{"value":"/ use chrono::naive::serde::ts_seconds_option::deserialize as from_tsopt;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":526363,"byte_end":526438,"line_start":988,"line_end":988,"column_start":5,"column_end":80}},{"value":"/ #[derive(Deserialize)]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":526443,"byte_end":526469,"line_start":989,"line_end":989,"column_start":5,"column_end":31}},{"value":"/ struct S {","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":526474,"byte_end":526488,"line_start":990,"line_end":990,"column_start":5,"column_end":19}},{"value":"/     #[serde(deserialize_with = \"from_tsopt\")]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":526493,"byte_end":526542,"line_start":991,"line_end":991,"column_start":5,"column_end":54}},{"value":"/     time: Option<NaiveDateTime>","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":526547,"byte_end":526582,"line_start":992,"line_end":992,"column_start":5,"column_end":40}},{"value":"/ }","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":526587,"byte_end":526592,"line_start":993,"line_end":993,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":526597,"byte_end":526600,"line_start":994,"line_end":994,"column_start":5,"column_end":8}},{"value":"/ let my_s: S = serde_json::from_str(r#\"{ \"time\": 1431684000 }\"#)?;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":526605,"byte_end":526674,"line_start":995,"line_end":995,"column_start":5,"column_end":74}},{"value":"/ # Ok::<(), serde_json::Error>(())","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":526679,"byte_end":526716,"line_start":996,"line_end":996,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":526721,"byte_end":526728,"line_start":997,"line_end":997,"column_start":5,"column_end":12}}]},{"kind":"Const","id":{"krate":0,"index":2243},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":434719,"byte_end":434731,"line_start":44,"line_end":44,"column_start":11,"column_end":23},"name":"MIN_DATETIME","qualname":"::naive::datetime::MIN_DATETIME","value":"NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" The minimum possible `NaiveDateTime`.\n","sig":null,"attributes":[{"value":"/ The minimum possible `NaiveDateTime`.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":434594,"byte_end":434635,"line_start":42,"line_end":42,"column_start":1,"column_end":42}},{"value":"deprecated(since = \"0.4.20\", note = \"Use NaiveDateTime::MIN instead\")","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":434636,"byte_end":434708,"line_start":43,"line_end":43,"column_start":1,"column_end":73}}]},{"kind":"Const","id":{"krate":0,"index":2244},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":434894,"byte_end":434906,"line_start":47,"line_end":47,"column_start":11,"column_end":23},"name":"MAX_DATETIME","qualname":"::naive::datetime::MAX_DATETIME","value":"NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" The maximum possible `NaiveDateTime`.\n","sig":null,"attributes":[{"value":"/ The maximum possible `NaiveDateTime`.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":434769,"byte_end":434810,"line_start":45,"line_end":45,"column_start":1,"column_end":42}},{"value":"deprecated(since = \"0.4.20\", note = \"Use NaiveDateTime::MAX instead\")","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":434811,"byte_end":434883,"line_start":46,"line_end":46,"column_start":1,"column_end":73}}]},{"kind":"Struct","id":{"krate":0,"index":3721},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":435882,"byte_end":435895,"line_start":76,"line_end":76,"column_start":12,"column_end":25},"name":"NaiveDateTime","qualname":"::naive::datetime::NaiveDateTime","value":"NaiveDateTime {  }","parent":null,"children":[{"krate":0,"index":3722},{"krate":0,"index":3723}],"decl_id":null,"docs":" ISO 8601 combined date and time without timezone.","sig":null,"attributes":[{"value":"/ ISO 8601 combined date and time without timezone.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":434945,"byte_end":434998,"line_start":49,"line_end":49,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":434999,"byte_end":435002,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":435003,"byte_end":435016,"line_start":51,"line_end":51,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":435017,"byte_end":435020,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ `NaiveDateTime` is commonly created from [`NaiveDate`](./struct.NaiveDate.html).","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":435021,"byte_end":435105,"line_start":53,"line_end":53,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":435106,"byte_end":435109,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":435110,"byte_end":435117,"line_start":55,"line_end":55,"column_start":1,"column_end":8}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":435118,"byte_end":435161,"line_start":56,"line_end":56,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":435162,"byte_end":435165,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ let dt: NaiveDateTime = NaiveDate::from_ymd(2016, 7, 8).and_hms(9, 10, 11);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":435166,"byte_end":435245,"line_start":58,"line_end":58,"column_start":1,"column_end":80}},{"value":"/ # let _ = dt;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":435246,"byte_end":435263,"line_start":59,"line_end":59,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":435264,"byte_end":435271,"line_start":60,"line_end":60,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":435272,"byte_end":435275,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ You can use typical [date-like](../trait.Datelike.html) and","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":435276,"byte_end":435339,"line_start":62,"line_end":62,"column_start":1,"column_end":64}},{"value":"/ [time-like](../trait.Timelike.html) methods,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":435340,"byte_end":435388,"line_start":63,"line_end":63,"column_start":1,"column_end":49}},{"value":"/ provided that relevant traits are in the scope.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":435389,"byte_end":435440,"line_start":64,"line_end":64,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":435441,"byte_end":435444,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":435445,"byte_end":435452,"line_start":66,"line_end":66,"column_start":1,"column_end":8}},{"value":"/ # use chrono::{NaiveDate, NaiveDateTime};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":435453,"byte_end":435498,"line_start":67,"line_end":67,"column_start":1,"column_end":46}},{"value":"/ # let dt: NaiveDateTime = NaiveDate::from_ymd(2016, 7, 8).and_hms(9, 10, 11);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":435499,"byte_end":435580,"line_start":68,"line_end":68,"column_start":1,"column_end":82}},{"value":"/ use chrono::{Datelike, Timelike, Weekday};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":435581,"byte_end":435627,"line_start":69,"line_end":69,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":435628,"byte_end":435631,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(dt.weekday(), Weekday::Fri);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":435632,"byte_end":435675,"line_start":71,"line_end":71,"column_start":1,"column_end":44}},{"value":"/ assert_eq!(dt.num_seconds_from_midnight(), 33011);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":435676,"byte_end":435730,"line_start":72,"line_end":72,"column_start":1,"column_end":55}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":435731,"byte_end":435738,"line_start":73,"line_end":73,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":2246},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":436555,"byte_end":436558,"line_start":99,"line_end":99,"column_start":12,"column_end":15},"name":"new","qualname":"<NaiveDateTime>::new","value":"fn new(NaiveDate, NaiveTime) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from date and time components.\n Equivalent to [`date.and_time(time)`](./struct.NaiveDate.html#method.and_time)\n and many other helper constructors on `NaiveDate`.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from date and time components.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":435968,"byte_end":436030,"line_start":82,"line_end":82,"column_start":5,"column_end":67}},{"value":"/ Equivalent to [`date.and_time(time)`](./struct.NaiveDate.html#method.and_time)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":436035,"byte_end":436117,"line_start":83,"line_end":83,"column_start":5,"column_end":87}},{"value":"/ and many other helper constructors on `NaiveDate`.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":436122,"byte_end":436176,"line_start":84,"line_end":84,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":436181,"byte_end":436184,"line_start":85,"line_end":85,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":436189,"byte_end":436202,"line_start":86,"line_end":86,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":436207,"byte_end":436210,"line_start":87,"line_end":87,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":436215,"byte_end":436222,"line_start":88,"line_end":88,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, NaiveTime, NaiveDateTime};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":436227,"byte_end":436281,"line_start":89,"line_end":89,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":436286,"byte_end":436289,"line_start":90,"line_end":90,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":436294,"byte_end":436338,"line_start":91,"line_end":91,"column_start":5,"column_end":49}},{"value":"/ let t = NaiveTime::from_hms_milli(12, 34, 56, 789);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":436343,"byte_end":436398,"line_start":92,"line_end":92,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":436403,"byte_end":436406,"line_start":93,"line_end":93,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDateTime::new(d, t);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":436411,"byte_end":436449,"line_start":94,"line_end":94,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(dt.date(), d);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":436454,"byte_end":436483,"line_start":95,"line_end":95,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(dt.time(), t);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":436488,"byte_end":436517,"line_start":96,"line_end":96,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":436522,"byte_end":436529,"line_start":97,"line_end":97,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":436534,"byte_end":436543,"line_start":98,"line_end":98,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2247},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":437827,"byte_end":437841,"line_start":129,"line_end":129,"column_start":12,"column_end":26},"name":"from_timestamp","qualname":"<NaiveDateTime>::from_timestamp","value":"fn from_timestamp(i64, u32) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` corresponding to a UTC date and time,\n from the number of non-leap seconds\n since the midnight UTC on January 1, 1970 (aka \"UNIX timestamp\")\n and the number of nanoseconds since the last whole non-leap second.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` corresponding to a UTC date and time,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":436660,"byte_end":436729,"line_start":103,"line_end":103,"column_start":5,"column_end":74}},{"value":"/ from the number of non-leap seconds","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":436734,"byte_end":436773,"line_start":104,"line_end":104,"column_start":5,"column_end":44}},{"value":"/ since the midnight UTC on January 1, 1970 (aka \"UNIX timestamp\")","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":436778,"byte_end":436846,"line_start":105,"line_end":105,"column_start":5,"column_end":73}},{"value":"/ and the number of nanoseconds since the last whole non-leap second.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":436851,"byte_end":436922,"line_start":106,"line_end":106,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":436927,"byte_end":436930,"line_start":107,"line_end":107,"column_start":5,"column_end":8}},{"value":"/ For a non-naive version of this function see","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":436935,"byte_end":436983,"line_start":108,"line_end":108,"column_start":5,"column_end":53}},{"value":"/ [`TimeZone::timestamp`](../offset/trait.TimeZone.html#method.timestamp).","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":436988,"byte_end":437064,"line_start":109,"line_end":109,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":437069,"byte_end":437072,"line_start":110,"line_end":110,"column_start":5,"column_end":8}},{"value":"/ The nanosecond part can exceed 1,000,000,000 in order to represent the","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":437077,"byte_end":437151,"line_start":111,"line_end":111,"column_start":5,"column_end":79}},{"value":"/ [leap second](./struct.NaiveTime.html#leap-second-handling). (The true \"UNIX","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":437156,"byte_end":437236,"line_start":112,"line_end":112,"column_start":5,"column_end":85}},{"value":"/ timestamp\" cannot represent a leap second unambiguously.)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":437241,"byte_end":437302,"line_start":113,"line_end":113,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":437307,"byte_end":437310,"line_start":114,"line_end":114,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-range number of seconds and/or invalid nanosecond.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":437315,"byte_end":437390,"line_start":115,"line_end":115,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":437395,"byte_end":437398,"line_start":116,"line_end":116,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":437403,"byte_end":437416,"line_start":117,"line_end":117,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":437421,"byte_end":437424,"line_start":118,"line_end":118,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":437429,"byte_end":437436,"line_start":119,"line_end":119,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDateTime, NaiveDate};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":437441,"byte_end":437484,"line_start":120,"line_end":120,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":437489,"byte_end":437492,"line_start":121,"line_end":121,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDateTime::from_timestamp(0, 42_000_000);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":437497,"byte_end":437555,"line_start":122,"line_end":122,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(dt, NaiveDate::from_ymd(1970, 1, 1).and_hms_milli(0, 0, 0, 42));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":437560,"byte_end":437639,"line_start":123,"line_end":123,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":437644,"byte_end":437647,"line_start":124,"line_end":124,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDateTime::from_timestamp(1_000_000_000, 0);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":437652,"byte_end":437713,"line_start":125,"line_end":125,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(dt, NaiveDate::from_ymd(2001, 9, 9).and_hms(1, 46, 40));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":437718,"byte_end":437789,"line_start":126,"line_end":126,"column_start":5,"column_end":76}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":437794,"byte_end":437801,"line_start":127,"line_end":127,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":437806,"byte_end":437815,"line_start":128,"line_end":128,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2248},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":439181,"byte_end":439199,"line_start":160,"line_end":160,"column_start":12,"column_end":30},"name":"from_timestamp_opt","qualname":"<NaiveDateTime>::from_timestamp_opt","value":"fn from_timestamp_opt(i64, u32) -> Option<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` corresponding to a UTC date and time,\n from the number of non-leap seconds\n since the midnight UTC on January 1, 1970 (aka \"UNIX timestamp\")\n and the number of nanoseconds since the last whole non-leap second.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` corresponding to a UTC date and time,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":438026,"byte_end":438095,"line_start":134,"line_end":134,"column_start":5,"column_end":74}},{"value":"/ from the number of non-leap seconds","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":438100,"byte_end":438139,"line_start":135,"line_end":135,"column_start":5,"column_end":44}},{"value":"/ since the midnight UTC on January 1, 1970 (aka \"UNIX timestamp\")","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":438144,"byte_end":438212,"line_start":136,"line_end":136,"column_start":5,"column_end":73}},{"value":"/ and the number of nanoseconds since the last whole non-leap second.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":438217,"byte_end":438288,"line_start":137,"line_end":137,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":438293,"byte_end":438296,"line_start":138,"line_end":138,"column_start":5,"column_end":8}},{"value":"/ The nanosecond part can exceed 1,000,000,000","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":438301,"byte_end":438349,"line_start":139,"line_end":139,"column_start":5,"column_end":53}},{"value":"/ in order to represent the [leap second](./struct.NaiveTime.html#leap-second-handling).","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":438354,"byte_end":438444,"line_start":140,"line_end":140,"column_start":5,"column_end":95}},{"value":"/ (The true \"UNIX timestamp\" cannot represent a leap second unambiguously.)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":438449,"byte_end":438526,"line_start":141,"line_end":141,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":438531,"byte_end":438534,"line_start":142,"line_end":142,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-range number of seconds and/or invalid nanosecond.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":438539,"byte_end":438622,"line_start":143,"line_end":143,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":438627,"byte_end":438630,"line_start":144,"line_end":144,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":438635,"byte_end":438648,"line_start":145,"line_end":145,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":438653,"byte_end":438656,"line_start":146,"line_end":146,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":438661,"byte_end":438668,"line_start":147,"line_end":147,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDateTime, NaiveDate};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":438673,"byte_end":438716,"line_start":148,"line_end":148,"column_start":5,"column_end":48}},{"value":"/ use std::i64;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":438721,"byte_end":438738,"line_start":149,"line_end":149,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":438743,"byte_end":438746,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ let from_timestamp_opt = NaiveDateTime::from_timestamp_opt;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":438751,"byte_end":438814,"line_start":151,"line_end":151,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":438819,"byte_end":438822,"line_start":152,"line_end":152,"column_start":5,"column_end":8}},{"value":"/ assert!(from_timestamp_opt(0, 0).is_some());","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":438827,"byte_end":438875,"line_start":153,"line_end":153,"column_start":5,"column_end":53}},{"value":"/ assert!(from_timestamp_opt(0, 999_999_999).is_some());","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":438880,"byte_end":438938,"line_start":154,"line_end":154,"column_start":5,"column_end":63}},{"value":"/ assert!(from_timestamp_opt(0, 1_500_000_000).is_some()); // leap second","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":438943,"byte_end":439018,"line_start":155,"line_end":155,"column_start":5,"column_end":80}},{"value":"/ assert!(from_timestamp_opt(0, 2_000_000_000).is_none());","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":439023,"byte_end":439083,"line_start":156,"line_end":156,"column_start":5,"column_end":65}},{"value":"/ assert!(from_timestamp_opt(i64::MAX, 0).is_none());","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":439088,"byte_end":439143,"line_start":157,"line_end":157,"column_start":5,"column_end":60}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":439148,"byte_end":439155,"line_start":158,"line_end":158,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":439160,"byte_end":439169,"line_start":159,"line_end":159,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2250},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":442562,"byte_end":442576,"line_start":234,"line_end":234,"column_start":12,"column_end":26},"name":"parse_from_str","qualname":"<NaiveDateTime>::parse_from_str","value":"fn parse_from_str(&str, &str) -> ParseResult<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Parses a string with the specified format string and returns a new `NaiveDateTime`.\n See the [`format::strftime` module](../format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[{"value":"/ Parses a string with the specified format string and returns a new `NaiveDateTime`.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":439709,"byte_end":439796,"line_start":173,"line_end":173,"column_start":5,"column_end":92}},{"value":"/ See the [`format::strftime` module](../format/strftime/index.html)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":439801,"byte_end":439871,"line_start":174,"line_end":174,"column_start":5,"column_end":75}},{"value":"/ on the supported escape sequences.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":439876,"byte_end":439914,"line_start":175,"line_end":175,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":439919,"byte_end":439922,"line_start":176,"line_end":176,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":439927,"byte_end":439940,"line_start":177,"line_end":177,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":439945,"byte_end":439948,"line_start":178,"line_end":178,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":439953,"byte_end":439960,"line_start":179,"line_end":179,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDateTime, NaiveDate};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":439965,"byte_end":440008,"line_start":180,"line_end":180,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":440013,"byte_end":440016,"line_start":181,"line_end":181,"column_start":5,"column_end":8}},{"value":"/ let parse_from_str = NaiveDateTime::parse_from_str;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":440021,"byte_end":440076,"line_start":182,"line_end":182,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":440081,"byte_end":440084,"line_start":183,"line_end":183,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(parse_from_str(\"2015-09-05 23:56:04\", \"%Y-%m-%d %H:%M:%S\"),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":440089,"byte_end":440163,"line_start":184,"line_end":184,"column_start":5,"column_end":79}},{"value":"/            Ok(NaiveDate::from_ymd(2015, 9, 5).and_hms(23, 56, 4)));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":440168,"byte_end":440239,"line_start":185,"line_end":185,"column_start":5,"column_end":76}},{"value":"/ assert_eq!(parse_from_str(\"5sep2015pm012345.6789\", \"%d%b%Y%p%I%M%S%.f\"),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":440244,"byte_end":440320,"line_start":186,"line_end":186,"column_start":5,"column_end":81}},{"value":"/            Ok(NaiveDate::from_ymd(2015, 9, 5).and_hms_micro(13, 23, 45, 678_900)));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":440325,"byte_end":440412,"line_start":187,"line_end":187,"column_start":5,"column_end":92}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":440417,"byte_end":440424,"line_start":188,"line_end":188,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":440429,"byte_end":440432,"line_start":189,"line_end":189,"column_start":5,"column_end":8}},{"value":"/ Offset is ignored for the purpose of parsing.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":440437,"byte_end":440486,"line_start":190,"line_end":190,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":440491,"byte_end":440494,"line_start":191,"line_end":191,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":440499,"byte_end":440506,"line_start":192,"line_end":192,"column_start":5,"column_end":12}},{"value":"/ # use chrono::{NaiveDateTime, NaiveDate};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":440511,"byte_end":440556,"line_start":193,"line_end":193,"column_start":5,"column_end":50}},{"value":"/ # let parse_from_str = NaiveDateTime::parse_from_str;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":440561,"byte_end":440618,"line_start":194,"line_end":194,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(parse_from_str(\"2014-5-17T12:34:56+09:30\", \"%Y-%m-%dT%H:%M:%S%z\"),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":440623,"byte_end":440704,"line_start":195,"line_end":195,"column_start":5,"column_end":86}},{"value":"/            Ok(NaiveDate::from_ymd(2014, 5, 17).and_hms(12, 34, 56)));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":440709,"byte_end":440782,"line_start":196,"line_end":196,"column_start":5,"column_end":78}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":440787,"byte_end":440794,"line_start":197,"line_end":197,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":440799,"byte_end":440802,"line_start":198,"line_end":198,"column_start":5,"column_end":8}},{"value":"/ [Leap seconds](./struct.NaiveTime.html#leap-second-handling) are correctly handled by","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":440807,"byte_end":440896,"line_start":199,"line_end":199,"column_start":5,"column_end":94}},{"value":"/ treating any time of the form `hh:mm:60` as a leap second.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":440901,"byte_end":440963,"line_start":200,"line_end":200,"column_start":5,"column_end":67}},{"value":"/ (This equally applies to the formatting, so the round trip is possible.)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":440968,"byte_end":441044,"line_start":201,"line_end":201,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":441049,"byte_end":441052,"line_start":202,"line_end":202,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":441057,"byte_end":441064,"line_start":203,"line_end":203,"column_start":5,"column_end":12}},{"value":"/ # use chrono::{NaiveDateTime, NaiveDate};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":441069,"byte_end":441114,"line_start":204,"line_end":204,"column_start":5,"column_end":50}},{"value":"/ # let parse_from_str = NaiveDateTime::parse_from_str;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":441119,"byte_end":441176,"line_start":205,"line_end":205,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(parse_from_str(\"2015-07-01 08:59:60.123\", \"%Y-%m-%d %H:%M:%S%.f\"),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":441181,"byte_end":441262,"line_start":206,"line_end":206,"column_start":5,"column_end":86}},{"value":"/            Ok(NaiveDate::from_ymd(2015, 7, 1).and_hms_milli(8, 59, 59, 1_123)));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":441267,"byte_end":441351,"line_start":207,"line_end":207,"column_start":5,"column_end":89}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":441356,"byte_end":441363,"line_start":208,"line_end":208,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":441368,"byte_end":441371,"line_start":209,"line_end":209,"column_start":5,"column_end":8}},{"value":"/ Missing seconds are assumed to be zero,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":441376,"byte_end":441419,"line_start":210,"line_end":210,"column_start":5,"column_end":48}},{"value":"/ but out-of-bound times or insufficient fields are errors otherwise.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":441424,"byte_end":441495,"line_start":211,"line_end":211,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":441500,"byte_end":441503,"line_start":212,"line_end":212,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":441508,"byte_end":441515,"line_start":213,"line_end":213,"column_start":5,"column_end":12}},{"value":"/ # use chrono::{NaiveDateTime, NaiveDate};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":441520,"byte_end":441565,"line_start":214,"line_end":214,"column_start":5,"column_end":50}},{"value":"/ # let parse_from_str = NaiveDateTime::parse_from_str;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":441570,"byte_end":441627,"line_start":215,"line_end":215,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(parse_from_str(\"94/9/4 7:15\", \"%y/%m/%d %H:%M\"),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":441632,"byte_end":441695,"line_start":216,"line_end":216,"column_start":5,"column_end":68}},{"value":"/            Ok(NaiveDate::from_ymd(1994, 9, 4).and_hms(7, 15, 0)));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":441700,"byte_end":441770,"line_start":217,"line_end":217,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":441775,"byte_end":441778,"line_start":218,"line_end":218,"column_start":5,"column_end":8}},{"value":"/ assert!(parse_from_str(\"04m33s\", \"%Mm%Ss\").is_err());","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":441783,"byte_end":441840,"line_start":219,"line_end":219,"column_start":5,"column_end":62}},{"value":"/ assert!(parse_from_str(\"94/9/4 12\", \"%y/%m/%d %H\").is_err());","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":441845,"byte_end":441910,"line_start":220,"line_end":220,"column_start":5,"column_end":70}},{"value":"/ assert!(parse_from_str(\"94/9/4 17:60\", \"%y/%m/%d %H:%M\").is_err());","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":441915,"byte_end":441986,"line_start":221,"line_end":221,"column_start":5,"column_end":76}},{"value":"/ assert!(parse_from_str(\"94/9/4 24:00:00\", \"%y/%m/%d %H:%M:%S\").is_err());","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":441991,"byte_end":442068,"line_start":222,"line_end":222,"column_start":5,"column_end":82}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":442073,"byte_end":442080,"line_start":223,"line_end":223,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":442085,"byte_end":442088,"line_start":224,"line_end":224,"column_start":5,"column_end":8}},{"value":"/ All parsed fields should be consistent to each other, otherwise it's an error.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":442093,"byte_end":442175,"line_start":225,"line_end":225,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":442180,"byte_end":442183,"line_start":226,"line_end":226,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":442188,"byte_end":442195,"line_start":227,"line_end":227,"column_start":5,"column_end":12}},{"value":"/ # use chrono::NaiveDateTime;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":442200,"byte_end":442232,"line_start":228,"line_end":228,"column_start":5,"column_end":37}},{"value":"/ # let parse_from_str = NaiveDateTime::parse_from_str;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":442237,"byte_end":442294,"line_start":229,"line_end":229,"column_start":5,"column_end":62}},{"value":"/ let fmt = \"%Y-%m-%d %H:%M:%S = UNIX timestamp %s\";","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":442299,"byte_end":442353,"line_start":230,"line_end":230,"column_start":5,"column_end":59}},{"value":"/ assert!(parse_from_str(\"2001-09-09 01:46:39 = UNIX timestamp 999999999\", fmt).is_ok());","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":442358,"byte_end":442449,"line_start":231,"line_end":231,"column_start":5,"column_end":96}},{"value":"/ assert!(parse_from_str(\"1970-01-01 00:00:00 = UNIX timestamp 1\", fmt).is_err());","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":442454,"byte_end":442538,"line_start":232,"line_end":232,"column_start":5,"column_end":89}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":442543,"byte_end":442550,"line_start":233,"line_end":233,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2251},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":443096,"byte_end":443100,"line_start":251,"line_end":251,"column_start":12,"column_end":16},"name":"date","qualname":"<NaiveDateTime>::date","value":"fn date(&Self) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Retrieves a date component.","sig":null,"attributes":[{"value":"/ Retrieves a date component.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":442809,"byte_end":442840,"line_start":240,"line_end":240,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":442845,"byte_end":442848,"line_start":241,"line_end":241,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":442853,"byte_end":442866,"line_start":242,"line_end":242,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":442871,"byte_end":442874,"line_start":243,"line_end":243,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":442879,"byte_end":442886,"line_start":244,"line_end":244,"column_start":5,"column_end":12}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":442891,"byte_end":442917,"line_start":245,"line_end":245,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":442922,"byte_end":442925,"line_start":246,"line_end":246,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2016, 7, 8).and_hms(9, 10, 11);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":442930,"byte_end":442994,"line_start":247,"line_end":247,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(dt.date(), NaiveDate::from_ymd(2016, 7, 8));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":442999,"byte_end":443058,"line_start":248,"line_end":248,"column_start":5,"column_end":64}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":443063,"byte_end":443070,"line_start":249,"line_end":249,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":443075,"byte_end":443084,"line_start":250,"line_end":250,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2252},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":443451,"byte_end":443455,"line_start":266,"line_end":266,"column_start":12,"column_end":16},"name":"time","qualname":"<NaiveDateTime>::time","value":"fn time(&Self) -> NaiveTime","parent":null,"children":[],"decl_id":null,"docs":" Retrieves a time component.","sig":null,"attributes":[{"value":"/ Retrieves a time component.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":443152,"byte_end":443183,"line_start":255,"line_end":255,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":443188,"byte_end":443191,"line_start":256,"line_end":256,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":443196,"byte_end":443209,"line_start":257,"line_end":257,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":443214,"byte_end":443217,"line_start":258,"line_end":258,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":443222,"byte_end":443229,"line_start":259,"line_end":259,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, NaiveTime};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":443234,"byte_end":443273,"line_start":260,"line_end":260,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":443278,"byte_end":443281,"line_start":261,"line_end":261,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2016, 7, 8).and_hms(9, 10, 11);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":443286,"byte_end":443350,"line_start":262,"line_end":262,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(dt.time(), NaiveTime::from_hms(9, 10, 11));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":443355,"byte_end":443413,"line_start":263,"line_end":263,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":443418,"byte_end":443425,"line_start":264,"line_end":264,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":443430,"byte_end":443439,"line_start":265,"line_end":265,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2253},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":444360,"byte_end":444369,"line_start":293,"line_end":293,"column_start":12,"column_end":21},"name":"timestamp","qualname":"<NaiveDateTime>::timestamp","value":"fn timestamp(&Self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of non-leap seconds since the midnight on January 1, 1970.","sig":null,"attributes":[{"value":"/ Returns the number of non-leap seconds since the midnight on January 1, 1970.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":443507,"byte_end":443588,"line_start":270,"line_end":270,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":443593,"byte_end":443596,"line_start":271,"line_end":271,"column_start":5,"column_end":8}},{"value":"/ Note that this does *not* account for the timezone!","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":443601,"byte_end":443656,"line_start":272,"line_end":272,"column_start":5,"column_end":60}},{"value":"/ The true \"UNIX timestamp\" would count seconds since the midnight *UTC* on the epoch.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":443661,"byte_end":443749,"line_start":273,"line_end":273,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":443754,"byte_end":443757,"line_start":274,"line_end":274,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":443762,"byte_end":443775,"line_start":275,"line_end":275,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":443780,"byte_end":443783,"line_start":276,"line_end":276,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":443788,"byte_end":443795,"line_start":277,"line_end":277,"column_start":5,"column_end":12}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":443800,"byte_end":443826,"line_start":278,"line_end":278,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":443831,"byte_end":443834,"line_start":279,"line_end":279,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(1970, 1, 1).and_hms_milli(0, 0, 1, 980);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":443839,"byte_end":443912,"line_start":280,"line_end":280,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(dt.timestamp(), 1);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":443917,"byte_end":443951,"line_start":281,"line_end":281,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":443956,"byte_end":443959,"line_start":282,"line_end":282,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2001, 9, 9).and_hms(1, 46, 40);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":443964,"byte_end":444028,"line_start":283,"line_end":283,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(dt.timestamp(), 1_000_000_000);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":444033,"byte_end":444079,"line_start":284,"line_end":284,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":444084,"byte_end":444087,"line_start":285,"line_end":285,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(1969, 12, 31).and_hms(23, 59, 59);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":444092,"byte_end":444159,"line_start":286,"line_end":286,"column_start":5,"column_end":72}},{"value":"/ assert_eq!(dt.timestamp(), -1);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":444164,"byte_end":444199,"line_start":287,"line_end":287,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":444204,"byte_end":444207,"line_start":288,"line_end":288,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(-1, 1, 1).and_hms(0, 0, 0);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":444212,"byte_end":444272,"line_start":289,"line_end":289,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(dt.timestamp(), -62198755200);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":444277,"byte_end":444322,"line_start":290,"line_end":290,"column_start":5,"column_end":50}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":444327,"byte_end":444334,"line_start":291,"line_end":291,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":444339,"byte_end":444348,"line_start":292,"line_end":292,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2255},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":445745,"byte_end":445761,"line_start":325,"line_end":325,"column_start":12,"column_end":28},"name":"timestamp_millis","qualname":"<NaiveDateTime>::timestamp_millis","value":"fn timestamp_millis(&Self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of non-leap *milliseconds* since midnight on January 1, 1970.","sig":null,"attributes":[{"value":"/ Returns the number of non-leap *milliseconds* since midnight on January 1, 1970.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":444671,"byte_end":444755,"line_start":300,"line_end":300,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":444760,"byte_end":444763,"line_start":301,"line_end":301,"column_start":5,"column_end":8}},{"value":"/ Note that this does *not* account for the timezone!","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":444768,"byte_end":444823,"line_start":302,"line_end":302,"column_start":5,"column_end":60}},{"value":"/ The true \"UNIX timestamp\" would count seconds since the midnight *UTC* on the epoch.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":444828,"byte_end":444916,"line_start":303,"line_end":303,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":444921,"byte_end":444924,"line_start":304,"line_end":304,"column_start":5,"column_end":8}},{"value":"/ Note also that this does reduce the number of years that can be","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":444929,"byte_end":444996,"line_start":305,"line_end":305,"column_start":5,"column_end":72}},{"value":"/ represented from ~584 Billion to ~584 Million. (If this is a problem,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":445001,"byte_end":445074,"line_start":306,"line_end":306,"column_start":5,"column_end":78}},{"value":"/ please file an issue to let me know what domain needs millisecond","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":445079,"byte_end":445148,"line_start":307,"line_end":307,"column_start":5,"column_end":74}},{"value":"/ precision over billions of years, I'm curious.)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":445153,"byte_end":445204,"line_start":308,"line_end":308,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":445209,"byte_end":445212,"line_start":309,"line_end":309,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":445217,"byte_end":445230,"line_start":310,"line_end":310,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":445235,"byte_end":445238,"line_start":311,"line_end":311,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":445243,"byte_end":445250,"line_start":312,"line_end":312,"column_start":5,"column_end":12}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":445255,"byte_end":445281,"line_start":313,"line_end":313,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":445286,"byte_end":445289,"line_start":314,"line_end":314,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(1970, 1, 1).and_hms_milli(0, 0, 1, 444);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":445294,"byte_end":445367,"line_start":315,"line_end":315,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(dt.timestamp_millis(), 1_444);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":445372,"byte_end":445417,"line_start":316,"line_end":316,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":445422,"byte_end":445425,"line_start":317,"line_end":317,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2001, 9, 9).and_hms_milli(1, 46, 40, 555);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":445430,"byte_end":445505,"line_start":318,"line_end":318,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(dt.timestamp_millis(), 1_000_000_000_555);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":445510,"byte_end":445567,"line_start":319,"line_end":319,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":445572,"byte_end":445575,"line_start":320,"line_end":320,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(1969, 12, 31).and_hms_milli(23, 59, 59, 100);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":445580,"byte_end":445658,"line_start":321,"line_end":321,"column_start":5,"column_end":83}},{"value":"/ assert_eq!(dt.timestamp_millis(), -900);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":445663,"byte_end":445707,"line_start":322,"line_end":322,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":445712,"byte_end":445719,"line_start":323,"line_end":323,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":445724,"byte_end":445733,"line_start":324,"line_end":324,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2256},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":446827,"byte_end":446843,"line_start":352,"line_end":352,"column_start":12,"column_end":28},"name":"timestamp_micros","qualname":"<NaiveDateTime>::timestamp_micros","value":"fn timestamp_micros(&Self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of non-leap *microseconds* since midnight on January 1, 1970.","sig":null,"attributes":[{"value":"/ Returns the number of non-leap *microseconds* since midnight on January 1, 1970.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":445892,"byte_end":445976,"line_start":330,"line_end":330,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":445981,"byte_end":445984,"line_start":331,"line_end":331,"column_start":5,"column_end":8}},{"value":"/ Note that this does *not* account for the timezone!","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":445989,"byte_end":446044,"line_start":332,"line_end":332,"column_start":5,"column_end":60}},{"value":"/ The true \"UNIX timestamp\" would count seconds since the midnight *UTC* on the epoch.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":446049,"byte_end":446137,"line_start":333,"line_end":333,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":446142,"byte_end":446145,"line_start":334,"line_end":334,"column_start":5,"column_end":8}},{"value":"/ Note also that this does reduce the number of years that can be","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":446150,"byte_end":446217,"line_start":335,"line_end":335,"column_start":5,"column_end":72}},{"value":"/ represented from ~584 Billion to ~584 Thousand. (If this is a problem,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":446222,"byte_end":446296,"line_start":336,"line_end":336,"column_start":5,"column_end":79}},{"value":"/ please file an issue to let me know what domain needs microsecond","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":446301,"byte_end":446370,"line_start":337,"line_end":337,"column_start":5,"column_end":74}},{"value":"/ precision over millennia, I'm curious.)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":446375,"byte_end":446418,"line_start":338,"line_end":338,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":446423,"byte_end":446426,"line_start":339,"line_end":339,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":446431,"byte_end":446444,"line_start":340,"line_end":340,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":446449,"byte_end":446452,"line_start":341,"line_end":341,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":446457,"byte_end":446464,"line_start":342,"line_end":342,"column_start":5,"column_end":12}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":446469,"byte_end":446495,"line_start":343,"line_end":343,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":446500,"byte_end":446503,"line_start":344,"line_end":344,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(1970, 1, 1).and_hms_micro(0, 0, 1, 444);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":446508,"byte_end":446581,"line_start":345,"line_end":345,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(dt.timestamp_micros(), 1_000_444);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":446586,"byte_end":446635,"line_start":346,"line_end":346,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":446640,"byte_end":446643,"line_start":347,"line_end":347,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2001, 9, 9).and_hms_micro(1, 46, 40, 555);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":446648,"byte_end":446723,"line_start":348,"line_end":348,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(dt.timestamp_micros(), 1_000_000_000_000_555);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":446728,"byte_end":446789,"line_start":349,"line_end":349,"column_start":5,"column_end":66}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":446794,"byte_end":446801,"line_start":350,"line_end":350,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":446806,"byte_end":446815,"line_start":351,"line_end":351,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2257},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":448314,"byte_end":448329,"line_start":391,"line_end":391,"column_start":12,"column_end":27},"name":"timestamp_nanos","qualname":"<NaiveDateTime>::timestamp_nanos","value":"fn timestamp_nanos(&Self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of non-leap *nanoseconds* since midnight on January 1, 1970.","sig":null,"attributes":[{"value":"/ Returns the number of non-leap *nanoseconds* since midnight on January 1, 1970.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":446979,"byte_end":447062,"line_start":357,"line_end":357,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":447067,"byte_end":447070,"line_start":358,"line_end":358,"column_start":5,"column_end":8}},{"value":"/ Note that this does *not* account for the timezone!","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":447075,"byte_end":447130,"line_start":359,"line_end":359,"column_start":5,"column_end":60}},{"value":"/ The true \"UNIX timestamp\" would count seconds since the midnight *UTC* on the epoch.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":447135,"byte_end":447223,"line_start":360,"line_end":360,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":447228,"byte_end":447231,"line_start":361,"line_end":361,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":447236,"byte_end":447248,"line_start":362,"line_end":362,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":447253,"byte_end":447256,"line_start":363,"line_end":363,"column_start":5,"column_end":8}},{"value":"/ Note also that this does reduce the number of years that can be","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":447261,"byte_end":447328,"line_start":364,"line_end":364,"column_start":5,"column_end":72}},{"value":"/ represented from ~584 Billion to ~584 years. The dates that can be","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":447333,"byte_end":447403,"line_start":365,"line_end":365,"column_start":5,"column_end":75}},{"value":"/ represented as nanoseconds are between 1677-09-21T00:12:44.0 and","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":447408,"byte_end":447476,"line_start":366,"line_end":366,"column_start":5,"column_end":73}},{"value":"/ 2262-04-11T23:47:16.854775804.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":447481,"byte_end":447515,"line_start":367,"line_end":367,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":447520,"byte_end":447523,"line_start":368,"line_end":368,"column_start":5,"column_end":8}},{"value":"/ (If this is a problem, please file an issue to let me know what domain","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":447528,"byte_end":447602,"line_start":369,"line_end":369,"column_start":5,"column_end":79}},{"value":"/ needs nanosecond precision over millennia, I'm curious.)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":447607,"byte_end":447667,"line_start":370,"line_end":370,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":447672,"byte_end":447675,"line_start":371,"line_end":371,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":447680,"byte_end":447693,"line_start":372,"line_end":372,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":447698,"byte_end":447701,"line_start":373,"line_end":373,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":447706,"byte_end":447713,"line_start":374,"line_end":374,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":447718,"byte_end":447761,"line_start":375,"line_end":375,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":447766,"byte_end":447769,"line_start":376,"line_end":376,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(1970, 1, 1).and_hms_nano(0, 0, 1, 444);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":447774,"byte_end":447846,"line_start":377,"line_end":377,"column_start":5,"column_end":77}},{"value":"/ assert_eq!(dt.timestamp_nanos(), 1_000_000_444);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":447851,"byte_end":447903,"line_start":378,"line_end":378,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":447908,"byte_end":447911,"line_start":379,"line_end":379,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2001, 9, 9).and_hms_nano(1, 46, 40, 555);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":447916,"byte_end":447990,"line_start":380,"line_end":380,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":447995,"byte_end":447998,"line_start":381,"line_end":381,"column_start":5,"column_end":8}},{"value":"/ const A_BILLION: i64 = 1_000_000_000;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":448003,"byte_end":448044,"line_start":382,"line_end":382,"column_start":5,"column_end":46}},{"value":"/ let nanos = dt.timestamp_nanos();","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":448049,"byte_end":448086,"line_start":383,"line_end":383,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(nanos, 1_000_000_000_000_000_555);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":448091,"byte_end":448140,"line_start":384,"line_end":384,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":448145,"byte_end":448160,"line_start":385,"line_end":385,"column_start":5,"column_end":20}},{"value":"/     dt,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":448165,"byte_end":448176,"line_start":386,"line_end":386,"column_start":5,"column_end":16}},{"value":"/     NaiveDateTime::from_timestamp(nanos / A_BILLION, (nanos % A_BILLION) as u32)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":448181,"byte_end":448265,"line_start":387,"line_end":387,"column_start":5,"column_end":89}},{"value":"/ );","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":448270,"byte_end":448276,"line_start":388,"line_end":388,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":448281,"byte_end":448288,"line_start":389,"line_end":389,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":448293,"byte_end":448302,"line_start":390,"line_end":390,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2258},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":449105,"byte_end":449128,"line_start":413,"line_end":413,"column_start":12,"column_end":35},"name":"timestamp_subsec_millis","qualname":"<NaiveDateTime>::timestamp_subsec_millis","value":"fn timestamp_subsec_millis(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of milliseconds since the last whole non-leap second.","sig":null,"attributes":[{"value":"/ Returns the number of milliseconds since the last whole non-leap second.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":448468,"byte_end":448544,"line_start":396,"line_end":396,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":448549,"byte_end":448552,"line_start":397,"line_end":397,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 0 to 999,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":448557,"byte_end":448599,"line_start":398,"line_end":398,"column_start":5,"column_end":47}},{"value":"/ or for [leap seconds](./struct.NaiveTime.html#leap-second-handling), to 1,999.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":448604,"byte_end":448686,"line_start":399,"line_end":399,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":448691,"byte_end":448694,"line_start":400,"line_end":400,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":448699,"byte_end":448712,"line_start":401,"line_end":401,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":448717,"byte_end":448720,"line_start":402,"line_end":402,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":448725,"byte_end":448732,"line_start":403,"line_end":403,"column_start":5,"column_end":12}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":448737,"byte_end":448763,"line_start":404,"line_end":404,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":448768,"byte_end":448771,"line_start":405,"line_end":405,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2016, 7, 8).and_hms_nano(9, 10, 11, 123_456_789);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":448776,"byte_end":448858,"line_start":406,"line_end":406,"column_start":5,"column_end":87}},{"value":"/ assert_eq!(dt.timestamp_subsec_millis(), 123);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":448863,"byte_end":448913,"line_start":407,"line_end":407,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":448918,"byte_end":448921,"line_start":408,"line_end":408,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2015, 7, 1).and_hms_nano(8, 59, 59, 1_234_567_890);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":448926,"byte_end":449010,"line_start":409,"line_end":409,"column_start":5,"column_end":89}},{"value":"/ assert_eq!(dt.timestamp_subsec_millis(), 1_234);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":449015,"byte_end":449067,"line_start":410,"line_end":410,"column_start":5,"column_end":57}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":449072,"byte_end":449079,"line_start":411,"line_end":411,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":449084,"byte_end":449093,"line_start":412,"line_end":412,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2259},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":449859,"byte_end":449882,"line_start":434,"line_end":434,"column_start":12,"column_end":35},"name":"timestamp_subsec_micros","qualname":"<NaiveDateTime>::timestamp_subsec_micros","value":"fn timestamp_subsec_micros(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of microseconds since the last whole non-leap second.","sig":null,"attributes":[{"value":"/ Returns the number of microseconds since the last whole non-leap second.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":449206,"byte_end":449282,"line_start":417,"line_end":417,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":449287,"byte_end":449290,"line_start":418,"line_end":418,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 0 to 999,999,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":449295,"byte_end":449341,"line_start":419,"line_end":419,"column_start":5,"column_end":51}},{"value":"/ or for [leap seconds](./struct.NaiveTime.html#leap-second-handling), to 1,999,999.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":449346,"byte_end":449432,"line_start":420,"line_end":420,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":449437,"byte_end":449440,"line_start":421,"line_end":421,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":449445,"byte_end":449458,"line_start":422,"line_end":422,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":449463,"byte_end":449466,"line_start":423,"line_end":423,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":449471,"byte_end":449478,"line_start":424,"line_end":424,"column_start":5,"column_end":12}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":449483,"byte_end":449509,"line_start":425,"line_end":425,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":449514,"byte_end":449517,"line_start":426,"line_end":426,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2016, 7, 8).and_hms_nano(9, 10, 11, 123_456_789);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":449522,"byte_end":449604,"line_start":427,"line_end":427,"column_start":5,"column_end":87}},{"value":"/ assert_eq!(dt.timestamp_subsec_micros(), 123_456);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":449609,"byte_end":449663,"line_start":428,"line_end":428,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":449668,"byte_end":449671,"line_start":429,"line_end":429,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2015, 7, 1).and_hms_nano(8, 59, 59, 1_234_567_890);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":449676,"byte_end":449760,"line_start":430,"line_end":430,"column_start":5,"column_end":89}},{"value":"/ assert_eq!(dt.timestamp_subsec_micros(), 1_234_567);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":449765,"byte_end":449821,"line_start":431,"line_end":431,"column_start":5,"column_end":61}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":449826,"byte_end":449833,"line_start":432,"line_end":432,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":449838,"byte_end":449847,"line_start":433,"line_end":433,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2260},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":450622,"byte_end":450644,"line_start":455,"line_end":455,"column_start":12,"column_end":34},"name":"timestamp_subsec_nanos","qualname":"<NaiveDateTime>::timestamp_subsec_nanos","value":"fn timestamp_subsec_nanos(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of nanoseconds since the last whole non-leap second.","sig":null,"attributes":[{"value":"/ Returns the number of nanoseconds since the last whole non-leap second.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":449956,"byte_end":450031,"line_start":438,"line_end":438,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":450036,"byte_end":450039,"line_start":439,"line_end":439,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 0 to 999,999,999,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":450044,"byte_end":450094,"line_start":440,"line_end":440,"column_start":5,"column_end":55}},{"value":"/ or for [leap seconds](./struct.NaiveTime.html#leap-second-handling), to 1,999,999,999.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":450099,"byte_end":450189,"line_start":441,"line_end":441,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":450194,"byte_end":450197,"line_start":442,"line_end":442,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":450202,"byte_end":450215,"line_start":443,"line_end":443,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":450220,"byte_end":450223,"line_start":444,"line_end":444,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":450228,"byte_end":450235,"line_start":445,"line_end":445,"column_start":5,"column_end":12}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":450240,"byte_end":450266,"line_start":446,"line_end":446,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":450271,"byte_end":450274,"line_start":447,"line_end":447,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2016, 7, 8).and_hms_nano(9, 10, 11, 123_456_789);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":450279,"byte_end":450361,"line_start":448,"line_end":448,"column_start":5,"column_end":87}},{"value":"/ assert_eq!(dt.timestamp_subsec_nanos(), 123_456_789);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":450366,"byte_end":450423,"line_start":449,"line_end":449,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":450428,"byte_end":450431,"line_start":450,"line_end":450,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2015, 7, 1).and_hms_nano(8, 59, 59, 1_234_567_890);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":450436,"byte_end":450520,"line_start":451,"line_end":451,"column_start":5,"column_end":89}},{"value":"/ assert_eq!(dt.timestamp_subsec_nanos(), 1_234_567_890);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":450525,"byte_end":450584,"line_start":452,"line_end":452,"column_start":5,"column_end":64}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":450589,"byte_end":450596,"line_start":453,"line_end":453,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":450601,"byte_end":450610,"line_start":454,"line_end":454,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2261},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":453743,"byte_end":453761,"line_start":524,"line_end":524,"column_start":12,"column_end":30},"name":"checked_add_signed","qualname":"<NaiveDateTime>::checked_add_signed","value":"fn checked_add_signed(Self, OldDuration) -> Option<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Adds given `Duration` to the current date and time.","sig":null,"attributes":[{"value":"/ Adds given `Duration` to the current date and time.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":450703,"byte_end":450758,"line_start":459,"line_end":459,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":450763,"byte_end":450766,"line_start":460,"line_end":460,"column_start":5,"column_end":8}},{"value":"/ As a part of Chrono's [leap second handling](./struct.NaiveTime.html#leap-second-handling),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":450771,"byte_end":450866,"line_start":461,"line_end":461,"column_start":5,"column_end":100}},{"value":"/ the addition assumes that **there is no leap second ever**,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":450871,"byte_end":450934,"line_start":462,"line_end":462,"column_start":5,"column_end":68}},{"value":"/ except when the `NaiveDateTime` itself represents a leap second","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":450939,"byte_end":451006,"line_start":463,"line_end":463,"column_start":5,"column_end":72}},{"value":"/ in which case the assumption becomes that **there is exactly a single leap second ever**.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":451011,"byte_end":451104,"line_start":464,"line_end":464,"column_start":5,"column_end":98}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":451109,"byte_end":451112,"line_start":465,"line_end":465,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when it will result in overflow.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":451117,"byte_end":451168,"line_start":466,"line_end":466,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":451173,"byte_end":451176,"line_start":467,"line_end":467,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":451181,"byte_end":451194,"line_start":468,"line_end":468,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":451199,"byte_end":451202,"line_start":469,"line_end":469,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":451207,"byte_end":451214,"line_start":470,"line_end":470,"column_start":5,"column_end":12}},{"value":"/ use chrono::{Duration, NaiveDate};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":451219,"byte_end":451257,"line_start":471,"line_end":471,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":451262,"byte_end":451265,"line_start":472,"line_end":472,"column_start":5,"column_end":8}},{"value":"/ let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":451270,"byte_end":451309,"line_start":473,"line_end":473,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":451314,"byte_end":451317,"line_start":474,"line_end":474,"column_start":5,"column_end":8}},{"value":"/ let d = from_ymd(2016, 7, 8);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":451322,"byte_end":451355,"line_start":475,"line_end":475,"column_start":5,"column_end":38}},{"value":"/ let hms = |h, m, s| d.and_hms(h, m, s);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":451360,"byte_end":451403,"line_start":476,"line_end":476,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_add_signed(Duration::zero()),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":451408,"byte_end":451473,"line_start":477,"line_end":477,"column_start":5,"column_end":70}},{"value":"/            Some(hms(3, 5, 7)));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":451478,"byte_end":451513,"line_start":478,"line_end":478,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_add_signed(Duration::seconds(1)),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":451518,"byte_end":451587,"line_start":479,"line_end":479,"column_start":5,"column_end":74}},{"value":"/            Some(hms(3, 5, 8)));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":451592,"byte_end":451627,"line_start":480,"line_end":480,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_add_signed(Duration::seconds(-1)),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":451632,"byte_end":451702,"line_start":481,"line_end":481,"column_start":5,"column_end":75}},{"value":"/            Some(hms(3, 5, 6)));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":451707,"byte_end":451742,"line_start":482,"line_end":482,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_add_signed(Duration::seconds(3600 + 60)),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":451747,"byte_end":451824,"line_start":483,"line_end":483,"column_start":5,"column_end":82}},{"value":"/            Some(hms(4, 6, 7)));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":451829,"byte_end":451864,"line_start":484,"line_end":484,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_add_signed(Duration::seconds(86_400)),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":451869,"byte_end":451943,"line_start":485,"line_end":485,"column_start":5,"column_end":79}},{"value":"/            Some(from_ymd(2016, 7, 9).and_hms(3, 5, 7)));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":451948,"byte_end":452008,"line_start":486,"line_end":486,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":452013,"byte_end":452016,"line_start":487,"line_end":487,"column_start":5,"column_end":8}},{"value":"/ let hmsm = |h, m, s, milli| d.and_hms_milli(h, m, s, milli);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":452021,"byte_end":452085,"line_start":488,"line_end":488,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(hmsm(3, 5, 7, 980).checked_add_signed(Duration::milliseconds(450)),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":452090,"byte_end":452172,"line_start":489,"line_end":489,"column_start":5,"column_end":87}},{"value":"/            Some(hmsm(3, 5, 8, 430)));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":452177,"byte_end":452218,"line_start":490,"line_end":490,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":452223,"byte_end":452230,"line_start":491,"line_end":491,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":452235,"byte_end":452238,"line_start":492,"line_end":492,"column_start":5,"column_end":8}},{"value":"/ Overflow returns `None`.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":452243,"byte_end":452271,"line_start":493,"line_end":493,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":452276,"byte_end":452279,"line_start":494,"line_end":494,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":452284,"byte_end":452291,"line_start":495,"line_end":495,"column_start":5,"column_end":12}},{"value":"/ # use chrono::{Duration, NaiveDate};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":452296,"byte_end":452336,"line_start":496,"line_end":496,"column_start":5,"column_end":45}},{"value":"/ # let hms = |h, m, s| NaiveDate::from_ymd(2016, 7, 8).and_hms(h, m, s);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":452341,"byte_end":452416,"line_start":497,"line_end":497,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_add_signed(Duration::days(1_000_000_000)), None);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":452421,"byte_end":452506,"line_start":498,"line_end":498,"column_start":5,"column_end":90}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":452511,"byte_end":452518,"line_start":499,"line_end":499,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":452523,"byte_end":452526,"line_start":500,"line_end":500,"column_start":5,"column_end":8}},{"value":"/ Leap seconds are handled,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":452531,"byte_end":452560,"line_start":501,"line_end":501,"column_start":5,"column_end":34}},{"value":"/ but the addition assumes that it is the only leap second happened.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":452565,"byte_end":452635,"line_start":502,"line_end":502,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":452640,"byte_end":452643,"line_start":503,"line_end":503,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":452648,"byte_end":452655,"line_start":504,"line_end":504,"column_start":5,"column_end":12}},{"value":"/ # use chrono::{Duration, NaiveDate};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":452660,"byte_end":452700,"line_start":505,"line_end":505,"column_start":5,"column_end":45}},{"value":"/ # let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":452705,"byte_end":452746,"line_start":506,"line_end":506,"column_start":5,"column_end":46}},{"value":"/ # let hmsm = |h, m, s, milli| from_ymd(2016, 7, 8).and_hms_milli(h, m, s, milli);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":452751,"byte_end":452836,"line_start":507,"line_end":507,"column_start":5,"column_end":90}},{"value":"/ let leap = hmsm(3, 5, 59, 1_300);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":452841,"byte_end":452878,"line_start":508,"line_end":508,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(leap.checked_add_signed(Duration::zero()),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":452883,"byte_end":452940,"line_start":509,"line_end":509,"column_start":5,"column_end":62}},{"value":"/            Some(hmsm(3, 5, 59, 1_300)));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":452945,"byte_end":452989,"line_start":510,"line_end":510,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(leap.checked_add_signed(Duration::milliseconds(-500)),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":452994,"byte_end":453063,"line_start":511,"line_end":511,"column_start":5,"column_end":74}},{"value":"/            Some(hmsm(3, 5, 59, 800)));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":453068,"byte_end":453110,"line_start":512,"line_end":512,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(leap.checked_add_signed(Duration::milliseconds(500)),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":453115,"byte_end":453183,"line_start":513,"line_end":513,"column_start":5,"column_end":73}},{"value":"/            Some(hmsm(3, 5, 59, 1_800)));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":453188,"byte_end":453232,"line_start":514,"line_end":514,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(leap.checked_add_signed(Duration::milliseconds(800)),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":453237,"byte_end":453305,"line_start":515,"line_end":515,"column_start":5,"column_end":73}},{"value":"/            Some(hmsm(3, 6, 0, 100)));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":453310,"byte_end":453351,"line_start":516,"line_end":516,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(leap.checked_add_signed(Duration::seconds(10)),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":453356,"byte_end":453418,"line_start":517,"line_end":517,"column_start":5,"column_end":67}},{"value":"/            Some(hmsm(3, 6, 9, 300)));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":453423,"byte_end":453464,"line_start":518,"line_end":518,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(leap.checked_add_signed(Duration::seconds(-10)),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":453469,"byte_end":453532,"line_start":519,"line_end":519,"column_start":5,"column_end":68}},{"value":"/            Some(hmsm(3, 5, 50, 300)));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":453537,"byte_end":453579,"line_start":520,"line_end":520,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(leap.checked_add_signed(Duration::days(1)),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":453584,"byte_end":453642,"line_start":521,"line_end":521,"column_start":5,"column_end":63}},{"value":"/            Some(from_ymd(2016, 7, 9).and_hms_milli(3, 5, 59, 300)));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":453647,"byte_end":453719,"line_start":522,"line_end":522,"column_start":5,"column_end":77}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":453724,"byte_end":453731,"line_start":523,"line_end":523,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2262},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":457004,"byte_end":457022,"line_start":597,"line_end":597,"column_start":12,"column_end":30},"name":"checked_sub_signed","qualname":"<NaiveDateTime>::checked_sub_signed","value":"fn checked_sub_signed(Self, OldDuration) -> Option<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Subtracts given `Duration` from the current date and time.","sig":null,"attributes":[{"value":"/ Subtracts given `Duration` from the current date and time.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":454187,"byte_end":454249,"line_start":536,"line_end":536,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":454254,"byte_end":454257,"line_start":537,"line_end":537,"column_start":5,"column_end":8}},{"value":"/ As a part of Chrono's [leap second handling](./struct.NaiveTime.html#leap-second-handling),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":454262,"byte_end":454357,"line_start":538,"line_end":538,"column_start":5,"column_end":100}},{"value":"/ the subtraction assumes that **there is no leap second ever**,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":454362,"byte_end":454428,"line_start":539,"line_end":539,"column_start":5,"column_end":71}},{"value":"/ except when the `NaiveDateTime` itself represents a leap second","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":454433,"byte_end":454500,"line_start":540,"line_end":540,"column_start":5,"column_end":72}},{"value":"/ in which case the assumption becomes that **there is exactly a single leap second ever**.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":454505,"byte_end":454598,"line_start":541,"line_end":541,"column_start":5,"column_end":98}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":454603,"byte_end":454606,"line_start":542,"line_end":542,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when it will result in overflow.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":454611,"byte_end":454662,"line_start":543,"line_end":543,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":454667,"byte_end":454670,"line_start":544,"line_end":544,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":454675,"byte_end":454688,"line_start":545,"line_end":545,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":454693,"byte_end":454696,"line_start":546,"line_end":546,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":454701,"byte_end":454708,"line_start":547,"line_end":547,"column_start":5,"column_end":12}},{"value":"/ use chrono::{Duration, NaiveDate};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":454713,"byte_end":454751,"line_start":548,"line_end":548,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":454756,"byte_end":454759,"line_start":549,"line_end":549,"column_start":5,"column_end":8}},{"value":"/ let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":454764,"byte_end":454803,"line_start":550,"line_end":550,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":454808,"byte_end":454811,"line_start":551,"line_end":551,"column_start":5,"column_end":8}},{"value":"/ let d = from_ymd(2016, 7, 8);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":454816,"byte_end":454849,"line_start":552,"line_end":552,"column_start":5,"column_end":38}},{"value":"/ let hms = |h, m, s| d.and_hms(h, m, s);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":454854,"byte_end":454897,"line_start":553,"line_end":553,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_sub_signed(Duration::zero()),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":454902,"byte_end":454967,"line_start":554,"line_end":554,"column_start":5,"column_end":70}},{"value":"/            Some(hms(3, 5, 7)));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":454972,"byte_end":455007,"line_start":555,"line_end":555,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_sub_signed(Duration::seconds(1)),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":455012,"byte_end":455081,"line_start":556,"line_end":556,"column_start":5,"column_end":74}},{"value":"/            Some(hms(3, 5, 6)));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":455086,"byte_end":455121,"line_start":557,"line_end":557,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_sub_signed(Duration::seconds(-1)),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":455126,"byte_end":455196,"line_start":558,"line_end":558,"column_start":5,"column_end":75}},{"value":"/            Some(hms(3, 5, 8)));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":455201,"byte_end":455236,"line_start":559,"line_end":559,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_sub_signed(Duration::seconds(3600 + 60)),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":455241,"byte_end":455318,"line_start":560,"line_end":560,"column_start":5,"column_end":82}},{"value":"/            Some(hms(2, 4, 7)));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":455323,"byte_end":455358,"line_start":561,"line_end":561,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_sub_signed(Duration::seconds(86_400)),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":455363,"byte_end":455437,"line_start":562,"line_end":562,"column_start":5,"column_end":79}},{"value":"/            Some(from_ymd(2016, 7, 7).and_hms(3, 5, 7)));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":455442,"byte_end":455502,"line_start":563,"line_end":563,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":455507,"byte_end":455510,"line_start":564,"line_end":564,"column_start":5,"column_end":8}},{"value":"/ let hmsm = |h, m, s, milli| d.and_hms_milli(h, m, s, milli);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":455515,"byte_end":455579,"line_start":565,"line_end":565,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(hmsm(3, 5, 7, 450).checked_sub_signed(Duration::milliseconds(670)),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":455584,"byte_end":455666,"line_start":566,"line_end":566,"column_start":5,"column_end":87}},{"value":"/            Some(hmsm(3, 5, 6, 780)));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":455671,"byte_end":455712,"line_start":567,"line_end":567,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":455717,"byte_end":455724,"line_start":568,"line_end":568,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":455729,"byte_end":455732,"line_start":569,"line_end":569,"column_start":5,"column_end":8}},{"value":"/ Overflow returns `None`.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":455737,"byte_end":455765,"line_start":570,"line_end":570,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":455770,"byte_end":455773,"line_start":571,"line_end":571,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":455778,"byte_end":455785,"line_start":572,"line_end":572,"column_start":5,"column_end":12}},{"value":"/ # use chrono::{Duration, NaiveDate};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":455790,"byte_end":455830,"line_start":573,"line_end":573,"column_start":5,"column_end":45}},{"value":"/ # let hms = |h, m, s| NaiveDate::from_ymd(2016, 7, 8).and_hms(h, m, s);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":455835,"byte_end":455910,"line_start":574,"line_end":574,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_sub_signed(Duration::days(1_000_000_000)), None);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":455915,"byte_end":456000,"line_start":575,"line_end":575,"column_start":5,"column_end":90}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":456005,"byte_end":456012,"line_start":576,"line_end":576,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":456017,"byte_end":456020,"line_start":577,"line_end":577,"column_start":5,"column_end":8}},{"value":"/ Leap seconds are handled,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":456025,"byte_end":456054,"line_start":578,"line_end":578,"column_start":5,"column_end":34}},{"value":"/ but the subtraction assumes that it is the only leap second happened.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":456059,"byte_end":456132,"line_start":579,"line_end":579,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":456137,"byte_end":456140,"line_start":580,"line_end":580,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":456145,"byte_end":456152,"line_start":581,"line_end":581,"column_start":5,"column_end":12}},{"value":"/ # use chrono::{Duration, NaiveDate};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":456157,"byte_end":456197,"line_start":582,"line_end":582,"column_start":5,"column_end":45}},{"value":"/ # let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":456202,"byte_end":456243,"line_start":583,"line_end":583,"column_start":5,"column_end":46}},{"value":"/ # let hmsm = |h, m, s, milli| from_ymd(2016, 7, 8).and_hms_milli(h, m, s, milli);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":456248,"byte_end":456333,"line_start":584,"line_end":584,"column_start":5,"column_end":90}},{"value":"/ let leap = hmsm(3, 5, 59, 1_300);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":456338,"byte_end":456375,"line_start":585,"line_end":585,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(leap.checked_sub_signed(Duration::zero()),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":456380,"byte_end":456437,"line_start":586,"line_end":586,"column_start":5,"column_end":62}},{"value":"/            Some(hmsm(3, 5, 59, 1_300)));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":456442,"byte_end":456486,"line_start":587,"line_end":587,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(leap.checked_sub_signed(Duration::milliseconds(200)),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":456491,"byte_end":456559,"line_start":588,"line_end":588,"column_start":5,"column_end":73}},{"value":"/            Some(hmsm(3, 5, 59, 1_100)));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":456564,"byte_end":456608,"line_start":589,"line_end":589,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(leap.checked_sub_signed(Duration::milliseconds(500)),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":456613,"byte_end":456681,"line_start":590,"line_end":590,"column_start":5,"column_end":73}},{"value":"/            Some(hmsm(3, 5, 59, 800)));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":456686,"byte_end":456728,"line_start":591,"line_end":591,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(leap.checked_sub_signed(Duration::seconds(60)),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":456733,"byte_end":456795,"line_start":592,"line_end":592,"column_start":5,"column_end":67}},{"value":"/            Some(hmsm(3, 5, 0, 300)));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":456800,"byte_end":456841,"line_start":593,"line_end":593,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(leap.checked_sub_signed(Duration::days(1)),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":456846,"byte_end":456904,"line_start":594,"line_end":594,"column_start":5,"column_end":63}},{"value":"/            Some(from_ymd(2016, 7, 7).and_hms_milli(3, 6, 0, 300)));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":456909,"byte_end":456980,"line_start":595,"line_end":595,"column_start":5,"column_end":76}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":456985,"byte_end":456992,"line_start":596,"line_end":596,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2263},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":459224,"byte_end":459245,"line_start":647,"line_end":647,"column_start":12,"column_end":33},"name":"signed_duration_since","qualname":"<NaiveDateTime>::signed_duration_since","value":"fn signed_duration_since(Self, NaiveDateTime) -> OldDuration","parent":null,"children":[],"decl_id":null,"docs":" Subtracts another `NaiveDateTime` from the current date and time.\n This does not overflow or underflow at all.","sig":null,"attributes":[{"value":"/ Subtracts another `NaiveDateTime` from the current date and time.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":457448,"byte_end":457517,"line_start":609,"line_end":609,"column_start":5,"column_end":74}},{"value":"/ This does not overflow or underflow at all.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":457522,"byte_end":457569,"line_start":610,"line_end":610,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":457574,"byte_end":457577,"line_start":611,"line_end":611,"column_start":5,"column_end":8}},{"value":"/ As a part of Chrono's [leap second handling](./struct.NaiveTime.html#leap-second-handling),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":457582,"byte_end":457677,"line_start":612,"line_end":612,"column_start":5,"column_end":100}},{"value":"/ the subtraction assumes that **there is no leap second ever**,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":457682,"byte_end":457748,"line_start":613,"line_end":613,"column_start":5,"column_end":71}},{"value":"/ except when any of the `NaiveDateTime`s themselves represents a leap second","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":457753,"byte_end":457832,"line_start":614,"line_end":614,"column_start":5,"column_end":84}},{"value":"/ in which case the assumption becomes that","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":457837,"byte_end":457882,"line_start":615,"line_end":615,"column_start":5,"column_end":50}},{"value":"/ **there are exactly one (or two) leap second(s) ever**.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":457887,"byte_end":457946,"line_start":616,"line_end":616,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":457951,"byte_end":457954,"line_start":617,"line_end":617,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":457959,"byte_end":457972,"line_start":618,"line_end":618,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":457977,"byte_end":457980,"line_start":619,"line_end":619,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":457985,"byte_end":457992,"line_start":620,"line_end":620,"column_start":5,"column_end":12}},{"value":"/ use chrono::{Duration, NaiveDate};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":457997,"byte_end":458035,"line_start":621,"line_end":621,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":458040,"byte_end":458043,"line_start":622,"line_end":622,"column_start":5,"column_end":8}},{"value":"/ let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":458048,"byte_end":458087,"line_start":623,"line_end":623,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":458092,"byte_end":458095,"line_start":624,"line_end":624,"column_start":5,"column_end":8}},{"value":"/ let d = from_ymd(2016, 7, 8);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":458100,"byte_end":458133,"line_start":625,"line_end":625,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(d.and_hms(3, 5, 7).signed_duration_since(d.and_hms(2, 4, 6)),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":458138,"byte_end":458214,"line_start":626,"line_end":626,"column_start":5,"column_end":81}},{"value":"/            Duration::seconds(3600 + 60 + 1));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":458219,"byte_end":458268,"line_start":627,"line_end":627,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":458273,"byte_end":458276,"line_start":628,"line_end":628,"column_start":5,"column_end":8}},{"value":"/ // July 8 is 190th day in the year 2016","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":458281,"byte_end":458324,"line_start":629,"line_end":629,"column_start":5,"column_end":48}},{"value":"/ let d0 = from_ymd(2016, 1, 1);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":458329,"byte_end":458363,"line_start":630,"line_end":630,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(d.and_hms_milli(0, 7, 6, 500).signed_duration_since(d0.and_hms(0, 0, 0)),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":458368,"byte_end":458456,"line_start":631,"line_end":631,"column_start":5,"column_end":93}},{"value":"/            Duration::seconds(189 * 86_400 + 7 * 60 + 6) + Duration::milliseconds(500));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":458461,"byte_end":458552,"line_start":632,"line_end":632,"column_start":5,"column_end":96}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":458557,"byte_end":458564,"line_start":633,"line_end":633,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":458569,"byte_end":458572,"line_start":634,"line_end":634,"column_start":5,"column_end":8}},{"value":"/ Leap seconds are handled, but the subtraction assumes that","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":458577,"byte_end":458639,"line_start":635,"line_end":635,"column_start":5,"column_end":67}},{"value":"/ there were no other leap seconds happened.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":458644,"byte_end":458690,"line_start":636,"line_end":636,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":458695,"byte_end":458698,"line_start":637,"line_end":637,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":458703,"byte_end":458710,"line_start":638,"line_end":638,"column_start":5,"column_end":12}},{"value":"/ # use chrono::{Duration, NaiveDate};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":458715,"byte_end":458755,"line_start":639,"line_end":639,"column_start":5,"column_end":45}},{"value":"/ # let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":458760,"byte_end":458801,"line_start":640,"line_end":640,"column_start":5,"column_end":46}},{"value":"/ let leap = from_ymd(2015, 6, 30).and_hms_milli(23, 59, 59, 1_500);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":458806,"byte_end":458876,"line_start":641,"line_end":641,"column_start":5,"column_end":75}},{"value":"/ assert_eq!(leap.signed_duration_since(from_ymd(2015, 6, 30).and_hms(23, 0, 0)),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":458881,"byte_end":458964,"line_start":642,"line_end":642,"column_start":5,"column_end":88}},{"value":"/            Duration::seconds(3600) + Duration::milliseconds(500));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":458969,"byte_end":459039,"line_start":643,"line_end":643,"column_start":5,"column_end":75}},{"value":"/ assert_eq!(from_ymd(2015, 7, 1).and_hms(1, 0, 0).signed_duration_since(leap),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":459044,"byte_end":459125,"line_start":644,"line_end":644,"column_start":5,"column_end":86}},{"value":"/            Duration::seconds(3600) - Duration::milliseconds(500));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":459130,"byte_end":459200,"line_start":645,"line_end":645,"column_start":5,"column_end":75}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":459205,"byte_end":459212,"line_start":646,"line_end":646,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2264},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":460683,"byte_end":460700,"line_start":680,"line_end":680,"column_start":12,"column_end":29},"name":"format_with_items","qualname":"<NaiveDateTime>::format_with_items","value":"fn format_with_items<'a, I, B>(&Self, I) -> DelayedFormat<I> where\nI: Iterator<Item = B> + Clone, B: Borrow<Item>","parent":null,"children":[],"decl_id":null,"docs":" Formats the combined date and time with the specified formatting items.\n Otherwise it is the same as the ordinary [`format`](#method.format) method.","sig":null,"attributes":[{"value":"/ Formats the combined date and time with the specified formatting items.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":459394,"byte_end":459469,"line_start":651,"line_end":651,"column_start":5,"column_end":80}},{"value":"/ Otherwise it is the same as the ordinary [`format`](#method.format) method.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":459474,"byte_end":459553,"line_start":652,"line_end":652,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":459558,"byte_end":459561,"line_start":653,"line_end":653,"column_start":5,"column_end":8}},{"value":"/ The `Iterator` of items should be `Clone`able,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":459566,"byte_end":459616,"line_start":654,"line_end":654,"column_start":5,"column_end":55}},{"value":"/ since the resulting `DelayedFormat` value may be formatted multiple times.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":459621,"byte_end":459699,"line_start":655,"line_end":655,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":459704,"byte_end":459707,"line_start":656,"line_end":656,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":459712,"byte_end":459725,"line_start":657,"line_end":657,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":459730,"byte_end":459733,"line_start":658,"line_end":658,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":459738,"byte_end":459745,"line_start":659,"line_end":659,"column_start":5,"column_end":12}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":459750,"byte_end":459776,"line_start":660,"line_end":660,"column_start":5,"column_end":31}},{"value":"/ use chrono::format::strftime::StrftimeItems;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":459781,"byte_end":459829,"line_start":661,"line_end":661,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":459834,"byte_end":459837,"line_start":662,"line_end":662,"column_start":5,"column_end":8}},{"value":"/ let fmt = StrftimeItems::new(\"%Y-%m-%d %H:%M:%S\");","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":459842,"byte_end":459896,"line_start":663,"line_end":663,"column_start":5,"column_end":59}},{"value":"/ let dt = NaiveDate::from_ymd(2015, 9, 5).and_hms(23, 56, 4);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":459901,"byte_end":459965,"line_start":664,"line_end":664,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(dt.format_with_items(fmt.clone()).to_string(), \"2015-09-05 23:56:04\");","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":459970,"byte_end":460055,"line_start":665,"line_end":665,"column_start":5,"column_end":90}},{"value":"/ assert_eq!(dt.format(\"%Y-%m-%d %H:%M:%S\").to_string(),    \"2015-09-05 23:56:04\");","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":460060,"byte_end":460145,"line_start":666,"line_end":666,"column_start":5,"column_end":90}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":460150,"byte_end":460157,"line_start":667,"line_end":667,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":460162,"byte_end":460165,"line_start":668,"line_end":668,"column_start":5,"column_end":8}},{"value":"/ The resulting `DelayedFormat` can be formatted directly via the `Display` trait.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":460170,"byte_end":460254,"line_start":669,"line_end":669,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":460259,"byte_end":460262,"line_start":670,"line_end":670,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":460267,"byte_end":460274,"line_start":671,"line_end":671,"column_start":5,"column_end":12}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":460279,"byte_end":460307,"line_start":672,"line_end":672,"column_start":5,"column_end":33}},{"value":"/ # use chrono::format::strftime::StrftimeItems;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":460312,"byte_end":460362,"line_start":673,"line_end":673,"column_start":5,"column_end":55}},{"value":"/ # let fmt = StrftimeItems::new(\"%Y-%m-%d %H:%M:%S\").clone();","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":460367,"byte_end":460431,"line_start":674,"line_end":674,"column_start":5,"column_end":69}},{"value":"/ # let dt = NaiveDate::from_ymd(2015, 9, 5).and_hms(23, 56, 4);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":460436,"byte_end":460502,"line_start":675,"line_end":675,"column_start":5,"column_end":71}},{"value":"/ assert_eq!(format!(\"{}\", dt.format_with_items(fmt)), \"2015-09-05 23:56:04\");","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":460507,"byte_end":460587,"line_start":676,"line_end":676,"column_start":5,"column_end":85}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":460592,"byte_end":460599,"line_start":677,"line_end":677,"column_start":5,"column_end":12}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":460604,"byte_end":460657,"line_start":678,"line_end":678,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":460662,"byte_end":460671,"line_start":679,"line_end":679,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2268},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":462497,"byte_end":462503,"line_start":722,"line_end":722,"column_start":12,"column_end":18},"name":"format","qualname":"<NaiveDateTime>::format","value":"fn format<'a>(&Self, &'a str) -> DelayedFormat<StrftimeItems>","parent":null,"children":[],"decl_id":null,"docs":" Formats the combined date and time with the specified format string.\n See the [`format::strftime` module](../format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[{"value":"/ Formats the combined date and time with the specified format string.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":460911,"byte_end":460983,"line_start":688,"line_end":688,"column_start":5,"column_end":77}},{"value":"/ See the [`format::strftime` module](../format/strftime/index.html)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":460988,"byte_end":461058,"line_start":689,"line_end":689,"column_start":5,"column_end":75}},{"value":"/ on the supported escape sequences.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":461063,"byte_end":461101,"line_start":690,"line_end":690,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":461106,"byte_end":461109,"line_start":691,"line_end":691,"column_start":5,"column_end":8}},{"value":"/ This returns a `DelayedFormat`,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":461114,"byte_end":461149,"line_start":692,"line_end":692,"column_start":5,"column_end":40}},{"value":"/ which gets converted to a string only when actual formatting happens.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":461154,"byte_end":461227,"line_start":693,"line_end":693,"column_start":5,"column_end":78}},{"value":"/ You may use the `to_string` method to get a `String`,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":461232,"byte_end":461289,"line_start":694,"line_end":694,"column_start":5,"column_end":62}},{"value":"/ or just feed it into `print!` and other formatting macros.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":461294,"byte_end":461356,"line_start":695,"line_end":695,"column_start":5,"column_end":67}},{"value":"/ (In this way it avoids the redundant memory allocation.)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":461361,"byte_end":461421,"line_start":696,"line_end":696,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":461426,"byte_end":461429,"line_start":697,"line_end":697,"column_start":5,"column_end":8}},{"value":"/ A wrong format string does *not* issue an error immediately.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":461434,"byte_end":461498,"line_start":698,"line_end":698,"column_start":5,"column_end":69}},{"value":"/ Rather, converting or formatting the `DelayedFormat` fails.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":461503,"byte_end":461566,"line_start":699,"line_end":699,"column_start":5,"column_end":68}},{"value":"/ You are recommended to immediately use `DelayedFormat` for this reason.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":461571,"byte_end":461646,"line_start":700,"line_end":700,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":461651,"byte_end":461654,"line_start":701,"line_end":701,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":461659,"byte_end":461672,"line_start":702,"line_end":702,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":461677,"byte_end":461680,"line_start":703,"line_end":703,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":461685,"byte_end":461692,"line_start":704,"line_end":704,"column_start":5,"column_end":12}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":461697,"byte_end":461723,"line_start":705,"line_end":705,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":461728,"byte_end":461731,"line_start":706,"line_end":706,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2015, 9, 5).and_hms(23, 56, 4);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":461736,"byte_end":461800,"line_start":707,"line_end":707,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(dt.format(\"%Y-%m-%d %H:%M:%S\").to_string(), \"2015-09-05 23:56:04\");","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":461805,"byte_end":461887,"line_start":708,"line_end":708,"column_start":5,"column_end":87}},{"value":"/ assert_eq!(dt.format(\"around %l %p on %b %-d\").to_string(), \"around 11 PM on Sep 5\");","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":461892,"byte_end":461981,"line_start":709,"line_end":709,"column_start":5,"column_end":94}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":461986,"byte_end":461993,"line_start":710,"line_end":710,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":461998,"byte_end":462001,"line_start":711,"line_end":711,"column_start":5,"column_end":8}},{"value":"/ The resulting `DelayedFormat` can be formatted directly via the `Display` trait.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":462006,"byte_end":462090,"line_start":712,"line_end":712,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":462095,"byte_end":462098,"line_start":713,"line_end":713,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":462103,"byte_end":462110,"line_start":714,"line_end":714,"column_start":5,"column_end":12}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":462115,"byte_end":462143,"line_start":715,"line_end":715,"column_start":5,"column_end":33}},{"value":"/ # let dt = NaiveDate::from_ymd(2015, 9, 5).and_hms(23, 56, 4);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":462148,"byte_end":462214,"line_start":716,"line_end":716,"column_start":5,"column_end":71}},{"value":"/ assert_eq!(format!(\"{}\", dt.format(\"%Y-%m-%d %H:%M:%S\")), \"2015-09-05 23:56:04\");","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":462219,"byte_end":462304,"line_start":717,"line_end":717,"column_start":5,"column_end":90}},{"value":"/ assert_eq!(format!(\"{}\", dt.format(\"around %l %p on %b %-d\")), \"around 11 PM on Sep 5\");","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":462309,"byte_end":462401,"line_start":718,"line_end":718,"column_start":5,"column_end":97}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":462406,"byte_end":462413,"line_start":719,"line_end":719,"column_start":5,"column_end":12}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":462418,"byte_end":462471,"line_start":720,"line_end":720,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":462476,"byte_end":462485,"line_start":721,"line_end":721,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2270},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":463537,"byte_end":463555,"line_start":743,"line_end":743,"column_start":12,"column_end":30},"name":"and_local_timezone","qualname":"<NaiveDateTime>::and_local_timezone","value":"fn and_local_timezone<Tz>(&Self, Tz) -> LocalResult<DateTime<Tz>> where\nTz: TimeZone","parent":null,"children":[],"decl_id":null,"docs":" Converts the `NaiveDateTime` into the timezone-aware `DateTime<Tz>`\n with the provided timezone, if possible.","sig":null,"attributes":[{"value":"/ Converts the `NaiveDateTime` into the timezone-aware `DateTime<Tz>`","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":462634,"byte_end":462705,"line_start":726,"line_end":726,"column_start":5,"column_end":76}},{"value":"/ with the provided timezone, if possible.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":462710,"byte_end":462754,"line_start":727,"line_end":727,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":462759,"byte_end":462762,"line_start":728,"line_end":728,"column_start":5,"column_end":8}},{"value":"/ This can fail in cases where the local time represented by the `NaiveDateTime`","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":462767,"byte_end":462849,"line_start":729,"line_end":729,"column_start":5,"column_end":87}},{"value":"/ is not a valid local timestamp in the target timezone due to an offset transition","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":462854,"byte_end":462939,"line_start":730,"line_end":730,"column_start":5,"column_end":90}},{"value":"/ for example if the target timezone had a change from +00:00 to +01:00","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":462944,"byte_end":463017,"line_start":731,"line_end":731,"column_start":5,"column_end":78}},{"value":"/ occuring at 2015-09-05 22:59:59, then a local time of 2015-09-05 23:56:04","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":463022,"byte_end":463099,"line_start":732,"line_end":732,"column_start":5,"column_end":82}},{"value":"/ could never occur. Similarly, if the offset transitioned in the opposite direction","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":463104,"byte_end":463190,"line_start":733,"line_end":733,"column_start":5,"column_end":91}},{"value":"/ then there would be two local times of 2015-09-05 23:56:04, one at +00:00 and one","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":463195,"byte_end":463280,"line_start":734,"line_end":734,"column_start":5,"column_end":90}},{"value":"/ at +01:00.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":463285,"byte_end":463299,"line_start":735,"line_end":735,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":463304,"byte_end":463307,"line_start":736,"line_end":736,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":463312,"byte_end":463325,"line_start":737,"line_end":737,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":463330,"byte_end":463333,"line_start":738,"line_end":738,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":463338,"byte_end":463345,"line_start":739,"line_end":739,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, Utc};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":463350,"byte_end":463383,"line_start":740,"line_end":740,"column_start":5,"column_end":38}},{"value":"/ let dt = NaiveDate::from_ymd(2015, 9, 5).and_hms(23, 56, 4).and_local_timezone(Utc).unwrap();","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":463388,"byte_end":463485,"line_start":741,"line_end":741,"column_start":5,"column_end":102}},{"value":"/ assert_eq!(dt.timezone(), Utc);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":463490,"byte_end":463525,"line_start":742,"line_end":742,"column_start":5,"column_end":40}}]},{"kind":"Const","id":{"krate":0,"index":2272},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":463720,"byte_end":463723,"line_start":748,"line_end":748,"column_start":15,"column_end":18},"name":"MIN","qualname":"::naive::datetime::NaiveDateTime::MIN","value":"Self","parent":{"krate":0,"index":2245},"children":[],"decl_id":null,"docs":" The minimum possible `NaiveDateTime`.\n","sig":null,"attributes":[{"value":"/ The minimum possible `NaiveDateTime`.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":463664,"byte_end":463705,"line_start":747,"line_end":747,"column_start":5,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":2273},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":463845,"byte_end":463848,"line_start":750,"line_end":750,"column_start":15,"column_end":18},"name":"MAX","qualname":"::naive::datetime::NaiveDateTime::MAX","value":"Self","parent":{"krate":0,"index":2245},"children":[],"decl_id":null,"docs":" The maximum possible `NaiveDateTime`.\n","sig":null,"attributes":[{"value":"/ The maximum possible `NaiveDateTime`.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":463789,"byte_end":463830,"line_start":749,"line_end":749,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":2275},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":464356,"byte_end":464360,"line_start":767,"line_end":767,"column_start":8,"column_end":12},"name":"year","qualname":"<NaiveDateTime as traits::Datelike>::year","value":"fn year(&Self) -> i32","parent":{"krate":0,"index":3214},"children":[],"decl_id":{"krate":0,"index":3215},"docs":" Returns the year number in the [calendar date](./index.html#calendar-date).","sig":null,"attributes":[{"value":"/ Returns the year number in the [calendar date](./index.html#calendar-date).","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":463951,"byte_end":464030,"line_start":754,"line_end":754,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":464035,"byte_end":464038,"line_start":755,"line_end":755,"column_start":5,"column_end":8}},{"value":"/ See also the [`NaiveDate::year`] method.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":464043,"byte_end":464087,"line_start":756,"line_end":756,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":464092,"byte_end":464095,"line_start":757,"line_end":757,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":464100,"byte_end":464113,"line_start":758,"line_end":758,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":464118,"byte_end":464121,"line_start":759,"line_end":759,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":464126,"byte_end":464133,"line_start":760,"line_end":760,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime, Datelike};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":464138,"byte_end":464191,"line_start":761,"line_end":761,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":464196,"byte_end":464199,"line_start":762,"line_end":762,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = NaiveDate::from_ymd(2015, 9, 25).and_hms(12, 34, 56);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":464204,"byte_end":464285,"line_start":763,"line_end":763,"column_start":5,"column_end":86}},{"value":"/ assert_eq!(dt.year(), 2015);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":464290,"byte_end":464322,"line_start":764,"line_end":764,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":464327,"byte_end":464334,"line_start":765,"line_end":765,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":464339,"byte_end":464348,"line_start":766,"line_end":766,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2276},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":464875,"byte_end":464880,"line_start":786,"line_end":786,"column_start":8,"column_end":13},"name":"month","qualname":"<NaiveDateTime as traits::Datelike>::month","value":"fn month(&Self) -> u32","parent":{"krate":0,"index":3214},"children":[],"decl_id":{"krate":0,"index":3217},"docs":" Returns the month number starting from 1.","sig":null,"attributes":[{"value":"/ Returns the month number starting from 1.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":464413,"byte_end":464458,"line_start":771,"line_end":771,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":464463,"byte_end":464466,"line_start":772,"line_end":772,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 1 to 12.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":464471,"byte_end":464512,"line_start":773,"line_end":773,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":464517,"byte_end":464520,"line_start":774,"line_end":774,"column_start":5,"column_end":8}},{"value":"/ See also the [`NaiveDate::month`](./struct.NaiveDate.html#method.month) method.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":464525,"byte_end":464608,"line_start":775,"line_end":775,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":464613,"byte_end":464616,"line_start":776,"line_end":776,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":464621,"byte_end":464634,"line_start":777,"line_end":777,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":464639,"byte_end":464642,"line_start":778,"line_end":778,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":464647,"byte_end":464654,"line_start":779,"line_end":779,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime, Datelike};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":464659,"byte_end":464712,"line_start":780,"line_end":780,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":464717,"byte_end":464720,"line_start":781,"line_end":781,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = NaiveDate::from_ymd(2015, 9, 25).and_hms(12, 34, 56);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":464725,"byte_end":464806,"line_start":782,"line_end":782,"column_start":5,"column_end":86}},{"value":"/ assert_eq!(dt.month(), 9);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":464811,"byte_end":464841,"line_start":783,"line_end":783,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":464846,"byte_end":464853,"line_start":784,"line_end":784,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":464858,"byte_end":464867,"line_start":785,"line_end":785,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2277},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":465399,"byte_end":465405,"line_start":805,"line_end":805,"column_start":8,"column_end":14},"name":"month0","qualname":"<NaiveDateTime as traits::Datelike>::month0","value":"fn month0(&Self) -> u32","parent":{"krate":0,"index":3214},"children":[],"decl_id":{"krate":0,"index":3218},"docs":" Returns the month number starting from 0.","sig":null,"attributes":[{"value":"/ Returns the month number starting from 0.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":464934,"byte_end":464979,"line_start":790,"line_end":790,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":464984,"byte_end":464987,"line_start":791,"line_end":791,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 0 to 11.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":464992,"byte_end":465033,"line_start":792,"line_end":792,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":465038,"byte_end":465041,"line_start":793,"line_end":793,"column_start":5,"column_end":8}},{"value":"/ See also the [`NaiveDate::month0`](./struct.NaiveDate.html#method.month0) method.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":465046,"byte_end":465131,"line_start":794,"line_end":794,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":465136,"byte_end":465139,"line_start":795,"line_end":795,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":465144,"byte_end":465157,"line_start":796,"line_end":796,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":465162,"byte_end":465165,"line_start":797,"line_end":797,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":465170,"byte_end":465177,"line_start":798,"line_end":798,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime, Datelike};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":465182,"byte_end":465235,"line_start":799,"line_end":799,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":465240,"byte_end":465243,"line_start":800,"line_end":800,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = NaiveDate::from_ymd(2015, 9, 25).and_hms(12, 34, 56);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":465248,"byte_end":465329,"line_start":801,"line_end":801,"column_start":5,"column_end":86}},{"value":"/ assert_eq!(dt.month0(), 8);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":465334,"byte_end":465365,"line_start":802,"line_end":802,"column_start":5,"column_end":36}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":465370,"byte_end":465377,"line_start":803,"line_end":803,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":465382,"byte_end":465391,"line_start":804,"line_end":804,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2278},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":465960,"byte_end":465963,"line_start":824,"line_end":824,"column_start":8,"column_end":11},"name":"day","qualname":"<NaiveDateTime as traits::Datelike>::day","value":"fn day(&Self) -> u32","parent":{"krate":0,"index":3214},"children":[],"decl_id":{"krate":0,"index":3219},"docs":" Returns the day of month starting from 1.","sig":null,"attributes":[{"value":"/ Returns the day of month starting from 1.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":465460,"byte_end":465505,"line_start":809,"line_end":809,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":465510,"byte_end":465513,"line_start":810,"line_end":810,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 1 to 31. (The last day of month differs by months.)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":465518,"byte_end":465602,"line_start":811,"line_end":811,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":465607,"byte_end":465610,"line_start":812,"line_end":812,"column_start":5,"column_end":8}},{"value":"/ See also the [`NaiveDate::day`](./struct.NaiveDate.html#method.day) method.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":465615,"byte_end":465694,"line_start":813,"line_end":813,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":465699,"byte_end":465702,"line_start":814,"line_end":814,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":465707,"byte_end":465720,"line_start":815,"line_end":815,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":465725,"byte_end":465728,"line_start":816,"line_end":816,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":465733,"byte_end":465740,"line_start":817,"line_end":817,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime, Datelike};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":465745,"byte_end":465798,"line_start":818,"line_end":818,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":465803,"byte_end":465806,"line_start":819,"line_end":819,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = NaiveDate::from_ymd(2015, 9, 25).and_hms(12, 34, 56);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":465811,"byte_end":465892,"line_start":820,"line_end":820,"column_start":5,"column_end":86}},{"value":"/ assert_eq!(dt.day(), 25);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":465897,"byte_end":465926,"line_start":821,"line_end":821,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":465931,"byte_end":465938,"line_start":822,"line_end":822,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":465943,"byte_end":465952,"line_start":823,"line_end":823,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2279},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":466518,"byte_end":466522,"line_start":843,"line_end":843,"column_start":8,"column_end":12},"name":"day0","qualname":"<NaiveDateTime as traits::Datelike>::day0","value":"fn day0(&Self) -> u32","parent":{"krate":0,"index":3214},"children":[],"decl_id":{"krate":0,"index":3220},"docs":" Returns the day of month starting from 0.","sig":null,"attributes":[{"value":"/ Returns the day of month starting from 0.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":466015,"byte_end":466060,"line_start":828,"line_end":828,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":466065,"byte_end":466068,"line_start":829,"line_end":829,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 0 to 30. (The last day of month differs by months.)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":466073,"byte_end":466157,"line_start":830,"line_end":830,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":466162,"byte_end":466165,"line_start":831,"line_end":831,"column_start":5,"column_end":8}},{"value":"/ See also the [`NaiveDate::day0`](./struct.NaiveDate.html#method.day0) method.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":466170,"byte_end":466251,"line_start":832,"line_end":832,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":466256,"byte_end":466259,"line_start":833,"line_end":833,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":466264,"byte_end":466277,"line_start":834,"line_end":834,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":466282,"byte_end":466285,"line_start":835,"line_end":835,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":466290,"byte_end":466297,"line_start":836,"line_end":836,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime, Datelike};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":466302,"byte_end":466355,"line_start":837,"line_end":837,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":466360,"byte_end":466363,"line_start":838,"line_end":838,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = NaiveDate::from_ymd(2015, 9, 25).and_hms(12, 34, 56);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":466368,"byte_end":466449,"line_start":839,"line_end":839,"column_start":5,"column_end":86}},{"value":"/ assert_eq!(dt.day0(), 24);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":466454,"byte_end":466484,"line_start":840,"line_end":840,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":466489,"byte_end":466496,"line_start":841,"line_end":841,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":466501,"byte_end":466510,"line_start":842,"line_end":842,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2280},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":467086,"byte_end":467093,"line_start":862,"line_end":862,"column_start":8,"column_end":15},"name":"ordinal","qualname":"<NaiveDateTime as traits::Datelike>::ordinal","value":"fn ordinal(&Self) -> u32","parent":{"krate":0,"index":3214},"children":[],"decl_id":{"krate":0,"index":3221},"docs":" Returns the day of year starting from 1.","sig":null,"attributes":[{"value":"/ Returns the day of year starting from 1.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":466575,"byte_end":466619,"line_start":847,"line_end":847,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":466624,"byte_end":466627,"line_start":848,"line_end":848,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 1 to 366. (The last day of year differs by years.)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":466632,"byte_end":466715,"line_start":849,"line_end":849,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":466720,"byte_end":466723,"line_start":850,"line_end":850,"column_start":5,"column_end":8}},{"value":"/ See also the [`NaiveDate::ordinal`](./struct.NaiveDate.html#method.ordinal) method.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":466728,"byte_end":466815,"line_start":851,"line_end":851,"column_start":5,"column_end":92}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":466820,"byte_end":466823,"line_start":852,"line_end":852,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":466828,"byte_end":466841,"line_start":853,"line_end":853,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":466846,"byte_end":466849,"line_start":854,"line_end":854,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":466854,"byte_end":466861,"line_start":855,"line_end":855,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime, Datelike};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":466866,"byte_end":466919,"line_start":856,"line_end":856,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":466924,"byte_end":466927,"line_start":857,"line_end":857,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = NaiveDate::from_ymd(2015, 9, 25).and_hms(12, 34, 56);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":466932,"byte_end":467013,"line_start":858,"line_end":858,"column_start":5,"column_end":86}},{"value":"/ assert_eq!(dt.ordinal(), 268);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":467018,"byte_end":467052,"line_start":859,"line_end":859,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":467057,"byte_end":467064,"line_start":860,"line_end":860,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":467069,"byte_end":467078,"line_start":861,"line_end":861,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2281},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":467663,"byte_end":467671,"line_start":881,"line_end":881,"column_start":8,"column_end":16},"name":"ordinal0","qualname":"<NaiveDateTime as traits::Datelike>::ordinal0","value":"fn ordinal0(&Self) -> u32","parent":{"krate":0,"index":3214},"children":[],"decl_id":{"krate":0,"index":3222},"docs":" Returns the day of year starting from 0.","sig":null,"attributes":[{"value":"/ Returns the day of year starting from 0.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":467149,"byte_end":467193,"line_start":866,"line_end":866,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":467198,"byte_end":467201,"line_start":867,"line_end":867,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 0 to 365. (The last day of year differs by years.)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":467206,"byte_end":467289,"line_start":868,"line_end":868,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":467294,"byte_end":467297,"line_start":869,"line_end":869,"column_start":5,"column_end":8}},{"value":"/ See also the [`NaiveDate::ordinal0`](./struct.NaiveDate.html#method.ordinal0) method.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":467302,"byte_end":467391,"line_start":870,"line_end":870,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":467396,"byte_end":467399,"line_start":871,"line_end":871,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":467404,"byte_end":467417,"line_start":872,"line_end":872,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":467422,"byte_end":467425,"line_start":873,"line_end":873,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":467430,"byte_end":467437,"line_start":874,"line_end":874,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime, Datelike};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":467442,"byte_end":467495,"line_start":875,"line_end":875,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":467500,"byte_end":467503,"line_start":876,"line_end":876,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = NaiveDate::from_ymd(2015, 9, 25).and_hms(12, 34, 56);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":467508,"byte_end":467589,"line_start":877,"line_end":877,"column_start":5,"column_end":86}},{"value":"/ assert_eq!(dt.ordinal0(), 267);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":467594,"byte_end":467629,"line_start":878,"line_end":878,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":467634,"byte_end":467641,"line_start":879,"line_end":879,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":467646,"byte_end":467655,"line_start":880,"line_end":880,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2282},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":468145,"byte_end":468152,"line_start":898,"line_end":898,"column_start":8,"column_end":15},"name":"weekday","qualname":"<NaiveDateTime as traits::Datelike>::weekday","value":"fn weekday(&Self) -> Weekday","parent":{"krate":0,"index":3214},"children":[],"decl_id":{"krate":0,"index":3223},"docs":" Returns the day of week.","sig":null,"attributes":[{"value":"/ Returns the day of week.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":467728,"byte_end":467756,"line_start":885,"line_end":885,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":467761,"byte_end":467764,"line_start":886,"line_end":886,"column_start":5,"column_end":8}},{"value":"/ See also the [`NaiveDate::weekday`](./struct.NaiveDate.html#method.weekday) method.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":467769,"byte_end":467856,"line_start":887,"line_end":887,"column_start":5,"column_end":92}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":467861,"byte_end":467864,"line_start":888,"line_end":888,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":467869,"byte_end":467882,"line_start":889,"line_end":889,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":467887,"byte_end":467890,"line_start":890,"line_end":890,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":467895,"byte_end":467902,"line_start":891,"line_end":891,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime, Datelike, Weekday};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":467907,"byte_end":467969,"line_start":892,"line_end":892,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":467974,"byte_end":467977,"line_start":893,"line_end":893,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = NaiveDate::from_ymd(2015, 9, 25).and_hms(12, 34, 56);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":467982,"byte_end":468063,"line_start":894,"line_end":894,"column_start":5,"column_end":86}},{"value":"/ assert_eq!(dt.weekday(), Weekday::Fri);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":468068,"byte_end":468111,"line_start":895,"line_end":895,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":468116,"byte_end":468123,"line_start":896,"line_end":896,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":468128,"byte_end":468137,"line_start":897,"line_end":897,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2283},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":468229,"byte_end":468237,"line_start":903,"line_end":903,"column_start":8,"column_end":16},"name":"iso_week","qualname":"<NaiveDateTime as traits::Datelike>::iso_week","value":"fn iso_week(&Self) -> IsoWeek","parent":{"krate":0,"index":3214},"children":[],"decl_id":{"krate":0,"index":3224},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":468212,"byte_end":468221,"line_start":902,"line_end":902,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2284},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":468937,"byte_end":468946,"line_start":923,"line_end":923,"column_start":8,"column_end":17},"name":"with_year","qualname":"<NaiveDateTime as traits::Datelike>::with_year","value":"fn with_year(&Self, i32) -> Option<NaiveDateTime>","parent":{"krate":0,"index":3214},"children":[],"decl_id":{"krate":0,"index":3225},"docs":" Makes a new `NaiveDateTime` with the year number changed.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` with the year number changed.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":468298,"byte_end":468359,"line_start":907,"line_end":907,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":468364,"byte_end":468367,"line_start":908,"line_end":908,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting `NaiveDateTime` would be invalid.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":468372,"byte_end":468443,"line_start":909,"line_end":909,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":468448,"byte_end":468451,"line_start":910,"line_end":910,"column_start":5,"column_end":8}},{"value":"/ See also the [`NaiveDate::with_year`] method.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":468456,"byte_end":468505,"line_start":911,"line_end":911,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":468510,"byte_end":468513,"line_start":912,"line_end":912,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":468518,"byte_end":468531,"line_start":913,"line_end":913,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":468536,"byte_end":468539,"line_start":914,"line_end":914,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":468544,"byte_end":468551,"line_start":915,"line_end":915,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime, Datelike};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":468556,"byte_end":468609,"line_start":916,"line_end":916,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":468614,"byte_end":468617,"line_start":917,"line_end":917,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = NaiveDate::from_ymd(2015, 9, 25).and_hms(12, 34, 56);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":468622,"byte_end":468703,"line_start":918,"line_end":918,"column_start":5,"column_end":86}},{"value":"/ assert_eq!(dt.with_year(2016), Some(NaiveDate::from_ymd(2016, 9, 25).and_hms(12, 34, 56)));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":468708,"byte_end":468803,"line_start":919,"line_end":919,"column_start":5,"column_end":100}},{"value":"/ assert_eq!(dt.with_year(-308), Some(NaiveDate::from_ymd(-308, 9, 25).and_hms(12, 34, 56)));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":468808,"byte_end":468903,"line_start":920,"line_end":920,"column_start":5,"column_end":100}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":468908,"byte_end":468915,"line_start":921,"line_end":921,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":468920,"byte_end":468929,"line_start":922,"line_end":922,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2286},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":469762,"byte_end":469772,"line_start":944,"line_end":944,"column_start":8,"column_end":18},"name":"with_month","qualname":"<NaiveDateTime as traits::Datelike>::with_month","value":"fn with_month(&Self, u32) -> Option<NaiveDateTime>","parent":{"krate":0,"index":3214},"children":[],"decl_id":{"krate":0,"index":3226},"docs":" Makes a new `NaiveDateTime` with the month number (starting from 1) changed.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` with the month number (starting from 1) changed.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":469081,"byte_end":469161,"line_start":927,"line_end":927,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":469166,"byte_end":469169,"line_start":928,"line_end":928,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting `NaiveDateTime` would be invalid.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":469174,"byte_end":469245,"line_start":929,"line_end":929,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":469250,"byte_end":469253,"line_start":930,"line_end":930,"column_start":5,"column_end":8}},{"value":"/ See also the [`NaiveDate::with_month`] method.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":469258,"byte_end":469308,"line_start":931,"line_end":931,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":469313,"byte_end":469316,"line_start":932,"line_end":932,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":469321,"byte_end":469334,"line_start":933,"line_end":933,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":469339,"byte_end":469342,"line_start":934,"line_end":934,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":469347,"byte_end":469354,"line_start":935,"line_end":935,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime, Datelike};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":469359,"byte_end":469412,"line_start":936,"line_end":936,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":469417,"byte_end":469420,"line_start":937,"line_end":937,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = NaiveDate::from_ymd(2015, 9, 30).and_hms(12, 34, 56);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":469425,"byte_end":469506,"line_start":938,"line_end":938,"column_start":5,"column_end":86}},{"value":"/ assert_eq!(dt.with_month(10), Some(NaiveDate::from_ymd(2015, 10, 30).and_hms(12, 34, 56)));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":469511,"byte_end":469606,"line_start":939,"line_end":939,"column_start":5,"column_end":100}},{"value":"/ assert_eq!(dt.with_month(13), None); // no month 13","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":469611,"byte_end":469666,"line_start":940,"line_end":940,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(dt.with_month(2), None); // no February 30","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":469671,"byte_end":469728,"line_start":941,"line_end":941,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":469733,"byte_end":469740,"line_start":942,"line_end":942,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":469745,"byte_end":469754,"line_start":943,"line_end":943,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2288},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":470594,"byte_end":470605,"line_start":965,"line_end":965,"column_start":8,"column_end":19},"name":"with_month0","qualname":"<NaiveDateTime as traits::Datelike>::with_month0","value":"fn with_month0(&Self, u32) -> Option<NaiveDateTime>","parent":{"krate":0,"index":3214},"children":[],"decl_id":{"krate":0,"index":3227},"docs":" Makes a new `NaiveDateTime` with the month number (starting from 0) changed.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` with the month number (starting from 0) changed.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":469910,"byte_end":469990,"line_start":948,"line_end":948,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":469995,"byte_end":469998,"line_start":949,"line_end":949,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting `NaiveDateTime` would be invalid.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":470003,"byte_end":470074,"line_start":950,"line_end":950,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":470079,"byte_end":470082,"line_start":951,"line_end":951,"column_start":5,"column_end":8}},{"value":"/ See also the [`NaiveDate::with_month0`] method.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":470087,"byte_end":470138,"line_start":952,"line_end":952,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":470143,"byte_end":470146,"line_start":953,"line_end":953,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":470151,"byte_end":470164,"line_start":954,"line_end":954,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":470169,"byte_end":470172,"line_start":955,"line_end":955,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":470177,"byte_end":470184,"line_start":956,"line_end":956,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime, Datelike};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":470189,"byte_end":470242,"line_start":957,"line_end":957,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":470247,"byte_end":470250,"line_start":958,"line_end":958,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = NaiveDate::from_ymd(2015, 9, 30).and_hms(12, 34, 56);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":470255,"byte_end":470336,"line_start":959,"line_end":959,"column_start":5,"column_end":86}},{"value":"/ assert_eq!(dt.with_month0(9), Some(NaiveDate::from_ymd(2015, 10, 30).and_hms(12, 34, 56)));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":470341,"byte_end":470436,"line_start":960,"line_end":960,"column_start":5,"column_end":100}},{"value":"/ assert_eq!(dt.with_month0(12), None); // no month 13","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":470441,"byte_end":470497,"line_start":961,"line_end":961,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(dt.with_month0(1), None); // no February 30","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":470502,"byte_end":470560,"line_start":962,"line_end":962,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":470565,"byte_end":470572,"line_start":963,"line_end":963,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":470577,"byte_end":470586,"line_start":964,"line_end":964,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2290},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":471361,"byte_end":471369,"line_start":985,"line_end":985,"column_start":8,"column_end":16},"name":"with_day","qualname":"<NaiveDateTime as traits::Datelike>::with_day","value":"fn with_day(&Self, u32) -> Option<NaiveDateTime>","parent":{"krate":0,"index":3214},"children":[],"decl_id":{"krate":0,"index":3228},"docs":" Makes a new `NaiveDateTime` with the day of month (starting from 1) changed.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` with the day of month (starting from 1) changed.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":470746,"byte_end":470826,"line_start":969,"line_end":969,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":470831,"byte_end":470834,"line_start":970,"line_end":970,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting `NaiveDateTime` would be invalid.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":470839,"byte_end":470910,"line_start":971,"line_end":971,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":470915,"byte_end":470918,"line_start":972,"line_end":972,"column_start":5,"column_end":8}},{"value":"/ See also the [`NaiveDate::with_day`] method.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":470923,"byte_end":470971,"line_start":973,"line_end":973,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":470976,"byte_end":470979,"line_start":974,"line_end":974,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":470984,"byte_end":470997,"line_start":975,"line_end":975,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":471002,"byte_end":471005,"line_start":976,"line_end":976,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":471010,"byte_end":471017,"line_start":977,"line_end":977,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime, Datelike};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":471022,"byte_end":471075,"line_start":978,"line_end":978,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":471080,"byte_end":471083,"line_start":979,"line_end":979,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = NaiveDate::from_ymd(2015, 9, 8).and_hms(12, 34, 56);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":471088,"byte_end":471168,"line_start":980,"line_end":980,"column_start":5,"column_end":85}},{"value":"/ assert_eq!(dt.with_day(30), Some(NaiveDate::from_ymd(2015, 9, 30).and_hms(12, 34, 56)));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":471173,"byte_end":471265,"line_start":981,"line_end":981,"column_start":5,"column_end":97}},{"value":"/ assert_eq!(dt.with_day(31), None); // no September 31","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":471270,"byte_end":471327,"line_start":982,"line_end":982,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":471332,"byte_end":471339,"line_start":983,"line_end":983,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":471344,"byte_end":471353,"line_start":984,"line_end":984,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2292},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":472119,"byte_end":472128,"line_start":1005,"line_end":1005,"column_start":8,"column_end":17},"name":"with_day0","qualname":"<NaiveDateTime as traits::Datelike>::with_day0","value":"fn with_day0(&Self, u32) -> Option<NaiveDateTime>","parent":{"krate":0,"index":3214},"children":[],"decl_id":{"krate":0,"index":3229},"docs":" Makes a new `NaiveDateTime` with the day of month (starting from 0) changed.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` with the day of month (starting from 0) changed.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":471501,"byte_end":471581,"line_start":989,"line_end":989,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":471586,"byte_end":471589,"line_start":990,"line_end":990,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting `NaiveDateTime` would be invalid.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":471594,"byte_end":471665,"line_start":991,"line_end":991,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":471670,"byte_end":471673,"line_start":992,"line_end":992,"column_start":5,"column_end":8}},{"value":"/ See also the [`NaiveDate::with_day0`] method.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":471678,"byte_end":471727,"line_start":993,"line_end":993,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":471732,"byte_end":471735,"line_start":994,"line_end":994,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":471740,"byte_end":471753,"line_start":995,"line_end":995,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":471758,"byte_end":471761,"line_start":996,"line_end":996,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":471766,"byte_end":471773,"line_start":997,"line_end":997,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime, Datelike};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":471778,"byte_end":471831,"line_start":998,"line_end":998,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":471836,"byte_end":471839,"line_start":999,"line_end":999,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = NaiveDate::from_ymd(2015, 9, 8).and_hms(12, 34, 56);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":471844,"byte_end":471924,"line_start":1000,"line_end":1000,"column_start":5,"column_end":85}},{"value":"/ assert_eq!(dt.with_day0(29), Some(NaiveDate::from_ymd(2015, 9, 30).and_hms(12, 34, 56)));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":471929,"byte_end":472022,"line_start":1001,"line_end":1001,"column_start":5,"column_end":98}},{"value":"/ assert_eq!(dt.with_day0(30), None); // no September 31","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":472027,"byte_end":472085,"line_start":1002,"line_end":1002,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":472090,"byte_end":472097,"line_start":1003,"line_end":1003,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":472102,"byte_end":472111,"line_start":1004,"line_end":1004,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2294},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":473250,"byte_end":473262,"line_start":1032,"line_end":1032,"column_start":8,"column_end":20},"name":"with_ordinal","qualname":"<NaiveDateTime as traits::Datelike>::with_ordinal","value":"fn with_ordinal(&Self, u32) -> Option<NaiveDateTime>","parent":{"krate":0,"index":3214},"children":[],"decl_id":{"krate":0,"index":3230},"docs":" Makes a new `NaiveDateTime` with the day of year (starting from 1) changed.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` with the day of year (starting from 1) changed.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":472263,"byte_end":472342,"line_start":1009,"line_end":1009,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":472347,"byte_end":472350,"line_start":1010,"line_end":1010,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting `NaiveDateTime` would be invalid.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":472355,"byte_end":472426,"line_start":1011,"line_end":1011,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":472431,"byte_end":472434,"line_start":1012,"line_end":1012,"column_start":5,"column_end":8}},{"value":"/ See also the [`NaiveDate::with_ordinal`] method.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":472439,"byte_end":472491,"line_start":1013,"line_end":1013,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":472496,"byte_end":472499,"line_start":1014,"line_end":1014,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":472504,"byte_end":472517,"line_start":1015,"line_end":1015,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":472522,"byte_end":472525,"line_start":1016,"line_end":1016,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":472530,"byte_end":472537,"line_start":1017,"line_end":1017,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime, Datelike};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":472542,"byte_end":472595,"line_start":1018,"line_end":1018,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":472600,"byte_end":472603,"line_start":1019,"line_end":1019,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = NaiveDate::from_ymd(2015, 9, 8).and_hms(12, 34, 56);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":472608,"byte_end":472688,"line_start":1020,"line_end":1020,"column_start":5,"column_end":85}},{"value":"/ assert_eq!(dt.with_ordinal(60),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":472693,"byte_end":472728,"line_start":1021,"line_end":1021,"column_start":5,"column_end":40}},{"value":"/            Some(NaiveDate::from_ymd(2015, 3, 1).and_hms(12, 34, 56)));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":472733,"byte_end":472807,"line_start":1022,"line_end":1022,"column_start":5,"column_end":79}},{"value":"/ assert_eq!(dt.with_ordinal(366), None); // 2015 had only 365 days","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":472812,"byte_end":472881,"line_start":1023,"line_end":1023,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":472886,"byte_end":472889,"line_start":1024,"line_end":1024,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = NaiveDate::from_ymd(2016, 9, 8).and_hms(12, 34, 56);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":472894,"byte_end":472974,"line_start":1025,"line_end":1025,"column_start":5,"column_end":85}},{"value":"/ assert_eq!(dt.with_ordinal(60),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":472979,"byte_end":473014,"line_start":1026,"line_end":1026,"column_start":5,"column_end":40}},{"value":"/            Some(NaiveDate::from_ymd(2016, 2, 29).and_hms(12, 34, 56)));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":473019,"byte_end":473094,"line_start":1027,"line_end":1027,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(dt.with_ordinal(366),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":473099,"byte_end":473135,"line_start":1028,"line_end":1028,"column_start":5,"column_end":41}},{"value":"/            Some(NaiveDate::from_ymd(2016, 12, 31).and_hms(12, 34, 56)));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":473140,"byte_end":473216,"line_start":1029,"line_end":1029,"column_start":5,"column_end":81}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":473221,"byte_end":473228,"line_start":1030,"line_end":1030,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":473233,"byte_end":473242,"line_start":1031,"line_end":1031,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2296},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":474398,"byte_end":474411,"line_start":1059,"line_end":1059,"column_start":8,"column_end":21},"name":"with_ordinal0","qualname":"<NaiveDateTime as traits::Datelike>::with_ordinal0","value":"fn with_ordinal0(&Self, u32) -> Option<NaiveDateTime>","parent":{"krate":0,"index":3214},"children":[],"decl_id":{"krate":0,"index":3231},"docs":" Makes a new `NaiveDateTime` with the day of year (starting from 0) changed.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` with the day of year (starting from 0) changed.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":473406,"byte_end":473485,"line_start":1036,"line_end":1036,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":473490,"byte_end":473493,"line_start":1037,"line_end":1037,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting `NaiveDateTime` would be invalid.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":473498,"byte_end":473569,"line_start":1038,"line_end":1038,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":473574,"byte_end":473577,"line_start":1039,"line_end":1039,"column_start":5,"column_end":8}},{"value":"/ See also the [`NaiveDate::with_ordinal0`] method.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":473582,"byte_end":473635,"line_start":1040,"line_end":1040,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":473640,"byte_end":473643,"line_start":1041,"line_end":1041,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":473648,"byte_end":473661,"line_start":1042,"line_end":1042,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":473666,"byte_end":473669,"line_start":1043,"line_end":1043,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":473674,"byte_end":473681,"line_start":1044,"line_end":1044,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime, Datelike};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":473686,"byte_end":473739,"line_start":1045,"line_end":1045,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":473744,"byte_end":473747,"line_start":1046,"line_end":1046,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = NaiveDate::from_ymd(2015, 9, 8).and_hms(12, 34, 56);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":473752,"byte_end":473832,"line_start":1047,"line_end":1047,"column_start":5,"column_end":85}},{"value":"/ assert_eq!(dt.with_ordinal0(59),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":473837,"byte_end":473873,"line_start":1048,"line_end":1048,"column_start":5,"column_end":41}},{"value":"/            Some(NaiveDate::from_ymd(2015, 3, 1).and_hms(12, 34, 56)));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":473878,"byte_end":473952,"line_start":1049,"line_end":1049,"column_start":5,"column_end":79}},{"value":"/ assert_eq!(dt.with_ordinal0(365), None); // 2015 had only 365 days","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":473957,"byte_end":474027,"line_start":1050,"line_end":1050,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":474032,"byte_end":474035,"line_start":1051,"line_end":1051,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = NaiveDate::from_ymd(2016, 9, 8).and_hms(12, 34, 56);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":474040,"byte_end":474120,"line_start":1052,"line_end":1052,"column_start":5,"column_end":85}},{"value":"/ assert_eq!(dt.with_ordinal0(59),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":474125,"byte_end":474161,"line_start":1053,"line_end":1053,"column_start":5,"column_end":41}},{"value":"/            Some(NaiveDate::from_ymd(2016, 2, 29).and_hms(12, 34, 56)));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":474166,"byte_end":474241,"line_start":1054,"line_end":1054,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(dt.with_ordinal0(365),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":474246,"byte_end":474283,"line_start":1055,"line_end":1055,"column_start":5,"column_end":42}},{"value":"/            Some(NaiveDate::from_ymd(2016, 12, 31).and_hms(12, 34, 56)));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":474288,"byte_end":474364,"line_start":1056,"line_end":1056,"column_start":5,"column_end":81}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":474369,"byte_end":474376,"line_start":1057,"line_end":1057,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":474381,"byte_end":474390,"line_start":1058,"line_end":1058,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2299},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":474969,"byte_end":474973,"line_start":1078,"line_end":1078,"column_start":8,"column_end":12},"name":"hour","qualname":"<NaiveDateTime as traits::Timelike>::hour","value":"fn hour(&Self) -> u32","parent":{"krate":0,"index":3233},"children":[],"decl_id":{"krate":0,"index":3234},"docs":" Returns the hour number from 0 to 23.","sig":null,"attributes":[{"value":"/ Returns the hour number from 0 to 23.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":474594,"byte_end":474635,"line_start":1065,"line_end":1065,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":474640,"byte_end":474643,"line_start":1066,"line_end":1066,"column_start":5,"column_end":8}},{"value":"/ See also the [`NaiveTime::hour`] method.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":474648,"byte_end":474692,"line_start":1067,"line_end":1067,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":474697,"byte_end":474700,"line_start":1068,"line_end":1068,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":474705,"byte_end":474718,"line_start":1069,"line_end":1069,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":474723,"byte_end":474726,"line_start":1070,"line_end":1070,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":474731,"byte_end":474738,"line_start":1071,"line_end":1071,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime, Timelike};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":474743,"byte_end":474796,"line_start":1072,"line_end":1072,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":474801,"byte_end":474804,"line_start":1073,"line_end":1073,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = NaiveDate::from_ymd(2015, 9, 8).and_hms_milli(12, 34, 56, 789);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":474809,"byte_end":474900,"line_start":1074,"line_end":1074,"column_start":5,"column_end":96}},{"value":"/ assert_eq!(dt.hour(), 12);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":474905,"byte_end":474935,"line_start":1075,"line_end":1075,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":474940,"byte_end":474947,"line_start":1076,"line_end":1076,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":474952,"byte_end":474961,"line_start":1077,"line_end":1077,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2300},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":475407,"byte_end":475413,"line_start":1095,"line_end":1095,"column_start":8,"column_end":14},"name":"minute","qualname":"<NaiveDateTime as traits::Timelike>::minute","value":"fn minute(&Self) -> u32","parent":{"krate":0,"index":3233},"children":[],"decl_id":{"krate":0,"index":3236},"docs":" Returns the minute number from 0 to 59.","sig":null,"attributes":[{"value":"/ Returns the minute number from 0 to 59.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":475026,"byte_end":475069,"line_start":1082,"line_end":1082,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":475074,"byte_end":475077,"line_start":1083,"line_end":1083,"column_start":5,"column_end":8}},{"value":"/ See also the [`NaiveTime::minute`] method.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":475082,"byte_end":475128,"line_start":1084,"line_end":1084,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":475133,"byte_end":475136,"line_start":1085,"line_end":1085,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":475141,"byte_end":475154,"line_start":1086,"line_end":1086,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":475159,"byte_end":475162,"line_start":1087,"line_end":1087,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":475167,"byte_end":475174,"line_start":1088,"line_end":1088,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime, Timelike};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":475179,"byte_end":475232,"line_start":1089,"line_end":1089,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":475237,"byte_end":475240,"line_start":1090,"line_end":1090,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = NaiveDate::from_ymd(2015, 9, 8).and_hms_milli(12, 34, 56, 789);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":475245,"byte_end":475336,"line_start":1091,"line_end":1091,"column_start":5,"column_end":96}},{"value":"/ assert_eq!(dt.minute(), 34);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":475341,"byte_end":475373,"line_start":1092,"line_end":1092,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":475378,"byte_end":475385,"line_start":1093,"line_end":1093,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":475390,"byte_end":475399,"line_start":1094,"line_end":1094,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2301},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":475849,"byte_end":475855,"line_start":1112,"line_end":1112,"column_start":8,"column_end":14},"name":"second","qualname":"<NaiveDateTime as traits::Timelike>::second","value":"fn second(&Self) -> u32","parent":{"krate":0,"index":3233},"children":[],"decl_id":{"krate":0,"index":3237},"docs":" Returns the second number from 0 to 59.","sig":null,"attributes":[{"value":"/ Returns the second number from 0 to 59.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":475468,"byte_end":475511,"line_start":1099,"line_end":1099,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":475516,"byte_end":475519,"line_start":1100,"line_end":1100,"column_start":5,"column_end":8}},{"value":"/ See also the [`NaiveTime::second`] method.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":475524,"byte_end":475570,"line_start":1101,"line_end":1101,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":475575,"byte_end":475578,"line_start":1102,"line_end":1102,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":475583,"byte_end":475596,"line_start":1103,"line_end":1103,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":475601,"byte_end":475604,"line_start":1104,"line_end":1104,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":475609,"byte_end":475616,"line_start":1105,"line_end":1105,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime, Timelike};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":475621,"byte_end":475674,"line_start":1106,"line_end":1106,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":475679,"byte_end":475682,"line_start":1107,"line_end":1107,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = NaiveDate::from_ymd(2015, 9, 8).and_hms_milli(12, 34, 56, 789);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":475687,"byte_end":475778,"line_start":1108,"line_end":1108,"column_start":5,"column_end":96}},{"value":"/ assert_eq!(dt.second(), 56);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":475783,"byte_end":475815,"line_start":1109,"line_end":1109,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":475820,"byte_end":475827,"line_start":1110,"line_end":1110,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":475832,"byte_end":475841,"line_start":1111,"line_end":1111,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2302},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":476473,"byte_end":476483,"line_start":1131,"line_end":1131,"column_start":8,"column_end":18},"name":"nanosecond","qualname":"<NaiveDateTime as traits::Timelike>::nanosecond","value":"fn nanosecond(&Self) -> u32","parent":{"krate":0,"index":3233},"children":[],"decl_id":{"krate":0,"index":3238},"docs":" Returns the number of nanoseconds since the whole non-leap second.\n The range from 1,000,000,000 to 1,999,999,999 represents\n the [leap second](./struct.NaiveTime.html#leap-second-handling).","sig":null,"attributes":[{"value":"/ Returns the number of nanoseconds since the whole non-leap second.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":475910,"byte_end":475980,"line_start":1116,"line_end":1116,"column_start":5,"column_end":75}},{"value":"/ The range from 1,000,000,000 to 1,999,999,999 represents","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":475985,"byte_end":476045,"line_start":1117,"line_end":1117,"column_start":5,"column_end":65}},{"value":"/ the [leap second](./struct.NaiveTime.html#leap-second-handling).","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":476050,"byte_end":476118,"line_start":1118,"line_end":1118,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":476123,"byte_end":476126,"line_start":1119,"line_end":1119,"column_start":5,"column_end":8}},{"value":"/ See also the [`NaiveTime::nanosecond`] method.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":476131,"byte_end":476181,"line_start":1120,"line_end":1120,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":476186,"byte_end":476189,"line_start":1121,"line_end":1121,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":476194,"byte_end":476207,"line_start":1122,"line_end":1122,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":476212,"byte_end":476215,"line_start":1123,"line_end":1123,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":476220,"byte_end":476227,"line_start":1124,"line_end":1124,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime, Timelike};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":476232,"byte_end":476285,"line_start":1125,"line_end":1125,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":476290,"byte_end":476293,"line_start":1126,"line_end":1126,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = NaiveDate::from_ymd(2015, 9, 8).and_hms_milli(12, 34, 56, 789);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":476298,"byte_end":476389,"line_start":1127,"line_end":1127,"column_start":5,"column_end":96}},{"value":"/ assert_eq!(dt.nanosecond(), 789_000_000);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":476394,"byte_end":476439,"line_start":1128,"line_end":1128,"column_start":5,"column_end":50}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":476444,"byte_end":476451,"line_start":1129,"line_end":1129,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":476456,"byte_end":476465,"line_start":1130,"line_end":1130,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2303},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":477160,"byte_end":477169,"line_start":1152,"line_end":1152,"column_start":8,"column_end":17},"name":"with_hour","qualname":"<NaiveDateTime as traits::Timelike>::with_hour","value":"fn with_hour(&Self, u32) -> Option<NaiveDateTime>","parent":{"krate":0,"index":3233},"children":[],"decl_id":{"krate":0,"index":3239},"docs":" Makes a new `NaiveDateTime` with the hour number changed.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` with the hour number changed.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":476542,"byte_end":476603,"line_start":1135,"line_end":1135,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":476608,"byte_end":476611,"line_start":1136,"line_end":1136,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting `NaiveDateTime` would be invalid.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":476616,"byte_end":476687,"line_start":1137,"line_end":1137,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":476692,"byte_end":476695,"line_start":1138,"line_end":1138,"column_start":5,"column_end":8}},{"value":"/ See also the [`NaiveTime::with_hour`] method.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":476700,"byte_end":476749,"line_start":1139,"line_end":1139,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":476754,"byte_end":476757,"line_start":1140,"line_end":1140,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":476762,"byte_end":476775,"line_start":1141,"line_end":1141,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":476780,"byte_end":476783,"line_start":1142,"line_end":1142,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":476788,"byte_end":476795,"line_start":1143,"line_end":1143,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime, Timelike};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":476800,"byte_end":476853,"line_start":1144,"line_end":1144,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":476858,"byte_end":476861,"line_start":1145,"line_end":1145,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = NaiveDate::from_ymd(2015, 9, 8).and_hms_milli(12, 34, 56, 789);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":476866,"byte_end":476957,"line_start":1146,"line_end":1146,"column_start":5,"column_end":96}},{"value":"/ assert_eq!(dt.with_hour(7),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":476962,"byte_end":476993,"line_start":1147,"line_end":1147,"column_start":5,"column_end":36}},{"value":"/            Some(NaiveDate::from_ymd(2015, 9, 8).and_hms_milli(7, 34, 56, 789)));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":476998,"byte_end":477082,"line_start":1148,"line_end":1148,"column_start":5,"column_end":89}},{"value":"/ assert_eq!(dt.with_hour(24), None);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":477087,"byte_end":477126,"line_start":1149,"line_end":1149,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":477131,"byte_end":477138,"line_start":1150,"line_end":1150,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":477143,"byte_end":477152,"line_start":1151,"line_end":1151,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2305},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":477940,"byte_end":477951,"line_start":1174,"line_end":1174,"column_start":8,"column_end":19},"name":"with_minute","qualname":"<NaiveDateTime as traits::Timelike>::with_minute","value":"fn with_minute(&Self, u32) -> Option<NaiveDateTime>","parent":{"krate":0,"index":3233},"children":[],"decl_id":{"krate":0,"index":3240},"docs":" Makes a new `NaiveDateTime` with the minute number changed.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` with the minute number changed.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":477304,"byte_end":477367,"line_start":1156,"line_end":1156,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":477372,"byte_end":477375,"line_start":1157,"line_end":1157,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting `NaiveDateTime` would be invalid.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":477380,"byte_end":477451,"line_start":1158,"line_end":1158,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":477456,"byte_end":477459,"line_start":1159,"line_end":1159,"column_start":5,"column_end":8}},{"value":"/ See also the","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":477464,"byte_end":477480,"line_start":1160,"line_end":1160,"column_start":5,"column_end":21}},{"value":"/ [`NaiveTime::with_minute`] method.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":477485,"byte_end":477523,"line_start":1161,"line_end":1161,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":477528,"byte_end":477531,"line_start":1162,"line_end":1162,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":477536,"byte_end":477549,"line_start":1163,"line_end":1163,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":477554,"byte_end":477557,"line_start":1164,"line_end":1164,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":477562,"byte_end":477569,"line_start":1165,"line_end":1165,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime, Timelike};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":477574,"byte_end":477627,"line_start":1166,"line_end":1166,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":477632,"byte_end":477635,"line_start":1167,"line_end":1167,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = NaiveDate::from_ymd(2015, 9, 8).and_hms_milli(12, 34, 56, 789);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":477640,"byte_end":477731,"line_start":1168,"line_end":1168,"column_start":5,"column_end":96}},{"value":"/ assert_eq!(dt.with_minute(45),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":477736,"byte_end":477770,"line_start":1169,"line_end":1169,"column_start":5,"column_end":39}},{"value":"/            Some(NaiveDate::from_ymd(2015, 9, 8).and_hms_milli(12, 45, 56, 789)));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":477775,"byte_end":477860,"line_start":1170,"line_end":1170,"column_start":5,"column_end":90}},{"value":"/ assert_eq!(dt.with_minute(60), None);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":477865,"byte_end":477906,"line_start":1171,"line_end":1171,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":477911,"byte_end":477918,"line_start":1172,"line_end":1172,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":477923,"byte_end":477932,"line_start":1173,"line_end":1173,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2307},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":478823,"byte_end":478834,"line_start":1197,"line_end":1197,"column_start":8,"column_end":19},"name":"with_second","qualname":"<NaiveDateTime as traits::Timelike>::with_second","value":"fn with_second(&Self, u32) -> Option<NaiveDateTime>","parent":{"krate":0,"index":3233},"children":[],"decl_id":{"krate":0,"index":3241},"docs":" Makes a new `NaiveDateTime` with the second number changed.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` with the second number changed.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":478086,"byte_end":478149,"line_start":1178,"line_end":1178,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":478154,"byte_end":478157,"line_start":1179,"line_end":1179,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting `NaiveDateTime` would be invalid. As","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":478162,"byte_end":478236,"line_start":1180,"line_end":1180,"column_start":5,"column_end":79}},{"value":"/ with the [`NaiveDateTime::second`] method, the input range is","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":478241,"byte_end":478306,"line_start":1181,"line_end":1181,"column_start":5,"column_end":70}},{"value":"/ restricted to 0 through 59.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":478311,"byte_end":478342,"line_start":1182,"line_end":1182,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":478347,"byte_end":478350,"line_start":1183,"line_end":1183,"column_start":5,"column_end":8}},{"value":"/ See also the [`NaiveTime::with_second`] method.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":478355,"byte_end":478406,"line_start":1184,"line_end":1184,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":478411,"byte_end":478414,"line_start":1185,"line_end":1185,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":478419,"byte_end":478432,"line_start":1186,"line_end":1186,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":478437,"byte_end":478440,"line_start":1187,"line_end":1187,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":478445,"byte_end":478452,"line_start":1188,"line_end":1188,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime, Timelike};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":478457,"byte_end":478510,"line_start":1189,"line_end":1189,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":478515,"byte_end":478518,"line_start":1190,"line_end":1190,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = NaiveDate::from_ymd(2015, 9, 8).and_hms_milli(12, 34, 56, 789);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":478523,"byte_end":478614,"line_start":1191,"line_end":1191,"column_start":5,"column_end":96}},{"value":"/ assert_eq!(dt.with_second(17),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":478619,"byte_end":478653,"line_start":1192,"line_end":1192,"column_start":5,"column_end":39}},{"value":"/            Some(NaiveDate::from_ymd(2015, 9, 8).and_hms_milli(12, 34, 17, 789)));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":478658,"byte_end":478743,"line_start":1193,"line_end":1193,"column_start":5,"column_end":90}},{"value":"/ assert_eq!(dt.with_second(60), None);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":478748,"byte_end":478789,"line_start":1194,"line_end":1194,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":478794,"byte_end":478801,"line_start":1195,"line_end":1195,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":478806,"byte_end":478815,"line_start":1196,"line_end":1196,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2309},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":479955,"byte_end":479970,"line_start":1222,"line_end":1222,"column_start":8,"column_end":23},"name":"with_nanosecond","qualname":"<NaiveDateTime as traits::Timelike>::with_nanosecond","value":"fn with_nanosecond(&Self, u32) -> Option<NaiveDateTime>","parent":{"krate":0,"index":3233},"children":[],"decl_id":{"krate":0,"index":3242},"docs":" Makes a new `NaiveDateTime` with nanoseconds since the whole non-leap second changed.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` with nanoseconds since the whole non-leap second changed.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":478969,"byte_end":479058,"line_start":1201,"line_end":1201,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":479063,"byte_end":479066,"line_start":1202,"line_end":1202,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting `NaiveDateTime` would be invalid.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":479071,"byte_end":479142,"line_start":1203,"line_end":1203,"column_start":5,"column_end":76}},{"value":"/ As with the [`NaiveDateTime::nanosecond`] method,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":479147,"byte_end":479200,"line_start":1204,"line_end":1204,"column_start":5,"column_end":58}},{"value":"/ the input range can exceed 1,000,000,000 for leap seconds.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":479205,"byte_end":479267,"line_start":1205,"line_end":1205,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":479272,"byte_end":479275,"line_start":1206,"line_end":1206,"column_start":5,"column_end":8}},{"value":"/ See also the [`NaiveTime::with_nanosecond`] method.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":479280,"byte_end":479335,"line_start":1207,"line_end":1207,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":479340,"byte_end":479343,"line_start":1208,"line_end":1208,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":479348,"byte_end":479361,"line_start":1209,"line_end":1209,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":479366,"byte_end":479369,"line_start":1210,"line_end":1210,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":479374,"byte_end":479381,"line_start":1211,"line_end":1211,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime, Timelike};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":479386,"byte_end":479439,"line_start":1212,"line_end":1212,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":479444,"byte_end":479447,"line_start":1213,"line_end":1213,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = NaiveDate::from_ymd(2015, 9, 8).and_hms_milli(12, 34, 56, 789);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":479452,"byte_end":479543,"line_start":1214,"line_end":1214,"column_start":5,"column_end":96}},{"value":"/ assert_eq!(dt.with_nanosecond(333_333_333),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":479548,"byte_end":479595,"line_start":1215,"line_end":1215,"column_start":5,"column_end":52}},{"value":"/            Some(NaiveDate::from_ymd(2015, 9, 8).and_hms_nano(12, 34, 56, 333_333_333)));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":479600,"byte_end":479692,"line_start":1216,"line_end":1216,"column_start":5,"column_end":97}},{"value":"/ assert_eq!(dt.with_nanosecond(1_333_333_333), // leap second","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":479697,"byte_end":479761,"line_start":1217,"line_end":1217,"column_start":5,"column_end":69}},{"value":"/            Some(NaiveDate::from_ymd(2015, 9, 8).and_hms_nano(12, 34, 56, 1_333_333_333)));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":479766,"byte_end":479860,"line_start":1218,"line_end":1218,"column_start":5,"column_end":99}},{"value":"/ assert_eq!(dt.with_nanosecond(2_000_000_000), None);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":479865,"byte_end":479921,"line_start":1219,"line_end":1219,"column_start":5,"column_end":61}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":479926,"byte_end":479933,"line_start":1220,"line_end":1220,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":479938,"byte_end":479947,"line_start":1221,"line_end":1221,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2313},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":482478,"byte_end":482481,"line_start":1280,"line_end":1280,"column_start":8,"column_end":11},"name":"add","qualname":"<NaiveDateTime as std::ops::Add>::add","value":"fn add(Self, OldDuration) -> NaiveDateTime","parent":{"krate":2,"index":3218},"children":[],"decl_id":{"krate":2,"index":3221},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":482461,"byte_end":482470,"line_start":1279,"line_end":1279,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2315},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":482688,"byte_end":482698,"line_start":1287,"line_end":1287,"column_start":8,"column_end":18},"name":"add_assign","qualname":"<NaiveDateTime as std::ops::AddAssign>::add_assign","value":"fn add_assign(&mut Self, OldDuration)","parent":{"krate":2,"index":3249},"children":[],"decl_id":{"krate":2,"index":3251},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":482671,"byte_end":482680,"line_start":1286,"line_end":1286,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2318},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":485056,"byte_end":485059,"line_start":1344,"line_end":1344,"column_start":8,"column_end":11},"name":"sub","qualname":"<NaiveDateTime as std::ops::Sub>::sub","value":"fn sub(Self, OldDuration) -> NaiveDateTime","parent":{"krate":2,"index":3223},"children":[],"decl_id":{"krate":2,"index":3226},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":485039,"byte_end":485048,"line_start":1343,"line_end":1343,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2320},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":485266,"byte_end":485276,"line_start":1351,"line_end":1351,"column_start":8,"column_end":18},"name":"sub_assign","qualname":"<NaiveDateTime as std::ops::SubAssign>::sub_assign","value":"fn sub_assign(&mut Self, OldDuration)","parent":{"krate":2,"index":3253},"children":[],"decl_id":{"krate":2,"index":3255},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":485249,"byte_end":485258,"line_start":1350,"line_end":1350,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2323},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":487041,"byte_end":487044,"line_start":1399,"line_end":1399,"column_start":8,"column_end":11},"name":"sub","qualname":"<NaiveDateTime as std::ops::Sub>::sub","value":"fn sub(Self, NaiveDateTime) -> OldDuration","parent":{"krate":2,"index":3223},"children":[],"decl_id":{"krate":2,"index":3226},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":487024,"byte_end":487033,"line_start":1398,"line_end":1398,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2325},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":488206,"byte_end":488209,"line_start":1432,"line_end":1432,"column_start":8,"column_end":11},"name":"fmt","qualname":"<NaiveDateTime as std::fmt::Debug>::fmt","value":"fn fmt(&Self, &mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":9907},"children":[],"decl_id":{"krate":2,"index":9908},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2327},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":489307,"byte_end":489310,"line_start":1463,"line_end":1463,"column_start":8,"column_end":11},"name":"fmt","qualname":"<NaiveDateTime as std::fmt::Display>::fmt","value":"fn fmt(&Self, &mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":9914},"children":[],"decl_id":{"krate":2,"index":9915},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2330},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":490078,"byte_end":490086,"line_start":1487,"line_end":1487,"column_start":8,"column_end":16},"name":"from_str","qualname":"<NaiveDateTime as std::str::FromStr>::from_str","value":"fn from_str(&str) -> ParseResult<NaiveDateTime>","parent":{"krate":2,"index":12561},"children":[],"decl_id":{"krate":2,"index":12563},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2333},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":491410,"byte_end":491417,"line_start":1527,"line_end":1527,"column_start":8,"column_end":15},"name":"default","qualname":"<NaiveDateTime as std::default::Default>::default","value":"fn default() -> Self","parent":{"krate":2,"index":3128},"children":[],"decl_id":{"krate":2,"index":3129},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3778},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":563938,"byte_end":563945,"line_start":21,"line_end":21,"column_start":12,"column_end":19},"name":"IsoWeek","qualname":"::naive::isoweek::IsoWeek","value":"IsoWeek {  }","parent":null,"children":[{"krate":0,"index":3779}],"decl_id":null,"docs":" ISO 8601 week.","sig":null,"attributes":[{"value":"/ ISO 8601 week.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":563460,"byte_end":563478,"line_start":13,"line_end":13,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":563479,"byte_end":563482,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ This type, combined with [`Weekday`](../enum.Weekday.html),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":563483,"byte_end":563546,"line_start":15,"line_end":15,"column_start":1,"column_end":64}},{"value":"/ constitutes the ISO 8601 [week date](./struct.NaiveDate.html#week-date).","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":563547,"byte_end":563623,"line_start":16,"line_end":16,"column_start":1,"column_end":77}},{"value":"/ One can retrieve this type from the existing [`Datelike`](../trait.Datelike.html) types","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":563624,"byte_end":563715,"line_start":17,"line_end":17,"column_start":1,"column_end":92}},{"value":"/ via the [`Datelike::iso_week`](../trait.Datelike.html#tymethod.iso_week) method.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":563716,"byte_end":563800,"line_start":18,"line_end":18,"column_start":1,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":2438},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":565906,"byte_end":565910,"line_start":74,"line_end":74,"column_start":12,"column_end":16},"name":"year","qualname":"<IsoWeek>::year","value":"fn year(&Self) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Returns the year number for this ISO week.","sig":null,"attributes":[{"value":"/ Returns the year number for this ISO week.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":565252,"byte_end":565298,"line_start":53,"line_end":53,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":565303,"byte_end":565306,"line_start":54,"line_end":54,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":565311,"byte_end":565324,"line_start":55,"line_end":55,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":565329,"byte_end":565332,"line_start":56,"line_end":56,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":565337,"byte_end":565344,"line_start":57,"line_end":57,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, Datelike, Weekday};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":565349,"byte_end":565396,"line_start":58,"line_end":58,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":565401,"byte_end":565404,"line_start":59,"line_end":59,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_isoywd(2015, 1, Weekday::Mon);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":565409,"byte_end":565467,"line_start":60,"line_end":60,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(d.iso_week().year(), 2015);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":565472,"byte_end":565514,"line_start":61,"line_end":61,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":565519,"byte_end":565526,"line_start":62,"line_end":62,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":565531,"byte_end":565534,"line_start":63,"line_end":63,"column_start":5,"column_end":8}},{"value":"/ This year number might not match the calendar year number.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":565539,"byte_end":565601,"line_start":64,"line_end":64,"column_start":5,"column_end":67}},{"value":"/ Continuing the example...","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":565606,"byte_end":565635,"line_start":65,"line_end":65,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":565640,"byte_end":565643,"line_start":66,"line_end":66,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":565648,"byte_end":565655,"line_start":67,"line_end":67,"column_start":5,"column_end":12}},{"value":"/ # use chrono::{NaiveDate, Datelike, Weekday};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":565660,"byte_end":565709,"line_start":68,"line_end":68,"column_start":5,"column_end":54}},{"value":"/ # let d = NaiveDate::from_isoywd(2015, 1, Weekday::Mon);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":565714,"byte_end":565774,"line_start":69,"line_end":69,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(d.year(), 2014);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":565779,"byte_end":565810,"line_start":70,"line_end":70,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(d, NaiveDate::from_ymd(2014, 12, 29));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":565815,"byte_end":565868,"line_start":71,"line_end":71,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":565873,"byte_end":565880,"line_start":72,"line_end":72,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":565885,"byte_end":565894,"line_start":73,"line_end":73,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2439},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":566358,"byte_end":566362,"line_start":91,"line_end":91,"column_start":12,"column_end":16},"name":"week","qualname":"<IsoWeek>::week","value":"fn week(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the ISO week number starting from 1.","sig":null,"attributes":[{"value":"/ Returns the ISO week number starting from 1.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":565961,"byte_end":566009,"line_start":78,"line_end":78,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":566014,"byte_end":566017,"line_start":79,"line_end":79,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 1 to 53. (The last week of year differs by years.)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":566022,"byte_end":566105,"line_start":80,"line_end":80,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":566110,"byte_end":566113,"line_start":81,"line_end":81,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":566118,"byte_end":566131,"line_start":82,"line_end":82,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":566136,"byte_end":566139,"line_start":83,"line_end":83,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":566144,"byte_end":566151,"line_start":84,"line_end":84,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, Datelike, Weekday};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":566156,"byte_end":566203,"line_start":85,"line_end":85,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":566208,"byte_end":566211,"line_start":86,"line_end":86,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_isoywd(2015, 15, Weekday::Mon);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":566216,"byte_end":566275,"line_start":87,"line_end":87,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(d.iso_week().week(), 15);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":566280,"byte_end":566320,"line_start":88,"line_end":88,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":566325,"byte_end":566332,"line_start":89,"line_end":89,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":566337,"byte_end":566346,"line_start":90,"line_end":90,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2440},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":566828,"byte_end":566833,"line_start":108,"line_end":108,"column_start":12,"column_end":17},"name":"week0","qualname":"<IsoWeek>::week0","value":"fn week0(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the ISO week number starting from 0.","sig":null,"attributes":[{"value":"/ Returns the ISO week number starting from 0.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":566430,"byte_end":566478,"line_start":95,"line_end":95,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":566483,"byte_end":566486,"line_start":96,"line_end":96,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 0 to 52. (The last week of year differs by years.)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":566491,"byte_end":566574,"line_start":97,"line_end":97,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":566579,"byte_end":566582,"line_start":98,"line_end":98,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":566587,"byte_end":566600,"line_start":99,"line_end":99,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":566605,"byte_end":566608,"line_start":100,"line_end":100,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":566613,"byte_end":566620,"line_start":101,"line_end":101,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, Datelike, Weekday};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":566625,"byte_end":566672,"line_start":102,"line_end":102,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":566677,"byte_end":566680,"line_start":103,"line_end":103,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_isoywd(2015, 15, Weekday::Mon);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":566685,"byte_end":566744,"line_start":104,"line_end":104,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(d.iso_week().week0(), 14);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":566749,"byte_end":566790,"line_start":105,"line_end":105,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":566795,"byte_end":566802,"line_start":106,"line_end":106,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":566807,"byte_end":566816,"line_start":107,"line_end":107,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2442},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":567796,"byte_end":567799,"line_start":135,"line_end":135,"column_start":8,"column_end":11},"name":"fmt","qualname":"<IsoWeek as std::fmt::Debug>::fmt","value":"fn fmt(&Self, &mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":9907},"children":[],"decl_id":{"krate":2,"index":9908},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2523},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\serde.rs","byte_start":624360,"byte_end":624369,"line_start":9,"line_end":9,"column_start":8,"column_end":17},"name":"serialize","qualname":"<NaiveTime as serde::Serialize>::serialize","value":"fn serialize<S>(&Self, S) -> Result<S::Ok, S::Error> where S: ser::Serializer","parent":{"krate":16,"index":2117},"children":[],"decl_id":{"krate":16,"index":2118},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2535},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\serde.rs","byte_start":624960,"byte_end":624971,"line_start":35,"line_end":35,"column_start":8,"column_end":19},"name":"deserialize","qualname":"<NaiveTime as serde::Deserialize>::deserialize","value":"fn deserialize<D>(D) -> Result<Self, D::Error> where D: de::Deserializer","parent":{"krate":16,"index":1577},"children":[],"decl_id":{"krate":16,"index":1579},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3794},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":576923,"byte_end":576932,"line_start":192,"line_end":192,"column_start":12,"column_end":21},"name":"NaiveTime","qualname":"::naive::time::NaiveTime","value":"NaiveTime {  }","parent":null,"children":[{"krate":0,"index":3795},{"krate":0,"index":3796}],"decl_id":null,"docs":" ISO 8601 time without timezone.\n Allows for the nanosecond precision and optional leap second representation.","sig":null,"attributes":[{"value":"/ ISO 8601 time without timezone.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":569641,"byte_end":569676,"line_start":31,"line_end":31,"column_start":1,"column_end":36}},{"value":"/ Allows for the nanosecond precision and optional leap second representation.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":569677,"byte_end":569757,"line_start":32,"line_end":32,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":569758,"byte_end":569761,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ # Leap Second Handling","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":569762,"byte_end":569788,"line_start":34,"line_end":34,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":569789,"byte_end":569792,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ Since 1960s, the manmade atomic clock has been so accurate that","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":569793,"byte_end":569860,"line_start":36,"line_end":36,"column_start":1,"column_end":68}},{"value":"/ it is much more accurate than Earth's own motion.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":569861,"byte_end":569914,"line_start":37,"line_end":37,"column_start":1,"column_end":54}},{"value":"/ It became desirable to define the civil time in terms of the atomic clock,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":569915,"byte_end":569993,"line_start":38,"line_end":38,"column_start":1,"column_end":79}},{"value":"/ but that risks the desynchronization of the civil time from Earth.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":569994,"byte_end":570064,"line_start":39,"line_end":39,"column_start":1,"column_end":71}},{"value":"/ To account for this, the designers of the Coordinated Universal Time (UTC)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":570065,"byte_end":570143,"line_start":40,"line_end":40,"column_start":1,"column_end":79}},{"value":"/ made that the UTC should be kept within 0.9 seconds of the observed Earth-bound time.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":570144,"byte_end":570233,"line_start":41,"line_end":41,"column_start":1,"column_end":90}},{"value":"/ When the mean solar day is longer than the ideal (86,400 seconds),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":570234,"byte_end":570304,"line_start":42,"line_end":42,"column_start":1,"column_end":71}},{"value":"/ the error slowly accumulates and it is necessary to add a **leap second**","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":570305,"byte_end":570382,"line_start":43,"line_end":43,"column_start":1,"column_end":78}},{"value":"/ to slow the UTC down a bit.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":570383,"byte_end":570414,"line_start":44,"line_end":44,"column_start":1,"column_end":32}},{"value":"/ (We may also remove a second to speed the UTC up a bit, but it never happened.)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":570415,"byte_end":570498,"line_start":45,"line_end":45,"column_start":1,"column_end":84}},{"value":"/ The leap second, if any, follows 23:59:59 of June 30 or December 31 in the UTC.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":570499,"byte_end":570582,"line_start":46,"line_end":46,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":570583,"byte_end":570586,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ Fast forward to the 21st century,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":570587,"byte_end":570624,"line_start":48,"line_end":48,"column_start":1,"column_end":38}},{"value":"/ we have seen 26 leap seconds from January 1972 to December 2015.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":570625,"byte_end":570693,"line_start":49,"line_end":49,"column_start":1,"column_end":69}},{"value":"/ Yes, 26 seconds. Probably you can read this paragraph within 26 seconds.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":570694,"byte_end":570770,"line_start":50,"line_end":50,"column_start":1,"column_end":77}},{"value":"/ But those 26 seconds, and possibly more in the future, are never predictable,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":570771,"byte_end":570852,"line_start":51,"line_end":51,"column_start":1,"column_end":82}},{"value":"/ and whether to add a leap second or not is known only before 6 months.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":570853,"byte_end":570927,"line_start":52,"line_end":52,"column_start":1,"column_end":75}},{"value":"/ Internet-based clocks (via NTP) do account for known leap seconds,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":570928,"byte_end":570998,"line_start":53,"line_end":53,"column_start":1,"column_end":71}},{"value":"/ but the system API normally doesn't (and often can't, with no network connection)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":570999,"byte_end":571084,"line_start":54,"line_end":54,"column_start":1,"column_end":86}},{"value":"/ and there is no reliable way to retrieve leap second information.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":571085,"byte_end":571154,"line_start":55,"line_end":55,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":571155,"byte_end":571158,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ Chrono does not try to accurately implement leap seconds; it is impossible.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":571159,"byte_end":571238,"line_start":57,"line_end":57,"column_start":1,"column_end":80}},{"value":"/ Rather, **it allows for leap seconds but behaves as if there are *no other* leap seconds.**","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":571239,"byte_end":571334,"line_start":58,"line_end":58,"column_start":1,"column_end":96}},{"value":"/ Various operations will ignore any possible leap second(s)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":571335,"byte_end":571397,"line_start":59,"line_end":59,"column_start":1,"column_end":63}},{"value":"/ except when any of the operands were actually leap seconds.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":571398,"byte_end":571461,"line_start":60,"line_end":60,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":571462,"byte_end":571465,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ If you cannot tolerate this behavior,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":571466,"byte_end":571507,"line_start":62,"line_end":62,"column_start":1,"column_end":42}},{"value":"/ you must use a separate `TimeZone` for the International Atomic Time (TAI).","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":571508,"byte_end":571587,"line_start":63,"line_end":63,"column_start":1,"column_end":80}},{"value":"/ TAI is like UTC but has no leap seconds, and thus slightly differs from UTC.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":571588,"byte_end":571668,"line_start":64,"line_end":64,"column_start":1,"column_end":81}},{"value":"/ Chrono does not yet provide such implementation, but it is planned.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":571669,"byte_end":571740,"line_start":65,"line_end":65,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":571741,"byte_end":571744,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ ## Representing Leap Seconds","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":571745,"byte_end":571777,"line_start":67,"line_end":67,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":571778,"byte_end":571781,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ The leap second is indicated via fractional seconds more than 1 second.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":571782,"byte_end":571857,"line_start":69,"line_end":69,"column_start":1,"column_end":76}},{"value":"/ This makes possible to treat a leap second as the prior non-leap second","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":571858,"byte_end":571933,"line_start":70,"line_end":70,"column_start":1,"column_end":76}},{"value":"/ if you don't care about sub-second accuracy.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":571934,"byte_end":571982,"line_start":71,"line_end":71,"column_start":1,"column_end":49}},{"value":"/ You should use the proper formatting to get the raw leap second.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":571983,"byte_end":572051,"line_start":72,"line_end":72,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":572052,"byte_end":572055,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ All methods accepting fractional seconds will accept such values.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":572056,"byte_end":572125,"line_start":74,"line_end":74,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":572126,"byte_end":572129,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":572130,"byte_end":572137,"line_start":76,"line_end":76,"column_start":1,"column_end":8}},{"value":"/ use chrono::{NaiveDate, NaiveTime, Utc, TimeZone};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":572138,"byte_end":572192,"line_start":77,"line_end":77,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":572193,"byte_end":572196,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ let t = NaiveTime::from_hms_milli(8, 59, 59, 1_000);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":572197,"byte_end":572253,"line_start":79,"line_end":79,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":572254,"byte_end":572257,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"/ let dt1 = NaiveDate::from_ymd(2015, 7, 1).and_hms_micro(8, 59, 59, 1_000_000);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":572258,"byte_end":572340,"line_start":81,"line_end":81,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":572341,"byte_end":572344,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ let dt2 = Utc.ymd(2015, 6, 30).and_hms_nano(23, 59, 59, 1_000_000_000);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":572345,"byte_end":572420,"line_start":83,"line_end":83,"column_start":1,"column_end":76}},{"value":"/ # let _ = (t, dt1, dt2);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":572421,"byte_end":572449,"line_start":84,"line_end":84,"column_start":1,"column_end":29}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":572450,"byte_end":572457,"line_start":85,"line_end":85,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":572458,"byte_end":572461,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"/ Note that the leap second can happen anytime given an appropriate time zone;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":572462,"byte_end":572542,"line_start":87,"line_end":87,"column_start":1,"column_end":81}},{"value":"/ 2015-07-01 01:23:60 would be a proper leap second if UTC+01:24 had existed.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":572543,"byte_end":572622,"line_start":88,"line_end":88,"column_start":1,"column_end":80}},{"value":"/ Practically speaking, though, by the time of the first leap second on 1972-06-30,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":572623,"byte_end":572708,"line_start":89,"line_end":89,"column_start":1,"column_end":86}},{"value":"/ every time zone offset around the world has standardized to the 5-minute alignment.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":572709,"byte_end":572796,"line_start":90,"line_end":90,"column_start":1,"column_end":88}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":572797,"byte_end":572800,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ ## Date And Time Arithmetics","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":572801,"byte_end":572833,"line_start":92,"line_end":92,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":572834,"byte_end":572837,"line_start":93,"line_end":93,"column_start":1,"column_end":4}},{"value":"/ As a concrete example, let's assume that `03:00:60` and `04:00:60` are leap seconds.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":572838,"byte_end":572926,"line_start":94,"line_end":94,"column_start":1,"column_end":89}},{"value":"/ In reality, of course, leap seconds are separated by at least 6 months.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":572927,"byte_end":573002,"line_start":95,"line_end":95,"column_start":1,"column_end":76}},{"value":"/ We will also use some intuitive concise notations for the explanation.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":573003,"byte_end":573077,"line_start":96,"line_end":96,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":573078,"byte_end":573081,"line_start":97,"line_end":97,"column_start":1,"column_end":4}},{"value":"/ `Time + Duration`","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":573082,"byte_end":573103,"line_start":98,"line_end":98,"column_start":1,"column_end":22}},{"value":"/ (short for [`NaiveTime::overflowing_add_signed`](#method.overflowing_add_signed)):","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":573104,"byte_end":573190,"line_start":99,"line_end":99,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":573191,"byte_end":573194,"line_start":100,"line_end":100,"column_start":1,"column_end":4}},{"value":"/ - `03:00:00 + 1s = 03:00:01`.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":573195,"byte_end":573228,"line_start":101,"line_end":101,"column_start":1,"column_end":34}},{"value":"/ - `03:00:59 + 60s = 03:02:00`.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":573229,"byte_end":573263,"line_start":102,"line_end":102,"column_start":1,"column_end":35}},{"value":"/ - `03:00:59 + 1s = 03:01:00`.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":573264,"byte_end":573297,"line_start":103,"line_end":103,"column_start":1,"column_end":34}},{"value":"/ - `03:00:60 + 1s = 03:01:00`.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":573298,"byte_end":573331,"line_start":104,"line_end":104,"column_start":1,"column_end":34}},{"value":"/   Note that the sum is identical to the previous.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":573332,"byte_end":573385,"line_start":105,"line_end":105,"column_start":1,"column_end":54}},{"value":"/ - `03:00:60 + 60s = 03:01:59`.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":573386,"byte_end":573420,"line_start":106,"line_end":106,"column_start":1,"column_end":35}},{"value":"/ - `03:00:60 + 61s = 03:02:00`.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":573421,"byte_end":573455,"line_start":107,"line_end":107,"column_start":1,"column_end":35}},{"value":"/ - `03:00:60.1 + 0.8s = 03:00:60.9`.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":573456,"byte_end":573495,"line_start":108,"line_end":108,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":573496,"byte_end":573499,"line_start":109,"line_end":109,"column_start":1,"column_end":4}},{"value":"/ `Time - Duration`","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":573500,"byte_end":573521,"line_start":110,"line_end":110,"column_start":1,"column_end":22}},{"value":"/ (short for [`NaiveTime::overflowing_sub_signed`](#method.overflowing_sub_signed)):","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":573522,"byte_end":573608,"line_start":111,"line_end":111,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":573609,"byte_end":573612,"line_start":112,"line_end":112,"column_start":1,"column_end":4}},{"value":"/ - `03:00:00 - 1s = 02:59:59`.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":573613,"byte_end":573646,"line_start":113,"line_end":113,"column_start":1,"column_end":34}},{"value":"/ - `03:01:00 - 1s = 03:00:59`.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":573647,"byte_end":573680,"line_start":114,"line_end":114,"column_start":1,"column_end":34}},{"value":"/ - `03:01:00 - 60s = 03:00:00`.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":573681,"byte_end":573715,"line_start":115,"line_end":115,"column_start":1,"column_end":35}},{"value":"/ - `03:00:60 - 60s = 03:00:00`.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":573716,"byte_end":573750,"line_start":116,"line_end":116,"column_start":1,"column_end":35}},{"value":"/   Note that the result is identical to the previous.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":573751,"byte_end":573807,"line_start":117,"line_end":117,"column_start":1,"column_end":57}},{"value":"/ - `03:00:60.7 - 0.4s = 03:00:60.3`.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":573808,"byte_end":573847,"line_start":118,"line_end":118,"column_start":1,"column_end":40}},{"value":"/ - `03:00:60.7 - 0.9s = 03:00:59.8`.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":573848,"byte_end":573887,"line_start":119,"line_end":119,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":573888,"byte_end":573891,"line_start":120,"line_end":120,"column_start":1,"column_end":4}},{"value":"/ `Time - Time`","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":573892,"byte_end":573909,"line_start":121,"line_end":121,"column_start":1,"column_end":18}},{"value":"/ (short for [`NaiveTime::signed_duration_since`](#method.signed_duration_since)):","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":573910,"byte_end":573994,"line_start":122,"line_end":122,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":573995,"byte_end":573998,"line_start":123,"line_end":123,"column_start":1,"column_end":4}},{"value":"/ - `04:00:00 - 03:00:00 = 3600s`.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":573999,"byte_end":574035,"line_start":124,"line_end":124,"column_start":1,"column_end":37}},{"value":"/ - `03:01:00 - 03:00:00 = 60s`.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":574036,"byte_end":574070,"line_start":125,"line_end":125,"column_start":1,"column_end":35}},{"value":"/ - `03:00:60 - 03:00:00 = 60s`.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":574071,"byte_end":574105,"line_start":126,"line_end":126,"column_start":1,"column_end":35}},{"value":"/   Note that the difference is identical to the previous.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":574106,"byte_end":574166,"line_start":127,"line_end":127,"column_start":1,"column_end":61}},{"value":"/ - `03:00:60.6 - 03:00:59.4 = 1.2s`.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":574167,"byte_end":574206,"line_start":128,"line_end":128,"column_start":1,"column_end":40}},{"value":"/ - `03:01:00 - 03:00:59.8 = 0.2s`.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":574207,"byte_end":574244,"line_start":129,"line_end":129,"column_start":1,"column_end":38}},{"value":"/ - `03:01:00 - 03:00:60.5 = 0.5s`.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":574245,"byte_end":574282,"line_start":130,"line_end":130,"column_start":1,"column_end":38}},{"value":"/   Note that the difference is larger than the previous,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":574283,"byte_end":574342,"line_start":131,"line_end":131,"column_start":1,"column_end":60}},{"value":"/   even though the leap second clearly follows the previous whole second.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":574343,"byte_end":574419,"line_start":132,"line_end":132,"column_start":1,"column_end":77}},{"value":"/ - `04:00:60.9 - 03:00:60.1 =","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":574420,"byte_end":574452,"line_start":133,"line_end":133,"column_start":1,"column_end":33}},{"value":"/   (04:00:60.9 - 04:00:00) + (04:00:00 - 03:01:00) + (03:01:00 - 03:00:60.1) =","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":574453,"byte_end":574534,"line_start":134,"line_end":134,"column_start":1,"column_end":82}},{"value":"/   60.9s + 3540s + 0.9s = 3601.8s`.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":574535,"byte_end":574573,"line_start":135,"line_end":135,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":574574,"byte_end":574577,"line_start":136,"line_end":136,"column_start":1,"column_end":4}},{"value":"/ In general,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":574578,"byte_end":574593,"line_start":137,"line_end":137,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":574594,"byte_end":574597,"line_start":138,"line_end":138,"column_start":1,"column_end":4}},{"value":"/ - `Time + Duration` unconditionally equals to `Duration + Time`.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":574598,"byte_end":574666,"line_start":139,"line_end":139,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":574667,"byte_end":574670,"line_start":140,"line_end":140,"column_start":1,"column_end":4}},{"value":"/ - `Time - Duration` unconditionally equals to `Time + (-Duration)`.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":574671,"byte_end":574742,"line_start":141,"line_end":141,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":574743,"byte_end":574746,"line_start":142,"line_end":142,"column_start":1,"column_end":4}},{"value":"/ - `Time1 - Time2` unconditionally equals to `-(Time2 - Time1)`.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":574747,"byte_end":574814,"line_start":143,"line_end":143,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":574815,"byte_end":574818,"line_start":144,"line_end":144,"column_start":1,"column_end":4}},{"value":"/ - Associativity does not generally hold, because","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":574819,"byte_end":574871,"line_start":145,"line_end":145,"column_start":1,"column_end":53}},{"value":"/   `(Time + Duration1) - Duration2` no longer equals to `Time + (Duration1 - Duration2)`","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":574872,"byte_end":574963,"line_start":146,"line_end":146,"column_start":1,"column_end":92}},{"value":"/   for two positive durations.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":574964,"byte_end":574997,"line_start":147,"line_end":147,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":574998,"byte_end":575001,"line_start":148,"line_end":148,"column_start":1,"column_end":4}},{"value":"/     - As a special case, `(Time + Duration) - Duration` also does not equal to `Time`.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":575002,"byte_end":575092,"line_start":149,"line_end":149,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":575093,"byte_end":575096,"line_start":150,"line_end":150,"column_start":1,"column_end":4}},{"value":"/     - If you can assume that all durations have the same sign, however,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":575097,"byte_end":575172,"line_start":151,"line_end":151,"column_start":1,"column_end":76}},{"value":"/       then the associativity holds:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":575173,"byte_end":575212,"line_start":152,"line_end":152,"column_start":1,"column_end":40}},{"value":"/       `(Time + Duration1) + Duration2` equals to `Time + (Duration1 + Duration2)`","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":575213,"byte_end":575298,"line_start":153,"line_end":153,"column_start":1,"column_end":86}},{"value":"/       for two positive durations.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":575299,"byte_end":575336,"line_start":154,"line_end":154,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":575337,"byte_end":575340,"line_start":155,"line_end":155,"column_start":1,"column_end":4}},{"value":"/ ## Reading And Writing Leap Seconds","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":575341,"byte_end":575380,"line_start":156,"line_end":156,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":575381,"byte_end":575384,"line_start":157,"line_end":157,"column_start":1,"column_end":4}},{"value":"/ The \"typical\" leap seconds on the minute boundary are","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":575385,"byte_end":575442,"line_start":158,"line_end":158,"column_start":1,"column_end":58}},{"value":"/ correctly handled both in the formatting and parsing.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":575443,"byte_end":575500,"line_start":159,"line_end":159,"column_start":1,"column_end":58}},{"value":"/ The leap second in the human-readable representation","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":575501,"byte_end":575557,"line_start":160,"line_end":160,"column_start":1,"column_end":57}},{"value":"/ will be represented as the second part being 60, as required by ISO 8601.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":575558,"byte_end":575635,"line_start":161,"line_end":161,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":575636,"byte_end":575639,"line_start":162,"line_end":162,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":575640,"byte_end":575647,"line_start":163,"line_end":163,"column_start":1,"column_end":8}},{"value":"/ use chrono::{Utc, TimeZone};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":575648,"byte_end":575680,"line_start":164,"line_end":164,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":575681,"byte_end":575684,"line_start":165,"line_end":165,"column_start":1,"column_end":4}},{"value":"/ let dt = Utc.ymd(2015, 6, 30).and_hms_milli(23, 59, 59, 1_000);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":575685,"byte_end":575752,"line_start":166,"line_end":166,"column_start":1,"column_end":68}},{"value":"/ assert_eq!(format!(\"{:?}\", dt), \"2015-06-30T23:59:60Z\");","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":575753,"byte_end":575813,"line_start":167,"line_end":167,"column_start":1,"column_end":61}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":575814,"byte_end":575821,"line_start":168,"line_end":168,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":575822,"byte_end":575825,"line_start":169,"line_end":169,"column_start":1,"column_end":4}},{"value":"/ There are hypothetical leap seconds not on the minute boundary","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":575826,"byte_end":575892,"line_start":170,"line_end":170,"column_start":1,"column_end":67}},{"value":"/ nevertheless supported by Chrono.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":575893,"byte_end":575930,"line_start":171,"line_end":171,"column_start":1,"column_end":38}},{"value":"/ They are allowed for the sake of completeness and consistency;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":575931,"byte_end":575997,"line_start":172,"line_end":172,"column_start":1,"column_end":67}},{"value":"/ there were several \"exotic\" time zone offsets with fractional minutes prior to UTC after all.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":575998,"byte_end":576095,"line_start":173,"line_end":173,"column_start":1,"column_end":98}},{"value":"/ For such cases the human-readable representation is ambiguous","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":576096,"byte_end":576161,"line_start":174,"line_end":174,"column_start":1,"column_end":66}},{"value":"/ and would be read back to the next non-leap second.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":576162,"byte_end":576217,"line_start":175,"line_end":175,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":576218,"byte_end":576221,"line_start":176,"line_end":176,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":576222,"byte_end":576229,"line_start":177,"line_end":177,"column_start":1,"column_end":8}},{"value":"/ use chrono::{DateTime, Utc, TimeZone};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":576230,"byte_end":576272,"line_start":178,"line_end":178,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":576273,"byte_end":576276,"line_start":179,"line_end":179,"column_start":1,"column_end":4}},{"value":"/ let dt = Utc.ymd(2015, 6, 30).and_hms_milli(23, 56, 4, 1_000);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":576277,"byte_end":576343,"line_start":180,"line_end":180,"column_start":1,"column_end":67}},{"value":"/ assert_eq!(format!(\"{:?}\", dt), \"2015-06-30T23:56:05Z\");","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":576344,"byte_end":576404,"line_start":181,"line_end":181,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":576405,"byte_end":576408,"line_start":182,"line_end":182,"column_start":1,"column_end":4}},{"value":"/ let dt = Utc.ymd(2015, 6, 30).and_hms(23, 56, 5);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":576409,"byte_end":576462,"line_start":183,"line_end":183,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(format!(\"{:?}\", dt), \"2015-06-30T23:56:05Z\");","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":576463,"byte_end":576523,"line_start":184,"line_end":184,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(DateTime::parse_from_rfc3339(\"2015-06-30T23:56:05Z\").unwrap(), dt);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":576524,"byte_end":576606,"line_start":185,"line_end":185,"column_start":1,"column_end":83}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":576607,"byte_end":576614,"line_start":186,"line_end":186,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":576615,"byte_end":576618,"line_start":187,"line_end":187,"column_start":1,"column_end":4}},{"value":"/ Since Chrono alone cannot determine any existence of leap seconds,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":576619,"byte_end":576689,"line_start":188,"line_end":188,"column_start":1,"column_end":71}},{"value":"/ **there is absolutely no guarantee that the leap second read has actually happened**.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":576690,"byte_end":576779,"line_start":189,"line_end":189,"column_start":1,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":2538},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":577588,"byte_end":577596,"line_start":217,"line_end":217,"column_start":12,"column_end":20},"name":"from_hms","qualname":"<NaiveTime>::from_hms","value":"fn from_hms(u32, u32, u32) -> NaiveTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute and second.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from hour, minute and second.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":576989,"byte_end":577046,"line_start":198,"line_end":198,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":577051,"byte_end":577054,"line_start":199,"line_end":199,"column_start":5,"column_end":8}},{"value":"/ No [leap second](#leap-second-handling) is allowed here;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":577059,"byte_end":577119,"line_start":200,"line_end":200,"column_start":5,"column_end":65}},{"value":"/ use `NaiveTime::from_hms_*` methods with a subsecond parameter instead.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":577124,"byte_end":577199,"line_start":201,"line_end":201,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":577204,"byte_end":577207,"line_start":202,"line_end":202,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute and/or second.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":577212,"byte_end":577261,"line_start":203,"line_end":203,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":577266,"byte_end":577269,"line_start":204,"line_end":204,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":577274,"byte_end":577287,"line_start":205,"line_end":205,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":577292,"byte_end":577295,"line_start":206,"line_end":206,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":577300,"byte_end":577307,"line_start":207,"line_end":207,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveTime, Timelike};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":577312,"byte_end":577350,"line_start":208,"line_end":208,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":577355,"byte_end":577358,"line_start":209,"line_end":209,"column_start":5,"column_end":8}},{"value":"/ let t = NaiveTime::from_hms(23, 56, 4);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":577363,"byte_end":577406,"line_start":210,"line_end":210,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(t.hour(), 23);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":577411,"byte_end":577440,"line_start":211,"line_end":211,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(t.minute(), 56);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":577445,"byte_end":577476,"line_start":212,"line_end":212,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(t.second(), 4);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":577481,"byte_end":577511,"line_start":213,"line_end":213,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(t.nanosecond(), 0);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":577516,"byte_end":577550,"line_start":214,"line_end":214,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":577555,"byte_end":577562,"line_start":215,"line_end":215,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":577567,"byte_end":577576,"line_start":216,"line_end":216,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2539},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":578451,"byte_end":578463,"line_start":242,"line_end":242,"column_start":12,"column_end":24},"name":"from_hms_opt","qualname":"<NaiveTime>::from_hms_opt","value":"fn from_hms_opt(u32, u32, u32) -> Option<NaiveTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute and second.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from hour, minute and second.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":577725,"byte_end":577782,"line_start":221,"line_end":221,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":577787,"byte_end":577790,"line_start":222,"line_end":222,"column_start":5,"column_end":8}},{"value":"/ No [leap second](#leap-second-handling) is allowed here;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":577795,"byte_end":577855,"line_start":223,"line_end":223,"column_start":5,"column_end":65}},{"value":"/ use `NaiveTime::from_hms_*_opt` methods with a subsecond parameter instead.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":577860,"byte_end":577939,"line_start":224,"line_end":224,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":577944,"byte_end":577947,"line_start":225,"line_end":225,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute and/or second.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":577952,"byte_end":578009,"line_start":226,"line_end":226,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":578014,"byte_end":578017,"line_start":227,"line_end":227,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":578022,"byte_end":578035,"line_start":228,"line_end":228,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":578040,"byte_end":578043,"line_start":229,"line_end":229,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":578048,"byte_end":578055,"line_start":230,"line_end":230,"column_start":5,"column_end":12}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":578060,"byte_end":578086,"line_start":231,"line_end":231,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":578091,"byte_end":578094,"line_start":232,"line_end":232,"column_start":5,"column_end":8}},{"value":"/ let from_hms_opt = NaiveTime::from_hms_opt;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":578099,"byte_end":578146,"line_start":233,"line_end":233,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":578151,"byte_end":578154,"line_start":234,"line_end":234,"column_start":5,"column_end":8}},{"value":"/ assert!(from_hms_opt(0, 0, 0).is_some());","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":578159,"byte_end":578204,"line_start":235,"line_end":235,"column_start":5,"column_end":50}},{"value":"/ assert!(from_hms_opt(23, 59, 59).is_some());","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":578209,"byte_end":578257,"line_start":236,"line_end":236,"column_start":5,"column_end":53}},{"value":"/ assert!(from_hms_opt(24, 0, 0).is_none());","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":578262,"byte_end":578308,"line_start":237,"line_end":237,"column_start":5,"column_end":51}},{"value":"/ assert!(from_hms_opt(23, 60, 0).is_none());","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":578313,"byte_end":578360,"line_start":238,"line_end":238,"column_start":5,"column_end":52}},{"value":"/ assert!(from_hms_opt(23, 59, 60).is_none());","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":578365,"byte_end":578413,"line_start":239,"line_end":239,"column_start":5,"column_end":53}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":578418,"byte_end":578425,"line_start":240,"line_end":240,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":578430,"byte_end":578439,"line_start":241,"line_end":241,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2540},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":579202,"byte_end":579216,"line_start":265,"line_end":265,"column_start":12,"column_end":26},"name":"from_hms_milli","qualname":"<NaiveTime>::from_hms_milli","value":"fn from_hms_milli(u32, u32, u32, u32) -> NaiveTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute, second and millisecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from hour, minute, second and millisecond.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":578585,"byte_end":578655,"line_start":246,"line_end":246,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":578660,"byte_end":578663,"line_start":247,"line_end":247,"column_start":5,"column_end":8}},{"value":"/ The millisecond part can exceed 1,000","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":578668,"byte_end":578709,"line_start":248,"line_end":248,"column_start":5,"column_end":46}},{"value":"/ in order to represent the [leap second](#leap-second-handling).","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":578714,"byte_end":578781,"line_start":249,"line_end":249,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":578786,"byte_end":578789,"line_start":250,"line_end":250,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or millisecond.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":578794,"byte_end":578856,"line_start":251,"line_end":251,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":578861,"byte_end":578864,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":578869,"byte_end":578882,"line_start":253,"line_end":253,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":578887,"byte_end":578890,"line_start":254,"line_end":254,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":578895,"byte_end":578902,"line_start":255,"line_end":255,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveTime, Timelike};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":578907,"byte_end":578945,"line_start":256,"line_end":256,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":578950,"byte_end":578953,"line_start":257,"line_end":257,"column_start":5,"column_end":8}},{"value":"/ let t = NaiveTime::from_hms_milli(23, 56, 4, 12);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":578958,"byte_end":579011,"line_start":258,"line_end":258,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(t.hour(), 23);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":579016,"byte_end":579045,"line_start":259,"line_end":259,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(t.minute(), 56);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":579050,"byte_end":579081,"line_start":260,"line_end":260,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(t.second(), 4);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":579086,"byte_end":579116,"line_start":261,"line_end":261,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(t.nanosecond(), 12_000_000);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":579121,"byte_end":579164,"line_start":262,"line_end":262,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":579169,"byte_end":579176,"line_start":263,"line_end":263,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":579181,"byte_end":579190,"line_start":264,"line_end":264,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2541},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":580274,"byte_end":580292,"line_start":292,"line_end":292,"column_start":12,"column_end":30},"name":"from_hms_milli_opt","qualname":"<NaiveTime>::from_hms_milli_opt","value":"fn from_hms_milli_opt(u32, u32, u32, u32) -> Option<NaiveTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute, second and millisecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from hour, minute, second and millisecond.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":579370,"byte_end":579440,"line_start":269,"line_end":269,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":579445,"byte_end":579448,"line_start":270,"line_end":270,"column_start":5,"column_end":8}},{"value":"/ The millisecond part can exceed 1,000","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":579453,"byte_end":579494,"line_start":271,"line_end":271,"column_start":5,"column_end":46}},{"value":"/ in order to represent the [leap second](#leap-second-handling).","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":579499,"byte_end":579566,"line_start":272,"line_end":272,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":579571,"byte_end":579574,"line_start":273,"line_end":273,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or millisecond.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":579579,"byte_end":579649,"line_start":274,"line_end":274,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":579654,"byte_end":579657,"line_start":275,"line_end":275,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":579662,"byte_end":579675,"line_start":276,"line_end":276,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":579680,"byte_end":579683,"line_start":277,"line_end":277,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":579688,"byte_end":579695,"line_start":278,"line_end":278,"column_start":5,"column_end":12}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":579700,"byte_end":579726,"line_start":279,"line_end":279,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":579731,"byte_end":579734,"line_start":280,"line_end":280,"column_start":5,"column_end":8}},{"value":"/ let from_hmsm_opt = NaiveTime::from_hms_milli_opt;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":579739,"byte_end":579793,"line_start":281,"line_end":281,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":579798,"byte_end":579801,"line_start":282,"line_end":282,"column_start":5,"column_end":8}},{"value":"/ assert!(from_hmsm_opt(0, 0, 0, 0).is_some());","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":579806,"byte_end":579855,"line_start":283,"line_end":283,"column_start":5,"column_end":54}},{"value":"/ assert!(from_hmsm_opt(23, 59, 59, 999).is_some());","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":579860,"byte_end":579914,"line_start":284,"line_end":284,"column_start":5,"column_end":59}},{"value":"/ assert!(from_hmsm_opt(23, 59, 59, 1_999).is_some()); // a leap second after 23:59:59","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":579919,"byte_end":580007,"line_start":285,"line_end":285,"column_start":5,"column_end":93}},{"value":"/ assert!(from_hmsm_opt(24, 0, 0, 0).is_none());","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":580012,"byte_end":580062,"line_start":286,"line_end":286,"column_start":5,"column_end":55}},{"value":"/ assert!(from_hmsm_opt(23, 60, 0, 0).is_none());","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":580067,"byte_end":580118,"line_start":287,"line_end":287,"column_start":5,"column_end":56}},{"value":"/ assert!(from_hmsm_opt(23, 59, 60, 0).is_none());","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":580123,"byte_end":580175,"line_start":288,"line_end":288,"column_start":5,"column_end":57}},{"value":"/ assert!(from_hmsm_opt(23, 59, 59, 2_000).is_none());","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":580180,"byte_end":580236,"line_start":289,"line_end":289,"column_start":5,"column_end":61}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":580241,"byte_end":580248,"line_start":290,"line_end":290,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":580253,"byte_end":580262,"line_start":291,"line_end":291,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2543},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":581126,"byte_end":581140,"line_start":317,"line_end":317,"column_start":12,"column_end":26},"name":"from_hms_micro","qualname":"<NaiveTime>::from_hms_micro","value":"fn from_hms_micro(u32, u32, u32, u32) -> NaiveTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute, second and microsecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from hour, minute, second and microsecond.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":580501,"byte_end":580571,"line_start":298,"line_end":298,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":580576,"byte_end":580579,"line_start":299,"line_end":299,"column_start":5,"column_end":8}},{"value":"/ The microsecond part can exceed 1,000,000","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":580584,"byte_end":580629,"line_start":300,"line_end":300,"column_start":5,"column_end":50}},{"value":"/ in order to represent the [leap second](#leap-second-handling).","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":580634,"byte_end":580701,"line_start":301,"line_end":301,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":580706,"byte_end":580709,"line_start":302,"line_end":302,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or microsecond.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":580714,"byte_end":580776,"line_start":303,"line_end":303,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":580781,"byte_end":580784,"line_start":304,"line_end":304,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":580789,"byte_end":580802,"line_start":305,"line_end":305,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":580807,"byte_end":580810,"line_start":306,"line_end":306,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":580815,"byte_end":580822,"line_start":307,"line_end":307,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveTime, Timelike};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":580827,"byte_end":580865,"line_start":308,"line_end":308,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":580870,"byte_end":580873,"line_start":309,"line_end":309,"column_start":5,"column_end":8}},{"value":"/ let t = NaiveTime::from_hms_micro(23, 56, 4, 12_345);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":580878,"byte_end":580935,"line_start":310,"line_end":310,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(t.hour(), 23);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":580940,"byte_end":580969,"line_start":311,"line_end":311,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(t.minute(), 56);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":580974,"byte_end":581005,"line_start":312,"line_end":312,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(t.second(), 4);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":581010,"byte_end":581040,"line_start":313,"line_end":313,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(t.nanosecond(), 12_345_000);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":581045,"byte_end":581088,"line_start":314,"line_end":314,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":581093,"byte_end":581100,"line_start":315,"line_end":315,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":581105,"byte_end":581114,"line_start":316,"line_end":316,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2544},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":582214,"byte_end":582232,"line_start":344,"line_end":344,"column_start":12,"column_end":30},"name":"from_hms_micro_opt","qualname":"<NaiveTime>::from_hms_micro_opt","value":"fn from_hms_micro_opt(u32, u32, u32, u32) -> Option<NaiveTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute, second and microsecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from hour, minute, second and microsecond.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":581294,"byte_end":581364,"line_start":321,"line_end":321,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":581369,"byte_end":581372,"line_start":322,"line_end":322,"column_start":5,"column_end":8}},{"value":"/ The microsecond part can exceed 1,000,000","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":581377,"byte_end":581422,"line_start":323,"line_end":323,"column_start":5,"column_end":50}},{"value":"/ in order to represent the [leap second](#leap-second-handling).","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":581427,"byte_end":581494,"line_start":324,"line_end":324,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":581499,"byte_end":581502,"line_start":325,"line_end":325,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or microsecond.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":581507,"byte_end":581577,"line_start":326,"line_end":326,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":581582,"byte_end":581585,"line_start":327,"line_end":327,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":581590,"byte_end":581603,"line_start":328,"line_end":328,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":581608,"byte_end":581611,"line_start":329,"line_end":329,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":581616,"byte_end":581623,"line_start":330,"line_end":330,"column_start":5,"column_end":12}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":581628,"byte_end":581654,"line_start":331,"line_end":331,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":581659,"byte_end":581662,"line_start":332,"line_end":332,"column_start":5,"column_end":8}},{"value":"/ let from_hmsu_opt = NaiveTime::from_hms_micro_opt;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":581667,"byte_end":581721,"line_start":333,"line_end":333,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":581726,"byte_end":581729,"line_start":334,"line_end":334,"column_start":5,"column_end":8}},{"value":"/ assert!(from_hmsu_opt(0, 0, 0, 0).is_some());","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":581734,"byte_end":581783,"line_start":335,"line_end":335,"column_start":5,"column_end":54}},{"value":"/ assert!(from_hmsu_opt(23, 59, 59, 999_999).is_some());","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":581788,"byte_end":581846,"line_start":336,"line_end":336,"column_start":5,"column_end":63}},{"value":"/ assert!(from_hmsu_opt(23, 59, 59, 1_999_999).is_some()); // a leap second after 23:59:59","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":581851,"byte_end":581943,"line_start":337,"line_end":337,"column_start":5,"column_end":97}},{"value":"/ assert!(from_hmsu_opt(24, 0, 0, 0).is_none());","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":581948,"byte_end":581998,"line_start":338,"line_end":338,"column_start":5,"column_end":55}},{"value":"/ assert!(from_hmsu_opt(23, 60, 0, 0).is_none());","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":582003,"byte_end":582054,"line_start":339,"line_end":339,"column_start":5,"column_end":56}},{"value":"/ assert!(from_hmsu_opt(23, 59, 60, 0).is_none());","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":582059,"byte_end":582111,"line_start":340,"line_end":340,"column_start":5,"column_end":57}},{"value":"/ assert!(from_hmsu_opt(23, 59, 59, 2_000_000).is_none());","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":582116,"byte_end":582176,"line_start":341,"line_end":341,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":582181,"byte_end":582188,"line_start":342,"line_end":342,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":582193,"byte_end":582202,"line_start":343,"line_end":343,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2546},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":583040,"byte_end":583053,"line_start":367,"line_end":367,"column_start":12,"column_end":25},"name":"from_hms_nano","qualname":"<NaiveTime>::from_hms_nano","value":"fn from_hms_nano(u32, u32, u32, u32) -> NaiveTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute, second and nanosecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from hour, minute, second and nanosecond.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":582411,"byte_end":582480,"line_start":348,"line_end":348,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":582485,"byte_end":582488,"line_start":349,"line_end":349,"column_start":5,"column_end":8}},{"value":"/ The nanosecond part can exceed 1,000,000,000","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":582493,"byte_end":582541,"line_start":350,"line_end":350,"column_start":5,"column_end":53}},{"value":"/ in order to represent the [leap second](#leap-second-handling).","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":582546,"byte_end":582613,"line_start":351,"line_end":351,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":582618,"byte_end":582621,"line_start":352,"line_end":352,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or nanosecond.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":582626,"byte_end":582687,"line_start":353,"line_end":353,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":582692,"byte_end":582695,"line_start":354,"line_end":354,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":582700,"byte_end":582713,"line_start":355,"line_end":355,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":582718,"byte_end":582721,"line_start":356,"line_end":356,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":582726,"byte_end":582733,"line_start":357,"line_end":357,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveTime, Timelike};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":582738,"byte_end":582776,"line_start":358,"line_end":358,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":582781,"byte_end":582784,"line_start":359,"line_end":359,"column_start":5,"column_end":8}},{"value":"/ let t = NaiveTime::from_hms_nano(23, 56, 4, 12_345_678);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":582789,"byte_end":582849,"line_start":360,"line_end":360,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(t.hour(), 23);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":582854,"byte_end":582883,"line_start":361,"line_end":361,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(t.minute(), 56);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":582888,"byte_end":582919,"line_start":362,"line_end":362,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(t.second(), 4);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":582924,"byte_end":582954,"line_start":363,"line_end":363,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(t.nanosecond(), 12_345_678);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":582959,"byte_end":583002,"line_start":364,"line_end":364,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":583007,"byte_end":583014,"line_start":365,"line_end":365,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":583019,"byte_end":583028,"line_start":366,"line_end":366,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2547},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":584136,"byte_end":584153,"line_start":394,"line_end":394,"column_start":12,"column_end":29},"name":"from_hms_nano_opt","qualname":"<NaiveTime>::from_hms_nano_opt","value":"fn from_hms_nano_opt(u32, u32, u32, u32) -> Option<NaiveTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute, second and nanosecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from hour, minute, second and nanosecond.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":583204,"byte_end":583273,"line_start":371,"line_end":371,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":583278,"byte_end":583281,"line_start":372,"line_end":372,"column_start":5,"column_end":8}},{"value":"/ The nanosecond part can exceed 1,000,000,000","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":583286,"byte_end":583334,"line_start":373,"line_end":373,"column_start":5,"column_end":53}},{"value":"/ in order to represent the [leap second](#leap-second-handling).","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":583339,"byte_end":583406,"line_start":374,"line_end":374,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":583411,"byte_end":583414,"line_start":375,"line_end":375,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or nanosecond.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":583419,"byte_end":583488,"line_start":376,"line_end":376,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":583493,"byte_end":583496,"line_start":377,"line_end":377,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":583501,"byte_end":583514,"line_start":378,"line_end":378,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":583519,"byte_end":583522,"line_start":379,"line_end":379,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":583527,"byte_end":583534,"line_start":380,"line_end":380,"column_start":5,"column_end":12}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":583539,"byte_end":583565,"line_start":381,"line_end":381,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":583570,"byte_end":583573,"line_start":382,"line_end":382,"column_start":5,"column_end":8}},{"value":"/ let from_hmsn_opt = NaiveTime::from_hms_nano_opt;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":583578,"byte_end":583631,"line_start":383,"line_end":383,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":583636,"byte_end":583639,"line_start":384,"line_end":384,"column_start":5,"column_end":8}},{"value":"/ assert!(from_hmsn_opt(0, 0, 0, 0).is_some());","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":583644,"byte_end":583693,"line_start":385,"line_end":385,"column_start":5,"column_end":54}},{"value":"/ assert!(from_hmsn_opt(23, 59, 59, 999_999_999).is_some());","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":583698,"byte_end":583760,"line_start":386,"line_end":386,"column_start":5,"column_end":67}},{"value":"/ assert!(from_hmsn_opt(23, 59, 59, 1_999_999_999).is_some()); // a leap second after 23:59:59","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":583765,"byte_end":583861,"line_start":387,"line_end":387,"column_start":5,"column_end":101}},{"value":"/ assert!(from_hmsn_opt(24, 0, 0, 0).is_none());","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":583866,"byte_end":583916,"line_start":388,"line_end":388,"column_start":5,"column_end":55}},{"value":"/ assert!(from_hmsn_opt(23, 60, 0, 0).is_none());","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":583921,"byte_end":583972,"line_start":389,"line_end":389,"column_start":5,"column_end":56}},{"value":"/ assert!(from_hmsn_opt(23, 59, 60, 0).is_none());","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":583977,"byte_end":584029,"line_start":390,"line_end":390,"column_start":5,"column_end":57}},{"value":"/ assert!(from_hmsn_opt(23, 59, 59, 2_000_000_000).is_none());","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":584034,"byte_end":584098,"line_start":391,"line_end":391,"column_start":5,"column_end":69}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":584103,"byte_end":584110,"line_start":392,"line_end":392,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":584115,"byte_end":584124,"line_start":393,"line_end":393,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2548},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":585089,"byte_end":585119,"line_start":421,"line_end":421,"column_start":12,"column_end":42},"name":"from_num_seconds_from_midnight","qualname":"<NaiveTime>::from_num_seconds_from_midnight","value":"fn from_num_seconds_from_midnight(u32, u32) -> NaiveTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":584434,"byte_end":584519,"line_start":402,"line_end":402,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":584524,"byte_end":584527,"line_start":403,"line_end":403,"column_start":5,"column_end":8}},{"value":"/ The nanosecond part can exceed 1,000,000,000","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":584532,"byte_end":584580,"line_start":404,"line_end":404,"column_start":5,"column_end":53}},{"value":"/ in order to represent the [leap second](#leap-second-handling).","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":584585,"byte_end":584652,"line_start":405,"line_end":405,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":584657,"byte_end":584660,"line_start":406,"line_end":406,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid number of seconds and/or nanosecond.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":584665,"byte_end":584723,"line_start":407,"line_end":407,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":584728,"byte_end":584731,"line_start":408,"line_end":408,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":584736,"byte_end":584749,"line_start":409,"line_end":409,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":584754,"byte_end":584757,"line_start":410,"line_end":410,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":584762,"byte_end":584769,"line_start":411,"line_end":411,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveTime, Timelike};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":584774,"byte_end":584812,"line_start":412,"line_end":412,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":584817,"byte_end":584820,"line_start":413,"line_end":413,"column_start":5,"column_end":8}},{"value":"/ let t = NaiveTime::from_num_seconds_from_midnight(86164, 12_345_678);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":584825,"byte_end":584898,"line_start":414,"line_end":414,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(t.hour(), 23);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":584903,"byte_end":584932,"line_start":415,"line_end":415,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(t.minute(), 56);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":584937,"byte_end":584968,"line_start":416,"line_end":416,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(t.second(), 4);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":584973,"byte_end":585003,"line_start":417,"line_end":417,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(t.nanosecond(), 12_345_678);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":585008,"byte_end":585051,"line_start":418,"line_end":418,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":585056,"byte_end":585063,"line_start":419,"line_end":419,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":585068,"byte_end":585077,"line_start":420,"line_end":420,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2549},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":586089,"byte_end":586123,"line_start":446,"line_end":446,"column_start":12,"column_end":46},"name":"from_num_seconds_from_midnight_opt","qualname":"<NaiveTime>::from_num_seconds_from_midnight_opt","value":"fn from_num_seconds_from_midnight_opt(u32, u32) -> Option<NaiveTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":585257,"byte_end":585342,"line_start":425,"line_end":425,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":585347,"byte_end":585350,"line_start":426,"line_end":426,"column_start":5,"column_end":8}},{"value":"/ The nanosecond part can exceed 1,000,000,000","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":585355,"byte_end":585403,"line_start":427,"line_end":427,"column_start":5,"column_end":53}},{"value":"/ in order to represent the [leap second](#leap-second-handling).","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":585408,"byte_end":585475,"line_start":428,"line_end":428,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":585480,"byte_end":585483,"line_start":429,"line_end":429,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid number of seconds and/or nanosecond.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":585488,"byte_end":585554,"line_start":430,"line_end":430,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":585559,"byte_end":585562,"line_start":431,"line_end":431,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":585567,"byte_end":585580,"line_start":432,"line_end":432,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":585585,"byte_end":585588,"line_start":433,"line_end":433,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":585593,"byte_end":585600,"line_start":434,"line_end":434,"column_start":5,"column_end":12}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":585605,"byte_end":585631,"line_start":435,"line_end":435,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":585636,"byte_end":585639,"line_start":436,"line_end":436,"column_start":5,"column_end":8}},{"value":"/ let from_nsecs_opt = NaiveTime::from_num_seconds_from_midnight_opt;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":585644,"byte_end":585715,"line_start":437,"line_end":437,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":585720,"byte_end":585723,"line_start":438,"line_end":438,"column_start":5,"column_end":8}},{"value":"/ assert!(from_nsecs_opt(0, 0).is_some());","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":585728,"byte_end":585772,"line_start":439,"line_end":439,"column_start":5,"column_end":49}},{"value":"/ assert!(from_nsecs_opt(86399, 999_999_999).is_some());","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":585777,"byte_end":585835,"line_start":440,"line_end":440,"column_start":5,"column_end":63}},{"value":"/ assert!(from_nsecs_opt(86399, 1_999_999_999).is_some()); // a leap second after 23:59:59","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":585840,"byte_end":585932,"line_start":441,"line_end":441,"column_start":5,"column_end":97}},{"value":"/ assert!(from_nsecs_opt(86_400, 0).is_none());","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":585937,"byte_end":585986,"line_start":442,"line_end":442,"column_start":5,"column_end":54}},{"value":"/ assert!(from_nsecs_opt(86399, 2_000_000_000).is_none());","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":585991,"byte_end":586051,"line_start":443,"line_end":443,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":586056,"byte_end":586063,"line_start":444,"line_end":444,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":586068,"byte_end":586077,"line_start":445,"line_end":445,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2550},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":588777,"byte_end":588791,"line_start":514,"line_end":514,"column_start":12,"column_end":26},"name":"parse_from_str","qualname":"<NaiveTime>::parse_from_str","value":"fn parse_from_str(&str, &str) -> ParseResult<NaiveTime>","parent":null,"children":[],"decl_id":null,"docs":" Parses a string with the specified format string and returns a new `NaiveTime`.\n See the [`format::strftime` module](../format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[{"value":"/ Parses a string with the specified format string and returns a new `NaiveTime`.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":586313,"byte_end":586396,"line_start":453,"line_end":453,"column_start":5,"column_end":88}},{"value":"/ See the [`format::strftime` module](../format/strftime/index.html)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":586401,"byte_end":586471,"line_start":454,"line_end":454,"column_start":5,"column_end":75}},{"value":"/ on the supported escape sequences.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":586476,"byte_end":586514,"line_start":455,"line_end":455,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":586519,"byte_end":586522,"line_start":456,"line_end":456,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":586527,"byte_end":586540,"line_start":457,"line_end":457,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":586545,"byte_end":586548,"line_start":458,"line_end":458,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":586553,"byte_end":586560,"line_start":459,"line_end":459,"column_start":5,"column_end":12}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":586565,"byte_end":586591,"line_start":460,"line_end":460,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":586596,"byte_end":586599,"line_start":461,"line_end":461,"column_start":5,"column_end":8}},{"value":"/ let parse_from_str = NaiveTime::parse_from_str;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":586604,"byte_end":586655,"line_start":462,"line_end":462,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":586660,"byte_end":586663,"line_start":463,"line_end":463,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(parse_from_str(\"23:56:04\", \"%H:%M:%S\"),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":586668,"byte_end":586722,"line_start":464,"line_end":464,"column_start":5,"column_end":59}},{"value":"/            Ok(NaiveTime::from_hms(23, 56, 4)));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":586727,"byte_end":586778,"line_start":465,"line_end":465,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(parse_from_str(\"pm012345.6789\", \"%p%I%M%S%.f\"),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":586783,"byte_end":586845,"line_start":466,"line_end":466,"column_start":5,"column_end":67}},{"value":"/            Ok(NaiveTime::from_hms_micro(13, 23, 45, 678_900)));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":586850,"byte_end":586917,"line_start":467,"line_end":467,"column_start":5,"column_end":72}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":586922,"byte_end":586929,"line_start":468,"line_end":468,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":586934,"byte_end":586937,"line_start":469,"line_end":469,"column_start":5,"column_end":8}},{"value":"/ Date and offset is ignored for the purpose of parsing.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":586942,"byte_end":587000,"line_start":470,"line_end":470,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":587005,"byte_end":587008,"line_start":471,"line_end":471,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":587013,"byte_end":587020,"line_start":472,"line_end":472,"column_start":5,"column_end":12}},{"value":"/ # use chrono::NaiveTime;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":587025,"byte_end":587053,"line_start":473,"line_end":473,"column_start":5,"column_end":33}},{"value":"/ # let parse_from_str = NaiveTime::parse_from_str;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":587058,"byte_end":587111,"line_start":474,"line_end":474,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(parse_from_str(\"2014-5-17T12:34:56+09:30\", \"%Y-%m-%dT%H:%M:%S%z\"),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":587116,"byte_end":587197,"line_start":475,"line_end":475,"column_start":5,"column_end":86}},{"value":"/            Ok(NaiveTime::from_hms(12, 34, 56)));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":587202,"byte_end":587254,"line_start":476,"line_end":476,"column_start":5,"column_end":57}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":587259,"byte_end":587266,"line_start":477,"line_end":477,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":587271,"byte_end":587274,"line_start":478,"line_end":478,"column_start":5,"column_end":8}},{"value":"/ [Leap seconds](#leap-second-handling) are correctly handled by","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":587279,"byte_end":587345,"line_start":479,"line_end":479,"column_start":5,"column_end":71}},{"value":"/ treating any time of the form `hh:mm:60` as a leap second.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":587350,"byte_end":587412,"line_start":480,"line_end":480,"column_start":5,"column_end":67}},{"value":"/ (This equally applies to the formatting, so the round trip is possible.)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":587417,"byte_end":587493,"line_start":481,"line_end":481,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":587498,"byte_end":587501,"line_start":482,"line_end":482,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":587506,"byte_end":587513,"line_start":483,"line_end":483,"column_start":5,"column_end":12}},{"value":"/ # use chrono::NaiveTime;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":587518,"byte_end":587546,"line_start":484,"line_end":484,"column_start":5,"column_end":33}},{"value":"/ # let parse_from_str = NaiveTime::parse_from_str;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":587551,"byte_end":587604,"line_start":485,"line_end":485,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(parse_from_str(\"08:59:60.123\", \"%H:%M:%S%.f\"),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":587609,"byte_end":587670,"line_start":486,"line_end":486,"column_start":5,"column_end":66}},{"value":"/            Ok(NaiveTime::from_hms_milli(8, 59, 59, 1_123)));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":587675,"byte_end":587739,"line_start":487,"line_end":487,"column_start":5,"column_end":69}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":587744,"byte_end":587751,"line_start":488,"line_end":488,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":587756,"byte_end":587759,"line_start":489,"line_end":489,"column_start":5,"column_end":8}},{"value":"/ Missing seconds are assumed to be zero,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":587764,"byte_end":587807,"line_start":490,"line_end":490,"column_start":5,"column_end":48}},{"value":"/ but out-of-bound times or insufficient fields are errors otherwise.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":587812,"byte_end":587883,"line_start":491,"line_end":491,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":587888,"byte_end":587891,"line_start":492,"line_end":492,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":587896,"byte_end":587903,"line_start":493,"line_end":493,"column_start":5,"column_end":12}},{"value":"/ # use chrono::NaiveTime;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":587908,"byte_end":587936,"line_start":494,"line_end":494,"column_start":5,"column_end":33}},{"value":"/ # let parse_from_str = NaiveTime::parse_from_str;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":587941,"byte_end":587994,"line_start":495,"line_end":495,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(parse_from_str(\"7:15\", \"%H:%M\"),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":587999,"byte_end":588046,"line_start":496,"line_end":496,"column_start":5,"column_end":52}},{"value":"/            Ok(NaiveTime::from_hms(7, 15, 0)));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":588051,"byte_end":588101,"line_start":497,"line_end":497,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":588106,"byte_end":588109,"line_start":498,"line_end":498,"column_start":5,"column_end":8}},{"value":"/ assert!(parse_from_str(\"04m33s\", \"%Mm%Ss\").is_err());","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":588114,"byte_end":588171,"line_start":499,"line_end":499,"column_start":5,"column_end":62}},{"value":"/ assert!(parse_from_str(\"12\", \"%H\").is_err());","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":588176,"byte_end":588225,"line_start":500,"line_end":500,"column_start":5,"column_end":54}},{"value":"/ assert!(parse_from_str(\"17:60\", \"%H:%M\").is_err());","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":588230,"byte_end":588285,"line_start":501,"line_end":501,"column_start":5,"column_end":60}},{"value":"/ assert!(parse_from_str(\"24:00:00\", \"%H:%M:%S\").is_err());","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":588290,"byte_end":588351,"line_start":502,"line_end":502,"column_start":5,"column_end":66}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":588356,"byte_end":588363,"line_start":503,"line_end":503,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":588368,"byte_end":588371,"line_start":504,"line_end":504,"column_start":5,"column_end":8}},{"value":"/ All parsed fields should be consistent to each other, otherwise it's an error.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":588376,"byte_end":588458,"line_start":505,"line_end":505,"column_start":5,"column_end":87}},{"value":"/ Here `%H` is for 24-hour clocks, unlike `%I`,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":588463,"byte_end":588512,"line_start":506,"line_end":506,"column_start":5,"column_end":54}},{"value":"/ and thus can be independently determined without AM/PM.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":588517,"byte_end":588576,"line_start":507,"line_end":507,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":588581,"byte_end":588584,"line_start":508,"line_end":508,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":588589,"byte_end":588596,"line_start":509,"line_end":509,"column_start":5,"column_end":12}},{"value":"/ # use chrono::NaiveTime;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":588601,"byte_end":588629,"line_start":510,"line_end":510,"column_start":5,"column_end":33}},{"value":"/ # let parse_from_str = NaiveTime::parse_from_str;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":588634,"byte_end":588687,"line_start":511,"line_end":511,"column_start":5,"column_end":58}},{"value":"/ assert!(parse_from_str(\"13:07 AM\", \"%H:%M %p\").is_err());","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":588692,"byte_end":588753,"line_start":512,"line_end":512,"column_start":5,"column_end":66}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":588758,"byte_end":588765,"line_start":513,"line_end":513,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2551},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":589790,"byte_end":589812,"line_start":539,"line_end":539,"column_start":12,"column_end":34},"name":"overflowing_add_signed","qualname":"<NaiveTime>::overflowing_add_signed","value":"fn overflowing_add_signed(&Self, OldDuration) -> (NaiveTime, i64)","parent":null,"children":[],"decl_id":null,"docs":" Adds given `Duration` to the current time,\n and also returns the number of *seconds*\n in the integral number of days ignored from the addition.\n (We cannot return `Duration` because it is subject to overflow or underflow.)","sig":null,"attributes":[{"value":"/ Adds given `Duration` to the current time,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":588979,"byte_end":589025,"line_start":520,"line_end":520,"column_start":5,"column_end":51}},{"value":"/ and also returns the number of *seconds*","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":589030,"byte_end":589074,"line_start":521,"line_end":521,"column_start":5,"column_end":49}},{"value":"/ in the integral number of days ignored from the addition.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":589079,"byte_end":589140,"line_start":522,"line_end":522,"column_start":5,"column_end":66}},{"value":"/ (We cannot return `Duration` because it is subject to overflow or underflow.)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":589145,"byte_end":589226,"line_start":523,"line_end":523,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":589231,"byte_end":589234,"line_start":524,"line_end":524,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":589239,"byte_end":589252,"line_start":525,"line_end":525,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":589257,"byte_end":589260,"line_start":526,"line_end":526,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":589265,"byte_end":589272,"line_start":527,"line_end":527,"column_start":5,"column_end":12}},{"value":"/ use chrono::{Duration, NaiveTime};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":589277,"byte_end":589315,"line_start":528,"line_end":528,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":589320,"byte_end":589323,"line_start":529,"line_end":529,"column_start":5,"column_end":8}},{"value":"/ let from_hms = NaiveTime::from_hms;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":589328,"byte_end":589367,"line_start":530,"line_end":530,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":589372,"byte_end":589375,"line_start":531,"line_end":531,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(from_hms(3, 4, 5).overflowing_add_signed(Duration::hours(11)),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":589380,"byte_end":589457,"line_start":532,"line_end":532,"column_start":5,"column_end":82}},{"value":"/            (from_hms(14, 4, 5), 0));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":589462,"byte_end":589502,"line_start":533,"line_end":533,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(from_hms(3, 4, 5).overflowing_add_signed(Duration::hours(23)),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":589507,"byte_end":589584,"line_start":534,"line_end":534,"column_start":5,"column_end":82}},{"value":"/            (from_hms(2, 4, 5), 86_400));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":589589,"byte_end":589633,"line_start":535,"line_end":535,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(from_hms(3, 4, 5).overflowing_add_signed(Duration::hours(-7)),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":589638,"byte_end":589715,"line_start":536,"line_end":536,"column_start":5,"column_end":82}},{"value":"/            (from_hms(20, 4, 5), -86_400));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":589720,"byte_end":589766,"line_start":537,"line_end":537,"column_start":5,"column_end":51}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":589771,"byte_end":589778,"line_start":538,"line_end":538,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2552},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":593220,"byte_end":593242,"line_start":622,"line_end":622,"column_start":12,"column_end":34},"name":"overflowing_sub_signed","qualname":"<NaiveTime>::overflowing_sub_signed","value":"fn overflowing_sub_signed(&Self, OldDuration) -> (NaiveTime, i64)","parent":null,"children":[],"decl_id":null,"docs":" Subtracts given `Duration` from the current time,\n and also returns the number of *seconds*\n in the integral number of days ignored from the subtraction.\n (We cannot return `Duration` because it is subject to overflow or underflow.)","sig":null,"attributes":[{"value":"/ Subtracts given `Duration` from the current time,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":592386,"byte_end":592439,"line_start":602,"line_end":602,"column_start":5,"column_end":58}},{"value":"/ and also returns the number of *seconds*","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":592444,"byte_end":592488,"line_start":603,"line_end":603,"column_start":5,"column_end":49}},{"value":"/ in the integral number of days ignored from the subtraction.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":592493,"byte_end":592557,"line_start":604,"line_end":604,"column_start":5,"column_end":69}},{"value":"/ (We cannot return `Duration` because it is subject to overflow or underflow.)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":592562,"byte_end":592643,"line_start":605,"line_end":605,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":592648,"byte_end":592651,"line_start":606,"line_end":606,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":592656,"byte_end":592669,"line_start":607,"line_end":607,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":592674,"byte_end":592677,"line_start":608,"line_end":608,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":592682,"byte_end":592689,"line_start":609,"line_end":609,"column_start":5,"column_end":12}},{"value":"/ use chrono::{Duration, NaiveTime};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":592694,"byte_end":592732,"line_start":610,"line_end":610,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":592737,"byte_end":592740,"line_start":611,"line_end":611,"column_start":5,"column_end":8}},{"value":"/ let from_hms = NaiveTime::from_hms;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":592745,"byte_end":592784,"line_start":612,"line_end":612,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":592789,"byte_end":592792,"line_start":613,"line_end":613,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(from_hms(3, 4, 5).overflowing_sub_signed(Duration::hours(2)),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":592797,"byte_end":592873,"line_start":614,"line_end":614,"column_start":5,"column_end":81}},{"value":"/            (from_hms(1, 4, 5), 0));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":592878,"byte_end":592917,"line_start":615,"line_end":615,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(from_hms(3, 4, 5).overflowing_sub_signed(Duration::hours(17)),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":592922,"byte_end":592999,"line_start":616,"line_end":616,"column_start":5,"column_end":82}},{"value":"/            (from_hms(10, 4, 5), 86_400));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":593004,"byte_end":593049,"line_start":617,"line_end":617,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(from_hms(3, 4, 5).overflowing_sub_signed(Duration::hours(-22)),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":593054,"byte_end":593132,"line_start":618,"line_end":618,"column_start":5,"column_end":83}},{"value":"/            (from_hms(1, 4, 5), -86_400));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":593137,"byte_end":593182,"line_start":619,"line_end":619,"column_start":5,"column_end":50}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":593187,"byte_end":593194,"line_start":620,"line_end":620,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":593199,"byte_end":593208,"line_start":621,"line_end":621,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2553},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":596110,"byte_end":596131,"line_start":681,"line_end":681,"column_start":12,"column_end":33},"name":"signed_duration_since","qualname":"<NaiveTime>::signed_duration_since","value":"fn signed_duration_since(Self, NaiveTime) -> OldDuration","parent":null,"children":[],"decl_id":null,"docs":" Subtracts another `NaiveTime` from the current time.\n Returns a `Duration` within +/- 1 day.\n This does not overflow or underflow at all.","sig":null,"attributes":[{"value":"/ Subtracts another `NaiveTime` from the current time.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":593434,"byte_end":593490,"line_start":627,"line_end":627,"column_start":5,"column_end":61}},{"value":"/ Returns a `Duration` within +/- 1 day.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":593495,"byte_end":593537,"line_start":628,"line_end":628,"column_start":5,"column_end":47}},{"value":"/ This does not overflow or underflow at all.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":593542,"byte_end":593589,"line_start":629,"line_end":629,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":593594,"byte_end":593597,"line_start":630,"line_end":630,"column_start":5,"column_end":8}},{"value":"/ As a part of Chrono's [leap second handling](#leap-second-handling),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":593602,"byte_end":593674,"line_start":631,"line_end":631,"column_start":5,"column_end":77}},{"value":"/ the subtraction assumes that **there is no leap second ever**,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":593679,"byte_end":593745,"line_start":632,"line_end":632,"column_start":5,"column_end":71}},{"value":"/ except when any of the `NaiveTime`s themselves represents a leap second","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":593750,"byte_end":593825,"line_start":633,"line_end":633,"column_start":5,"column_end":80}},{"value":"/ in which case the assumption becomes that","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":593830,"byte_end":593875,"line_start":634,"line_end":634,"column_start":5,"column_end":50}},{"value":"/ **there are exactly one (or two) leap second(s) ever**.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":593880,"byte_end":593939,"line_start":635,"line_end":635,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":593944,"byte_end":593947,"line_start":636,"line_end":636,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":593952,"byte_end":593965,"line_start":637,"line_end":637,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":593970,"byte_end":593973,"line_start":638,"line_end":638,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":593978,"byte_end":593985,"line_start":639,"line_end":639,"column_start":5,"column_end":12}},{"value":"/ use chrono::{Duration, NaiveTime};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":593990,"byte_end":594028,"line_start":640,"line_end":640,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":594033,"byte_end":594036,"line_start":641,"line_end":641,"column_start":5,"column_end":8}},{"value":"/ let from_hmsm = NaiveTime::from_hms_milli;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":594041,"byte_end":594087,"line_start":642,"line_end":642,"column_start":5,"column_end":51}},{"value":"/ let since = NaiveTime::signed_duration_since;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":594092,"byte_end":594141,"line_start":643,"line_end":643,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":594146,"byte_end":594149,"line_start":644,"line_end":644,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(since(from_hmsm(3, 5, 7, 900), from_hmsm(3, 5, 7, 900)),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":594154,"byte_end":594225,"line_start":645,"line_end":645,"column_start":5,"column_end":76}},{"value":"/            Duration::zero());","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":594230,"byte_end":594263,"line_start":646,"line_end":646,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(since(from_hmsm(3, 5, 7, 900), from_hmsm(3, 5, 7, 875)),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":594268,"byte_end":594339,"line_start":647,"line_end":647,"column_start":5,"column_end":76}},{"value":"/            Duration::milliseconds(25));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":594344,"byte_end":594387,"line_start":648,"line_end":648,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(since(from_hmsm(3, 5, 7, 900), from_hmsm(3, 5, 6, 925)),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":594392,"byte_end":594463,"line_start":649,"line_end":649,"column_start":5,"column_end":76}},{"value":"/            Duration::milliseconds(975));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":594468,"byte_end":594512,"line_start":650,"line_end":650,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(since(from_hmsm(3, 5, 7, 900), from_hmsm(3, 5, 0, 900)),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":594517,"byte_end":594588,"line_start":651,"line_end":651,"column_start":5,"column_end":76}},{"value":"/            Duration::seconds(7));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":594593,"byte_end":594630,"line_start":652,"line_end":652,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(since(from_hmsm(3, 5, 7, 900), from_hmsm(3, 0, 7, 900)),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":594635,"byte_end":594706,"line_start":653,"line_end":653,"column_start":5,"column_end":76}},{"value":"/            Duration::seconds(5 * 60));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":594711,"byte_end":594753,"line_start":654,"line_end":654,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(since(from_hmsm(3, 5, 7, 900), from_hmsm(0, 5, 7, 900)),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":594758,"byte_end":594829,"line_start":655,"line_end":655,"column_start":5,"column_end":76}},{"value":"/            Duration::seconds(3 * 3600));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":594834,"byte_end":594878,"line_start":656,"line_end":656,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(since(from_hmsm(3, 5, 7, 900), from_hmsm(4, 5, 7, 900)),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":594883,"byte_end":594954,"line_start":657,"line_end":657,"column_start":5,"column_end":76}},{"value":"/            Duration::seconds(-3600));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":594959,"byte_end":595000,"line_start":658,"line_end":658,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(since(from_hmsm(3, 5, 7, 900), from_hmsm(2, 4, 6, 800)),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":595005,"byte_end":595076,"line_start":659,"line_end":659,"column_start":5,"column_end":76}},{"value":"/            Duration::seconds(3600 + 60 + 1) + Duration::milliseconds(100));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":595081,"byte_end":595160,"line_start":660,"line_end":660,"column_start":5,"column_end":84}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":595165,"byte_end":595172,"line_start":661,"line_end":661,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":595177,"byte_end":595180,"line_start":662,"line_end":662,"column_start":5,"column_end":8}},{"value":"/ Leap seconds are handled, but the subtraction assumes that","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":595185,"byte_end":595247,"line_start":663,"line_end":663,"column_start":5,"column_end":67}},{"value":"/ there were no other leap seconds happened.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":595252,"byte_end":595298,"line_start":664,"line_end":664,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":595303,"byte_end":595306,"line_start":665,"line_end":665,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":595311,"byte_end":595318,"line_start":666,"line_end":666,"column_start":5,"column_end":12}},{"value":"/ # use chrono::{Duration, NaiveTime};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":595323,"byte_end":595363,"line_start":667,"line_end":667,"column_start":5,"column_end":45}},{"value":"/ # let from_hmsm = NaiveTime::from_hms_milli;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":595368,"byte_end":595416,"line_start":668,"line_end":668,"column_start":5,"column_end":53}},{"value":"/ # let since = NaiveTime::signed_duration_since;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":595421,"byte_end":595472,"line_start":669,"line_end":669,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(since(from_hmsm(3, 0, 59, 1_000), from_hmsm(3, 0, 59, 0)),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":595477,"byte_end":595550,"line_start":670,"line_end":670,"column_start":5,"column_end":78}},{"value":"/            Duration::seconds(1));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":595555,"byte_end":595592,"line_start":671,"line_end":671,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(since(from_hmsm(3, 0, 59, 1_500), from_hmsm(3, 0, 59, 0)),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":595597,"byte_end":595670,"line_start":672,"line_end":672,"column_start":5,"column_end":78}},{"value":"/            Duration::milliseconds(1500));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":595675,"byte_end":595720,"line_start":673,"line_end":673,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(since(from_hmsm(3, 0, 59, 1_000), from_hmsm(3, 0, 0, 0)),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":595725,"byte_end":595797,"line_start":674,"line_end":674,"column_start":5,"column_end":77}},{"value":"/            Duration::seconds(60));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":595802,"byte_end":595840,"line_start":675,"line_end":675,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(since(from_hmsm(3, 0, 0, 0), from_hmsm(2, 59, 59, 1_000)),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":595845,"byte_end":595918,"line_start":676,"line_end":676,"column_start":5,"column_end":78}},{"value":"/            Duration::seconds(1));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":595923,"byte_end":595960,"line_start":677,"line_end":677,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(since(from_hmsm(3, 0, 59, 1_000), from_hmsm(2, 59, 59, 1_000)),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":595965,"byte_end":596043,"line_start":678,"line_end":678,"column_start":5,"column_end":83}},{"value":"/            Duration::seconds(61));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":596048,"byte_end":596086,"line_start":679,"line_end":679,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":596091,"byte_end":596098,"line_start":680,"line_end":680,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2557},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":598783,"byte_end":598800,"line_start":748,"line_end":748,"column_start":12,"column_end":29},"name":"format_with_items","qualname":"<NaiveTime>::format_with_items","value":"fn format_with_items<'a, I, B>(&Self, I) -> DelayedFormat<I> where\nI: Iterator<Item = B> + Clone, B: Borrow<Item>","parent":null,"children":[],"decl_id":null,"docs":" Formats the time with the specified formatting items.\n Otherwise it is the same as the ordinary [`format`](#method.format) method.","sig":null,"attributes":[{"value":"/ Formats the time with the specified formatting items.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":597608,"byte_end":597665,"line_start":719,"line_end":719,"column_start":5,"column_end":62}},{"value":"/ Otherwise it is the same as the ordinary [`format`](#method.format) method.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":597670,"byte_end":597749,"line_start":720,"line_end":720,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":597754,"byte_end":597757,"line_start":721,"line_end":721,"column_start":5,"column_end":8}},{"value":"/ The `Iterator` of items should be `Clone`able,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":597762,"byte_end":597812,"line_start":722,"line_end":722,"column_start":5,"column_end":55}},{"value":"/ since the resulting `DelayedFormat` value may be formatted multiple times.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":597817,"byte_end":597895,"line_start":723,"line_end":723,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":597900,"byte_end":597903,"line_start":724,"line_end":724,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":597908,"byte_end":597921,"line_start":725,"line_end":725,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":597926,"byte_end":597929,"line_start":726,"line_end":726,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":597934,"byte_end":597941,"line_start":727,"line_end":727,"column_start":5,"column_end":12}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":597946,"byte_end":597972,"line_start":728,"line_end":728,"column_start":5,"column_end":31}},{"value":"/ use chrono::format::strftime::StrftimeItems;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":597977,"byte_end":598025,"line_start":729,"line_end":729,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":598030,"byte_end":598033,"line_start":730,"line_end":730,"column_start":5,"column_end":8}},{"value":"/ let fmt = StrftimeItems::new(\"%H:%M:%S\");","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":598038,"byte_end":598083,"line_start":731,"line_end":731,"column_start":5,"column_end":50}},{"value":"/ let t = NaiveTime::from_hms(23, 56, 4);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":598088,"byte_end":598131,"line_start":732,"line_end":732,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(t.format_with_items(fmt.clone()).to_string(), \"23:56:04\");","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":598136,"byte_end":598209,"line_start":733,"line_end":733,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(t.format(\"%H:%M:%S\").to_string(),             \"23:56:04\");","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":598214,"byte_end":598287,"line_start":734,"line_end":734,"column_start":5,"column_end":78}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":598292,"byte_end":598299,"line_start":735,"line_end":735,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":598304,"byte_end":598307,"line_start":736,"line_end":736,"column_start":5,"column_end":8}},{"value":"/ The resulting `DelayedFormat` can be formatted directly via the `Display` trait.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":598312,"byte_end":598396,"line_start":737,"line_end":737,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":598401,"byte_end":598404,"line_start":738,"line_end":738,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":598409,"byte_end":598416,"line_start":739,"line_end":739,"column_start":5,"column_end":12}},{"value":"/ # use chrono::NaiveTime;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":598421,"byte_end":598449,"line_start":740,"line_end":740,"column_start":5,"column_end":33}},{"value":"/ # use chrono::format::strftime::StrftimeItems;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":598454,"byte_end":598504,"line_start":741,"line_end":741,"column_start":5,"column_end":55}},{"value":"/ # let fmt = StrftimeItems::new(\"%H:%M:%S\").clone();","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":598509,"byte_end":598564,"line_start":742,"line_end":742,"column_start":5,"column_end":60}},{"value":"/ # let t = NaiveTime::from_hms(23, 56, 4);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":598569,"byte_end":598614,"line_start":743,"line_end":743,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(format!(\"{}\", t.format_with_items(fmt)), \"23:56:04\");","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":598619,"byte_end":598687,"line_start":744,"line_end":744,"column_start":5,"column_end":73}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":598692,"byte_end":598699,"line_start":745,"line_end":745,"column_start":5,"column_end":12}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":598704,"byte_end":598757,"line_start":746,"line_end":746,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":598762,"byte_end":598771,"line_start":747,"line_end":747,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2561},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":600617,"byte_end":600623,"line_start":792,"line_end":792,"column_start":12,"column_end":18},"name":"format","qualname":"<NaiveTime>::format","value":"fn format<'a>(&Self, &'a str) -> DelayedFormat<StrftimeItems>","parent":null,"children":[],"decl_id":null,"docs":" Formats the time with the specified format string.\n See the [`format::strftime` module](../format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[{"value":"/ Formats the time with the specified format string.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":598996,"byte_end":599050,"line_start":756,"line_end":756,"column_start":5,"column_end":59}},{"value":"/ See the [`format::strftime` module](../format/strftime/index.html)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":599055,"byte_end":599125,"line_start":757,"line_end":757,"column_start":5,"column_end":75}},{"value":"/ on the supported escape sequences.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":599130,"byte_end":599168,"line_start":758,"line_end":758,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":599173,"byte_end":599176,"line_start":759,"line_end":759,"column_start":5,"column_end":8}},{"value":"/ This returns a `DelayedFormat`,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":599181,"byte_end":599216,"line_start":760,"line_end":760,"column_start":5,"column_end":40}},{"value":"/ which gets converted to a string only when actual formatting happens.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":599221,"byte_end":599294,"line_start":761,"line_end":761,"column_start":5,"column_end":78}},{"value":"/ You may use the `to_string` method to get a `String`,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":599299,"byte_end":599356,"line_start":762,"line_end":762,"column_start":5,"column_end":62}},{"value":"/ or just feed it into `print!` and other formatting macros.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":599361,"byte_end":599423,"line_start":763,"line_end":763,"column_start":5,"column_end":67}},{"value":"/ (In this way it avoids the redundant memory allocation.)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":599428,"byte_end":599488,"line_start":764,"line_end":764,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":599493,"byte_end":599496,"line_start":765,"line_end":765,"column_start":5,"column_end":8}},{"value":"/ A wrong format string does *not* issue an error immediately.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":599501,"byte_end":599565,"line_start":766,"line_end":766,"column_start":5,"column_end":69}},{"value":"/ Rather, converting or formatting the `DelayedFormat` fails.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":599570,"byte_end":599633,"line_start":767,"line_end":767,"column_start":5,"column_end":68}},{"value":"/ You are recommended to immediately use `DelayedFormat` for this reason.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":599638,"byte_end":599713,"line_start":768,"line_end":768,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":599718,"byte_end":599721,"line_start":769,"line_end":769,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":599726,"byte_end":599739,"line_start":770,"line_end":770,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":599744,"byte_end":599747,"line_start":771,"line_end":771,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":599752,"byte_end":599759,"line_start":772,"line_end":772,"column_start":5,"column_end":12}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":599764,"byte_end":599790,"line_start":773,"line_end":773,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":599795,"byte_end":599798,"line_start":774,"line_end":774,"column_start":5,"column_end":8}},{"value":"/ let t = NaiveTime::from_hms_nano(23, 56, 4, 12_345_678);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":599803,"byte_end":599863,"line_start":775,"line_end":775,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(t.format(\"%H:%M:%S\").to_string(), \"23:56:04\");","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":599868,"byte_end":599929,"line_start":776,"line_end":776,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(t.format(\"%H:%M:%S%.6f\").to_string(), \"23:56:04.012345\");","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":599934,"byte_end":600006,"line_start":777,"line_end":777,"column_start":5,"column_end":77}},{"value":"/ assert_eq!(t.format(\"%-I:%M %p\").to_string(), \"11:56 PM\");","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":600011,"byte_end":600073,"line_start":778,"line_end":778,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":600078,"byte_end":600085,"line_start":779,"line_end":779,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":600090,"byte_end":600093,"line_start":780,"line_end":780,"column_start":5,"column_end":8}},{"value":"/ The resulting `DelayedFormat` can be formatted directly via the `Display` trait.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":600098,"byte_end":600182,"line_start":781,"line_end":781,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":600187,"byte_end":600190,"line_start":782,"line_end":782,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":600195,"byte_end":600202,"line_start":783,"line_end":783,"column_start":5,"column_end":12}},{"value":"/ # use chrono::NaiveTime;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":600207,"byte_end":600235,"line_start":784,"line_end":784,"column_start":5,"column_end":33}},{"value":"/ # let t = NaiveTime::from_hms_nano(23, 56, 4, 12_345_678);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":600240,"byte_end":600302,"line_start":785,"line_end":785,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(format!(\"{}\", t.format(\"%H:%M:%S\")), \"23:56:04\");","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":600307,"byte_end":600371,"line_start":786,"line_end":786,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(format!(\"{}\", t.format(\"%H:%M:%S%.6f\")), \"23:56:04.012345\");","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":600376,"byte_end":600451,"line_start":787,"line_end":787,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(format!(\"{}\", t.format(\"%-I:%M %p\")), \"11:56 PM\");","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":600456,"byte_end":600521,"line_start":788,"line_end":788,"column_start":5,"column_end":70}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":600526,"byte_end":600533,"line_start":789,"line_end":789,"column_start":5,"column_end":12}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":600538,"byte_end":600591,"line_start":790,"line_end":790,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":600596,"byte_end":600605,"line_start":791,"line_end":791,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2567},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":601495,"byte_end":601499,"line_start":819,"line_end":819,"column_start":8,"column_end":12},"name":"hour","qualname":"<NaiveTime as traits::Timelike>::hour","value":"fn hour(&Self) -> u32","parent":{"krate":0,"index":3233},"children":[],"decl_id":{"krate":0,"index":3234},"docs":" Returns the hour number from 0 to 23.","sig":null,"attributes":[{"value":"/ Returns the hour number from 0 to 23.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":601183,"byte_end":601224,"line_start":808,"line_end":808,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":601229,"byte_end":601232,"line_start":809,"line_end":809,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":601237,"byte_end":601250,"line_start":810,"line_end":810,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":601255,"byte_end":601258,"line_start":811,"line_end":811,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":601263,"byte_end":601270,"line_start":812,"line_end":812,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveTime, Timelike};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":601275,"byte_end":601313,"line_start":813,"line_end":813,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":601318,"byte_end":601321,"line_start":814,"line_end":814,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(NaiveTime::from_hms(0, 0, 0).hour(), 0);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":601326,"byte_end":601381,"line_start":815,"line_end":815,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(NaiveTime::from_hms_nano(23, 56, 4, 12_345_678).hour(), 23);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":601386,"byte_end":601461,"line_start":816,"line_end":816,"column_start":5,"column_end":80}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":601466,"byte_end":601473,"line_start":817,"line_end":817,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":601478,"byte_end":601487,"line_start":818,"line_end":818,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2568},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":601866,"byte_end":601872,"line_start":834,"line_end":834,"column_start":8,"column_end":14},"name":"minute","qualname":"<NaiveTime as traits::Timelike>::minute","value":"fn minute(&Self) -> u32","parent":{"krate":0,"index":3233},"children":[],"decl_id":{"krate":0,"index":3236},"docs":" Returns the minute number from 0 to 59.","sig":null,"attributes":[{"value":"/ Returns the minute number from 0 to 59.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":601548,"byte_end":601591,"line_start":823,"line_end":823,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":601596,"byte_end":601599,"line_start":824,"line_end":824,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":601604,"byte_end":601617,"line_start":825,"line_end":825,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":601622,"byte_end":601625,"line_start":826,"line_end":826,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":601630,"byte_end":601637,"line_start":827,"line_end":827,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveTime, Timelike};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":601642,"byte_end":601680,"line_start":828,"line_end":828,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":601685,"byte_end":601688,"line_start":829,"line_end":829,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(NaiveTime::from_hms(0, 0, 0).minute(), 0);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":601693,"byte_end":601750,"line_start":830,"line_end":830,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(NaiveTime::from_hms_nano(23, 56, 4, 12_345_678).minute(), 56);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":601755,"byte_end":601832,"line_start":831,"line_end":831,"column_start":5,"column_end":82}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":601837,"byte_end":601844,"line_start":832,"line_end":832,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":601849,"byte_end":601858,"line_start":833,"line_end":833,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2569},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":602703,"byte_end":602709,"line_start":860,"line_end":860,"column_start":8,"column_end":14},"name":"second","qualname":"<NaiveTime as traits::Timelike>::second","value":"fn second(&Self) -> u32","parent":{"krate":0,"index":3233},"children":[],"decl_id":{"krate":0,"index":3237},"docs":" Returns the second number from 0 to 59.","sig":null,"attributes":[{"value":"/ Returns the second number from 0 to 59.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":601921,"byte_end":601964,"line_start":838,"line_end":838,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":601969,"byte_end":601972,"line_start":839,"line_end":839,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":601977,"byte_end":601990,"line_start":840,"line_end":840,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":601995,"byte_end":601998,"line_start":841,"line_end":841,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":602003,"byte_end":602010,"line_start":842,"line_end":842,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveTime, Timelike};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":602015,"byte_end":602053,"line_start":843,"line_end":843,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":602058,"byte_end":602061,"line_start":844,"line_end":844,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(NaiveTime::from_hms(0, 0, 0).second(), 0);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":602066,"byte_end":602123,"line_start":845,"line_end":845,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(NaiveTime::from_hms_nano(23, 56, 4, 12_345_678).second(), 4);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":602128,"byte_end":602204,"line_start":846,"line_end":846,"column_start":5,"column_end":81}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":602209,"byte_end":602216,"line_start":847,"line_end":847,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":602221,"byte_end":602224,"line_start":848,"line_end":848,"column_start":5,"column_end":8}},{"value":"/ This method never returns 60 even when it is a leap second.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":602229,"byte_end":602292,"line_start":849,"line_end":849,"column_start":5,"column_end":68}},{"value":"/ ([Why?](#leap-second-handling))","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":602297,"byte_end":602332,"line_start":850,"line_end":850,"column_start":5,"column_end":40}},{"value":"/ Use the proper [formatting method](#method.format) to get a human-readable representation.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":602337,"byte_end":602431,"line_start":851,"line_end":851,"column_start":5,"column_end":99}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":602436,"byte_end":602439,"line_start":852,"line_end":852,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":602444,"byte_end":602451,"line_start":853,"line_end":853,"column_start":5,"column_end":12}},{"value":"/ # use chrono::{NaiveTime, Timelike};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":602456,"byte_end":602496,"line_start":854,"line_end":854,"column_start":5,"column_end":45}},{"value":"/ let leap = NaiveTime::from_hms_milli(23, 59, 59, 1_000);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":602501,"byte_end":602561,"line_start":855,"line_end":855,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(leap.second(), 59);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":602566,"byte_end":602600,"line_start":856,"line_end":856,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(leap.format(\"%H:%M:%S\").to_string(), \"23:59:60\");","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":602605,"byte_end":602669,"line_start":857,"line_end":857,"column_start":5,"column_end":69}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":602674,"byte_end":602681,"line_start":858,"line_end":858,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":602686,"byte_end":602695,"line_start":859,"line_end":859,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2570},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":603766,"byte_end":603776,"line_start":888,"line_end":888,"column_start":8,"column_end":18},"name":"nanosecond","qualname":"<NaiveTime as traits::Timelike>::nanosecond","value":"fn nanosecond(&Self) -> u32","parent":{"krate":0,"index":3233},"children":[],"decl_id":{"krate":0,"index":3238},"docs":" Returns the number of nanoseconds since the whole non-leap second.\n The range from 1,000,000,000 to 1,999,999,999 represents\n the [leap second](#leap-second-handling).","sig":null,"attributes":[{"value":"/ Returns the number of nanoseconds since the whole non-leap second.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":602758,"byte_end":602828,"line_start":864,"line_end":864,"column_start":5,"column_end":75}},{"value":"/ The range from 1,000,000,000 to 1,999,999,999 represents","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":602833,"byte_end":602893,"line_start":865,"line_end":865,"column_start":5,"column_end":65}},{"value":"/ the [leap second](#leap-second-handling).","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":602898,"byte_end":602943,"line_start":866,"line_end":866,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":602948,"byte_end":602951,"line_start":867,"line_end":867,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":602956,"byte_end":602969,"line_start":868,"line_end":868,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":602974,"byte_end":602977,"line_start":869,"line_end":869,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":602982,"byte_end":602989,"line_start":870,"line_end":870,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveTime, Timelike};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":602994,"byte_end":603032,"line_start":871,"line_end":871,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":603037,"byte_end":603040,"line_start":872,"line_end":872,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(NaiveTime::from_hms(0, 0, 0).nanosecond(), 0);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":603045,"byte_end":603106,"line_start":873,"line_end":873,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(NaiveTime::from_hms_nano(23, 56, 4, 12_345_678).nanosecond(), 12_345_678);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":603111,"byte_end":603200,"line_start":874,"line_end":874,"column_start":5,"column_end":94}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":603205,"byte_end":603212,"line_start":875,"line_end":875,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":603217,"byte_end":603220,"line_start":876,"line_end":876,"column_start":5,"column_end":8}},{"value":"/ Leap seconds may have seemingly out-of-range return values.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":603225,"byte_end":603288,"line_start":877,"line_end":877,"column_start":5,"column_end":68}},{"value":"/ You can reduce the range with `time.nanosecond() % 1_000_000_000`, or","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":603293,"byte_end":603366,"line_start":878,"line_end":878,"column_start":5,"column_end":78}},{"value":"/ use the proper [formatting method](#method.format) to get a human-readable representation.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":603371,"byte_end":603465,"line_start":879,"line_end":879,"column_start":5,"column_end":99}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":603470,"byte_end":603473,"line_start":880,"line_end":880,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":603478,"byte_end":603485,"line_start":881,"line_end":881,"column_start":5,"column_end":12}},{"value":"/ # use chrono::{NaiveTime, Timelike};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":603490,"byte_end":603530,"line_start":882,"line_end":882,"column_start":5,"column_end":45}},{"value":"/ let leap = NaiveTime::from_hms_milli(23, 59, 59, 1_000);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":603535,"byte_end":603595,"line_start":883,"line_end":883,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(leap.nanosecond(), 1_000_000_000);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":603600,"byte_end":603649,"line_start":884,"line_end":884,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(leap.format(\"%H:%M:%S%.9f\").to_string(), \"23:59:60.000000000\");","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":603654,"byte_end":603732,"line_start":885,"line_end":885,"column_start":5,"column_end":83}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":603737,"byte_end":603744,"line_start":886,"line_end":886,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":603749,"byte_end":603758,"line_start":887,"line_end":887,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2571},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":604291,"byte_end":604300,"line_start":906,"line_end":906,"column_start":8,"column_end":17},"name":"with_hour","qualname":"<NaiveTime as traits::Timelike>::with_hour","value":"fn with_hour(&Self, u32) -> Option<NaiveTime>","parent":{"krate":0,"index":3233},"children":[],"decl_id":{"krate":0,"index":3239},"docs":" Makes a new `NaiveTime` with the hour number changed.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` with the hour number changed.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":603822,"byte_end":603879,"line_start":892,"line_end":892,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":603884,"byte_end":603887,"line_start":893,"line_end":893,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting `NaiveTime` would be invalid.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":603892,"byte_end":603959,"line_start":894,"line_end":894,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":603964,"byte_end":603967,"line_start":895,"line_end":895,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":603972,"byte_end":603985,"line_start":896,"line_end":896,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":603990,"byte_end":603993,"line_start":897,"line_end":897,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":603998,"byte_end":604005,"line_start":898,"line_end":898,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveTime, Timelike};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":604010,"byte_end":604048,"line_start":899,"line_end":899,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":604053,"byte_end":604056,"line_start":900,"line_end":900,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveTime::from_hms_nano(23, 56, 4, 12_345_678);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":604061,"byte_end":604122,"line_start":901,"line_end":901,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(dt.with_hour(7), Some(NaiveTime::from_hms_nano(7, 56, 4, 12_345_678)));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":604127,"byte_end":604213,"line_start":902,"line_end":902,"column_start":5,"column_end":91}},{"value":"/ assert_eq!(dt.with_hour(24), None);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":604218,"byte_end":604257,"line_start":903,"line_end":903,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":604262,"byte_end":604269,"line_start":904,"line_end":904,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":604274,"byte_end":604283,"line_start":905,"line_end":905,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2572},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":604982,"byte_end":604993,"line_start":928,"line_end":928,"column_start":8,"column_end":19},"name":"with_minute","qualname":"<NaiveTime as traits::Timelike>::with_minute","value":"fn with_minute(&Self, u32) -> Option<NaiveTime>","parent":{"krate":0,"index":3233},"children":[],"decl_id":{"krate":0,"index":3240},"docs":" Makes a new `NaiveTime` with the minute number changed.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` with the minute number changed.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":604505,"byte_end":604564,"line_start":914,"line_end":914,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":604569,"byte_end":604572,"line_start":915,"line_end":915,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting `NaiveTime` would be invalid.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":604577,"byte_end":604644,"line_start":916,"line_end":916,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":604649,"byte_end":604652,"line_start":917,"line_end":917,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":604657,"byte_end":604670,"line_start":918,"line_end":918,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":604675,"byte_end":604678,"line_start":919,"line_end":919,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":604683,"byte_end":604690,"line_start":920,"line_end":920,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveTime, Timelike};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":604695,"byte_end":604733,"line_start":921,"line_end":921,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":604738,"byte_end":604741,"line_start":922,"line_end":922,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveTime::from_hms_nano(23, 56, 4, 12_345_678);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":604746,"byte_end":604807,"line_start":923,"line_end":923,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(dt.with_minute(45), Some(NaiveTime::from_hms_nano(23, 45, 4, 12_345_678)));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":604812,"byte_end":604902,"line_start":924,"line_end":924,"column_start":5,"column_end":95}},{"value":"/ assert_eq!(dt.with_minute(60), None);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":604907,"byte_end":604948,"line_start":925,"line_end":925,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":604953,"byte_end":604960,"line_start":926,"line_end":926,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":604965,"byte_end":604974,"line_start":927,"line_end":927,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2573},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":605805,"byte_end":605816,"line_start":952,"line_end":952,"column_start":8,"column_end":19},"name":"with_second","qualname":"<NaiveTime as traits::Timelike>::with_second","value":"fn with_second(&Self, u32) -> Option<NaiveTime>","parent":{"krate":0,"index":3233},"children":[],"decl_id":{"krate":0,"index":3241},"docs":" Makes a new `NaiveTime` with the second number changed.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` with the second number changed.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":605217,"byte_end":605276,"line_start":936,"line_end":936,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":605281,"byte_end":605284,"line_start":937,"line_end":937,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting `NaiveTime` would be invalid.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":605289,"byte_end":605356,"line_start":938,"line_end":938,"column_start":5,"column_end":72}},{"value":"/ As with the [`second`](#method.second) method,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":605361,"byte_end":605411,"line_start":939,"line_end":939,"column_start":5,"column_end":55}},{"value":"/ the input range is restricted to 0 through 59.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":605416,"byte_end":605466,"line_start":940,"line_end":940,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":605471,"byte_end":605474,"line_start":941,"line_end":941,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":605479,"byte_end":605492,"line_start":942,"line_end":942,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":605497,"byte_end":605500,"line_start":943,"line_end":943,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":605505,"byte_end":605512,"line_start":944,"line_end":944,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveTime, Timelike};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":605517,"byte_end":605555,"line_start":945,"line_end":945,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":605560,"byte_end":605563,"line_start":946,"line_end":946,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveTime::from_hms_nano(23, 56, 4, 12_345_678);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":605568,"byte_end":605629,"line_start":947,"line_end":947,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(dt.with_second(17), Some(NaiveTime::from_hms_nano(23, 56, 17, 12_345_678)));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":605634,"byte_end":605725,"line_start":948,"line_end":948,"column_start":5,"column_end":96}},{"value":"/ assert_eq!(dt.with_second(60), None);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":605730,"byte_end":605771,"line_start":949,"line_end":949,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":605776,"byte_end":605783,"line_start":950,"line_end":950,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":605788,"byte_end":605797,"line_start":951,"line_end":951,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2574},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":607259,"byte_end":607274,"line_start":989,"line_end":989,"column_start":8,"column_end":23},"name":"with_nanosecond","qualname":"<NaiveTime as traits::Timelike>::with_nanosecond","value":"fn with_nanosecond(&Self, u32) -> Option<NaiveTime>","parent":{"krate":0,"index":3233},"children":[],"decl_id":{"krate":0,"index":3242},"docs":" Makes a new `NaiveTime` with nanoseconds since the whole non-leap second changed.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` with nanoseconds since the whole non-leap second changed.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":606014,"byte_end":606099,"line_start":960,"line_end":960,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":606104,"byte_end":606107,"line_start":961,"line_end":961,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting `NaiveTime` would be invalid.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":606112,"byte_end":606179,"line_start":962,"line_end":962,"column_start":5,"column_end":72}},{"value":"/ As with the [`nanosecond`](#method.nanosecond) method,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":606184,"byte_end":606242,"line_start":963,"line_end":963,"column_start":5,"column_end":63}},{"value":"/ the input range can exceed 1,000,000,000 for leap seconds.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":606247,"byte_end":606309,"line_start":964,"line_end":964,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":606314,"byte_end":606317,"line_start":965,"line_end":965,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":606322,"byte_end":606335,"line_start":966,"line_end":966,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":606340,"byte_end":606343,"line_start":967,"line_end":967,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":606348,"byte_end":606355,"line_start":968,"line_end":968,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveTime, Timelike};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":606360,"byte_end":606398,"line_start":969,"line_end":969,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":606403,"byte_end":606406,"line_start":970,"line_end":970,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveTime::from_hms_nano(23, 56, 4, 12_345_678);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":606411,"byte_end":606472,"line_start":971,"line_end":971,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(dt.with_nanosecond(333_333_333),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":606477,"byte_end":606524,"line_start":972,"line_end":972,"column_start":5,"column_end":52}},{"value":"/            Some(NaiveTime::from_hms_nano(23, 56, 4, 333_333_333)));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":606529,"byte_end":606600,"line_start":973,"line_end":973,"column_start":5,"column_end":76}},{"value":"/ assert_eq!(dt.with_nanosecond(2_000_000_000), None);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":606605,"byte_end":606661,"line_start":974,"line_end":974,"column_start":5,"column_end":61}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":606666,"byte_end":606673,"line_start":975,"line_end":975,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":606678,"byte_end":606681,"line_start":976,"line_end":976,"column_start":5,"column_end":8}},{"value":"/ Leap seconds can theoretically follow *any* whole second.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":606686,"byte_end":606747,"line_start":977,"line_end":977,"column_start":5,"column_end":66}},{"value":"/ The following would be a proper leap second at the time zone offset of UTC-00:03:57","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":606752,"byte_end":606839,"line_start":978,"line_end":978,"column_start":5,"column_end":92}},{"value":"/ (there are several historical examples comparable to this \"non-sense\" offset),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":606844,"byte_end":606926,"line_start":979,"line_end":979,"column_start":5,"column_end":87}},{"value":"/ and therefore is allowed.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":606931,"byte_end":606960,"line_start":980,"line_end":980,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":606965,"byte_end":606968,"line_start":981,"line_end":981,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":606973,"byte_end":606980,"line_start":982,"line_end":982,"column_start":5,"column_end":12}},{"value":"/ # use chrono::{NaiveTime, Timelike};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":606985,"byte_end":607025,"line_start":983,"line_end":983,"column_start":5,"column_end":45}},{"value":"/ # let dt = NaiveTime::from_hms_nano(23, 56, 4, 12_345_678);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":607030,"byte_end":607093,"line_start":984,"line_end":984,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(dt.with_nanosecond(1_333_333_333),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":607098,"byte_end":607147,"line_start":985,"line_end":985,"column_start":5,"column_end":54}},{"value":"/            Some(NaiveTime::from_hms_nano(23, 56, 4, 1_333_333_333)));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":607152,"byte_end":607225,"line_start":986,"line_end":986,"column_start":5,"column_end":78}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":607230,"byte_end":607237,"line_start":987,"line_end":987,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":607242,"byte_end":607251,"line_start":988,"line_end":988,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2575},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":607988,"byte_end":608013,"line_start":1011,"line_end":1011,"column_start":8,"column_end":33},"name":"num_seconds_from_midnight","qualname":"<NaiveTime as traits::Timelike>::num_seconds_from_midnight","value":"fn num_seconds_from_midnight(&Self) -> u32","parent":{"krate":0,"index":3233},"children":[],"decl_id":{"krate":0,"index":3243},"docs":" Returns the number of non-leap seconds past the last midnight.","sig":null,"attributes":[{"value":"/ Returns the number of non-leap seconds past the last midnight.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":607445,"byte_end":607511,"line_start":996,"line_end":996,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":607516,"byte_end":607519,"line_start":997,"line_end":997,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":607524,"byte_end":607537,"line_start":998,"line_end":998,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":607542,"byte_end":607545,"line_start":999,"line_end":999,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":607550,"byte_end":607557,"line_start":1000,"line_end":1000,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveTime, Timelike};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":607562,"byte_end":607600,"line_start":1001,"line_end":1001,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":607605,"byte_end":607608,"line_start":1002,"line_end":1002,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(NaiveTime::from_hms(1, 2, 3).num_seconds_from_midnight(),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":607613,"byte_end":607685,"line_start":1003,"line_end":1003,"column_start":5,"column_end":77}},{"value":"/            3723);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":607690,"byte_end":607711,"line_start":1004,"line_end":1004,"column_start":5,"column_end":26}},{"value":"/ assert_eq!(NaiveTime::from_hms_nano(23, 56, 4, 12_345_678).num_seconds_from_midnight(),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":607716,"byte_end":607807,"line_start":1005,"line_end":1005,"column_start":5,"column_end":96}},{"value":"/            86164);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":607812,"byte_end":607834,"line_start":1006,"line_end":1006,"column_start":5,"column_end":27}},{"value":"/ assert_eq!(NaiveTime::from_hms_milli(23, 59, 59, 1_000).num_seconds_from_midnight(),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":607839,"byte_end":607927,"line_start":1007,"line_end":1007,"column_start":5,"column_end":93}},{"value":"/            86399);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":607932,"byte_end":607954,"line_start":1008,"line_end":1008,"column_start":5,"column_end":27}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":607959,"byte_end":607966,"line_start":1009,"line_end":1009,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":607971,"byte_end":607980,"line_start":1010,"line_end":1010,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2578},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":610790,"byte_end":610793,"line_start":1069,"line_end":1069,"column_start":8,"column_end":11},"name":"add","qualname":"<NaiveTime as std::ops::Add>::add","value":"fn add(Self, OldDuration) -> NaiveTime","parent":{"krate":2,"index":3218},"children":[],"decl_id":{"krate":2,"index":3221},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":610773,"byte_end":610782,"line_start":1068,"line_end":1068,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2580},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":610950,"byte_end":610960,"line_start":1076,"line_end":1076,"column_start":8,"column_end":18},"name":"add_assign","qualname":"<NaiveTime as std::ops::AddAssign>::add_assign","value":"fn add_assign(&mut Self, OldDuration)","parent":{"krate":2,"index":3249},"children":[],"decl_id":{"krate":2,"index":3251},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":610933,"byte_end":610942,"line_start":1075,"line_end":1075,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2583},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":613348,"byte_end":613351,"line_start":1130,"line_end":1130,"column_start":8,"column_end":11},"name":"sub","qualname":"<NaiveTime as std::ops::Sub>::sub","value":"fn sub(Self, OldDuration) -> NaiveTime","parent":{"krate":2,"index":3223},"children":[],"decl_id":{"krate":2,"index":3226},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":613331,"byte_end":613340,"line_start":1129,"line_end":1129,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2585},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":613508,"byte_end":613518,"line_start":1137,"line_end":1137,"column_start":8,"column_end":18},"name":"sub_assign","qualname":"<NaiveTime as std::ops::SubAssign>::sub_assign","value":"fn sub_assign(&mut Self, OldDuration)","parent":{"krate":2,"index":3253},"children":[],"decl_id":{"krate":2,"index":3255},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":613491,"byte_end":613500,"line_start":1136,"line_end":1136,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2588},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":615922,"byte_end":615925,"line_start":1191,"line_end":1191,"column_start":8,"column_end":11},"name":"sub","qualname":"<NaiveTime as std::ops::Sub>::sub","value":"fn sub(Self, NaiveTime) -> OldDuration","parent":{"krate":2,"index":3223},"children":[],"decl_id":{"krate":2,"index":3226},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":615905,"byte_end":615914,"line_start":1190,"line_end":1190,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2590},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":617269,"byte_end":617272,"line_start":1225,"line_end":1225,"column_start":8,"column_end":11},"name":"fmt","qualname":"<NaiveTime as std::fmt::Debug>::fmt","value":"fn fmt(&Self, &mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":9907},"children":[],"decl_id":{"krate":2,"index":9908},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2592},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":619127,"byte_end":619130,"line_start":1275,"line_end":1275,"column_start":8,"column_end":11},"name":"fmt","qualname":"<NaiveTime as std::fmt::Display>::fmt","value":"fn fmt(&Self, &mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":9914},"children":[],"decl_id":{"krate":2,"index":9915},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2595},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":619934,"byte_end":619942,"line_start":1302,"line_end":1302,"column_start":8,"column_end":16},"name":"from_str","qualname":"<NaiveTime as std::str::FromStr>::from_str","value":"fn from_str(&str) -> ParseResult<NaiveTime>","parent":{"krate":2,"index":12561},"children":[],"decl_id":{"krate":2,"index":12563},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2598},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":620802,"byte_end":620809,"line_start":1332,"line_end":1332,"column_start":8,"column_end":15},"name":"default","qualname":"<NaiveTime as std::default::Default>::default","value":"fn default() -> Self","parent":{"krate":2,"index":3128},"children":[],"decl_id":{"krate":2,"index":3129},"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":2628},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\mod.rs","byte_start":328076,"byte_end":328081,"line_start":36,"line_end":36,"column_start":9,"column_end":14},"name":"serde","qualname":"::naive::serde","value":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\mod.rs","parent":null,"children":[{"krate":0,"index":2629}],"decl_id":null,"docs":" Serialization/Deserialization of naive types in alternate formats","sig":null,"attributes":[{"value":"/ Serialization/Deserialization of naive types in alternate formats","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\mod.rs","byte_start":327689,"byte_end":327758,"line_start":27,"line_end":27,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\mod.rs","byte_start":327759,"byte_end":327762,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ The various modules in here are intended to be used with serde's [`with`","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\mod.rs","byte_start":327763,"byte_end":327839,"line_start":29,"line_end":29,"column_start":1,"column_end":77}},{"value":"/ annotation][1] to serialize as something other than the default [RFC","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\mod.rs","byte_start":327840,"byte_end":327912,"line_start":30,"line_end":30,"column_start":1,"column_end":73}},{"value":"/ 3339][2] format.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\mod.rs","byte_start":327913,"byte_end":327933,"line_start":31,"line_end":31,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\mod.rs","byte_start":327934,"byte_end":327937,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ [1]: https://serde.rs/attributes.html#field-attributes","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\mod.rs","byte_start":327938,"byte_end":327996,"line_start":33,"line_end":33,"column_start":1,"column_end":59}},{"value":"/ [2]: https://tools.ietf.org/html/rfc3339","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\mod.rs","byte_start":327997,"byte_end":328041,"line_start":34,"line_end":34,"column_start":1,"column_end":45}},{"value":"cfg(feature = \"serde\")","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\mod.rs","byte_start":328042,"byte_end":328067,"line_start":35,"line_end":35,"column_start":1,"column_end":26}}]},{"kind":"Mod","id":{"krate":0,"index":2646},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"offset","qualname":"::offset","value":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","parent":null,"children":[{"krate":0,"index":2647},{"krate":0,"index":2650},{"krate":0,"index":2651},{"krate":0,"index":2654},{"krate":0,"index":2657},{"krate":0,"index":2660},{"krate":0,"index":2663},{"krate":0,"index":2664},{"krate":0,"index":2667},{"krate":0,"index":2670},{"krate":0,"index":2673},{"krate":0,"index":2676},{"krate":0,"index":2677},{"krate":0,"index":2680},{"krate":0,"index":2683},{"krate":0,"index":2768},{"krate":0,"index":2771},{"krate":0,"index":2895},{"krate":0,"index":2896},{"krate":0,"index":2898},{"krate":0,"index":2952},{"krate":0,"index":2953},{"krate":0,"index":3847},{"krate":0,"index":3858},{"krate":0,"index":3861},{"krate":0,"index":3863},{"krate":0,"index":3867},{"krate":0,"index":3870},{"krate":0,"index":3872},{"krate":0,"index":3874},{"krate":0,"index":3877},{"krate":0,"index":2955},{"krate":0,"index":2963},{"krate":0,"index":2970},{"krate":0,"index":2973},{"krate":0,"index":2975}],"decl_id":null,"docs":" The time zone, which calculates offsets from the local time to UTC.","sig":null,"attributes":[{"value":"/ The time zone, which calculates offsets from the local time to UTC.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":625779,"byte_end":625850,"line_start":4,"line_end":4,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":625851,"byte_end":625854,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ There are four operations provided by the `TimeZone` trait:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":625855,"byte_end":625918,"line_start":6,"line_end":6,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":625919,"byte_end":625922,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ 1. Converting the local `NaiveDateTime` to `DateTime<Tz>`","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":625923,"byte_end":625984,"line_start":8,"line_end":8,"column_start":1,"column_end":62}},{"value":"/ 2. Converting the UTC `NaiveDateTime` to `DateTime<Tz>`","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":625985,"byte_end":626044,"line_start":9,"line_end":9,"column_start":1,"column_end":60}},{"value":"/ 3. Converting `DateTime<Tz>` to the local `NaiveDateTime`","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":626045,"byte_end":626106,"line_start":10,"line_end":10,"column_start":1,"column_end":62}},{"value":"/ 4. Constructing `DateTime<Tz>` objects from various offsets","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":626107,"byte_end":626170,"line_start":11,"line_end":11,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":626171,"byte_end":626174,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ 1 is used for constructors. 2 is used for the `with_timezone` method of date and time types.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":626175,"byte_end":626271,"line_start":13,"line_end":13,"column_start":1,"column_end":97}},{"value":"/ 3 is used for other methods, e.g. `year()` or `format()`, and provided by an associated type","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":626272,"byte_end":626368,"line_start":14,"line_end":14,"column_start":1,"column_end":97}},{"value":"/ which implements `Offset` (which then passed to `TimeZone` for actual implementations).","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":626369,"byte_end":626460,"line_start":15,"line_end":15,"column_start":1,"column_end":92}},{"value":"/ Technically speaking `TimeZone` has a total knowledge about given timescale,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":626461,"byte_end":626541,"line_start":16,"line_end":16,"column_start":1,"column_end":81}},{"value":"/ but `Offset` is used as a cache to avoid the repeated conversion","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":626542,"byte_end":626610,"line_start":17,"line_end":17,"column_start":1,"column_end":69}},{"value":"/ and provides implementations for 1 and 3.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":626611,"byte_end":626656,"line_start":18,"line_end":18,"column_start":1,"column_end":46}},{"value":"/ An `TimeZone` instance can be reconstructed from the corresponding `Offset` instance.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":626657,"byte_end":626746,"line_start":19,"line_end":19,"column_start":1,"column_end":90}}]},{"kind":"Struct","id":{"krate":0,"index":3814},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":647570,"byte_end":647581,"line_start":27,"line_end":27,"column_start":12,"column_end":23},"name":"FixedOffset","qualname":"::offset::fixed::FixedOffset","value":"FixedOffset {  }","parent":null,"children":[{"krate":0,"index":3815}],"decl_id":null,"docs":" The time zone with fixed offset, from UTC-23:59:59 to UTC+23:59:59.","sig":null,"attributes":[{"value":"/ The time zone with fixed offset, from UTC-23:59:59 to UTC+23:59:59.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":647123,"byte_end":647194,"line_start":19,"line_end":19,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":647195,"byte_end":647198,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ Using the [`TimeZone`](./trait.TimeZone.html) methods","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":647199,"byte_end":647256,"line_start":21,"line_end":21,"column_start":1,"column_end":58}},{"value":"/ on a `FixedOffset` struct is the preferred way to construct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":647257,"byte_end":647320,"line_start":22,"line_end":22,"column_start":1,"column_end":64}},{"value":"/ `DateTime<FixedOffset>` instances. See the [`east`](#method.east) and","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":647321,"byte_end":647394,"line_start":23,"line_end":23,"column_start":1,"column_end":74}},{"value":"/ [`west`](#method.west) methods for examples.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":647395,"byte_end":647443,"line_start":24,"line_end":24,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":2727},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":648183,"byte_end":648187,"line_start":46,"line_end":46,"column_start":12,"column_end":16},"name":"east","qualname":"<FixedOffset>::east","value":"fn east(i32) -> FixedOffset","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference.\n The negative `secs` means the Western Hemisphere.","sig":null,"attributes":[{"value":"/ Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":647636,"byte_end":647724,"line_start":32,"line_end":32,"column_start":5,"column_end":93}},{"value":"/ The negative `secs` means the Western Hemisphere.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":647729,"byte_end":647782,"line_start":33,"line_end":33,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":647787,"byte_end":647790,"line_start":34,"line_end":34,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-bound `secs`.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":647795,"byte_end":647833,"line_start":35,"line_end":35,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":647838,"byte_end":647841,"line_start":36,"line_end":36,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":647846,"byte_end":647859,"line_start":37,"line_end":37,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":647864,"byte_end":647867,"line_start":38,"line_end":38,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":647872,"byte_end":647879,"line_start":39,"line_end":39,"column_start":5,"column_end":12}},{"value":"/ use chrono::{FixedOffset, TimeZone};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":647884,"byte_end":647924,"line_start":40,"line_end":40,"column_start":5,"column_end":45}},{"value":"/ let hour = 3600;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":647929,"byte_end":647949,"line_start":41,"line_end":41,"column_start":5,"column_end":25}},{"value":"/ let datetime = FixedOffset::east(5 * hour).ymd(2016, 11, 08)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":647954,"byte_end":648018,"line_start":42,"line_end":42,"column_start":5,"column_end":69}},{"value":"/                                           .and_hms(0, 0, 0);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":648023,"byte_end":648087,"line_start":43,"line_end":43,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(&datetime.to_rfc3339(), \"2016-11-08T00:00:00+05:00\")","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":648092,"byte_end":648159,"line_start":44,"line_end":44,"column_start":5,"column_end":72}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":648164,"byte_end":648171,"line_start":45,"line_end":45,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2728},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":648522,"byte_end":648530,"line_start":54,"line_end":54,"column_start":12,"column_end":20},"name":"east_opt","qualname":"<FixedOffset>::east_opt","value":"fn east_opt(i32) -> Option<FixedOffset>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference.\n The negative `secs` means the Western Hemisphere.","sig":null,"attributes":[{"value":"/ Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":648305,"byte_end":648393,"line_start":50,"line_end":50,"column_start":5,"column_end":93}},{"value":"/ The negative `secs` means the Western Hemisphere.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":648398,"byte_end":648451,"line_start":51,"line_end":51,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":648456,"byte_end":648459,"line_start":52,"line_end":52,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-bound `secs`.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":648464,"byte_end":648510,"line_start":53,"line_end":53,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":2729},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":649270,"byte_end":649274,"line_start":76,"line_end":76,"column_start":12,"column_end":16},"name":"west","qualname":"<FixedOffset>::west","value":"fn west(i32) -> FixedOffset","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference.\n The negative `secs` means the Eastern Hemisphere.","sig":null,"attributes":[{"value":"/ Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":648723,"byte_end":648811,"line_start":62,"line_end":62,"column_start":5,"column_end":93}},{"value":"/ The negative `secs` means the Eastern Hemisphere.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":648816,"byte_end":648869,"line_start":63,"line_end":63,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":648874,"byte_end":648877,"line_start":64,"line_end":64,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-bound `secs`.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":648882,"byte_end":648920,"line_start":65,"line_end":65,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":648925,"byte_end":648928,"line_start":66,"line_end":66,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":648933,"byte_end":648946,"line_start":67,"line_end":67,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":648951,"byte_end":648954,"line_start":68,"line_end":68,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":648959,"byte_end":648966,"line_start":69,"line_end":69,"column_start":5,"column_end":12}},{"value":"/ use chrono::{FixedOffset, TimeZone};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":648971,"byte_end":649011,"line_start":70,"line_end":70,"column_start":5,"column_end":45}},{"value":"/ let hour = 3600;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":649016,"byte_end":649036,"line_start":71,"line_end":71,"column_start":5,"column_end":25}},{"value":"/ let datetime = FixedOffset::west(5 * hour).ymd(2016, 11, 08)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":649041,"byte_end":649105,"line_start":72,"line_end":72,"column_start":5,"column_end":69}},{"value":"/                                           .and_hms(0, 0, 0);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":649110,"byte_end":649174,"line_start":73,"line_end":73,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(&datetime.to_rfc3339(), \"2016-11-08T00:00:00-05:00\")","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":649179,"byte_end":649246,"line_start":74,"line_end":74,"column_start":5,"column_end":72}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":649251,"byte_end":649258,"line_start":75,"line_end":75,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2730},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":649609,"byte_end":649617,"line_start":84,"line_end":84,"column_start":12,"column_end":20},"name":"west_opt","qualname":"<FixedOffset>::west_opt","value":"fn west_opt(i32) -> Option<FixedOffset>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference.\n The negative `secs` means the Eastern Hemisphere.","sig":null,"attributes":[{"value":"/ Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":649392,"byte_end":649480,"line_start":80,"line_end":80,"column_start":5,"column_end":93}},{"value":"/ The negative `secs` means the Eastern Hemisphere.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":649485,"byte_end":649538,"line_start":81,"line_end":81,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":649543,"byte_end":649546,"line_start":82,"line_end":82,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-bound `secs`.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":649551,"byte_end":649597,"line_start":83,"line_end":83,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":2731},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":649916,"byte_end":649931,"line_start":94,"line_end":94,"column_start":12,"column_end":27},"name":"local_minus_utc","qualname":"<FixedOffset>::local_minus_utc","value":"fn local_minus_utc(&Self) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of seconds to add to convert from UTC to the local time.\n","sig":null,"attributes":[{"value":"/ Returns the number of seconds to add to convert from UTC to the local time.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":649811,"byte_end":649890,"line_start":92,"line_end":92,"column_start":5,"column_end":84}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":649895,"byte_end":649904,"line_start":93,"line_end":93,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2732},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":650093,"byte_end":650108,"line_start":100,"line_end":100,"column_start":12,"column_end":27},"name":"utc_minus_local","qualname":"<FixedOffset>::utc_minus_local","value":"fn utc_minus_local(&Self) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of seconds to add to convert from the local time to UTC.\n","sig":null,"attributes":[{"value":"/ Returns the number of seconds to add to convert from the local time to UTC.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":649988,"byte_end":650067,"line_start":98,"line_end":98,"column_start":5,"column_end":84}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":650072,"byte_end":650081,"line_start":99,"line_end":99,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2735},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":650235,"byte_end":650246,"line_start":108,"line_end":108,"column_start":8,"column_end":19},"name":"from_offset","qualname":"<FixedOffset as offset::TimeZone>::from_offset","value":"fn from_offset(&FixedOffset) -> FixedOffset","parent":{"krate":0,"index":2975},"children":[],"decl_id":{"krate":0,"index":2989},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2736},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":650316,"byte_end":650338,"line_start":112,"line_end":112,"column_start":8,"column_end":30},"name":"offset_from_local_date","qualname":"<FixedOffset as offset::TimeZone>::offset_from_local_date","value":"fn offset_from_local_date(&Self, &NaiveDate) -> LocalResult<FixedOffset>","parent":{"krate":0,"index":2975},"children":[],"decl_id":{"krate":0,"index":2990},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2737},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":650444,"byte_end":650470,"line_start":115,"line_end":115,"column_start":8,"column_end":34},"name":"offset_from_local_datetime","qualname":"<FixedOffset as offset::TimeZone>::offset_from_local_datetime","value":"fn offset_from_local_datetime(&Self, &NaiveDateTime)\n-> LocalResult<FixedOffset>","parent":{"krate":0,"index":2975},"children":[],"decl_id":{"krate":0,"index":2991},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2738},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":650581,"byte_end":650601,"line_start":119,"line_end":119,"column_start":8,"column_end":28},"name":"offset_from_utc_date","qualname":"<FixedOffset as offset::TimeZone>::offset_from_utc_date","value":"fn offset_from_utc_date(&Self, &NaiveDate) -> FixedOffset","parent":{"krate":0,"index":2975},"children":[],"decl_id":{"krate":0,"index":2996},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2739},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":650671,"byte_end":650695,"line_start":122,"line_end":122,"column_start":8,"column_end":32},"name":"offset_from_utc_datetime","qualname":"<FixedOffset as offset::TimeZone>::offset_from_utc_datetime","value":"fn offset_from_utc_datetime(&Self, &NaiveDateTime) -> FixedOffset","parent":{"krate":0,"index":2975},"children":[],"decl_id":{"krate":0,"index":2997},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2741},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":650802,"byte_end":650805,"line_start":128,"line_end":128,"column_start":8,"column_end":11},"name":"fix","qualname":"<FixedOffset as offset::Offset>::fix","value":"fn fix(&Self) -> FixedOffset","parent":{"krate":0,"index":2973},"children":[],"decl_id":{"krate":0,"index":2974},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2743},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":650894,"byte_end":650897,"line_start":134,"line_end":134,"column_start":8,"column_end":11},"name":"fmt","qualname":"<FixedOffset as std::fmt::Debug>::fmt","value":"fn fmt(&Self, &mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":9907},"children":[],"decl_id":{"krate":2,"index":9908},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2745},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":651403,"byte_end":651406,"line_start":148,"line_end":148,"column_start":8,"column_end":11},"name":"fmt","qualname":"<FixedOffset as std::fmt::Display>::fmt","value":"fn fmt(&Self, &mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":9914},"children":[],"decl_id":{"krate":2,"index":9915},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2750},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":652224,"byte_end":652227,"line_start":172,"line_end":172,"column_start":8,"column_end":11},"name":"add","qualname":"<NaiveTime as std::ops::Add>::add","value":"fn add(Self, FixedOffset) -> NaiveTime","parent":{"krate":2,"index":3218},"children":[],"decl_id":{"krate":2,"index":3221},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":652207,"byte_end":652216,"line_start":171,"line_end":171,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2753},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":652421,"byte_end":652424,"line_start":181,"line_end":181,"column_start":8,"column_end":11},"name":"sub","qualname":"<NaiveTime as std::ops::Sub>::sub","value":"fn sub(Self, FixedOffset) -> NaiveTime","parent":{"krate":2,"index":3223},"children":[],"decl_id":{"krate":2,"index":3226},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":652404,"byte_end":652413,"line_start":180,"line_end":180,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2756},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":652627,"byte_end":652630,"line_start":190,"line_end":190,"column_start":8,"column_end":11},"name":"add","qualname":"<NaiveDateTime as std::ops::Add>::add","value":"fn add(Self, FixedOffset) -> NaiveDateTime","parent":{"krate":2,"index":3218},"children":[],"decl_id":{"krate":2,"index":3221},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":652610,"byte_end":652619,"line_start":189,"line_end":189,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2759},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":652836,"byte_end":652839,"line_start":199,"line_end":199,"column_start":8,"column_end":11},"name":"sub","qualname":"<NaiveDateTime as std::ops::Sub>::sub","value":"fn sub(Self, FixedOffset) -> NaiveDateTime","parent":{"krate":2,"index":3223},"children":[],"decl_id":{"krate":2,"index":3226},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":652819,"byte_end":652828,"line_start":198,"line_end":198,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2763},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":653058,"byte_end":653061,"line_start":208,"line_end":208,"column_start":8,"column_end":11},"name":"add","qualname":"<DateTime<Tz> as std::ops::Add>::add","value":"fn add(Self, FixedOffset) -> DateTime<Tz>","parent":{"krate":2,"index":3218},"children":[],"decl_id":{"krate":2,"index":3221},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":653041,"byte_end":653050,"line_start":207,"line_end":207,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2767},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":653278,"byte_end":653281,"line_start":217,"line_end":217,"column_start":8,"column_end":11},"name":"sub","qualname":"<DateTime<Tz> as std::ops::Sub>::sub","value":"fn sub(Self, FixedOffset) -> DateTime<Tz>","parent":{"krate":2,"index":3223},"children":[],"decl_id":{"krate":2,"index":3226},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":653261,"byte_end":653270,"line_start":216,"line_end":216,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":3829},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\local\\mod.rs","byte_start":655607,"byte_end":655612,"line_start":55,"line_end":55,"column_start":12,"column_end":17},"name":"Local","qualname":"::offset::local::Local","value":"","parent":null,"children":[],"decl_id":null,"docs":" The local timescale. This is implemented via the standard `time` crate.","sig":null,"attributes":[{"value":"/ The local timescale. This is implemented via the standard `time` crate.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\local\\mod.rs","byte_start":655082,"byte_end":655157,"line_start":39,"line_end":39,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\local\\mod.rs","byte_start":655158,"byte_end":655161,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ Using the [`TimeZone`](./trait.TimeZone.html) methods","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\local\\mod.rs","byte_start":655162,"byte_end":655219,"line_start":41,"line_end":41,"column_start":1,"column_end":58}},{"value":"/ on the Local struct is the preferred way to construct `DateTime<Local>`","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\local\\mod.rs","byte_start":655220,"byte_end":655295,"line_start":42,"line_end":42,"column_start":1,"column_end":76}},{"value":"/ instances.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\local\\mod.rs","byte_start":655296,"byte_end":655310,"line_start":43,"line_end":43,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\local\\mod.rs","byte_start":655311,"byte_end":655314,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\local\\mod.rs","byte_start":655315,"byte_end":655328,"line_start":45,"line_end":45,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\local\\mod.rs","byte_start":655329,"byte_end":655332,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\local\\mod.rs","byte_start":655333,"byte_end":655340,"line_start":47,"line_end":47,"column_start":1,"column_end":8}},{"value":"/ use chrono::{Local, DateTime, TimeZone};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\local\\mod.rs","byte_start":655341,"byte_end":655385,"line_start":48,"line_end":48,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\local\\mod.rs","byte_start":655386,"byte_end":655389,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ let dt: DateTime<Local> = Local::now();","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\local\\mod.rs","byte_start":655390,"byte_end":655433,"line_start":50,"line_end":50,"column_start":1,"column_end":44}},{"value":"/ let dt: DateTime<Local> = Local.timestamp(0, 0);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\local\\mod.rs","byte_start":655434,"byte_end":655486,"line_start":51,"line_end":51,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\local\\mod.rs","byte_start":655487,"byte_end":655494,"line_start":52,"line_end":52,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":2879},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\local\\mod.rs","byte_start":655703,"byte_end":655708,"line_start":59,"line_end":59,"column_start":12,"column_end":17},"name":"today","qualname":"<Local>::today","value":"fn today() -> Date<Local>","parent":null,"children":[],"decl_id":null,"docs":" Returns a `Date` which corresponds to the current date.\n","sig":null,"attributes":[{"value":"/ Returns a `Date` which corresponds to the current date.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\local\\mod.rs","byte_start":655632,"byte_end":655691,"line_start":58,"line_end":58,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":2880},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\local\\mod.rs","byte_start":656004,"byte_end":656007,"line_start":69,"line_end":69,"column_start":12,"column_end":15},"name":"now","qualname":"<Local>::now","value":"fn now() -> DateTime<Local>","parent":null,"children":[],"decl_id":null,"docs":" Returns a `DateTime` which corresponds to the current date and time.\n","sig":null,"attributes":[{"value":"/ Returns a `DateTime` which corresponds to the current date and time.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\local\\mod.rs","byte_start":655767,"byte_end":655839,"line_start":63,"line_end":63,"column_start":5,"column_end":77}},{"value":"cfg(not(all(target_arch = \"wasm32\", feature = \"wasmbind\",\nnot(any(target_os = \"emscripten\", target_os = \"wasi\")))))","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\local\\mod.rs","byte_start":655844,"byte_end":655992,"line_start":64,"line_end":68,"column_start":5,"column_end":9}}]},{"kind":"Method","id":{"krate":0,"index":2883},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\local\\mod.rs","byte_start":656685,"byte_end":656696,"line_start":92,"line_end":92,"column_start":8,"column_end":19},"name":"from_offset","qualname":"<Local as offset::TimeZone>::from_offset","value":"fn from_offset(&FixedOffset) -> Local","parent":{"krate":0,"index":2975},"children":[],"decl_id":{"krate":0,"index":2989},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2884},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\local\\mod.rs","byte_start":656852,"byte_end":656874,"line_start":97,"line_end":97,"column_start":8,"column_end":30},"name":"offset_from_local_date","qualname":"<Local as offset::TimeZone>::offset_from_local_date","value":"fn offset_from_local_date(&Self, &NaiveDate) -> LocalResult<FixedOffset>","parent":{"krate":0,"index":2975},"children":[],"decl_id":{"krate":0,"index":2990},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2886},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\local\\mod.rs","byte_start":657008,"byte_end":657034,"line_start":101,"line_end":101,"column_start":8,"column_end":34},"name":"offset_from_local_datetime","qualname":"<Local as offset::TimeZone>::offset_from_local_datetime","value":"fn offset_from_local_datetime(&Self, &NaiveDateTime)\n-> LocalResult<FixedOffset>","parent":{"krate":0,"index":2975},"children":[],"decl_id":{"krate":0,"index":2991},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2888},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\local\\mod.rs","byte_start":657184,"byte_end":657204,"line_start":105,"line_end":105,"column_start":8,"column_end":28},"name":"offset_from_utc_date","qualname":"<Local as offset::TimeZone>::offset_from_utc_date","value":"fn offset_from_utc_date(&Self, &NaiveDate) -> FixedOffset","parent":{"krate":0,"index":2975},"children":[],"decl_id":{"krate":0,"index":2996},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2889},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\local\\mod.rs","byte_start":657302,"byte_end":657326,"line_start":109,"line_end":109,"column_start":8,"column_end":32},"name":"offset_from_utc_datetime","qualname":"<Local as offset::TimeZone>::offset_from_utc_datetime","value":"fn offset_from_utc_datetime(&Self, &NaiveDateTime) -> FixedOffset","parent":{"krate":0,"index":2975},"children":[],"decl_id":{"krate":0,"index":2997},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2890},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\local\\mod.rs","byte_start":657482,"byte_end":657497,"line_start":114,"line_end":114,"column_start":8,"column_end":23},"name":"from_local_date","qualname":"<Local as offset::TimeZone>::from_local_date","value":"fn from_local_date(&Self, &NaiveDate) -> LocalResult<Date<Local>>","parent":{"krate":0,"index":2975},"children":[],"decl_id":{"krate":0,"index":2992},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2892},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\local\\mod.rs","byte_start":658668,"byte_end":658687,"line_start":140,"line_end":140,"column_start":8,"column_end":27},"name":"from_local_datetime","qualname":"<Local as offset::TimeZone>::from_local_datetime","value":"fn from_local_datetime(&Self, &NaiveDateTime) -> LocalResult<DateTime<Local>>","parent":{"krate":0,"index":2975},"children":[],"decl_id":{"krate":0,"index":2994},"docs":"","sig":null,"attributes":[{"value":"cfg(not(all(target_arch = \"wasm32\", feature = \"wasmbind\",\nnot(any(target_os = \"emscripten\", target_os = \"wasi\")))))","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\local\\mod.rs","byte_start":658512,"byte_end":658660,"line_start":135,"line_end":139,"column_start":5,"column_end":9}}]},{"kind":"Method","id":{"krate":0,"index":2893},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\local\\mod.rs","byte_start":658809,"byte_end":658822,"line_start":144,"line_end":144,"column_start":8,"column_end":21},"name":"from_utc_date","qualname":"<Local as offset::TimeZone>::from_utc_date","value":"fn from_utc_date(&Self, &NaiveDate) -> Date<Local>","parent":{"krate":0,"index":2975},"children":[],"decl_id":{"krate":0,"index":2998},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2894},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\local\\mod.rs","byte_start":659565,"byte_end":659582,"line_start":165,"line_end":165,"column_start":8,"column_end":25},"name":"from_utc_datetime","qualname":"<Local as offset::TimeZone>::from_utc_datetime","value":"fn from_utc_datetime(&Self, &NaiveDateTime) -> DateTime<Local>","parent":{"krate":0,"index":2975},"children":[],"decl_id":{"krate":0,"index":2999},"docs":"","sig":null,"attributes":[{"value":"cfg(not(all(target_arch = \"wasm32\", feature = \"wasmbind\",\nnot(any(target_os = \"emscripten\", target_os = \"wasi\")))))","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\local\\mod.rs","byte_start":659409,"byte_end":659557,"line_start":160,"line_end":164,"column_start":5,"column_end":9}}]},{"kind":"Struct","id":{"krate":0,"index":3836},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\utc.rs","byte_start":675381,"byte_end":675384,"line_start":44,"line_end":44,"column_start":12,"column_end":15},"name":"Utc","qualname":"::offset::utc::Utc","value":"","parent":null,"children":[],"decl_id":null,"docs":" The UTC time zone. This is the most efficient time zone when you don't need the local time.\n It is also used as an offset (which is also a dummy type).","sig":null,"attributes":[{"value":"/ The UTC time zone. This is the most efficient time zone when you don't need the local time.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\utc.rs","byte_start":674666,"byte_end":674761,"line_start":25,"line_end":25,"column_start":1,"column_end":96}},{"value":"/ It is also used as an offset (which is also a dummy type).","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\utc.rs","byte_start":674762,"byte_end":674824,"line_start":26,"line_end":26,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\utc.rs","byte_start":674825,"byte_end":674828,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ Using the [`TimeZone`](./trait.TimeZone.html) methods","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\utc.rs","byte_start":674829,"byte_end":674886,"line_start":28,"line_end":28,"column_start":1,"column_end":58}},{"value":"/ on the UTC struct is the preferred way to construct `DateTime<Utc>`","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\utc.rs","byte_start":674887,"byte_end":674958,"line_start":29,"line_end":29,"column_start":1,"column_end":72}},{"value":"/ instances.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\utc.rs","byte_start":674959,"byte_end":674973,"line_start":30,"line_end":30,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\utc.rs","byte_start":674974,"byte_end":674977,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\utc.rs","byte_start":674978,"byte_end":674991,"line_start":32,"line_end":32,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\utc.rs","byte_start":674992,"byte_end":674995,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\utc.rs","byte_start":674996,"byte_end":675003,"line_start":34,"line_end":34,"column_start":1,"column_end":8}},{"value":"/ use chrono::{DateTime, TimeZone, NaiveDateTime, Utc};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\utc.rs","byte_start":675004,"byte_end":675061,"line_start":35,"line_end":35,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\utc.rs","byte_start":675062,"byte_end":675065,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ let dt = DateTime::<Utc>::from_utc(NaiveDateTime::from_timestamp(61, 0), Utc);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\utc.rs","byte_start":675066,"byte_end":675148,"line_start":37,"line_end":37,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\utc.rs","byte_start":675149,"byte_end":675152,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(Utc.timestamp(61, 0), dt);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\utc.rs","byte_start":675153,"byte_end":675194,"line_start":39,"line_end":39,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(Utc.ymd(1970, 1, 1).and_hms(0, 1, 1), dt);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\utc.rs","byte_start":675195,"byte_end":675252,"line_start":40,"line_end":40,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\utc.rs","byte_start":675253,"byte_end":675260,"line_start":41,"line_end":41,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":2937},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\utc.rs","byte_start":675499,"byte_end":675504,"line_start":49,"line_end":49,"column_start":12,"column_end":17},"name":"today","qualname":"<Utc>::today","value":"fn today() -> Date<Utc>","parent":null,"children":[],"decl_id":null,"docs":" Returns a `Date` which corresponds to the current date.\n","sig":null,"attributes":[{"value":"/ Returns a `Date` which corresponds to the current date.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\utc.rs","byte_start":675428,"byte_end":675487,"line_start":48,"line_end":48,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":2938},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\utc.rs","byte_start":675796,"byte_end":675799,"line_start":59,"line_end":59,"column_start":12,"column_end":15},"name":"now","qualname":"<Utc>::now","value":"fn now() -> DateTime<Utc>","parent":null,"children":[],"decl_id":null,"docs":" Returns a `DateTime` which corresponds to the current date and time.\n","sig":null,"attributes":[{"value":"/ Returns a `DateTime` which corresponds to the current date and time.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\utc.rs","byte_start":675559,"byte_end":675631,"line_start":53,"line_end":53,"column_start":5,"column_end":77}},{"value":"cfg(not(all(target_arch = \"wasm32\", feature = \"wasmbind\",\nnot(any(target_os = \"emscripten\", target_os = \"wasi\")))))","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\utc.rs","byte_start":675636,"byte_end":675784,"line_start":54,"line_end":58,"column_start":5,"column_end":9}}]},{"kind":"Method","id":{"krate":0,"index":2941},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\utc.rs","byte_start":676484,"byte_end":676495,"line_start":81,"line_end":81,"column_start":8,"column_end":19},"name":"from_offset","qualname":"<Utc as offset::TimeZone>::from_offset","value":"fn from_offset(&Utc) -> Utc","parent":{"krate":0,"index":2975},"children":[],"decl_id":{"krate":0,"index":2989},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2942},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\utc.rs","byte_start":676545,"byte_end":676567,"line_start":85,"line_end":85,"column_start":8,"column_end":30},"name":"offset_from_local_date","qualname":"<Utc as offset::TimeZone>::offset_from_local_date","value":"fn offset_from_local_date(&Self, &NaiveDate) -> LocalResult<Utc>","parent":{"krate":0,"index":2975},"children":[],"decl_id":{"krate":0,"index":2990},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2943},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\utc.rs","byte_start":676663,"byte_end":676689,"line_start":88,"line_end":88,"column_start":8,"column_end":34},"name":"offset_from_local_datetime","qualname":"<Utc as offset::TimeZone>::offset_from_local_datetime","value":"fn offset_from_local_datetime(&Self, &NaiveDateTime) -> LocalResult<Utc>","parent":{"krate":0,"index":2975},"children":[],"decl_id":{"krate":0,"index":2991},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2944},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\utc.rs","byte_start":676790,"byte_end":676810,"line_start":92,"line_end":92,"column_start":8,"column_end":28},"name":"offset_from_utc_date","qualname":"<Utc as offset::TimeZone>::offset_from_utc_date","value":"fn offset_from_utc_date(&Self, &NaiveDate) -> Utc","parent":{"krate":0,"index":2975},"children":[],"decl_id":{"krate":0,"index":2996},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2945},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\utc.rs","byte_start":676870,"byte_end":676894,"line_start":95,"line_end":95,"column_start":8,"column_end":32},"name":"offset_from_utc_datetime","qualname":"<Utc as offset::TimeZone>::offset_from_utc_datetime","value":"fn offset_from_utc_datetime(&Self, &NaiveDateTime) -> Utc","parent":{"krate":0,"index":2975},"children":[],"decl_id":{"krate":0,"index":2997},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2947},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\utc.rs","byte_start":676983,"byte_end":676986,"line_start":101,"line_end":101,"column_start":8,"column_end":11},"name":"fix","qualname":"<Utc as offset::Offset>::fix","value":"fn fix(&Self) -> FixedOffset","parent":{"krate":0,"index":2973},"children":[],"decl_id":{"krate":0,"index":2974},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2949},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\utc.rs","byte_start":677082,"byte_end":677085,"line_start":107,"line_end":107,"column_start":8,"column_end":11},"name":"fmt","qualname":"<Utc as std::fmt::Debug>::fmt","value":"fn fmt(&Self, &mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":9907},"children":[],"decl_id":{"krate":2,"index":9908},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2951},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\utc.rs","byte_start":677201,"byte_end":677204,"line_start":113,"line_end":113,"column_start":8,"column_end":11},"name":"fmt","qualname":"<Utc as std::fmt::Display>::fmt","value":"fn fmt(&Self, &mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":9914},"children":[],"decl_id":{"krate":2,"index":9915},"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3849},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":627400,"byte_end":627404,"line_start":44,"line_end":44,"column_start":5,"column_end":9},"name":"None","qualname":"::offset::LocalResult::None","value":"LocalResult::None","parent":{"krate":0,"index":3847},"children":[],"decl_id":null,"docs":" Given local time representation is invalid.\n This can occur when, for example, the positive timezone transition.\n","sig":null,"attributes":[{"value":"/ Given local time representation is invalid.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":627272,"byte_end":627319,"line_start":42,"line_end":42,"column_start":5,"column_end":52}},{"value":"/ This can occur when, for example, the positive timezone transition.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":627324,"byte_end":627395,"line_start":43,"line_end":43,"column_start":5,"column_end":76}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3851},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":627478,"byte_end":627484,"line_start":46,"line_end":46,"column_start":5,"column_end":11},"name":"Single","qualname":"::offset::LocalResult::Single","value":"LocalResult::Single(T)","parent":{"krate":0,"index":3847},"children":[],"decl_id":null,"docs":" Given local time representation has a single unique result.\n","sig":null,"attributes":[{"value":"/ Given local time representation has a single unique result.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":627410,"byte_end":627473,"line_start":45,"line_end":45,"column_start":5,"column_end":68}}]},{"kind":"Field","id":{"krate":0,"index":3853},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":627485,"byte_end":627486,"line_start":46,"line_end":46,"column_start":12,"column_end":13},"name":"0","qualname":"::offset::LocalResult::Single::0","value":"T","parent":{"krate":0,"index":3851},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3854},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":627650,"byte_end":627659,"line_start":49,"line_end":49,"column_start":5,"column_end":14},"name":"Ambiguous","qualname":"::offset::LocalResult::Ambiguous","value":"LocalResult::Ambiguous(T, T)","parent":{"krate":0,"index":3847},"children":[],"decl_id":null,"docs":" Given local time representation has multiple results and thus ambiguous.\n This can occur when, for example, the negative timezone transition.\n","sig":null,"attributes":[{"value":"/ Given local time representation has multiple results and thus ambiguous.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":627493,"byte_end":627569,"line_start":47,"line_end":47,"column_start":5,"column_end":81}},{"value":"/ This can occur when, for example, the negative timezone transition.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":627574,"byte_end":627645,"line_start":48,"line_end":48,"column_start":5,"column_end":76}}]},{"kind":"Field","id":{"krate":0,"index":3856},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":627660,"byte_end":627661,"line_start":49,"line_end":49,"column_start":15,"column_end":16},"name":"0","qualname":"::offset::LocalResult::Ambiguous::0","value":"T","parent":{"krate":0,"index":3854},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3857},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":627671,"byte_end":627672,"line_start":49,"line_end":49,"column_start":26,"column_end":27},"name":"1","qualname":"::offset::LocalResult::Ambiguous::1","value":"T","parent":{"krate":0,"index":3854},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3847},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":627251,"byte_end":627262,"line_start":41,"line_end":41,"column_start":10,"column_end":21},"name":"LocalResult","qualname":"::offset::LocalResult","value":"enum LocalResult<T> { None, Single(T), Ambiguous(T, T), }","parent":null,"children":[{"krate":0,"index":3849},{"krate":0,"index":3851},{"krate":0,"index":3854}],"decl_id":null,"docs":" The conversion result from the local time to the timezone-aware datetime types.\n","sig":null,"attributes":[{"value":"/ The conversion result from the local time to the timezone-aware datetime types.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":627107,"byte_end":627190,"line_start":39,"line_end":39,"column_start":1,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":2957},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":627809,"byte_end":627815,"line_start":54,"line_end":54,"column_start":12,"column_end":18},"name":"single","qualname":"<LocalResult<T>>::single","value":"fn single(Self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns `Some` only when the conversion result is unique, or `None` otherwise.\n","sig":null,"attributes":[{"value":"/ Returns `Some` only when the conversion result is unique, or `None` otherwise.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":627715,"byte_end":627797,"line_start":53,"line_end":53,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":2958},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":628043,"byte_end":628051,"line_start":62,"line_end":62,"column_start":12,"column_end":20},"name":"earliest","qualname":"<LocalResult<T>>::earliest","value":"fn earliest(Self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns `Some` for the earliest possible conversion result, or `None` if none.\n","sig":null,"attributes":[{"value":"/ Returns `Some` for the earliest possible conversion result, or `None` if none.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":627949,"byte_end":628031,"line_start":61,"line_end":61,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":2959},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":628308,"byte_end":628314,"line_start":70,"line_end":70,"column_start":12,"column_end":18},"name":"latest","qualname":"<LocalResult<T>>::latest","value":"fn latest(Self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns `Some` for the latest possible conversion result, or `None` if none.\n","sig":null,"attributes":[{"value":"/ Returns `Some` for the latest possible conversion result, or `None` if none.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":628216,"byte_end":628296,"line_start":69,"line_end":69,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":2960},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":628561,"byte_end":628564,"line_start":78,"line_end":78,"column_start":12,"column_end":15},"name":"map","qualname":"<LocalResult<T>>::map","value":"fn map<U, F>(Self, F) -> LocalResult<U> where F: FnMut(T) -> U","parent":null,"children":[],"decl_id":null,"docs":" Maps a `LocalResult<T>` into `LocalResult<U>` with given function.\n","sig":null,"attributes":[{"value":"/ Maps a `LocalResult<T>` into `LocalResult<U>` with given function.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":628479,"byte_end":628549,"line_start":77,"line_end":77,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":2965},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":629139,"byte_end":629147,"line_start":93,"line_end":93,"column_start":12,"column_end":20},"name":"and_time","qualname":"<LocalResult<Date<Tz>>>::and_time","value":"fn and_time(Self, NaiveTime) -> LocalResult<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date and given `NaiveTime`.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date and given `NaiveTime`.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":628914,"byte_end":628985,"line_start":88,"line_end":88,"column_start":5,"column_end":76}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":628990,"byte_end":629038,"line_start":89,"line_end":89,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":629043,"byte_end":629046,"line_start":90,"line_end":90,"column_start":5,"column_end":8}},{"value":"/ Propagates any error. Ambiguous result would be discarded.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":629051,"byte_end":629113,"line_start":91,"line_end":91,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":629118,"byte_end":629127,"line_start":92,"line_end":92,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2966},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":629642,"byte_end":629653,"line_start":107,"line_end":107,"column_start":12,"column_end":23},"name":"and_hms_opt","qualname":"<LocalResult<Date<Tz>>>::and_hms_opt","value":"fn and_hms_opt(Self, u32, u32, u32) -> LocalResult<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute and second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute and second.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":629414,"byte_end":629488,"line_start":102,"line_end":102,"column_start":5,"column_end":79}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":629493,"byte_end":629541,"line_start":103,"line_end":103,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":629546,"byte_end":629549,"line_start":104,"line_end":104,"column_start":5,"column_end":8}},{"value":"/ Propagates any error. Ambiguous result would be discarded.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":629554,"byte_end":629616,"line_start":105,"line_end":105,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":629621,"byte_end":629630,"line_start":106,"line_end":106,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2967},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":630273,"byte_end":630290,"line_start":122,"line_end":122,"column_start":12,"column_end":29},"name":"and_hms_milli_opt","qualname":"<LocalResult<Date<Tz>>>::and_hms_milli_opt","value":"fn and_hms_milli_opt(Self, u32, u32, u32, u32) -> LocalResult<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and millisecond.\n The millisecond part can exceed 1,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and millisecond.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":629947,"byte_end":630034,"line_start":116,"line_end":116,"column_start":5,"column_end":92}},{"value":"/ The millisecond part can exceed 1,000 in order to represent the leap second.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":630039,"byte_end":630119,"line_start":117,"line_end":117,"column_start":5,"column_end":85}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":630124,"byte_end":630172,"line_start":118,"line_end":118,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":630177,"byte_end":630180,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ Propagates any error. Ambiguous result would be discarded.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":630185,"byte_end":630247,"line_start":120,"line_end":120,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":630252,"byte_end":630261,"line_start":121,"line_end":121,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2968},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":630989,"byte_end":631006,"line_start":143,"line_end":143,"column_start":12,"column_end":29},"name":"and_hms_micro_opt","qualname":"<LocalResult<Date<Tz>>>::and_hms_micro_opt","value":"fn and_hms_micro_opt(Self, u32, u32, u32, u32) -> LocalResult<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and microsecond.\n The microsecond part can exceed 1,000,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and microsecond.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":630659,"byte_end":630746,"line_start":137,"line_end":137,"column_start":5,"column_end":92}},{"value":"/ The microsecond part can exceed 1,000,000 in order to represent the leap second.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":630751,"byte_end":630835,"line_start":138,"line_end":138,"column_start":5,"column_end":89}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":630840,"byte_end":630888,"line_start":139,"line_end":139,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":630893,"byte_end":630896,"line_start":140,"line_end":140,"column_start":5,"column_end":8}},{"value":"/ Propagates any error. Ambiguous result would be discarded.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":630901,"byte_end":630963,"line_start":141,"line_end":141,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":630968,"byte_end":630977,"line_start":142,"line_end":142,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2969},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":631707,"byte_end":631723,"line_start":164,"line_end":164,"column_start":12,"column_end":28},"name":"and_hms_nano_opt","qualname":"<LocalResult<Date<Tz>>>::and_hms_nano_opt","value":"fn and_hms_nano_opt(Self, u32, u32, u32, u32) -> LocalResult<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.\n The nanosecond part can exceed 1,000,000,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":631375,"byte_end":631461,"line_start":158,"line_end":158,"column_start":5,"column_end":91}},{"value":"/ The nanosecond part can exceed 1,000,000,000 in order to represent the leap second.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":631466,"byte_end":631553,"line_start":159,"line_end":159,"column_start":5,"column_end":92}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":631558,"byte_end":631606,"line_start":160,"line_end":160,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":631611,"byte_end":631614,"line_start":161,"line_end":161,"column_start":5,"column_end":8}},{"value":"/ Propagates any error. Ambiguous result would be discarded.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":631619,"byte_end":631681,"line_start":162,"line_end":162,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":631686,"byte_end":631695,"line_start":163,"line_end":163,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2972},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":632211,"byte_end":632217,"line_start":182,"line_end":182,"column_start":12,"column_end":18},"name":"unwrap","qualname":"<LocalResult<T>>::unwrap","value":"fn unwrap(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns the single unique conversion result, or panics accordingly.\n","sig":null,"attributes":[{"value":"/ Returns the single unique conversion result, or panics accordingly.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":632128,"byte_end":632199,"line_start":181,"line_end":181,"column_start":5,"column_end":76}}]},{"kind":"Trait","id":{"krate":0,"index":2973},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":632572,"byte_end":632578,"line_start":194,"line_end":194,"column_start":11,"column_end":17},"name":"Offset","qualname":"::offset::Offset","value":"Offset: Sized + Clone + fmt::Debug","parent":null,"children":[{"krate":0,"index":2974}],"decl_id":null,"docs":" The offset from the local time to UTC.\n","sig":null,"attributes":[{"value":"/ The offset from the local time to UTC.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":632519,"byte_end":632561,"line_start":193,"line_end":193,"column_start":1,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":2974},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":632684,"byte_end":632687,"line_start":196,"line_end":196,"column_start":8,"column_end":11},"name":"fix","qualname":"::offset::Offset::fix","value":"fn fix(&Self) -> FixedOffset","parent":{"krate":0,"index":2973},"children":[],"decl_id":null,"docs":" Returns the fixed offset from UTC to the local time stored.\n","sig":null,"attributes":[{"value":"/ Returns the fixed offset from UTC to the local time stored.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":632613,"byte_end":632676,"line_start":195,"line_end":195,"column_start":5,"column_end":68}}]},{"kind":"Trait","id":{"krate":0,"index":2975},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":632886,"byte_end":632894,"line_start":203,"line_end":203,"column_start":11,"column_end":19},"name":"TimeZone","qualname":"::offset::TimeZone","value":"TimeZone: Sized + Clone","parent":null,"children":[{"krate":0,"index":2976},{"krate":0,"index":2977},{"krate":0,"index":2978},{"krate":0,"index":2979},{"krate":0,"index":2980},{"krate":0,"index":2981},{"krate":0,"index":2982},{"krate":0,"index":2983},{"krate":0,"index":2984},{"krate":0,"index":2985},{"krate":0,"index":2986},{"krate":0,"index":2987},{"krate":0,"index":2988},{"krate":0,"index":2989},{"krate":0,"index":2990},{"krate":0,"index":2991},{"krate":0,"index":2992},{"krate":0,"index":2994},{"krate":0,"index":2996},{"krate":0,"index":2997},{"krate":0,"index":2998},{"krate":0,"index":2999}],"decl_id":null,"docs":" The time zone.","sig":null,"attributes":[{"value":"/ The time zone.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":632714,"byte_end":632732,"line_start":199,"line_end":199,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":632733,"byte_end":632736,"line_start":200,"line_end":200,"column_start":1,"column_end":4}},{"value":"/ The methods here are the primarily constructors for [`Date`](../struct.Date.html) and","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":632737,"byte_end":632826,"line_start":201,"line_end":201,"column_start":1,"column_end":90}},{"value":"/ [`DateTime`](../struct.DateTime.html) types.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":632827,"byte_end":632875,"line_start":202,"line_end":202,"column_start":1,"column_end":49}}]},{"kind":"Type","id":{"krate":0,"index":2976},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":633117,"byte_end":633123,"line_start":207,"line_end":207,"column_start":10,"column_end":16},"name":"Offset","qualname":"::offset::TimeZone::Offset","value":"type Offset: Offset;","parent":{"krate":0,"index":2975},"children":[],"decl_id":null,"docs":" An associated offset type.\n This type is used to store the actual offset in date and time types.\n The original `TimeZone` value can be recovered via `TimeZone::from_offset`.\n","sig":null,"attributes":[{"value":"/ An associated offset type.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":632916,"byte_end":632946,"line_start":204,"line_end":204,"column_start":5,"column_end":35}},{"value":"/ This type is used to store the actual offset in date and time types.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":632951,"byte_end":633023,"line_start":205,"line_end":205,"column_start":5,"column_end":77}},{"value":"/ The original `TimeZone` value can be recovered via `TimeZone::from_offset`.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":633028,"byte_end":633107,"line_start":206,"line_end":206,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":2977},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":633738,"byte_end":633741,"line_start":224,"line_end":224,"column_start":8,"column_end":11},"name":"ymd","qualname":"::offset::TimeZone::ymd","value":"fn ymd(&Self, i32, u32, u32) -> Date<Self>","parent":{"krate":0,"index":2975},"children":[],"decl_id":null,"docs":" Makes a new `Date` from year, month, day and the current time zone.\n This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","sig":null,"attributes":[{"value":"/ Makes a new `Date` from year, month, day and the current time zone.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":633138,"byte_end":633209,"line_start":209,"line_end":209,"column_start":5,"column_end":76}},{"value":"/ This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":633214,"byte_end":633293,"line_start":210,"line_end":210,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":633298,"byte_end":633301,"line_start":211,"line_end":211,"column_start":5,"column_end":8}},{"value":"/ The time zone normally does not affect the date (unless it is between UTC-24 and UTC+24),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":633306,"byte_end":633399,"line_start":212,"line_end":212,"column_start":5,"column_end":98}},{"value":"/ but it will propagate to the `DateTime` values constructed via this date.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":633404,"byte_end":633481,"line_start":213,"line_end":213,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":633486,"byte_end":633489,"line_start":214,"line_end":214,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-range date, invalid month and/or day.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":633494,"byte_end":633556,"line_start":215,"line_end":215,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":633561,"byte_end":633564,"line_start":216,"line_end":216,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":633569,"byte_end":633582,"line_start":217,"line_end":217,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":633587,"byte_end":633590,"line_start":218,"line_end":218,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":633595,"byte_end":633602,"line_start":219,"line_end":219,"column_start":5,"column_end":12}},{"value":"/ use chrono::{Utc, TimeZone};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":633607,"byte_end":633639,"line_start":220,"line_end":220,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":633644,"byte_end":633647,"line_start":221,"line_end":221,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Utc.ymd(2015, 5, 15).to_string(), \"2015-05-15UTC\");","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":633652,"byte_end":633718,"line_start":222,"line_end":222,"column_start":5,"column_end":71}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":633723,"byte_end":633730,"line_start":223,"line_end":223,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2978},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":634555,"byte_end":634562,"line_start":244,"line_end":244,"column_start":8,"column_end":15},"name":"ymd_opt","qualname":"::offset::TimeZone::ymd_opt","value":"fn ymd_opt(&Self, i32, u32, u32) -> LocalResult<Date<Self>>","parent":{"krate":0,"index":2975},"children":[],"decl_id":null,"docs":" Makes a new `Date` from year, month, day and the current time zone.\n This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","sig":null,"attributes":[{"value":"/ Makes a new `Date` from year, month, day and the current time zone.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":633857,"byte_end":633928,"line_start":228,"line_end":228,"column_start":5,"column_end":76}},{"value":"/ This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":633933,"byte_end":634012,"line_start":229,"line_end":229,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":634017,"byte_end":634020,"line_start":230,"line_end":230,"column_start":5,"column_end":8}},{"value":"/ The time zone normally does not affect the date (unless it is between UTC-24 and UTC+24),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":634025,"byte_end":634118,"line_start":231,"line_end":231,"column_start":5,"column_end":98}},{"value":"/ but it will propagate to the `DateTime` values constructed via this date.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":634123,"byte_end":634200,"line_start":232,"line_end":232,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":634205,"byte_end":634208,"line_start":233,"line_end":233,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-range date, invalid month and/or day.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":634213,"byte_end":634283,"line_start":234,"line_end":234,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":634288,"byte_end":634291,"line_start":235,"line_end":235,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":634296,"byte_end":634309,"line_start":236,"line_end":236,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":634314,"byte_end":634317,"line_start":237,"line_end":237,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":634322,"byte_end":634329,"line_start":238,"line_end":238,"column_start":5,"column_end":12}},{"value":"/ use chrono::{Utc, LocalResult, TimeZone};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":634334,"byte_end":634379,"line_start":239,"line_end":239,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":634384,"byte_end":634387,"line_start":240,"line_end":240,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Utc.ymd_opt(2015, 5, 15).unwrap().to_string(), \"2015-05-15UTC\");","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":634392,"byte_end":634471,"line_start":241,"line_end":241,"column_start":5,"column_end":84}},{"value":"/ assert_eq!(Utc.ymd_opt(2000, 0, 0), LocalResult::None);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":634476,"byte_end":634535,"line_start":242,"line_end":242,"column_start":5,"column_end":64}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":634540,"byte_end":634547,"line_start":243,"line_end":243,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2979},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":635409,"byte_end":635411,"line_start":266,"line_end":266,"column_start":8,"column_end":10},"name":"yo","qualname":"::offset::TimeZone::yo","value":"fn yo(&Self, i32, u32) -> Date<Self>","parent":{"krate":0,"index":2975},"children":[],"decl_id":null,"docs":" Makes a new `Date` from year, day of year (DOY or \"ordinal\") and the current time zone.\n This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","sig":null,"attributes":[{"value":"/ Makes a new `Date` from year, day of year (DOY or \"ordinal\") and the current time zone.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":634799,"byte_end":634890,"line_start":251,"line_end":251,"column_start":5,"column_end":96}},{"value":"/ This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":634895,"byte_end":634974,"line_start":252,"line_end":252,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":634979,"byte_end":634982,"line_start":253,"line_end":253,"column_start":5,"column_end":8}},{"value":"/ The time zone normally does not affect the date (unless it is between UTC-24 and UTC+24),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":634987,"byte_end":635080,"line_start":254,"line_end":254,"column_start":5,"column_end":98}},{"value":"/ but it will propagate to the `DateTime` values constructed via this date.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":635085,"byte_end":635162,"line_start":255,"line_end":255,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":635167,"byte_end":635170,"line_start":256,"line_end":256,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-range date and/or invalid DOY.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":635175,"byte_end":635230,"line_start":257,"line_end":257,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":635235,"byte_end":635238,"line_start":258,"line_end":258,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":635243,"byte_end":635256,"line_start":259,"line_end":259,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":635261,"byte_end":635264,"line_start":260,"line_end":260,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":635269,"byte_end":635276,"line_start":261,"line_end":261,"column_start":5,"column_end":12}},{"value":"/ use chrono::{Utc, TimeZone};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":635281,"byte_end":635313,"line_start":262,"line_end":262,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":635318,"byte_end":635321,"line_start":263,"line_end":263,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Utc.yo(2015, 135).to_string(), \"2015-05-15UTC\");","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":635326,"byte_end":635389,"line_start":264,"line_end":264,"column_start":5,"column_end":68}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":635394,"byte_end":635401,"line_start":265,"line_end":265,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2980},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":635962,"byte_end":635968,"line_start":277,"line_end":277,"column_start":8,"column_end":14},"name":"yo_opt","qualname":"::offset::TimeZone::yo_opt","value":"fn yo_opt(&Self, i32, u32) -> LocalResult<Date<Self>>","parent":{"krate":0,"index":2975},"children":[],"decl_id":null,"docs":" Makes a new `Date` from year, day of year (DOY or \"ordinal\") and the current time zone.\n This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","sig":null,"attributes":[{"value":"/ Makes a new `Date` from year, day of year (DOY or \"ordinal\") and the current time zone.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":635515,"byte_end":635606,"line_start":270,"line_end":270,"column_start":5,"column_end":96}},{"value":"/ This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":635611,"byte_end":635690,"line_start":271,"line_end":271,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":635695,"byte_end":635698,"line_start":272,"line_end":272,"column_start":5,"column_end":8}},{"value":"/ The time zone normally does not affect the date (unless it is between UTC-24 and UTC+24),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":635703,"byte_end":635796,"line_start":273,"line_end":273,"column_start":5,"column_end":98}},{"value":"/ but it will propagate to the `DateTime` values constructed via this date.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":635801,"byte_end":635878,"line_start":274,"line_end":274,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":635883,"byte_end":635886,"line_start":275,"line_end":275,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-range date and/or invalid DOY.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":635891,"byte_end":635954,"line_start":276,"line_end":276,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":2981},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":636944,"byte_end":636950,"line_start":301,"line_end":301,"column_start":8,"column_end":14},"name":"isoywd","qualname":"::offset::TimeZone::isoywd","value":"fn isoywd(&Self, i32, u32, Weekday) -> Date<Self>","parent":{"krate":0,"index":2975},"children":[],"decl_id":null,"docs":" Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and\n the current time zone.\n This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.\n The resulting `Date` may have a different year from the input year.","sig":null,"attributes":[{"value":"/ Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":636193,"byte_end":636284,"line_start":284,"line_end":284,"column_start":5,"column_end":96}},{"value":"/ the current time zone.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":636289,"byte_end":636315,"line_start":285,"line_end":285,"column_start":5,"column_end":31}},{"value":"/ This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":636320,"byte_end":636399,"line_start":286,"line_end":286,"column_start":5,"column_end":84}},{"value":"/ The resulting `Date` may have a different year from the input year.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":636404,"byte_end":636475,"line_start":287,"line_end":287,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":636480,"byte_end":636483,"line_start":288,"line_end":288,"column_start":5,"column_end":8}},{"value":"/ The time zone normally does not affect the date (unless it is between UTC-24 and UTC+24),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":636488,"byte_end":636581,"line_start":289,"line_end":289,"column_start":5,"column_end":98}},{"value":"/ but it will propagate to the `DateTime` values constructed via this date.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":636586,"byte_end":636663,"line_start":290,"line_end":290,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":636668,"byte_end":636671,"line_start":291,"line_end":291,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-range date and/or invalid week number.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":636676,"byte_end":636739,"line_start":292,"line_end":292,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":636744,"byte_end":636747,"line_start":293,"line_end":293,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":636752,"byte_end":636765,"line_start":294,"line_end":294,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":636770,"byte_end":636773,"line_start":295,"line_end":295,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":636778,"byte_end":636785,"line_start":296,"line_end":296,"column_start":5,"column_end":12}},{"value":"/ use chrono::{Utc, Weekday, TimeZone};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":636790,"byte_end":636831,"line_start":297,"line_end":297,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":636836,"byte_end":636839,"line_start":298,"line_end":298,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Utc.isoywd(2015, 20, Weekday::Fri).to_string(), \"2015-05-15UTC\");","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":636844,"byte_end":636924,"line_start":299,"line_end":299,"column_start":5,"column_end":85}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":636929,"byte_end":636936,"line_start":300,"line_end":300,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2982},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":637641,"byte_end":637651,"line_start":314,"line_end":314,"column_start":8,"column_end":18},"name":"isoywd_opt","qualname":"::offset::TimeZone::isoywd_opt","value":"fn isoywd_opt(&Self, i32, u32, Weekday) -> LocalResult<Date<Self>>","parent":{"krate":0,"index":2975},"children":[],"decl_id":null,"docs":" Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and\n the current time zone.\n This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.\n The resulting `Date` may have a different year from the input year.","sig":null,"attributes":[{"value":"/ Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":637079,"byte_end":637170,"line_start":305,"line_end":305,"column_start":5,"column_end":96}},{"value":"/ the current time zone.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":637175,"byte_end":637201,"line_start":306,"line_end":306,"column_start":5,"column_end":31}},{"value":"/ This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":637206,"byte_end":637285,"line_start":307,"line_end":307,"column_start":5,"column_end":84}},{"value":"/ The resulting `Date` may have a different year from the input year.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":637290,"byte_end":637361,"line_start":308,"line_end":308,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":637366,"byte_end":637369,"line_start":309,"line_end":309,"column_start":5,"column_end":8}},{"value":"/ The time zone normally does not affect the date (unless it is between UTC-24 and UTC+24),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":637374,"byte_end":637467,"line_start":310,"line_end":310,"column_start":5,"column_end":98}},{"value":"/ but it will propagate to the `DateTime` values constructed via this date.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":637472,"byte_end":637549,"line_start":311,"line_end":311,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":637554,"byte_end":637557,"line_start":312,"line_end":312,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-range date and/or invalid week number.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":637562,"byte_end":637633,"line_start":313,"line_end":313,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":2983},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":638474,"byte_end":638483,"line_start":335,"line_end":335,"column_start":8,"column_end":17},"name":"timestamp","qualname":"::offset::TimeZone::timestamp","value":"fn timestamp(&Self, i64, u32) -> DateTime<Self>","parent":{"krate":0,"index":2975},"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the number of non-leap seconds\n since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\")\n and the number of nanoseconds since the last whole non-leap second.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the number of non-leap seconds","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":637901,"byte_end":637963,"line_start":321,"line_end":321,"column_start":5,"column_end":67}},{"value":"/ since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\")","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":637968,"byte_end":638028,"line_start":322,"line_end":322,"column_start":5,"column_end":65}},{"value":"/ and the number of nanoseconds since the last whole non-leap second.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":638033,"byte_end":638104,"line_start":323,"line_end":323,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":638109,"byte_end":638112,"line_start":324,"line_end":324,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-range number of seconds and/or invalid nanosecond,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":638117,"byte_end":638192,"line_start":325,"line_end":325,"column_start":5,"column_end":80}},{"value":"/ for a non-panicking version see [`timestamp_opt`](#method.timestamp_opt).","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":638197,"byte_end":638274,"line_start":326,"line_end":326,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":638279,"byte_end":638282,"line_start":327,"line_end":327,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":638287,"byte_end":638300,"line_start":328,"line_end":328,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":638305,"byte_end":638308,"line_start":329,"line_end":329,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":638313,"byte_end":638320,"line_start":330,"line_end":330,"column_start":5,"column_end":12}},{"value":"/ use chrono::{Utc, TimeZone};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":638325,"byte_end":638357,"line_start":331,"line_end":331,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":638362,"byte_end":638365,"line_start":332,"line_end":332,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Utc.timestamp(1431648000, 0).to_string(), \"2015-05-15 00:00:00 UTC\");","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":638370,"byte_end":638454,"line_start":333,"line_end":333,"column_start":5,"column_end":89}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":638459,"byte_end":638466,"line_start":334,"line_end":334,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2984},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":638966,"byte_end":638979,"line_start":345,"line_end":345,"column_start":8,"column_end":21},"name":"timestamp_opt","qualname":"::offset::TimeZone::timestamp_opt","value":"fn timestamp_opt(&Self, i64, u32) -> LocalResult<DateTime<Self>>","parent":{"krate":0,"index":2975},"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the number of non-leap seconds\n since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\")\n and the number of nanoseconds since the last whole non-leap second.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the number of non-leap seconds","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":638594,"byte_end":638656,"line_start":339,"line_end":339,"column_start":5,"column_end":67}},{"value":"/ since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\")","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":638661,"byte_end":638721,"line_start":340,"line_end":340,"column_start":5,"column_end":65}},{"value":"/ and the number of nanoseconds since the last whole non-leap second.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":638726,"byte_end":638797,"line_start":341,"line_end":341,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":638802,"byte_end":638805,"line_start":342,"line_end":342,"column_start":5,"column_end":8}},{"value":"/ Returns `LocalResult::None` on out-of-range number of seconds and/or","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":638810,"byte_end":638882,"line_start":343,"line_end":343,"column_start":5,"column_end":77}},{"value":"/ invalid nanosecond, otherwise always returns `LocalResult::Single`.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":638887,"byte_end":638958,"line_start":344,"line_end":344,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":2985},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":639717,"byte_end":639733,"line_start":365,"line_end":365,"column_start":8,"column_end":24},"name":"timestamp_millis","qualname":"::offset::TimeZone::timestamp_millis","value":"fn timestamp_millis(&Self, i64) -> DateTime<Self>","parent":{"krate":0,"index":2975},"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the number of non-leap milliseconds\n since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the number of non-leap milliseconds","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":639240,"byte_end":639307,"line_start":352,"line_end":352,"column_start":5,"column_end":72}},{"value":"/ since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":639312,"byte_end":639373,"line_start":353,"line_end":353,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":639378,"byte_end":639381,"line_start":354,"line_end":354,"column_start":5,"column_end":8}},{"value":"/ Panics on out-of-range number of milliseconds for a non-panicking","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":639386,"byte_end":639455,"line_start":355,"line_end":355,"column_start":5,"column_end":74}},{"value":"/ version see [`timestamp_millis_opt`](#method.timestamp_millis_opt).","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":639460,"byte_end":639531,"line_start":356,"line_end":356,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":639536,"byte_end":639539,"line_start":357,"line_end":357,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":639544,"byte_end":639557,"line_start":358,"line_end":358,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":639562,"byte_end":639565,"line_start":359,"line_end":359,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":639570,"byte_end":639577,"line_start":360,"line_end":360,"column_start":5,"column_end":12}},{"value":"/ use chrono::{Utc, TimeZone};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":639582,"byte_end":639614,"line_start":361,"line_end":361,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":639619,"byte_end":639622,"line_start":362,"line_end":362,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Utc.timestamp_millis(1431648000).timestamp(), 1431648);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":639627,"byte_end":639697,"line_start":363,"line_end":363,"column_start":5,"column_end":75}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":639702,"byte_end":639709,"line_start":364,"line_end":364,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2986},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":640462,"byte_end":640482,"line_start":386,"line_end":386,"column_start":8,"column_end":28},"name":"timestamp_millis_opt","qualname":"::offset::TimeZone::timestamp_millis_opt","value":"fn timestamp_millis_opt(&Self, i64) -> LocalResult<DateTime<Self>>","parent":{"krate":0,"index":2975},"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the number of non-leap milliseconds\n since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the number of non-leap milliseconds","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":639836,"byte_end":639903,"line_start":369,"line_end":369,"column_start":5,"column_end":72}},{"value":"/ since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":639908,"byte_end":639969,"line_start":370,"line_end":370,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":639974,"byte_end":639977,"line_start":371,"line_end":371,"column_start":5,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":639982,"byte_end":639985,"line_start":372,"line_end":372,"column_start":5,"column_end":8}},{"value":"/ Returns `LocalResult::None` on out-of-range number of milliseconds","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":639990,"byte_end":640060,"line_start":373,"line_end":373,"column_start":5,"column_end":75}},{"value":"/ and/or invalid nanosecond, otherwise always returns","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":640065,"byte_end":640120,"line_start":374,"line_end":374,"column_start":5,"column_end":60}},{"value":"/ `LocalResult::Single`.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":640125,"byte_end":640151,"line_start":375,"line_end":375,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":640156,"byte_end":640159,"line_start":376,"line_end":376,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":640164,"byte_end":640177,"line_start":377,"line_end":377,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":640182,"byte_end":640185,"line_start":378,"line_end":378,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":640190,"byte_end":640197,"line_start":379,"line_end":379,"column_start":5,"column_end":12}},{"value":"/ use chrono::{Utc, TimeZone, LocalResult};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":640202,"byte_end":640247,"line_start":380,"line_end":380,"column_start":5,"column_end":50}},{"value":"/ match Utc.timestamp_millis_opt(1431648000) {","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":640252,"byte_end":640300,"line_start":381,"line_end":381,"column_start":5,"column_end":53}},{"value":"/     LocalResult::Single(dt) => assert_eq!(dt.timestamp(), 1431648),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":640305,"byte_end":640376,"line_start":382,"line_end":382,"column_start":5,"column_end":76}},{"value":"/     _ => panic!(\"Incorrect timestamp_millis\"),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":640381,"byte_end":640431,"line_start":383,"line_end":383,"column_start":5,"column_end":55}},{"value":"/ };","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":640436,"byte_end":640442,"line_start":384,"line_end":384,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":640447,"byte_end":640454,"line_start":385,"line_end":385,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2987},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":641182,"byte_end":641197,"line_start":408,"line_end":408,"column_start":8,"column_end":23},"name":"timestamp_nanos","qualname":"::offset::TimeZone::timestamp_nanos","value":"fn timestamp_nanos(&Self, i64) -> DateTime<Self>","parent":{"krate":0,"index":2975},"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the number of non-leap nanoseconds\n since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the number of non-leap nanoseconds","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":640761,"byte_end":640827,"line_start":395,"line_end":395,"column_start":5,"column_end":71}},{"value":"/ since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":640832,"byte_end":640893,"line_start":396,"line_end":396,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":640898,"byte_end":640901,"line_start":397,"line_end":397,"column_start":5,"column_end":8}},{"value":"/ Unlike [`timestamp_millis`](#method.timestamp_millis), this never","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":640906,"byte_end":640975,"line_start":398,"line_end":398,"column_start":5,"column_end":74}},{"value":"/ panics.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":640980,"byte_end":640991,"line_start":399,"line_end":399,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":640996,"byte_end":640999,"line_start":400,"line_end":400,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":641004,"byte_end":641017,"line_start":401,"line_end":401,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":641022,"byte_end":641025,"line_start":402,"line_end":402,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":641030,"byte_end":641037,"line_start":403,"line_end":403,"column_start":5,"column_end":12}},{"value":"/ use chrono::{Utc, TimeZone};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":641042,"byte_end":641074,"line_start":404,"line_end":404,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":641079,"byte_end":641082,"line_start":405,"line_end":405,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Utc.timestamp_nanos(1431648000000000).timestamp(), 1431648);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":641087,"byte_end":641162,"line_start":406,"line_end":406,"column_start":5,"column_end":80}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":641167,"byte_end":641174,"line_start":407,"line_end":407,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2988},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":641970,"byte_end":641987,"line_start":428,"line_end":428,"column_start":8,"column_end":25},"name":"datetime_from_str","qualname":"::offset::TimeZone::datetime_from_str","value":"fn datetime_from_str(&Self, &str, &str) -> ParseResult<DateTime<Self>>","parent":{"krate":0,"index":2975},"children":[],"decl_id":null,"docs":" Parses a string with the specified format string and returns a\n `DateTime` with the current offset.","sig":null,"attributes":[{"value":"/ Parses a string with the specified format string and returns a","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":641480,"byte_end":641546,"line_start":417,"line_end":417,"column_start":5,"column_end":71}},{"value":"/ `DateTime` with the current offset.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":641551,"byte_end":641590,"line_start":418,"line_end":418,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":641595,"byte_end":641598,"line_start":419,"line_end":419,"column_start":5,"column_end":8}},{"value":"/ See the [`crate::format::strftime`] module on the","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":641603,"byte_end":641656,"line_start":420,"line_end":420,"column_start":5,"column_end":58}},{"value":"/ supported escape sequences.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":641661,"byte_end":641692,"line_start":421,"line_end":421,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":641697,"byte_end":641700,"line_start":422,"line_end":422,"column_start":5,"column_end":8}},{"value":"/ If the to-be-parsed string includes an offset, it *must* match the","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":641705,"byte_end":641775,"line_start":423,"line_end":423,"column_start":5,"column_end":75}},{"value":"/ offset of the TimeZone, otherwise an error will be returned.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":641780,"byte_end":641844,"line_start":424,"line_end":424,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":641849,"byte_end":641852,"line_start":425,"line_end":425,"column_start":5,"column_end":8}},{"value":"/ See also [`DateTime::parse_from_str`] which gives a [`DateTime`] with","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":641857,"byte_end":641930,"line_start":426,"line_end":426,"column_start":5,"column_end":78}},{"value":"/ parsed [`FixedOffset`].","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":641935,"byte_end":641962,"line_start":427,"line_end":427,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2989},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":642258,"byte_end":642269,"line_start":435,"line_end":435,"column_start":8,"column_end":19},"name":"from_offset","qualname":"::offset::TimeZone::from_offset","value":"fn from_offset(&Self::Offset) -> Self","parent":{"krate":0,"index":2975},"children":[],"decl_id":null,"docs":" Reconstructs the time zone from the offset.\n","sig":null,"attributes":[{"value":"/ Reconstructs the time zone from the offset.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":642203,"byte_end":642250,"line_start":434,"line_end":434,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":2990},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":642381,"byte_end":642403,"line_start":438,"line_end":438,"column_start":8,"column_end":30},"name":"offset_from_local_date","qualname":"::offset::TimeZone::offset_from_local_date","value":"fn offset_from_local_date(&Self, &NaiveDate) -> LocalResult<Self::Offset>","parent":{"krate":0,"index":2975},"children":[],"decl_id":null,"docs":" Creates the offset(s) for given local `NaiveDate` if possible.\n","sig":null,"attributes":[{"value":"/ Creates the offset(s) for given local `NaiveDate` if possible.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":642307,"byte_end":642373,"line_start":437,"line_end":437,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":2991},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":642543,"byte_end":642569,"line_start":441,"line_end":441,"column_start":8,"column_end":34},"name":"offset_from_local_datetime","qualname":"::offset::TimeZone::offset_from_local_datetime","value":"fn offset_from_local_datetime(&Self, &NaiveDateTime)\n-> LocalResult<Self::Offset>","parent":{"krate":0,"index":2975},"children":[],"decl_id":null,"docs":" Creates the offset(s) for given local `NaiveDateTime` if possible.\n","sig":null,"attributes":[{"value":"/ Creates the offset(s) for given local `NaiveDateTime` if possible.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":642465,"byte_end":642535,"line_start":440,"line_end":440,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":2992},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":642763,"byte_end":642778,"line_start":445,"line_end":445,"column_start":8,"column_end":23},"name":"from_local_date","qualname":"::offset::TimeZone::from_local_date","value":"fn from_local_date(&Self, &NaiveDate) -> LocalResult<Date<Self>>","parent":{"krate":0,"index":2975},"children":[],"decl_id":null,"docs":" Converts the local `NaiveDate` to the timezone-aware `Date` if possible.\n","sig":null,"attributes":[{"value":"/ Converts the local `NaiveDate` to the timezone-aware `Date` if possible.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":642635,"byte_end":642711,"line_start":443,"line_end":443,"column_start":5,"column_end":81}},{"value":"allow(clippy :: wrong_self_convention)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":642716,"byte_end":642755,"line_start":444,"line_end":444,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":2994},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":643174,"byte_end":643193,"line_start":454,"line_end":454,"column_start":8,"column_end":27},"name":"from_local_datetime","qualname":"::offset::TimeZone::from_local_datetime","value":"fn from_local_datetime(&Self, &NaiveDateTime) -> LocalResult<DateTime<Self>>","parent":{"krate":0,"index":2975},"children":[],"decl_id":null,"docs":" Converts the local `NaiveDateTime` to the timezone-aware `DateTime` if possible.\n","sig":null,"attributes":[{"value":"/ Converts the local `NaiveDateTime` to the timezone-aware `DateTime` if possible.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":643038,"byte_end":643122,"line_start":452,"line_end":452,"column_start":5,"column_end":89}},{"value":"allow(clippy :: wrong_self_convention)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":643127,"byte_end":643166,"line_start":453,"line_end":453,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":2996},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":643467,"byte_end":643487,"line_start":460,"line_end":460,"column_start":8,"column_end":28},"name":"offset_from_utc_date","qualname":"::offset::TimeZone::offset_from_utc_date","value":"fn offset_from_utc_date(&Self, &NaiveDate) -> Self::Offset","parent":{"krate":0,"index":2975},"children":[],"decl_id":null,"docs":" Creates the offset for given UTC `NaiveDate`. This cannot fail.\n","sig":null,"attributes":[{"value":"/ Creates the offset for given UTC `NaiveDate`. This cannot fail.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":643392,"byte_end":643459,"line_start":459,"line_end":459,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":2997},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":643613,"byte_end":643637,"line_start":463,"line_end":463,"column_start":8,"column_end":32},"name":"offset_from_utc_datetime","qualname":"::offset::TimeZone::offset_from_utc_datetime","value":"fn offset_from_utc_datetime(&Self, &NaiveDateTime) -> Self::Offset","parent":{"krate":0,"index":2975},"children":[],"decl_id":null,"docs":" Creates the offset for given UTC `NaiveDateTime`. This cannot fail.\n","sig":null,"attributes":[{"value":"/ Creates the offset for given UTC `NaiveDateTime`. This cannot fail.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":643534,"byte_end":643605,"line_start":462,"line_end":462,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":2998},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":643888,"byte_end":643901,"line_start":468,"line_end":468,"column_start":8,"column_end":21},"name":"from_utc_date","qualname":"::offset::TimeZone::from_utc_date","value":"fn from_utc_date(&Self, &NaiveDate) -> Date<Self>","parent":{"krate":0,"index":2975},"children":[],"decl_id":null,"docs":" Converts the UTC `NaiveDate` to the local time.\n The UTC is continuous and thus this cannot fail (but can give the duplicate local time).\n","sig":null,"attributes":[{"value":"/ Converts the UTC `NaiveDate` to the local time.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":643688,"byte_end":643739,"line_start":465,"line_end":465,"column_start":5,"column_end":56}},{"value":"/ The UTC is continuous and thus this cannot fail (but can give the duplicate local time).","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":643744,"byte_end":643836,"line_start":466,"line_end":466,"column_start":5,"column_end":97}},{"value":"allow(clippy :: wrong_self_convention)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":643841,"byte_end":643880,"line_start":467,"line_end":467,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":2999},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":644218,"byte_end":644235,"line_start":475,"line_end":475,"column_start":8,"column_end":25},"name":"from_utc_datetime","qualname":"::offset::TimeZone::from_utc_datetime","value":"fn from_utc_datetime(&Self, &NaiveDateTime) -> DateTime<Self>","parent":{"krate":0,"index":2975},"children":[],"decl_id":null,"docs":" Converts the UTC `NaiveDateTime` to the local time.\n The UTC is continuous and thus this cannot fail (but can give the duplicate local time).\n","sig":null,"attributes":[{"value":"/ Converts the UTC `NaiveDateTime` to the local time.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":644014,"byte_end":644069,"line_start":472,"line_end":472,"column_start":5,"column_end":60}},{"value":"/ The UTC is continuous and thus this cannot fail (but can give the duplicate local time).","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":644074,"byte_end":644166,"line_start":473,"line_end":473,"column_start":5,"column_end":97}},{"value":"allow(clippy :: wrong_self_convention)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":644171,"byte_end":644210,"line_start":474,"line_end":474,"column_start":5,"column_end":44}}]},{"kind":"Trait","id":{"krate":0,"index":3051},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":677990,"byte_end":678001,"line_start":20,"line_end":20,"column_start":11,"column_end":22},"name":"SubsecRound","qualname":"::round::SubsecRound","value":"SubsecRound","parent":null,"children":[{"krate":0,"index":3052},{"krate":0,"index":3053}],"decl_id":null,"docs":" Extension trait for subsecond rounding or truncation to a maximum number\n of digits. Rounding can be used to decrease the error variance when\n serializing/persisting to lower precision. Truncation is the default\n behavior in Chrono display formatting.  Either can be used to guarantee\n equality (e.g. for testing) when round-tripping through a lower precision\n format.\n","sig":null,"attributes":[{"value":"/ Extension trait for subsecond rounding or truncation to a maximum number","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":677592,"byte_end":677668,"line_start":14,"line_end":14,"column_start":1,"column_end":77}},{"value":"/ of digits. Rounding can be used to decrease the error variance when","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":677669,"byte_end":677740,"line_start":15,"line_end":15,"column_start":1,"column_end":72}},{"value":"/ serializing/persisting to lower precision. Truncation is the default","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":677741,"byte_end":677813,"line_start":16,"line_end":16,"column_start":1,"column_end":73}},{"value":"/ behavior in Chrono display formatting.  Either can be used to guarantee","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":677814,"byte_end":677889,"line_start":17,"line_end":17,"column_start":1,"column_end":76}},{"value":"/ equality (e.g. for testing) when round-tripping through a lower precision","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":677890,"byte_end":677967,"line_start":18,"line_end":18,"column_start":1,"column_end":78}},{"value":"/ format.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":677968,"byte_end":677979,"line_start":19,"line_end":19,"column_start":1,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3052},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":678531,"byte_end":678544,"line_start":32,"line_end":32,"column_start":8,"column_end":21},"name":"round_subsecs","qualname":"::round::SubsecRound::round_subsecs","value":"fn round_subsecs(Self, u16) -> Self","parent":{"krate":0,"index":3051},"children":[],"decl_id":null,"docs":" Return a copy rounded to the specified number of subsecond digits. With\n 9 or more digits, self is returned unmodified. Halfway values are\n rounded up (away from zero).","sig":null,"attributes":[{"value":"/ Return a copy rounded to the specified number of subsecond digits. With","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":678008,"byte_end":678083,"line_start":21,"line_end":21,"column_start":5,"column_end":80}},{"value":"/ 9 or more digits, self is returned unmodified. Halfway values are","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":678088,"byte_end":678157,"line_start":22,"line_end":22,"column_start":5,"column_end":74}},{"value":"/ rounded up (away from zero).","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":678162,"byte_end":678194,"line_start":23,"line_end":23,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":678199,"byte_end":678202,"line_start":24,"line_end":24,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":678207,"byte_end":678220,"line_start":25,"line_end":25,"column_start":5,"column_end":18}},{"value":"/ ``` rust","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":678225,"byte_end":678237,"line_start":26,"line_end":26,"column_start":5,"column_end":17}},{"value":"/ # use chrono::{DateTime, SubsecRound, Timelike, TimeZone, Utc};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":678242,"byte_end":678309,"line_start":27,"line_end":27,"column_start":5,"column_end":72}},{"value":"/ let dt = Utc.ymd(2018, 1, 11).and_hms_milli(12, 0, 0, 154);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":678314,"byte_end":678377,"line_start":28,"line_end":28,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(dt.round_subsecs(2).nanosecond(), 150_000_000);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":678382,"byte_end":678444,"line_start":29,"line_end":29,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(dt.round_subsecs(1).nanosecond(), 200_000_000);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":678449,"byte_end":678511,"line_start":30,"line_end":30,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":678516,"byte_end":678523,"line_start":31,"line_end":31,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3053},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":679047,"byte_end":679060,"line_start":44,"line_end":44,"column_start":8,"column_end":21},"name":"trunc_subsecs","qualname":"::round::SubsecRound::trunc_subsecs","value":"fn trunc_subsecs(Self, u16) -> Self","parent":{"krate":0,"index":3051},"children":[],"decl_id":null,"docs":" Return a copy truncated to the specified number of subsecond\n digits. With 9 or more digits, self is returned unmodified.","sig":null,"attributes":[{"value":"/ Return a copy truncated to the specified number of subsecond","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":678578,"byte_end":678642,"line_start":34,"line_end":34,"column_start":5,"column_end":69}},{"value":"/ digits. With 9 or more digits, self is returned unmodified.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":678647,"byte_end":678710,"line_start":35,"line_end":35,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":678715,"byte_end":678718,"line_start":36,"line_end":36,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":678723,"byte_end":678736,"line_start":37,"line_end":37,"column_start":5,"column_end":18}},{"value":"/ ``` rust","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":678741,"byte_end":678753,"line_start":38,"line_end":38,"column_start":5,"column_end":17}},{"value":"/ # use chrono::{DateTime, SubsecRound, Timelike, TimeZone, Utc};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":678758,"byte_end":678825,"line_start":39,"line_end":39,"column_start":5,"column_end":72}},{"value":"/ let dt = Utc.ymd(2018, 1, 11).and_hms_milli(12, 0, 0, 154);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":678830,"byte_end":678893,"line_start":40,"line_end":40,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(dt.trunc_subsecs(2).nanosecond(), 150_000_000);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":678898,"byte_end":678960,"line_start":41,"line_end":41,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(dt.trunc_subsecs(1).nanosecond(), 100_000_000);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":678965,"byte_end":679027,"line_start":42,"line_end":42,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":679032,"byte_end":679039,"line_start":43,"line_end":43,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3056},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":679206,"byte_end":679219,"line_start":51,"line_end":51,"column_start":8,"column_end":21},"name":"round_subsecs","qualname":"<T as round::SubsecRound>::round_subsecs","value":"fn round_subsecs(Self, u16) -> T","parent":{"krate":0,"index":3051},"children":[],"decl_id":{"krate":0,"index":3052},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3057},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":679687,"byte_end":679700,"line_start":66,"line_end":66,"column_start":8,"column_end":21},"name":"trunc_subsecs","qualname":"<T as round::SubsecRound>::trunc_subsecs","value":"fn trunc_subsecs(Self, u16) -> T","parent":{"krate":0,"index":3051},"children":[],"decl_id":{"krate":0,"index":3053},"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":3059},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":680799,"byte_end":680812,"line_start":101,"line_end":101,"column_start":11,"column_end":24},"name":"DurationRound","qualname":"::round::DurationRound","value":"DurationRound: Sized","parent":null,"children":[{"krate":0,"index":3060},{"krate":0,"index":3061},{"krate":0,"index":3062}],"decl_id":null,"docs":" Extension trait for rounding or truncating a DateTime by a Duration.","sig":null,"attributes":[{"value":"/ Extension trait for rounding or truncating a DateTime by a Duration.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":680386,"byte_end":680458,"line_start":94,"line_end":94,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":680459,"byte_end":680462,"line_start":95,"line_end":95,"column_start":1,"column_end":4}},{"value":"/ # Limitations","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":680463,"byte_end":680480,"line_start":96,"line_end":96,"column_start":1,"column_end":18}},{"value":"/ Both rounding and truncating are done via [`Duration::num_nanoseconds`] and","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":680481,"byte_end":680560,"line_start":97,"line_end":97,"column_start":1,"column_end":80}},{"value":"/ [`DateTime::timestamp_nanos`]. This means that they will fail if either the","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":680561,"byte_end":680640,"line_start":98,"line_end":98,"column_start":1,"column_end":80}},{"value":"/ `Duration` or the `DateTime` are too big to represented as nanoseconds. They","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":680641,"byte_end":680721,"line_start":99,"line_end":99,"column_start":1,"column_end":81}},{"value":"/ will also fail if the `Duration` is bigger than the timestamp.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":680722,"byte_end":680788,"line_start":100,"line_end":100,"column_start":1,"column_end":67}}]},{"kind":"Type","id":{"krate":0,"index":3060},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":680925,"byte_end":680928,"line_start":104,"line_end":104,"column_start":10,"column_end":13},"name":"Err","qualname":"::round::DurationRound::Err","value":"type Err: std::error::Error;","parent":{"krate":0,"index":3059},"children":[],"decl_id":null,"docs":" Error that can occur in rounding or truncating\n","sig":null,"attributes":[{"value":"/ Error that can occur in rounding or truncating","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":680826,"byte_end":680876,"line_start":102,"line_end":102,"column_start":5,"column_end":55}},{"value":"cfg(any(feature = \"std\", test))","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":680881,"byte_end":680915,"line_start":103,"line_end":103,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":3061},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":681631,"byte_end":681645,"line_start":125,"line_end":125,"column_start":8,"column_end":22},"name":"duration_round","qualname":"::round::DurationRound::duration_round","value":"fn duration_round(Self, Duration) -> Result<Self, Self::Err>","parent":{"krate":0,"index":3059},"children":[],"decl_id":null,"docs":" Return a copy rounded by Duration.","sig":null,"attributes":[{"value":"/ Return a copy rounded by Duration.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":681095,"byte_end":681133,"line_start":110,"line_end":110,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":681138,"byte_end":681141,"line_start":111,"line_end":111,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":681146,"byte_end":681159,"line_start":112,"line_end":112,"column_start":5,"column_end":18}},{"value":"/ ``` rust","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":681164,"byte_end":681176,"line_start":113,"line_end":113,"column_start":5,"column_end":17}},{"value":"/ # use chrono::{DateTime, DurationRound, Duration, TimeZone, Utc};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":681181,"byte_end":681250,"line_start":114,"line_end":114,"column_start":5,"column_end":74}},{"value":"/ let dt = Utc.ymd(2018, 1, 11).and_hms_milli(12, 0, 0, 154);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":681255,"byte_end":681318,"line_start":115,"line_end":115,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":681323,"byte_end":681338,"line_start":116,"line_end":116,"column_start":5,"column_end":20}},{"value":"/     dt.duration_round(Duration::milliseconds(10)).unwrap().to_string(),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":681343,"byte_end":681418,"line_start":117,"line_end":117,"column_start":5,"column_end":80}},{"value":"/     \"2018-01-11 12:00:00.150 UTC\"","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":681423,"byte_end":681460,"line_start":118,"line_end":118,"column_start":5,"column_end":42}},{"value":"/ );","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":681465,"byte_end":681471,"line_start":119,"line_end":119,"column_start":5,"column_end":11}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":681476,"byte_end":681491,"line_start":120,"line_end":120,"column_start":5,"column_end":20}},{"value":"/     dt.duration_round(Duration::days(1)).unwrap().to_string(),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":681496,"byte_end":681562,"line_start":121,"line_end":121,"column_start":5,"column_end":71}},{"value":"/     \"2018-01-12 00:00:00 UTC\"","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":681567,"byte_end":681600,"line_start":122,"line_end":122,"column_start":5,"column_end":38}},{"value":"/ );","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":681605,"byte_end":681611,"line_start":123,"line_end":123,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":681616,"byte_end":681623,"line_start":124,"line_end":124,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3062},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":682243,"byte_end":682257,"line_start":142,"line_end":142,"column_start":8,"column_end":22},"name":"duration_trunc","qualname":"::round::DurationRound::duration_trunc","value":"fn duration_trunc(Self, Duration) -> Result<Self, Self::Err>","parent":{"krate":0,"index":3059},"children":[],"decl_id":null,"docs":" Return a copy truncated by Duration.","sig":null,"attributes":[{"value":"/ Return a copy truncated by Duration.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":681705,"byte_end":681745,"line_start":127,"line_end":127,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":681750,"byte_end":681753,"line_start":128,"line_end":128,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":681758,"byte_end":681771,"line_start":129,"line_end":129,"column_start":5,"column_end":18}},{"value":"/ ``` rust","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":681776,"byte_end":681788,"line_start":130,"line_end":130,"column_start":5,"column_end":17}},{"value":"/ # use chrono::{DateTime, DurationRound, Duration, TimeZone, Utc};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":681793,"byte_end":681862,"line_start":131,"line_end":131,"column_start":5,"column_end":74}},{"value":"/ let dt = Utc.ymd(2018, 1, 11).and_hms_milli(12, 0, 0, 154);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":681867,"byte_end":681930,"line_start":132,"line_end":132,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":681935,"byte_end":681950,"line_start":133,"line_end":133,"column_start":5,"column_end":20}},{"value":"/     dt.duration_trunc(Duration::milliseconds(10)).unwrap().to_string(),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":681955,"byte_end":682030,"line_start":134,"line_end":134,"column_start":5,"column_end":80}},{"value":"/     \"2018-01-11 12:00:00.150 UTC\"","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":682035,"byte_end":682072,"line_start":135,"line_end":135,"column_start":5,"column_end":42}},{"value":"/ );","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":682077,"byte_end":682083,"line_start":136,"line_end":136,"column_start":5,"column_end":11}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":682088,"byte_end":682103,"line_start":137,"line_end":137,"column_start":5,"column_end":20}},{"value":"/     dt.duration_trunc(Duration::days(1)).unwrap().to_string(),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":682108,"byte_end":682174,"line_start":138,"line_end":138,"column_start":5,"column_end":71}},{"value":"/     \"2018-01-11 00:00:00 UTC\"","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":682179,"byte_end":682212,"line_start":139,"line_end":139,"column_start":5,"column_end":38}},{"value":"/ );","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":682217,"byte_end":682223,"line_start":140,"line_end":140,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":682228,"byte_end":682235,"line_start":141,"line_end":141,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3067},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":682551,"byte_end":682565,"line_start":151,"line_end":151,"column_start":8,"column_end":22},"name":"duration_round","qualname":"<DateTime<Tz> as round::DurationRound>::duration_round","value":"fn duration_round(Self, Duration) -> Result<Self, Self::Err>","parent":{"krate":0,"index":3059},"children":[],"decl_id":{"krate":0,"index":3061},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3068},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":682694,"byte_end":682708,"line_start":155,"line_end":155,"column_start":8,"column_end":22},"name":"duration_trunc","qualname":"<DateTime<Tz> as round::DurationRound>::duration_trunc","value":"fn duration_trunc(Self, Duration) -> Result<Self, Self::Err>","parent":{"krate":0,"index":3059},"children":[],"decl_id":{"krate":0,"index":3062},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3071},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":682909,"byte_end":682923,"line_start":163,"line_end":163,"column_start":8,"column_end":22},"name":"duration_round","qualname":"<NaiveDateTime as round::DurationRound>::duration_round","value":"fn duration_round(Self, Duration) -> Result<Self, Self::Err>","parent":{"krate":0,"index":3059},"children":[],"decl_id":{"krate":0,"index":3061},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3072},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":683038,"byte_end":683052,"line_start":167,"line_end":167,"column_start":8,"column_end":22},"name":"duration_trunc","qualname":"<NaiveDateTime as round::DurationRound>::duration_trunc","value":"fn duration_trunc(Self, Duration) -> Result<Self, Self::Err>","parent":{"krate":0,"index":3059},"children":[],"decl_id":{"krate":0,"index":3062},"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3882},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":685860,"byte_end":685884,"line_start":254,"line_end":254,"column_start":5,"column_end":29},"name":"DurationExceedsTimestamp","qualname":"::round::RoundingError::DurationExceedsTimestamp","value":"RoundingError::DurationExceedsTimestamp","parent":{"krate":0,"index":3881},"children":[],"decl_id":null,"docs":" Error when the Duration exceeds the Duration from or until the Unix epoch.","sig":null,"attributes":[{"value":"/ Error when the Duration exceeds the Duration from or until the Unix epoch.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":685445,"byte_end":685523,"line_start":243,"line_end":243,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":685528,"byte_end":685531,"line_start":244,"line_end":244,"column_start":5,"column_end":8}},{"value":"/ ``` rust","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":685536,"byte_end":685548,"line_start":245,"line_end":245,"column_start":5,"column_end":17}},{"value":"/ # use chrono::{DateTime, DurationRound, Duration, RoundingError, TimeZone, Utc};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":685553,"byte_end":685637,"line_start":246,"line_end":246,"column_start":5,"column_end":89}},{"value":"/ let dt = Utc.ymd(1970, 12, 12).and_hms(0, 0, 0);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":685642,"byte_end":685694,"line_start":247,"line_end":247,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":685699,"byte_end":685702,"line_start":248,"line_end":248,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":685707,"byte_end":685722,"line_start":249,"line_end":249,"column_start":5,"column_end":20}},{"value":"/     dt.duration_round(Duration::days(365)),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":685727,"byte_end":685774,"line_start":250,"line_end":250,"column_start":5,"column_end":52}},{"value":"/     Err(RoundingError::DurationExceedsTimestamp),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":685779,"byte_end":685832,"line_start":251,"line_end":251,"column_start":5,"column_end":58}},{"value":"/ );","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":685837,"byte_end":685843,"line_start":252,"line_end":252,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":685848,"byte_end":685855,"line_start":253,"line_end":253,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3884},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":686311,"byte_end":686331,"line_start":267,"line_end":267,"column_start":5,"column_end":25},"name":"DurationExceedsLimit","qualname":"::round::RoundingError::DurationExceedsLimit","value":"RoundingError::DurationExceedsLimit","parent":{"krate":0,"index":3881},"children":[],"decl_id":null,"docs":" Error when `Duration.num_nanoseconds` exceeds the limit.","sig":null,"attributes":[{"value":"/ Error when `Duration.num_nanoseconds` exceeds the limit.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":685891,"byte_end":685951,"line_start":256,"line_end":256,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":685956,"byte_end":685959,"line_start":257,"line_end":257,"column_start":5,"column_end":8}},{"value":"/ ``` rust","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":685964,"byte_end":685976,"line_start":258,"line_end":258,"column_start":5,"column_end":17}},{"value":"/ # use chrono::{DateTime, DurationRound, Duration, RoundingError, TimeZone, Utc};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":685981,"byte_end":686065,"line_start":259,"line_end":259,"column_start":5,"column_end":89}},{"value":"/ let dt = Utc.ymd(2260, 12, 31).and_hms_nano(23, 59, 59, 1_75_500_000);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":686070,"byte_end":686144,"line_start":260,"line_end":260,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":686149,"byte_end":686152,"line_start":261,"line_end":261,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":686157,"byte_end":686172,"line_start":262,"line_end":262,"column_start":5,"column_end":20}},{"value":"/     dt.duration_round(Duration::days(300 * 365)),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":686177,"byte_end":686230,"line_start":263,"line_end":263,"column_start":5,"column_end":58}},{"value":"/     Err(RoundingError::DurationExceedsLimit)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":686235,"byte_end":686283,"line_start":264,"line_end":264,"column_start":5,"column_end":53}},{"value":"/ );","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":686288,"byte_end":686294,"line_start":265,"line_end":265,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":686299,"byte_end":686306,"line_start":266,"line_end":266,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3886},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":686696,"byte_end":686717,"line_start":277,"line_end":277,"column_start":5,"column_end":26},"name":"TimestampExceedsLimit","qualname":"::round::RoundingError::TimestampExceedsLimit","value":"RoundingError::TimestampExceedsLimit","parent":{"krate":0,"index":3881},"children":[],"decl_id":null,"docs":" Error when `DateTime.timestamp_nanos` exceeds the limit.","sig":null,"attributes":[{"value":"/ Error when `DateTime.timestamp_nanos` exceeds the limit.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":686338,"byte_end":686398,"line_start":269,"line_end":269,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":686403,"byte_end":686406,"line_start":270,"line_end":270,"column_start":5,"column_end":8}},{"value":"/ ``` rust","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":686411,"byte_end":686423,"line_start":271,"line_end":271,"column_start":5,"column_end":17}},{"value":"/ # use chrono::{DateTime, DurationRound, Duration, RoundingError, TimeZone, Utc};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":686428,"byte_end":686512,"line_start":272,"line_end":272,"column_start":5,"column_end":89}},{"value":"/ let dt = Utc.ymd(2300, 12, 12).and_hms(0, 0, 0);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":686517,"byte_end":686569,"line_start":273,"line_end":273,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":686574,"byte_end":686577,"line_start":274,"line_end":274,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(dt.duration_round(Duration::days(1)), Err(RoundingError::TimestampExceedsLimit),);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":686582,"byte_end":686679,"line_start":275,"line_end":275,"column_start":5,"column_end":102}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":686684,"byte_end":686691,"line_start":276,"line_end":276,"column_start":5,"column_end":12}}]},{"kind":"Enum","id":{"krate":0,"index":3881},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":685425,"byte_end":685438,"line_start":242,"line_end":242,"column_start":10,"column_end":23},"name":"RoundingError","qualname":"::round::RoundingError","value":"enum RoundingError {\n    DurationExceedsTimestamp,\n    DurationExceedsLimit,\n    TimestampExceedsLimit,\n}","parent":null,"children":[{"krate":0,"index":3882},{"krate":0,"index":3884},{"krate":0,"index":3886}],"decl_id":null,"docs":" An error from rounding by `Duration`","sig":null,"attributes":[{"value":"/ An error from rounding by `Duration`","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":685299,"byte_end":685339,"line_start":238,"line_end":238,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":685340,"byte_end":685343,"line_start":239,"line_end":239,"column_start":1,"column_end":4}},{"value":"/ See: [`DurationRound`]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":685344,"byte_end":685370,"line_start":240,"line_end":240,"column_start":1,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":3078},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":686767,"byte_end":686770,"line_start":281,"line_end":281,"column_start":8,"column_end":11},"name":"fmt","qualname":"<RoundingError as std::fmt::Display>::fmt","value":"fn fmt(&Self, &mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":9914},"children":[],"decl_id":{"krate":2,"index":9915},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3080},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":687384,"byte_end":687395,"line_start":299,"line_end":299,"column_start":8,"column_end":19},"name":"description","qualname":"<RoundingError as std::error::Error>::description","value":"fn description(&Self) -> &str","parent":{"krate":1,"index":2555},"children":[],"decl_id":{"krate":1,"index":2559},"docs":"","sig":null,"attributes":[{"value":"allow(deprecated)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":687356,"byte_end":687376,"line_start":298,"line_end":298,"column_start":5,"column_end":25}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3900},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":699772,"byte_end":699775,"line_start":16,"line_end":16,"column_start":5,"column_end":8},"name":"Mon","qualname":"::weekday::Weekday::Mon","value":"Weekday::Mon","parent":{"krate":0,"index":3899},"children":[],"decl_id":null,"docs":" Monday.\n","sig":null,"attributes":[{"value":"/ Monday.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":699756,"byte_end":699767,"line_start":15,"line_end":15,"column_start":5,"column_end":16}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3903},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":699802,"byte_end":699805,"line_start":18,"line_end":18,"column_start":5,"column_end":8},"name":"Tue","qualname":"::weekday::Weekday::Tue","value":"Weekday::Tue","parent":{"krate":0,"index":3899},"children":[],"decl_id":null,"docs":" Tuesday.\n","sig":null,"attributes":[{"value":"/ Tuesday.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":699785,"byte_end":699797,"line_start":17,"line_end":17,"column_start":5,"column_end":17}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3906},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":699834,"byte_end":699837,"line_start":20,"line_end":20,"column_start":5,"column_end":8},"name":"Wed","qualname":"::weekday::Weekday::Wed","value":"Weekday::Wed","parent":{"krate":0,"index":3899},"children":[],"decl_id":null,"docs":" Wednesday.\n","sig":null,"attributes":[{"value":"/ Wednesday.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":699815,"byte_end":699829,"line_start":19,"line_end":19,"column_start":5,"column_end":19}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3909},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":699865,"byte_end":699868,"line_start":22,"line_end":22,"column_start":5,"column_end":8},"name":"Thu","qualname":"::weekday::Weekday::Thu","value":"Weekday::Thu","parent":{"krate":0,"index":3899},"children":[],"decl_id":null,"docs":" Thursday.\n","sig":null,"attributes":[{"value":"/ Thursday.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":699847,"byte_end":699860,"line_start":21,"line_end":21,"column_start":5,"column_end":18}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3912},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":699894,"byte_end":699897,"line_start":24,"line_end":24,"column_start":5,"column_end":8},"name":"Fri","qualname":"::weekday::Weekday::Fri","value":"Weekday::Fri","parent":{"krate":0,"index":3899},"children":[],"decl_id":null,"docs":" Friday.\n","sig":null,"attributes":[{"value":"/ Friday.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":699878,"byte_end":699889,"line_start":23,"line_end":23,"column_start":5,"column_end":16}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3915},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":699925,"byte_end":699928,"line_start":26,"line_end":26,"column_start":5,"column_end":8},"name":"Sat","qualname":"::weekday::Weekday::Sat","value":"Weekday::Sat","parent":{"krate":0,"index":3899},"children":[],"decl_id":null,"docs":" Saturday.\n","sig":null,"attributes":[{"value":"/ Saturday.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":699907,"byte_end":699920,"line_start":25,"line_end":25,"column_start":5,"column_end":18}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3918},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":699954,"byte_end":699957,"line_start":28,"line_end":28,"column_start":5,"column_end":8},"name":"Sun","qualname":"::weekday::Weekday::Sun","value":"Weekday::Sun","parent":{"krate":0,"index":3899},"children":[],"decl_id":null,"docs":" Sunday.\n","sig":null,"attributes":[{"value":"/ Sunday.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":699938,"byte_end":699949,"line_start":27,"line_end":27,"column_start":5,"column_end":16}}]},{"kind":"Enum","id":{"krate":0,"index":3899},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":699742,"byte_end":699749,"line_start":14,"line_end":14,"column_start":10,"column_end":17},"name":"Weekday","qualname":"::weekday::Weekday","value":"enum Weekday { Mon = , Tue = , Wed = , Thu = , Fri = , Sat = , Sun = , }","parent":null,"children":[{"krate":0,"index":3900},{"krate":0,"index":3903},{"krate":0,"index":3906},{"krate":0,"index":3909},{"krate":0,"index":3912},{"krate":0,"index":3915},{"krate":0,"index":3918}],"decl_id":null,"docs":" The day of week.","sig":null,"attributes":[{"value":"/ The day of week.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":699276,"byte_end":699296,"line_start":6,"line_end":6,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":699297,"byte_end":699300,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ The order of the days of week depends on the context.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":699301,"byte_end":699358,"line_start":8,"line_end":8,"column_start":1,"column_end":58}},{"value":"/ (This is why this type does *not* implement `PartialOrd` or `Ord` traits.)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":699359,"byte_end":699437,"line_start":9,"line_end":9,"column_start":1,"column_end":79}},{"value":"/ One should prefer `*_from_monday` or `*_from_sunday` methods to get the correct result.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":699438,"byte_end":699529,"line_start":10,"line_end":10,"column_start":1,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":3096},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":700276,"byte_end":700280,"line_start":38,"line_end":38,"column_start":12,"column_end":16},"name":"succ","qualname":"<Weekday>::succ","value":"fn succ(&Self) -> Weekday","parent":null,"children":[],"decl_id":null,"docs":" The next day in the week.","sig":null,"attributes":[{"value":"/ The next day in the week.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":699985,"byte_end":700014,"line_start":32,"line_end":32,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":700019,"byte_end":700022,"line_start":33,"line_end":33,"column_start":5,"column_end":8}},{"value":"/ `w`:        | `Mon` | `Tue` | `Wed` | `Thu` | `Fri` | `Sat` | `Sun`","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":700027,"byte_end":700098,"line_start":34,"line_end":34,"column_start":5,"column_end":76}},{"value":"/ ----------- | ----- | ----- | ----- | ----- | ----- | ----- | -----","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":700103,"byte_end":700174,"line_start":35,"line_end":35,"column_start":5,"column_end":76}},{"value":"/ `w.succ()`: | `Tue` | `Wed` | `Thu` | `Fri` | `Sat` | `Sun` | `Mon`","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":700179,"byte_end":700250,"line_start":36,"line_end":36,"column_start":5,"column_end":76}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":700255,"byte_end":700264,"line_start":37,"line_end":37,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3097},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":700933,"byte_end":700937,"line_start":56,"line_end":56,"column_start":12,"column_end":16},"name":"pred","qualname":"<Weekday>::pred","value":"fn pred(&Self) -> Weekday","parent":null,"children":[],"decl_id":null,"docs":" The previous day in the week.","sig":null,"attributes":[{"value":"/ The previous day in the week.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":700638,"byte_end":700671,"line_start":50,"line_end":50,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":700676,"byte_end":700679,"line_start":51,"line_end":51,"column_start":5,"column_end":8}},{"value":"/ `w`:        | `Mon` | `Tue` | `Wed` | `Thu` | `Fri` | `Sat` | `Sun`","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":700684,"byte_end":700755,"line_start":52,"line_end":52,"column_start":5,"column_end":76}},{"value":"/ ----------- | ----- | ----- | ----- | ----- | ----- | ----- | -----","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":700760,"byte_end":700831,"line_start":53,"line_end":53,"column_start":5,"column_end":76}},{"value":"/ `w.pred()`: | `Sun` | `Mon` | `Tue` | `Wed` | `Thu` | `Fri` | `Sat`","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":700836,"byte_end":700907,"line_start":54,"line_end":54,"column_start":5,"column_end":76}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":700912,"byte_end":700921,"line_start":55,"line_end":55,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3098},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":701679,"byte_end":701697,"line_start":74,"line_end":74,"column_start":12,"column_end":30},"name":"number_from_monday","qualname":"<Weekday>::number_from_monday","value":"fn number_from_monday(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns a day-of-week number starting from Monday = 1. (ISO 8601 weekday number)","sig":null,"attributes":[{"value":"/ Returns a day-of-week number starting from Monday = 1. (ISO 8601 weekday number)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":701295,"byte_end":701379,"line_start":68,"line_end":68,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":701384,"byte_end":701387,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ `w`:                      | `Mon` | `Tue` | `Wed` | `Thu` | `Fri` | `Sat` | `Sun`","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":701392,"byte_end":701477,"line_start":70,"line_end":70,"column_start":5,"column_end":90}},{"value":"/ ------------------------- | ----- | ----- | ----- | ----- | ----- | ----- | -----","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":701482,"byte_end":701567,"line_start":71,"line_end":71,"column_start":5,"column_end":90}},{"value":"/ `w.number_from_monday()`: | 1     | 2     | 3     | 4     | 5     | 6     | 7","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":701572,"byte_end":701653,"line_start":72,"line_end":72,"column_start":5,"column_end":86}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":701658,"byte_end":701667,"line_start":73,"line_end":73,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3099},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":702332,"byte_end":702350,"line_start":92,"line_end":92,"column_start":12,"column_end":30},"name":"number_from_sunday","qualname":"<Weekday>::number_from_sunday","value":"fn number_from_sunday(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns a day-of-week number starting from Sunday = 1.","sig":null,"attributes":[{"value":"/ Returns a day-of-week number starting from Sunday = 1.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":701974,"byte_end":702032,"line_start":86,"line_end":86,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":702037,"byte_end":702040,"line_start":87,"line_end":87,"column_start":5,"column_end":8}},{"value":"/ `w`:                      | `Mon` | `Tue` | `Wed` | `Thu` | `Fri` | `Sat` | `Sun`","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":702045,"byte_end":702130,"line_start":88,"line_end":88,"column_start":5,"column_end":90}},{"value":"/ ------------------------- | ----- | ----- | ----- | ----- | ----- | ----- | -----","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":702135,"byte_end":702220,"line_start":89,"line_end":89,"column_start":5,"column_end":90}},{"value":"/ `w.number_from_sunday()`: | 2     | 3     | 4     | 5     | 6     | 7     | 1","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":702225,"byte_end":702306,"line_start":90,"line_end":90,"column_start":5,"column_end":86}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":702311,"byte_end":702320,"line_start":91,"line_end":91,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3100},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":702991,"byte_end":703011,"line_start":110,"line_end":110,"column_start":12,"column_end":32},"name":"num_days_from_monday","qualname":"<Weekday>::num_days_from_monday","value":"fn num_days_from_monday(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns a day-of-week number starting from Monday = 0.","sig":null,"attributes":[{"value":"/ Returns a day-of-week number starting from Monday = 0.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":702627,"byte_end":702685,"line_start":104,"line_end":104,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":702690,"byte_end":702693,"line_start":105,"line_end":105,"column_start":5,"column_end":8}},{"value":"/ `w`:                        | `Mon` | `Tue` | `Wed` | `Thu` | `Fri` | `Sat` | `Sun`","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":702698,"byte_end":702785,"line_start":106,"line_end":106,"column_start":5,"column_end":92}},{"value":"/ --------------------------- | ----- | ----- | ----- | ----- | ----- | ----- | -----","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":702790,"byte_end":702877,"line_start":107,"line_end":107,"column_start":5,"column_end":92}},{"value":"/ `w.num_days_from_monday()`: | 0     | 1     | 2     | 3     | 4     | 5     | 6","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":702882,"byte_end":702965,"line_start":108,"line_end":108,"column_start":5,"column_end":88}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":702970,"byte_end":702979,"line_start":109,"line_end":109,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3101},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":703652,"byte_end":703672,"line_start":128,"line_end":128,"column_start":12,"column_end":32},"name":"num_days_from_sunday","qualname":"<Weekday>::num_days_from_sunday","value":"fn num_days_from_sunday(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns a day-of-week number starting from Sunday = 0.","sig":null,"attributes":[{"value":"/ Returns a day-of-week number starting from Sunday = 0.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":703288,"byte_end":703346,"line_start":122,"line_end":122,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":703351,"byte_end":703354,"line_start":123,"line_end":123,"column_start":5,"column_end":8}},{"value":"/ `w`:                        | `Mon` | `Tue` | `Wed` | `Thu` | `Fri` | `Sat` | `Sun`","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":703359,"byte_end":703446,"line_start":124,"line_end":124,"column_start":5,"column_end":92}},{"value":"/ --------------------------- | ----- | ----- | ----- | ----- | ----- | ----- | -----","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":703451,"byte_end":703538,"line_start":125,"line_end":125,"column_start":5,"column_end":92}},{"value":"/ `w.num_days_from_sunday()`: | 1     | 2     | 3     | 4     | 5     | 6     | 0","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":703543,"byte_end":703626,"line_start":126,"line_end":126,"column_start":5,"column_end":88}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":703631,"byte_end":703640,"line_start":127,"line_end":127,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3103},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":703986,"byte_end":703989,"line_start":142,"line_end":142,"column_start":8,"column_end":11},"name":"fmt","qualname":"<Weekday as std::fmt::Display>::fmt","value":"fn fmt(&Self, &mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":9914},"children":[],"decl_id":{"krate":2,"index":9915},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3105},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":704655,"byte_end":704663,"line_start":160,"line_end":160,"column_start":8,"column_end":16},"name":"from_i64","qualname":"<Weekday as num_traits::FromPrimitive>::from_i64","value":"fn from_i64(i64) -> Option<Weekday>","parent":{"krate":19,"index":333},"children":[],"decl_id":{"krate":19,"index":338},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":704638,"byte_end":704647,"line_start":159,"line_end":159,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3106},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":705031,"byte_end":705039,"line_start":174,"line_end":174,"column_start":8,"column_end":16},"name":"from_u64","qualname":"<Weekday as num_traits::FromPrimitive>::from_u64","value":"fn from_u64(u64) -> Option<Weekday>","parent":{"krate":19,"index":333},"children":[],"decl_id":{"krate":19,"index":344},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":705014,"byte_end":705023,"line_start":173,"line_end":173,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":3935},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":705499,"byte_end":705516,"line_start":190,"line_end":190,"column_start":12,"column_end":29},"name":"ParseWeekdayError","qualname":"::weekday::ParseWeekdayError","value":"ParseWeekdayError {  }","parent":null,"children":[{"krate":0,"index":3936}],"decl_id":null,"docs":" An error resulting from reading `Weekday` value with `FromStr`.\n","sig":null,"attributes":[{"value":"/ An error resulting from reading `Weekday` value with `FromStr`.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":705388,"byte_end":705455,"line_start":188,"line_end":188,"column_start":1,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":3109},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":705671,"byte_end":705674,"line_start":198,"line_end":198,"column_start":8,"column_end":11},"name":"fmt","qualname":"<ParseWeekdayError as std::fmt::Display>::fmt","value":"fn fmt(&Self, &mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":9914},"children":[],"decl_id":{"krate":2,"index":9915},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3111},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":705827,"byte_end":705830,"line_start":204,"line_end":204,"column_start":8,"column_end":11},"name":"fmt","qualname":"<ParseWeekdayError as std::fmt::Debug>::fmt","value":"fn fmt(&Self, &mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":9907},"children":[],"decl_id":{"krate":2,"index":9908},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3127},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":706197,"byte_end":706206,"line_start":218,"line_end":218,"column_start":12,"column_end":21},"name":"serialize","qualname":"<Weekday as serde::Serialize>::serialize","value":"fn serialize<S>(&Self, S) -> Result<S::Ok, S::Error> where S: ser::Serializer","parent":{"krate":16,"index":2117},"children":[],"decl_id":{"krate":16,"index":2118},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3140},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":706885,"byte_end":706896,"line_start":244,"line_end":244,"column_start":12,"column_end":23},"name":"deserialize","qualname":"<Weekday as serde::Deserialize>::deserialize","value":"fn deserialize<D>(D) -> Result<Self, D::Error> where D: de::Deserializer","parent":{"krate":16,"index":1577},"children":[],"decl_id":{"krate":16,"index":1579},"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3947},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":709994,"byte_end":710001,"line_start":35,"line_end":35,"column_start":5,"column_end":12},"name":"January","qualname":"::month::Month::January","value":"Month::January","parent":{"krate":0,"index":3946},"children":[],"decl_id":null,"docs":" January\n","sig":null,"attributes":[{"value":"/ January","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":709978,"byte_end":709989,"line_start":34,"line_end":34,"column_start":5,"column_end":16}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3950},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":710028,"byte_end":710036,"line_start":37,"line_end":37,"column_start":5,"column_end":13},"name":"February","qualname":"::month::Month::February","value":"Month::February","parent":{"krate":0,"index":3946},"children":[],"decl_id":null,"docs":" February\n","sig":null,"attributes":[{"value":"/ February","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":710011,"byte_end":710023,"line_start":36,"line_end":36,"column_start":5,"column_end":17}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3953},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":710060,"byte_end":710065,"line_start":39,"line_end":39,"column_start":5,"column_end":10},"name":"March","qualname":"::month::Month::March","value":"Month::March","parent":{"krate":0,"index":3946},"children":[],"decl_id":null,"docs":" March\n","sig":null,"attributes":[{"value":"/ March","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":710046,"byte_end":710055,"line_start":38,"line_end":38,"column_start":5,"column_end":14}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3956},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":710089,"byte_end":710094,"line_start":41,"line_end":41,"column_start":5,"column_end":10},"name":"April","qualname":"::month::Month::April","value":"Month::April","parent":{"krate":0,"index":3946},"children":[],"decl_id":null,"docs":" April\n","sig":null,"attributes":[{"value":"/ April","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":710075,"byte_end":710084,"line_start":40,"line_end":40,"column_start":5,"column_end":14}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3959},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":710116,"byte_end":710119,"line_start":43,"line_end":43,"column_start":5,"column_end":8},"name":"May","qualname":"::month::Month::May","value":"Month::May","parent":{"krate":0,"index":3946},"children":[],"decl_id":null,"docs":" May\n","sig":null,"attributes":[{"value":"/ May","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":710104,"byte_end":710111,"line_start":42,"line_end":42,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3962},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":710142,"byte_end":710146,"line_start":45,"line_end":45,"column_start":5,"column_end":9},"name":"June","qualname":"::month::Month::June","value":"Month::June","parent":{"krate":0,"index":3946},"children":[],"decl_id":null,"docs":" June\n","sig":null,"attributes":[{"value":"/ June","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":710129,"byte_end":710137,"line_start":44,"line_end":44,"column_start":5,"column_end":13}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3965},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":710169,"byte_end":710173,"line_start":47,"line_end":47,"column_start":5,"column_end":9},"name":"July","qualname":"::month::Month::July","value":"Month::July","parent":{"krate":0,"index":3946},"children":[],"decl_id":null,"docs":" July\n","sig":null,"attributes":[{"value":"/ July","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":710156,"byte_end":710164,"line_start":46,"line_end":46,"column_start":5,"column_end":13}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3968},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":710198,"byte_end":710204,"line_start":49,"line_end":49,"column_start":5,"column_end":11},"name":"August","qualname":"::month::Month::August","value":"Month::August","parent":{"krate":0,"index":3946},"children":[],"decl_id":null,"docs":" August\n","sig":null,"attributes":[{"value":"/ August","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":710183,"byte_end":710193,"line_start":48,"line_end":48,"column_start":5,"column_end":15}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3971},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":710232,"byte_end":710241,"line_start":51,"line_end":51,"column_start":5,"column_end":14},"name":"September","qualname":"::month::Month::September","value":"Month::September","parent":{"krate":0,"index":3946},"children":[],"decl_id":null,"docs":" September\n","sig":null,"attributes":[{"value":"/ September","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":710214,"byte_end":710227,"line_start":50,"line_end":50,"column_start":5,"column_end":18}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3974},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":710267,"byte_end":710274,"line_start":53,"line_end":53,"column_start":5,"column_end":12},"name":"October","qualname":"::month::Month::October","value":"Month::October","parent":{"krate":0,"index":3946},"children":[],"decl_id":null,"docs":" October\n","sig":null,"attributes":[{"value":"/ October","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":710251,"byte_end":710262,"line_start":52,"line_end":52,"column_start":5,"column_end":16}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3977},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":710301,"byte_end":710309,"line_start":55,"line_end":55,"column_start":5,"column_end":13},"name":"November","qualname":"::month::Month::November","value":"Month::November","parent":{"krate":0,"index":3946},"children":[],"decl_id":null,"docs":" November\n","sig":null,"attributes":[{"value":"/ November","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":710284,"byte_end":710296,"line_start":54,"line_end":54,"column_start":5,"column_end":17}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3980},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":710337,"byte_end":710345,"line_start":57,"line_end":57,"column_start":5,"column_end":13},"name":"December","qualname":"::month::Month::December","value":"Month::December","parent":{"krate":0,"index":3946},"children":[],"decl_id":null,"docs":" December\n","sig":null,"attributes":[{"value":"/ December","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":710320,"byte_end":710332,"line_start":56,"line_end":56,"column_start":5,"column_end":17}}]},{"kind":"Enum","id":{"krate":0,"index":3946},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":709966,"byte_end":709971,"line_start":33,"line_end":33,"column_start":10,"column_end":15},"name":"Month","qualname":"::month::Month","value":"enum Month {\n    January = ,\n    February = ,\n    March = ,\n    April = ,\n    May = ,\n    June = ,\n    July = ,\n    August = ,\n    September = ,\n    October = ,\n    November = ,\n    December = ,\n}","parent":null,"children":[{"krate":0,"index":3947},{"krate":0,"index":3950},{"krate":0,"index":3953},{"krate":0,"index":3956},{"krate":0,"index":3959},{"krate":0,"index":3962},{"krate":0,"index":3965},{"krate":0,"index":3968},{"krate":0,"index":3971},{"krate":0,"index":3974},{"krate":0,"index":3977},{"krate":0,"index":3980}],"decl_id":null,"docs":" The month of the year.","sig":null,"attributes":[{"value":"/ The month of the year.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":708781,"byte_end":708807,"line_start":6,"line_end":6,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":708808,"byte_end":708811,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ This enum is just a convenience implementation.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":708812,"byte_end":708863,"line_start":8,"line_end":8,"column_start":1,"column_end":52}},{"value":"/ The month in dates created by DateLike objects does not return this enum.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":708864,"byte_end":708941,"line_start":9,"line_end":9,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":708942,"byte_end":708945,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ It is possible to convert from a date to a month independently","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":708946,"byte_end":709012,"line_start":11,"line_end":11,"column_start":1,"column_end":67}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":709013,"byte_end":709020,"line_start":12,"line_end":12,"column_start":1,"column_end":8}},{"value":"/ use num_traits::FromPrimitive;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":709021,"byte_end":709055,"line_start":13,"line_end":13,"column_start":1,"column_end":35}},{"value":"/ use chrono::prelude::*;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":709056,"byte_end":709083,"line_start":14,"line_end":14,"column_start":1,"column_end":28}},{"value":"/ let date = Utc.ymd(2019, 10, 28).and_hms(9, 10, 11);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":709084,"byte_end":709140,"line_start":15,"line_end":15,"column_start":1,"column_end":57}},{"value":"/ // `2019-10-28T09:10:11Z`","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":709141,"byte_end":709170,"line_start":16,"line_end":16,"column_start":1,"column_end":30}},{"value":"/ let month = Month::from_u32(date.month());","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":709171,"byte_end":709217,"line_start":17,"line_end":17,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(month, Some(Month::October))","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":709218,"byte_end":709261,"line_start":18,"line_end":18,"column_start":1,"column_end":44}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":709262,"byte_end":709269,"line_start":19,"line_end":19,"column_start":1,"column_end":8}},{"value":"/ Or from a Month to an integer usable by dates","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":709270,"byte_end":709319,"line_start":20,"line_end":20,"column_start":1,"column_end":50}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":709320,"byte_end":709327,"line_start":21,"line_end":21,"column_start":1,"column_end":8}},{"value":"/ # use chrono::prelude::*;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":709328,"byte_end":709357,"line_start":22,"line_end":22,"column_start":1,"column_end":30}},{"value":"/ let month = Month::January;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":709358,"byte_end":709389,"line_start":23,"line_end":23,"column_start":1,"column_end":32}},{"value":"/ let dt = Utc.ymd(2019, month.number_from_month(), 28).and_hms(9, 10, 11);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":709390,"byte_end":709467,"line_start":24,"line_end":24,"column_start":1,"column_end":78}},{"value":"/ assert_eq!((dt.year(), dt.month(), dt.day()), (2019, 1, 28));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":709468,"byte_end":709533,"line_start":25,"line_end":25,"column_start":1,"column_end":66}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":709534,"byte_end":709541,"line_start":26,"line_end":26,"column_start":1,"column_end":8}},{"value":"/ Allows mapping from and to month, from 1-January to 12-December.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":709542,"byte_end":709610,"line_start":27,"line_end":27,"column_start":1,"column_end":69}},{"value":"/ Can be Serialized/Deserialized with serde","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":709611,"byte_end":709656,"line_start":28,"line_end":28,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":3154},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":710622,"byte_end":710626,"line_start":67,"line_end":67,"column_start":12,"column_end":16},"name":"succ","qualname":"<Month>::succ","value":"fn succ(&Self) -> Month","parent":null,"children":[],"decl_id":null,"docs":" The next month.","sig":null,"attributes":[{"value":"/ The next month.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":710372,"byte_end":710391,"line_start":61,"line_end":61,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":710396,"byte_end":710399,"line_start":62,"line_end":62,"column_start":5,"column_end":8}},{"value":"/ `m`:        | `January`  | `February` | `...` | `December`","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":710404,"byte_end":710466,"line_start":63,"line_end":63,"column_start":5,"column_end":67}},{"value":"/ ----------- | ---------  | ---------- | --- | ---------","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":710471,"byte_end":710530,"line_start":64,"line_end":64,"column_start":5,"column_end":64}},{"value":"/ `m.succ()`: | `February` | `March`    | `...` | `January`","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":710535,"byte_end":710596,"line_start":65,"line_end":65,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":710601,"byte_end":710610,"line_start":66,"line_end":66,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3155},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":711475,"byte_end":711479,"line_start":90,"line_end":90,"column_start":12,"column_end":16},"name":"pred","qualname":"<Month>::pred","value":"fn pred(&Self) -> Month","parent":null,"children":[],"decl_id":null,"docs":" The previous month.","sig":null,"attributes":[{"value":"/ The previous month.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":711220,"byte_end":711243,"line_start":84,"line_end":84,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":711248,"byte_end":711251,"line_start":85,"line_end":85,"column_start":5,"column_end":8}},{"value":"/ `m`:        | `January`  | `February` | `...` | `December`","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":711256,"byte_end":711318,"line_start":86,"line_end":86,"column_start":5,"column_end":67}},{"value":"/ ----------- | ---------  | ---------- | --- | ---------","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":711323,"byte_end":711382,"line_start":87,"line_end":87,"column_start":5,"column_end":64}},{"value":"/ `m.pred()`: | `December` | `January`  | `...` | `November`","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":711387,"byte_end":711449,"line_start":88,"line_end":88,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":711454,"byte_end":711463,"line_start":89,"line_end":89,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3156},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":712390,"byte_end":712407,"line_start":113,"line_end":113,"column_start":12,"column_end":29},"name":"number_from_month","qualname":"<Month>::number_from_month","value":"fn number_from_month(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns a month-of-year number starting from January = 1.","sig":null,"attributes":[{"value":"/ Returns a month-of-year number starting from January = 1.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":712073,"byte_end":712134,"line_start":107,"line_end":107,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":712139,"byte_end":712142,"line_start":108,"line_end":108,"column_start":5,"column_end":8}},{"value":"/ `m`:                     | `January` | `February` | `...` | `December`","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":712147,"byte_end":712221,"line_start":109,"line_end":109,"column_start":5,"column_end":79}},{"value":"/ -------------------------| --------- | ---------- | --- | -----","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":712226,"byte_end":712293,"line_start":110,"line_end":110,"column_start":5,"column_end":72}},{"value":"/ `m.number_from_month()`: | 1         | 2          | `...` | 12","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":712298,"byte_end":712364,"line_start":111,"line_end":111,"column_start":5,"column_end":71}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":712369,"byte_end":712378,"line_start":112,"line_end":112,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3157},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":713017,"byte_end":713021,"line_start":137,"line_end":137,"column_start":12,"column_end":16},"name":"name","qualname":"<Month>::name","value":"fn name(&Self) -> &'static str","parent":null,"children":[],"decl_id":null,"docs":" Get the name of the month","sig":null,"attributes":[{"value":"/ Get the name of the month","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":712856,"byte_end":712885,"line_start":130,"line_end":130,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":712890,"byte_end":712893,"line_start":131,"line_end":131,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":712898,"byte_end":712905,"line_start":132,"line_end":132,"column_start":5,"column_end":12}},{"value":"/ use chrono::Month;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":712910,"byte_end":712932,"line_start":133,"line_end":133,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":712937,"byte_end":712940,"line_start":134,"line_end":134,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Month::January.name(), \"January\")","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":712945,"byte_end":712993,"line_start":135,"line_end":135,"column_start":5,"column_end":53}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":712998,"byte_end":713005,"line_start":136,"line_end":136,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3159},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":714014,"byte_end":714022,"line_start":163,"line_end":163,"column_start":8,"column_end":16},"name":"from_u64","qualname":"<Month as num_traits::FromPrimitive>::from_u64","value":"fn from_u64(u64) -> Option<Month>","parent":{"krate":19,"index":333},"children":[],"decl_id":{"krate":19,"index":344},"docs":" Returns an Option<Month> from a i64, assuming a 1-index, January = 1.","sig":null,"attributes":[{"value":"/ Returns an Option<Month> from a i64, assuming a 1-index, January = 1.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":713607,"byte_end":713680,"line_start":156,"line_end":156,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":713685,"byte_end":713688,"line_start":157,"line_end":157,"column_start":5,"column_end":8}},{"value":"/ `Month::from_i64(n: i64)`: | `1`                  | `2`                   | ... | `12`","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":713693,"byte_end":713783,"line_start":158,"line_end":158,"column_start":5,"column_end":95}},{"value":"/ ---------------------------| -------------------- | --------------------- | ... | -----","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":713788,"byte_end":713879,"line_start":159,"line_end":159,"column_start":5,"column_end":96}},{"value":"/ ``:                        | Some(Month::January) | Some(Month::February) | ... | Some(Month::December)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":713884,"byte_end":713991,"line_start":160,"line_end":160,"column_start":5,"column_end":112}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":713997,"byte_end":714006,"line_start":162,"line_end":162,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3160},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":714111,"byte_end":714119,"line_start":168,"line_end":168,"column_start":8,"column_end":16},"name":"from_i64","qualname":"<Month as num_traits::FromPrimitive>::from_i64","value":"fn from_i64(i64) -> Option<Month>","parent":{"krate":19,"index":333},"children":[],"decl_id":{"krate":19,"index":338},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":714094,"byte_end":714103,"line_start":167,"line_end":167,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3161},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":714208,"byte_end":714216,"line_start":173,"line_end":173,"column_start":8,"column_end":16},"name":"from_u32","qualname":"<Month as num_traits::FromPrimitive>::from_u32","value":"fn from_u32(u32) -> Option<Month>","parent":{"krate":19,"index":333},"children":[],"decl_id":{"krate":19,"index":343},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":714191,"byte_end":714200,"line_start":172,"line_end":172,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":3997},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":714873,"byte_end":714879,"line_start":194,"line_end":194,"column_start":12,"column_end":18},"name":"Months","qualname":"::month::Months","value":"","parent":null,"children":[],"decl_id":null,"docs":" A duration in calendar months\n","sig":null,"attributes":[{"value":"/ A duration in calendar months","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":714765,"byte_end":714798,"line_start":192,"line_end":192,"column_start":1,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":3163},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":714980,"byte_end":714983,"line_start":198,"line_end":198,"column_start":12,"column_end":15},"name":"new","qualname":"<Months>::new","value":"fn new(u32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Months` from a number of months\n","sig":null,"attributes":[{"value":"/ Construct a new `Months` from a number of months","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":714916,"byte_end":714968,"line_start":197,"line_end":197,"column_start":5,"column_end":57}}]},{"kind":"Struct","id":{"krate":0,"index":4017},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":715142,"byte_end":715157,"line_start":205,"line_end":205,"column_start":12,"column_end":27},"name":"ParseMonthError","qualname":"::month::ParseMonthError","value":"ParseMonthError {  }","parent":null,"children":[{"krate":0,"index":4018}],"decl_id":null,"docs":" An error resulting from reading `<Month>` value with `FromStr`.\n","sig":null,"attributes":[{"value":"/ An error resulting from reading `<Month>` value with `FromStr`.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":715031,"byte_end":715098,"line_start":203,"line_end":203,"column_start":1,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":3165},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":715235,"byte_end":715238,"line_start":210,"line_end":210,"column_start":8,"column_end":11},"name":"fmt","qualname":"<ParseMonthError as std::fmt::Debug>::fmt","value":"fn fmt(&Self, &mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":9907},"children":[],"decl_id":{"krate":2,"index":9908},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3181},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":715502,"byte_end":715511,"line_start":223,"line_end":223,"column_start":12,"column_end":21},"name":"serialize","qualname":"<Month as serde::Serialize>::serialize","value":"fn serialize<S>(&Self, S) -> Result<S::Ok, S::Error> where S: ser::Serializer","parent":{"krate":16,"index":2117},"children":[],"decl_id":{"krate":16,"index":2118},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3194},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":716195,"byte_end":716206,"line_start":249,"line_end":249,"column_start":12,"column_end":23},"name":"deserialize","qualname":"<Month as serde::Deserialize>::deserialize","value":"fn deserialize<D>(D) -> Result<Self, D::Error> where D: de::Deserializer","parent":{"krate":16,"index":1577},"children":[],"decl_id":{"krate":16,"index":1579},"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":3214},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":719451,"byte_end":719459,"line_start":4,"line_end":4,"column_start":11,"column_end":19},"name":"Datelike","qualname":"::traits::Datelike","value":"Datelike: Sized","parent":null,"children":[{"krate":0,"index":3215},{"krate":0,"index":3216},{"krate":0,"index":3217},{"krate":0,"index":3218},{"krate":0,"index":3219},{"krate":0,"index":3220},{"krate":0,"index":3221},{"krate":0,"index":3222},{"krate":0,"index":3223},{"krate":0,"index":3224},{"krate":0,"index":3225},{"krate":0,"index":3226},{"krate":0,"index":3227},{"krate":0,"index":3228},{"krate":0,"index":3229},{"krate":0,"index":3230},{"krate":0,"index":3231},{"krate":0,"index":3232}],"decl_id":null,"docs":" The common set of methods for date component.\n","sig":null,"attributes":[{"value":"/ The common set of methods for date component.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":719391,"byte_end":719440,"line_start":3,"line_end":3,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3215},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":719577,"byte_end":719581,"line_start":6,"line_end":6,"column_start":8,"column_end":12},"name":"year","qualname":"::traits::Datelike::year","value":"fn year(&Self) -> i32","parent":{"krate":0,"index":3214},"children":[],"decl_id":null,"docs":" Returns the year number in the [calendar date](./naive/struct.NaiveDate.html#calendar-date).\n","sig":null,"attributes":[{"value":"/ Returns the year number in the [calendar date](./naive/struct.NaiveDate.html#calendar-date).","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":719473,"byte_end":719569,"line_start":5,"line_end":5,"column_start":5,"column_end":101}}]},{"kind":"Method","id":{"krate":0,"index":3216},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":719790,"byte_end":719797,"line_start":11,"line_end":11,"column_start":8,"column_end":15},"name":"year_ce","qualname":"::traits::Datelike::year_ce","value":"fn year_ce(&Self) -> (bool, u32)","parent":{"krate":0,"index":3214},"children":[],"decl_id":null,"docs":" Returns the absolute year number starting from 1 with a boolean flag,\n which is false when the year predates the epoch (BCE/BC) and true otherwise (CE/AD).\n","sig":null,"attributes":[{"value":"/ Returns the absolute year number starting from 1 with a boolean flag,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":719602,"byte_end":719675,"line_start":8,"line_end":8,"column_start":5,"column_end":78}},{"value":"/ which is false when the year predates the epoch (BCE/BC) and true otherwise (CE/AD).","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":719680,"byte_end":719768,"line_start":9,"line_end":9,"column_start":5,"column_end":93}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":719773,"byte_end":719782,"line_start":10,"line_end":10,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3217},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":720092,"byte_end":720097,"line_start":23,"line_end":23,"column_start":8,"column_end":13},"name":"month","qualname":"::traits::Datelike::month","value":"fn month(&Self) -> u32","parent":{"krate":0,"index":3214},"children":[],"decl_id":null,"docs":" Returns the month number starting from 1.","sig":null,"attributes":[{"value":"/ Returns the month number starting from 1.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":719985,"byte_end":720030,"line_start":20,"line_end":20,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":720035,"byte_end":720038,"line_start":21,"line_end":21,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 1 to 12.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":720043,"byte_end":720084,"line_start":22,"line_end":22,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":3218},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":720225,"byte_end":720231,"line_start":28,"line_end":28,"column_start":8,"column_end":14},"name":"month0","qualname":"::traits::Datelike::month0","value":"fn month0(&Self) -> u32","parent":{"krate":0,"index":3214},"children":[],"decl_id":null,"docs":" Returns the month number starting from 0.","sig":null,"attributes":[{"value":"/ Returns the month number starting from 0.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":720118,"byte_end":720163,"line_start":25,"line_end":25,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":720168,"byte_end":720171,"line_start":26,"line_end":26,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 0 to 11.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":720176,"byte_end":720217,"line_start":27,"line_end":27,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":3219},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":720402,"byte_end":720405,"line_start":33,"line_end":33,"column_start":8,"column_end":11},"name":"day","qualname":"::traits::Datelike::day","value":"fn day(&Self) -> u32","parent":{"krate":0,"index":3214},"children":[],"decl_id":null,"docs":" Returns the day of month starting from 1.","sig":null,"attributes":[{"value":"/ Returns the day of month starting from 1.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":720252,"byte_end":720297,"line_start":30,"line_end":30,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":720302,"byte_end":720305,"line_start":31,"line_end":31,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 1 to 31. (The last day of month differs by months.)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":720310,"byte_end":720394,"line_start":32,"line_end":32,"column_start":5,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":3220},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":720576,"byte_end":720580,"line_start":38,"line_end":38,"column_start":8,"column_end":12},"name":"day0","qualname":"::traits::Datelike::day0","value":"fn day0(&Self) -> u32","parent":{"krate":0,"index":3214},"children":[],"decl_id":null,"docs":" Returns the day of month starting from 0.","sig":null,"attributes":[{"value":"/ Returns the day of month starting from 0.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":720426,"byte_end":720471,"line_start":35,"line_end":35,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":720476,"byte_end":720479,"line_start":36,"line_end":36,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 0 to 30. (The last day of month differs by months.)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":720484,"byte_end":720568,"line_start":37,"line_end":37,"column_start":5,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":3221},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":720749,"byte_end":720756,"line_start":43,"line_end":43,"column_start":8,"column_end":15},"name":"ordinal","qualname":"::traits::Datelike::ordinal","value":"fn ordinal(&Self) -> u32","parent":{"krate":0,"index":3214},"children":[],"decl_id":null,"docs":" Returns the day of year starting from 1.","sig":null,"attributes":[{"value":"/ Returns the day of year starting from 1.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":720601,"byte_end":720645,"line_start":40,"line_end":40,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":720650,"byte_end":720653,"line_start":41,"line_end":41,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 1 to 366. (The last day of year differs by years.)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":720658,"byte_end":720741,"line_start":42,"line_end":42,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":3222},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":720925,"byte_end":720933,"line_start":48,"line_end":48,"column_start":8,"column_end":16},"name":"ordinal0","qualname":"::traits::Datelike::ordinal0","value":"fn ordinal0(&Self) -> u32","parent":{"krate":0,"index":3214},"children":[],"decl_id":null,"docs":" Returns the day of year starting from 0.","sig":null,"attributes":[{"value":"/ Returns the day of year starting from 0.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":720777,"byte_end":720821,"line_start":45,"line_end":45,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":720826,"byte_end":720829,"line_start":46,"line_end":46,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 0 to 365. (The last day of year differs by years.)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":720834,"byte_end":720917,"line_start":47,"line_end":47,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":3223},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":720990,"byte_end":720997,"line_start":51,"line_end":51,"column_start":8,"column_end":15},"name":"weekday","qualname":"::traits::Datelike::weekday","value":"fn weekday(&Self) -> Weekday","parent":{"krate":0,"index":3214},"children":[],"decl_id":null,"docs":" Returns the day of week.\n","sig":null,"attributes":[{"value":"/ Returns the day of week.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":720954,"byte_end":720982,"line_start":50,"line_end":50,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":3224},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":721055,"byte_end":721063,"line_start":54,"line_end":54,"column_start":8,"column_end":16},"name":"iso_week","qualname":"::traits::Datelike::iso_week","value":"fn iso_week(&Self) -> IsoWeek","parent":{"krate":0,"index":3214},"children":[],"decl_id":null,"docs":" Returns the ISO week.\n","sig":null,"attributes":[{"value":"/ Returns the ISO week.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":721022,"byte_end":721047,"line_start":53,"line_end":53,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":3225},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":721221,"byte_end":721230,"line_start":59,"line_end":59,"column_start":8,"column_end":17},"name":"with_year","qualname":"::traits::Datelike::with_year","value":"fn with_year(&Self, i32) -> Option<Self>","parent":{"krate":0,"index":3214},"children":[],"decl_id":null,"docs":" Makes a new value with the year number changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the year number changed.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":721088,"byte_end":721139,"line_start":56,"line_end":56,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":721144,"byte_end":721147,"line_start":57,"line_end":57,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":721152,"byte_end":721213,"line_start":58,"line_end":58,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":3226},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":721423,"byte_end":721433,"line_start":64,"line_end":64,"column_start":8,"column_end":18},"name":"with_month","qualname":"::traits::Datelike::with_month","value":"fn with_month(&Self, u32) -> Option<Self>","parent":{"krate":0,"index":3214},"children":[],"decl_id":null,"docs":" Makes a new value with the month number (starting from 1) changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the month number (starting from 1) changed.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":721271,"byte_end":721341,"line_start":61,"line_end":61,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":721346,"byte_end":721349,"line_start":62,"line_end":62,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":721354,"byte_end":721415,"line_start":63,"line_end":63,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":3227},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":721627,"byte_end":721638,"line_start":69,"line_end":69,"column_start":8,"column_end":19},"name":"with_month0","qualname":"::traits::Datelike::with_month0","value":"fn with_month0(&Self, u32) -> Option<Self>","parent":{"krate":0,"index":3214},"children":[],"decl_id":null,"docs":" Makes a new value with the month number (starting from 0) changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the month number (starting from 0) changed.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":721475,"byte_end":721545,"line_start":66,"line_end":66,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":721550,"byte_end":721553,"line_start":67,"line_end":67,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":721558,"byte_end":721619,"line_start":68,"line_end":68,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":3228},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":721833,"byte_end":721841,"line_start":74,"line_end":74,"column_start":8,"column_end":16},"name":"with_day","qualname":"::traits::Datelike::with_day","value":"fn with_day(&Self, u32) -> Option<Self>","parent":{"krate":0,"index":3214},"children":[],"decl_id":null,"docs":" Makes a new value with the day of month (starting from 1) changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the day of month (starting from 1) changed.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":721681,"byte_end":721751,"line_start":71,"line_end":71,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":721756,"byte_end":721759,"line_start":72,"line_end":72,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":721764,"byte_end":721825,"line_start":73,"line_end":73,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":3229},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":722033,"byte_end":722042,"line_start":79,"line_end":79,"column_start":8,"column_end":17},"name":"with_day0","qualname":"::traits::Datelike::with_day0","value":"fn with_day0(&Self, u32) -> Option<Self>","parent":{"krate":0,"index":3214},"children":[],"decl_id":null,"docs":" Makes a new value with the day of month (starting from 0) changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the day of month (starting from 0) changed.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":721881,"byte_end":721951,"line_start":76,"line_end":76,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":721956,"byte_end":721959,"line_start":77,"line_end":77,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":721964,"byte_end":722025,"line_start":78,"line_end":78,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":3230},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":722234,"byte_end":722246,"line_start":84,"line_end":84,"column_start":8,"column_end":20},"name":"with_ordinal","qualname":"::traits::Datelike::with_ordinal","value":"fn with_ordinal(&Self, u32) -> Option<Self>","parent":{"krate":0,"index":3214},"children":[],"decl_id":null,"docs":" Makes a new value with the day of year (starting from 1) changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the day of year (starting from 1) changed.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":722083,"byte_end":722152,"line_start":81,"line_end":81,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":722157,"byte_end":722160,"line_start":82,"line_end":82,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":722165,"byte_end":722226,"line_start":83,"line_end":83,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":3231},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":722441,"byte_end":722454,"line_start":89,"line_end":89,"column_start":8,"column_end":21},"name":"with_ordinal0","qualname":"::traits::Datelike::with_ordinal0","value":"fn with_ordinal0(&Self, u32) -> Option<Self>","parent":{"krate":0,"index":3214},"children":[],"decl_id":null,"docs":" Makes a new value with the day of year (starting from 0) changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the day of year (starting from 0) changed.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":722290,"byte_end":722359,"line_start":86,"line_end":86,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":722364,"byte_end":722367,"line_start":87,"line_end":87,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":722372,"byte_end":722433,"line_start":88,"line_end":88,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":3232},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":723013,"byte_end":723029,"line_start":103,"line_end":103,"column_start":8,"column_end":24},"name":"num_days_from_ce","qualname":"::traits::Datelike::num_days_from_ce","value":"fn num_days_from_ce(&Self) -> i32","parent":{"krate":0,"index":3214},"children":[],"decl_id":null,"docs":" Counts the days in the proleptic Gregorian calendar, with January 1, Year 1 (CE) as day 1.","sig":null,"attributes":[{"value":"/ Counts the days in the proleptic Gregorian calendar, with January 1, Year 1 (CE) as day 1.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":722499,"byte_end":722593,"line_start":91,"line_end":91,"column_start":5,"column_end":99}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":722598,"byte_end":722601,"line_start":92,"line_end":92,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":722606,"byte_end":722620,"line_start":93,"line_end":93,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":722625,"byte_end":722628,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":722633,"byte_end":722640,"line_start":95,"line_end":95,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, Datelike};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":722645,"byte_end":722683,"line_start":96,"line_end":96,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":722688,"byte_end":722691,"line_start":97,"line_end":97,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(NaiveDate::from_ymd(1970, 1, 1).num_days_from_ce(), 719_163);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":722696,"byte_end":722772,"line_start":98,"line_end":98,"column_start":5,"column_end":81}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2, 1, 1).num_days_from_ce(), 366);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":722777,"byte_end":722846,"line_start":99,"line_end":99,"column_start":5,"column_end":74}},{"value":"/ assert_eq!(NaiveDate::from_ymd(1, 1, 1).num_days_from_ce(), 1);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":722851,"byte_end":722918,"line_start":100,"line_end":100,"column_start":5,"column_end":72}},{"value":"/ assert_eq!(NaiveDate::from_ymd(0, 1, 1).num_days_from_ce(), -365);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":722923,"byte_end":722993,"line_start":101,"line_end":101,"column_start":5,"column_end":75}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":722998,"byte_end":723005,"line_start":102,"line_end":102,"column_start":5,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":3233},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":723687,"byte_end":723695,"line_start":122,"line_end":122,"column_start":11,"column_end":19},"name":"Timelike","qualname":"::traits::Timelike","value":"Timelike: Sized","parent":null,"children":[{"krate":0,"index":3234},{"krate":0,"index":3235},{"krate":0,"index":3236},{"krate":0,"index":3237},{"krate":0,"index":3238},{"krate":0,"index":3239},{"krate":0,"index":3240},{"krate":0,"index":3241},{"krate":0,"index":3242},{"krate":0,"index":3243}],"decl_id":null,"docs":" The common set of methods for time component.\n","sig":null,"attributes":[{"value":"/ The common set of methods for time component.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":723627,"byte_end":723676,"line_start":121,"line_end":121,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3234},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":723758,"byte_end":723762,"line_start":124,"line_end":124,"column_start":8,"column_end":12},"name":"hour","qualname":"::traits::Timelike::hour","value":"fn hour(&Self) -> u32","parent":{"krate":0,"index":3233},"children":[],"decl_id":null,"docs":" Returns the hour number from 0 to 23.\n","sig":null,"attributes":[{"value":"/ Returns the hour number from 0 to 23.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":723709,"byte_end":723750,"line_start":123,"line_end":123,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":3235},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":723913,"byte_end":723919,"line_start":129,"line_end":129,"column_start":8,"column_end":14},"name":"hour12","qualname":"::traits::Timelike::hour12","value":"fn hour12(&Self) -> (bool, u32)","parent":{"krate":0,"index":3233},"children":[],"decl_id":null,"docs":" Returns the hour number from 1 to 12 with a boolean flag,\n which is false for AM and true for PM.\n","sig":null,"attributes":[{"value":"/ Returns the hour number from 1 to 12 with a boolean flag,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":723783,"byte_end":723844,"line_start":126,"line_end":126,"column_start":5,"column_end":66}},{"value":"/ which is false for AM and true for PM.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":723849,"byte_end":723891,"line_start":127,"line_end":127,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":723896,"byte_end":723905,"line_start":128,"line_end":128,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3236},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":724163,"byte_end":724169,"line_start":139,"line_end":139,"column_start":8,"column_end":14},"name":"minute","qualname":"::traits::Timelike::minute","value":"fn minute(&Self) -> u32","parent":{"krate":0,"index":3233},"children":[],"decl_id":null,"docs":" Returns the minute number from 0 to 59.\n","sig":null,"attributes":[{"value":"/ Returns the minute number from 0 to 59.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":724112,"byte_end":724155,"line_start":138,"line_end":138,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":3237},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":724241,"byte_end":724247,"line_start":142,"line_end":142,"column_start":8,"column_end":14},"name":"second","qualname":"::traits::Timelike::second","value":"fn second(&Self) -> u32","parent":{"krate":0,"index":3233},"children":[],"decl_id":null,"docs":" Returns the second number from 0 to 59.\n","sig":null,"attributes":[{"value":"/ Returns the second number from 0 to 59.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":724190,"byte_end":724233,"line_start":141,"line_end":141,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":3238},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":724490,"byte_end":724500,"line_start":147,"line_end":147,"column_start":8,"column_end":18},"name":"nanosecond","qualname":"::traits::Timelike::nanosecond","value":"fn nanosecond(&Self) -> u32","parent":{"krate":0,"index":3233},"children":[],"decl_id":null,"docs":" Returns the number of nanoseconds since the whole non-leap second.\n The range from 1,000,000,000 to 1,999,999,999 represents\n the [leap second](./naive/struct.NaiveTime.html#leap-second-handling).\n","sig":null,"attributes":[{"value":"/ Returns the number of nanoseconds since the whole non-leap second.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":724268,"byte_end":724338,"line_start":144,"line_end":144,"column_start":5,"column_end":75}},{"value":"/ The range from 1,000,000,000 to 1,999,999,999 represents","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":724343,"byte_end":724403,"line_start":145,"line_end":145,"column_start":5,"column_end":65}},{"value":"/ the [leap second](./naive/struct.NaiveTime.html#leap-second-handling).","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":724408,"byte_end":724482,"line_start":146,"line_end":146,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":3239},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":724654,"byte_end":724663,"line_start":152,"line_end":152,"column_start":8,"column_end":17},"name":"with_hour","qualname":"::traits::Timelike::with_hour","value":"fn with_hour(&Self, u32) -> Option<Self>","parent":{"krate":0,"index":3233},"children":[],"decl_id":null,"docs":" Makes a new value with the hour number changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the hour number changed.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":724521,"byte_end":724572,"line_start":149,"line_end":149,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":724577,"byte_end":724580,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":724585,"byte_end":724646,"line_start":151,"line_end":151,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":3240},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":724839,"byte_end":724850,"line_start":157,"line_end":157,"column_start":8,"column_end":19},"name":"with_minute","qualname":"::traits::Timelike::with_minute","value":"fn with_minute(&Self, u32) -> Option<Self>","parent":{"krate":0,"index":3233},"children":[],"decl_id":null,"docs":" Makes a new value with the minute number changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the minute number changed.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":724704,"byte_end":724757,"line_start":154,"line_end":154,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":724762,"byte_end":724765,"line_start":155,"line_end":155,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":724770,"byte_end":724831,"line_start":156,"line_end":156,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":3241},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":725137,"byte_end":725148,"line_start":164,"line_end":164,"column_start":8,"column_end":19},"name":"with_second","qualname":"::traits::Timelike::with_second","value":"fn with_second(&Self, u32) -> Option<Self>","parent":{"krate":0,"index":3233},"children":[],"decl_id":null,"docs":" Makes a new value with the second number changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the second number changed.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":724890,"byte_end":724943,"line_start":159,"line_end":159,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":724948,"byte_end":724951,"line_start":160,"line_end":160,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":724956,"byte_end":725017,"line_start":161,"line_end":161,"column_start":5,"column_end":66}},{"value":"/ As with the [`second`](#tymethod.second) method,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":725022,"byte_end":725074,"line_start":162,"line_end":162,"column_start":5,"column_end":57}},{"value":"/ the input range is restricted to 0 through 59.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":725079,"byte_end":725129,"line_start":163,"line_end":163,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":3242},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":725481,"byte_end":725496,"line_start":171,"line_end":171,"column_start":8,"column_end":23},"name":"with_nanosecond","qualname":"::traits::Timelike::with_nanosecond","value":"fn with_nanosecond(&Self, u32) -> Option<Self>","parent":{"krate":0,"index":3233},"children":[],"decl_id":null,"docs":" Makes a new value with nanoseconds since the whole non-leap second changed.","sig":null,"attributes":[{"value":"/ Makes a new value with nanoseconds since the whole non-leap second changed.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":725188,"byte_end":725267,"line_start":166,"line_end":166,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":725272,"byte_end":725275,"line_start":167,"line_end":167,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":725280,"byte_end":725341,"line_start":168,"line_end":168,"column_start":5,"column_end":66}},{"value":"/ As with the [`nanosecond`](#tymethod.nanosecond) method,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":725346,"byte_end":725406,"line_start":169,"line_end":169,"column_start":5,"column_end":65}},{"value":"/ the input range can exceed 1,000,000,000 for leap seconds.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":725411,"byte_end":725473,"line_start":170,"line_end":170,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":3243},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":725625,"byte_end":725650,"line_start":175,"line_end":175,"column_start":8,"column_end":33},"name":"num_seconds_from_midnight","qualname":"::traits::Timelike::num_seconds_from_midnight","value":"fn num_seconds_from_midnight(&Self) -> u32","parent":{"krate":0,"index":3233},"children":[],"decl_id":null,"docs":" Returns the number of non-leap seconds past the last midnight.\n","sig":null,"attributes":[{"value":"/ Returns the number of non-leap seconds past the last midnight.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":725537,"byte_end":725603,"line_start":173,"line_end":173,"column_start":5,"column_end":71}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":725608,"byte_end":725617,"line_start":174,"line_end":174,"column_start":5,"column_end":14}}]},{"kind":"Mod","id":{"krate":0,"index":3251},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":22650,"byte_end":22655,"line_start":518,"line_end":518,"column_start":9,"column_end":14},"name":"serde","qualname":"::serde","value":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":3252}],"decl_id":null,"docs":" Serialization/Deserialization in alternate formats","sig":null,"attributes":[{"value":"/ Serialization/Deserialization in alternate formats","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":22278,"byte_end":22332,"line_start":509,"line_end":509,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":22333,"byte_end":22336,"line_start":510,"line_end":510,"column_start":1,"column_end":4}},{"value":"/ The various modules in here are intended to be used with serde's [`with`","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":22337,"byte_end":22413,"line_start":511,"line_end":511,"column_start":1,"column_end":77}},{"value":"/ annotation][1] to serialize as something other than the default [RFC","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":22414,"byte_end":22486,"line_start":512,"line_end":512,"column_start":1,"column_end":73}},{"value":"/ 3339][2] format.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":22487,"byte_end":22507,"line_start":513,"line_end":513,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":22508,"byte_end":22511,"line_start":514,"line_end":514,"column_start":1,"column_end":4}},{"value":"/ [1]: https://serde.rs/attributes.html#field-attributes","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":22512,"byte_end":22570,"line_start":515,"line_end":515,"column_start":1,"column_end":59}},{"value":"/ [2]: https://tools.ietf.org/html/rfc3339","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":22571,"byte_end":22615,"line_start":516,"line_end":516,"column_start":1,"column_end":45}},{"value":"cfg(feature = \"serde\")","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":22616,"byte_end":22641,"line_start":517,"line_end":517,"column_start":1,"column_end":26}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":25383,"byte_end":25391,"line_start":72,"line_end":72,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":46},{"krate":0,"index":47},{"krate":0,"index":48},{"krate":0,"index":49},{"krate":0,"index":50},{"krate":0,"index":51},{"krate":0,"index":52},{"krate":0,"index":53},{"krate":0,"index":54},{"krate":0,"index":55},{"krate":0,"index":56},{"krate":0,"index":57},{"krate":0,"index":58},{"krate":0,"index":59},{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":63},{"krate":0,"index":64},{"krate":0,"index":65},{"krate":0,"index":66},{"krate":0,"index":67},{"krate":0,"index":68},{"krate":0,"index":69},{"krate":0,"index":70},{"krate":0,"index":71}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":34099,"byte_end":34107,"line_start":311,"line_end":311,"column_start":14,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":73},{"krate":0,"index":74}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":34395,"byte_end":34403,"line_start":324,"line_end":324,"column_start":14,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":76},{"krate":0,"index":77}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":34747,"byte_end":34755,"line_start":338,"line_end":338,"column_start":14,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":79},{"krate":0,"index":80}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":35091,"byte_end":35099,"line_start":352,"line_end":352,"column_start":19,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":82},{"krate":0,"index":83}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":35530,"byte_end":35538,"line_start":364,"line_end":364,"column_start":19,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":85},{"krate":0,"index":86}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":36170,"byte_end":36178,"line_start":385,"line_end":385,"column_start":43,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":89}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":36382,"byte_end":36390,"line_start":392,"line_end":392,"column_start":35,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":93}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":36542,"byte_end":36550,"line_start":398,"line_end":398,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":97}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":38098,"byte_end":38113,"line_start":441,"line_end":441,"column_start":23,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":99}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":38313,"byte_end":38328,"line_start":448,"line_end":448,"column_start":16,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":101}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":54657,"byte_end":54661,"line_start":72,"line_end":72,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":234},{"krate":0,"index":235},{"krate":0,"index":236},{"krate":0,"index":237},{"krate":0,"index":239},{"krate":0,"index":240},{"krate":0,"index":242},{"krate":0,"index":243},{"krate":0,"index":245},{"krate":0,"index":246},{"krate":0,"index":248},{"krate":0,"index":249},{"krate":0,"index":251},{"krate":0,"index":252},{"krate":0,"index":254},{"krate":0,"index":255},{"krate":0,"index":256},{"krate":0,"index":258},{"krate":0,"index":259},{"krate":0,"index":260},{"krate":0,"index":262},{"krate":0,"index":263},{"krate":0,"index":264},{"krate":0,"index":265},{"krate":0,"index":266}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":63353,"byte_end":63357,"line_start":310,"line_end":310,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":273},{"krate":0,"index":277}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":65449,"byte_end":65453,"line_start":378,"line_end":378,"column_start":33,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":281},{"krate":0,"index":282},{"krate":0,"index":283},{"krate":0,"index":284},{"krate":0,"index":285},{"krate":0,"index":286},{"krate":0,"index":287},{"krate":0,"index":288},{"krate":0,"index":289},{"krate":0,"index":290},{"krate":0,"index":292},{"krate":0,"index":294},{"krate":0,"index":296},{"krate":0,"index":298},{"krate":0,"index":300},{"krate":0,"index":302}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":67288,"byte_end":67292,"line_start":453,"line_end":453,"column_start":29,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":67372,"byte_end":67376,"line_start":454,"line_end":454,"column_start":36,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":67481,"byte_end":67485,"line_start":456,"line_end":456,"column_start":60,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":311}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":67605,"byte_end":67609,"line_start":462,"line_end":462,"column_start":27,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":67652,"byte_end":67656,"line_start":464,"line_end":464,"column_start":35,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":316}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":67808,"byte_end":67812,"line_start":470,"line_end":470,"column_start":28,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":319}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":67947,"byte_end":67951,"line_start":476,"line_end":476,"column_start":35,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":322}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":68090,"byte_end":68094,"line_start":482,"line_end":482,"column_start":41,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":326},{"krate":0,"index":327}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":68324,"byte_end":68328,"line_start":491,"line_end":491,"column_start":47,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":330}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":68541,"byte_end":68545,"line_start":498,"line_end":498,"column_start":41,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":333},{"krate":0,"index":334}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":68775,"byte_end":68779,"line_start":507,"line_end":507,"column_start":47,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":337}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":68989,"byte_end":68993,"line_start":514,"line_end":514,"column_start":38,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":340},{"krate":0,"index":341}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":69178,"byte_end":69182,"line_start":523,"line_end":523,"column_start":35,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":344}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":69356,"byte_end":69360,"line_start":529,"line_end":529,"column_start":37,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":347}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":112954,"byte_end":112962,"line_start":30,"line_end":30,"column_start":39,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":501}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":113210,"byte_end":113223,"line_start":39,"line_end":39,"column_start":50,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":510}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":113556,"byte_end":113571,"line_start":52,"line_end":52,"column_start":32,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":515},{"krate":0,"index":516},{"krate":0,"index":517}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":114227,"byte_end":114235,"line_start":74,"line_end":74,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":521}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":114657,"byte_end":114665,"line_start":89,"line_end":89,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":525}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":115186,"byte_end":115194,"line_start":106,"line_end":106,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":530}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":118245,"byte_end":118272,"line_start":207,"line_end":207,"column_start":36,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":568},{"krate":0,"index":569},{"krate":0,"index":570},{"krate":0,"index":572}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":122243,"byte_end":122276,"line_start":334,"line_end":334,"column_start":36,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":604},{"krate":0,"index":605},{"krate":0,"index":606},{"krate":0,"index":608},{"krate":0,"index":610}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":126013,"byte_end":126041,"line_start":458,"line_end":458,"column_start":36,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":647},{"krate":0,"index":648},{"krate":0,"index":649},{"krate":0,"index":651}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":130021,"byte_end":130055,"line_start":584,"line_end":584,"column_start":36,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":683},{"krate":0,"index":684},{"krate":0,"index":685},{"krate":0,"index":687},{"krate":0,"index":689}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":133813,"byte_end":133841,"line_start":708,"line_end":708,"column_start":36,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":727},{"krate":0,"index":728},{"krate":0,"index":729},{"krate":0,"index":731}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":138290,"byte_end":138324,"line_start":844,"line_end":844,"column_start":36,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":765},{"krate":0,"index":766},{"krate":0,"index":767},{"krate":0,"index":769},{"krate":0,"index":771}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":141936,"byte_end":141959,"line_start":968,"line_end":968,"column_start":36,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":808},{"krate":0,"index":809},{"krate":0,"index":810},{"krate":0,"index":812}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":145599,"byte_end":145628,"line_start":1088,"line_end":1088,"column_start":36,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":844},{"krate":0,"index":845},{"krate":0,"index":846},{"krate":0,"index":848},{"krate":0,"index":850}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Inherent","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":75925,"byte_end":75933,"line_start":98,"line_end":98,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":856},{"krate":0,"index":857},{"krate":0,"index":858},{"krate":0,"index":859},{"krate":0,"index":860},{"krate":0,"index":861},{"krate":0,"index":862},{"krate":0,"index":863},{"krate":0,"index":864},{"krate":0,"index":865},{"krate":0,"index":866},{"krate":0,"index":867},{"krate":0,"index":868},{"krate":0,"index":869},{"krate":0,"index":870},{"krate":0,"index":872},{"krate":0,"index":873},{"krate":0,"index":874},{"krate":0,"index":876},{"krate":0,"index":877},{"krate":0,"index":878},{"krate":0,"index":879},{"krate":0,"index":880}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":86044,"byte_end":86052,"line_start":384,"line_end":384,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":882}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":86196,"byte_end":86204,"line_start":391,"line_end":391,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":884}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":86326,"byte_end":86334,"line_start":397,"line_end":397,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":886}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":86569,"byte_end":86577,"line_start":404,"line_end":404,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":888}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":87083,"byte_end":87091,"line_start":416,"line_end":416,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":890}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":87501,"byte_end":87509,"line_start":426,"line_end":426,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":892}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":87961,"byte_end":87969,"line_start":438,"line_end":438,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":894}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":88417,"byte_end":88425,"line_start":450,"line_end":450,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":896}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":88863,"byte_end":88871,"line_start":462,"line_end":462,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":898}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Inherent","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":89587,"byte_end":89595,"line_start":480,"line_end":480,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":904},{"krate":0,"index":906},{"krate":0,"index":908}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Inherent","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":92224,"byte_end":92232,"line_start":542,"line_end":542,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":911},{"krate":0,"index":913},{"krate":0,"index":915},{"krate":0,"index":922},{"krate":0,"index":926}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":97875,"byte_end":97883,"line_start":695,"line_end":695,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":930},{"krate":0,"index":931},{"krate":0,"index":932},{"krate":0,"index":933},{"krate":0,"index":934},{"krate":0,"index":935},{"krate":0,"index":936},{"krate":0,"index":937},{"krate":0,"index":938},{"krate":0,"index":939},{"krate":0,"index":941},{"krate":0,"index":943},{"krate":0,"index":945},{"krate":0,"index":947},{"krate":0,"index":949},{"krate":0,"index":951}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":99740,"byte_end":99748,"line_start":769,"line_end":769,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":955},{"krate":0,"index":956},{"krate":0,"index":957},{"krate":0,"index":958},{"krate":0,"index":959},{"krate":0,"index":961},{"krate":0,"index":963},{"krate":0,"index":965}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":100788,"byte_end":100796,"line_start":809,"line_end":809,"column_start":29,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":100876,"byte_end":100884,"line_start":810,"line_end":810,"column_start":36,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":100993,"byte_end":101001,"line_start":812,"line_end":812,"column_start":64,"column_end":72},"value":"","parent":null,"children":[{"krate":0,"index":974}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":101133,"byte_end":101141,"line_start":818,"line_end":818,"column_start":27,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":101214,"byte_end":101222,"line_start":820,"line_end":820,"column_start":65,"column_end":73},"value":"","parent":null,"children":[{"krate":0,"index":980}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":101961,"byte_end":101969,"line_start":841,"line_end":841,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":983}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":102116,"byte_end":102124,"line_start":847,"line_end":847,"column_start":35,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":986}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":102267,"byte_end":102275,"line_start":853,"line_end":853,"column_start":41,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":990},{"krate":0,"index":991}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":102517,"byte_end":102525,"line_start":862,"line_end":862,"column_start":47,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":994}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":102844,"byte_end":102852,"line_start":872,"line_end":872,"column_start":41,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":997},{"krate":0,"index":998}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":103094,"byte_end":103102,"line_start":881,"line_end":881,"column_start":47,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1001}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":103421,"byte_end":103429,"line_start":891,"line_end":891,"column_start":42,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1004},{"krate":0,"index":1005}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":103618,"byte_end":103626,"line_start":900,"line_end":900,"column_start":35,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1008}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":103800,"byte_end":103808,"line_start":906,"line_end":906,"column_start":37,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1011}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":104441,"byte_end":104449,"line_start":926,"line_end":926,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1013},{"krate":0,"index":1014}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":105123,"byte_end":105131,"line_start":946,"line_end":946,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1017},{"krate":0,"index":1018}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":105376,"byte_end":105384,"line_start":955,"line_end":955,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1021}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":106036,"byte_end":106044,"line_start":975,"line_end":975,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1023}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":106243,"byte_end":106253,"line_start":982,"line_end":982,"column_start":43,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1026}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":153041,"byte_end":153056,"line_start":157,"line_end":157,"column_start":16,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1102}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":153146,"byte_end":153161,"line_start":163,"line_end":163,"column_start":20,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1104}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":153267,"byte_end":153282,"line_start":169,"line_end":169,"column_start":13,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":153307,"byte_end":153322,"line_start":171,"line_end":171,"column_start":21,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1107}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Inherent","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":159304,"byte_end":159314,"line_start":339,"line_end":339,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1116}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":160862,"byte_end":160872,"line_start":385,"line_end":385,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1120}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":161654,"byte_end":161664,"line_start":401,"line_end":401,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1122}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Inherent","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":187910,"byte_end":187916,"line_start":128,"line_end":128,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1252},{"krate":0,"index":1253},{"krate":0,"index":1254},{"krate":0,"index":1255},{"krate":0,"index":1256},{"krate":0,"index":1257},{"krate":0,"index":1258},{"krate":0,"index":1259},{"krate":0,"index":1260},{"krate":0,"index":1261},{"krate":0,"index":1262},{"krate":0,"index":1263},{"krate":0,"index":1264},{"krate":0,"index":1265},{"krate":0,"index":1266},{"krate":0,"index":1267},{"krate":0,"index":1268},{"krate":0,"index":1269},{"krate":0,"index":1270},{"krate":0,"index":1271},{"krate":0,"index":1272},{"krate":0,"index":1273},{"krate":0,"index":1274},{"krate":0,"index":1282},{"krate":0,"index":1283},{"krate":0,"index":1294},{"krate":0,"index":1295},{"krate":0,"index":1296}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parse.rs","byte_start":257958,"byte_end":257966,"line_start":478,"line_end":478,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1410},{"krate":0,"index":1411}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Inherent","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\strftime.rs","byte_start":308713,"byte_end":308726,"line_start":213,"line_end":213,"column_start":10,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1507},{"krate":0,"index":1508}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\strftime.rs","byte_start":310113,"byte_end":310126,"line_start":256,"line_end":256,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1514},{"krate":0,"index":1515}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Inherent","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":177201,"byte_end":177214,"line_start":764,"line_end":764,"column_start":62,"column_end":75},"value":"","parent":null,"children":[{"krate":0,"index":1525},{"krate":0,"index":1526}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":179209,"byte_end":179222,"line_start":827,"line_end":827,"column_start":79,"column_end":92},"value":"","parent":null,"children":[{"krate":0,"index":1532}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":180503,"byte_end":180510,"line_start":873,"line_end":873,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1534},{"krate":0,"index":1535}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":182462,"byte_end":182467,"line_start":947,"line_end":947,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1537},{"krate":0,"index":1538}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Inherent","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":330262,"byte_end":330271,"line_start":62,"line_end":62,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1657},{"krate":0,"index":1658},{"krate":0,"index":1659}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Inherent","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":336010,"byte_end":336019,"line_start":207,"line_end":207,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1663},{"krate":0,"index":1664},{"krate":0,"index":1665},{"krate":0,"index":1666},{"krate":0,"index":1667},{"krate":0,"index":1668},{"krate":0,"index":1669},{"krate":0,"index":1670},{"krate":0,"index":1671},{"krate":0,"index":1672},{"krate":0,"index":1673},{"krate":0,"index":1674},{"krate":0,"index":1675},{"krate":0,"index":1676},{"krate":0,"index":1677},{"krate":0,"index":1678},{"krate":0,"index":1679},{"krate":0,"index":1680},{"krate":0,"index":1681},{"krate":0,"index":1683},{"krate":0,"index":1684},{"krate":0,"index":1686},{"krate":0,"index":1687},{"krate":0,"index":1689},{"krate":0,"index":1690},{"krate":0,"index":1692},{"krate":0,"index":1693},{"krate":0,"index":1694},{"krate":0,"index":1695},{"krate":0,"index":1696},{"krate":0,"index":1697},{"krate":0,"index":1699},{"krate":0,"index":1700},{"krate":0,"index":1702},{"krate":0,"index":1703},{"krate":0,"index":1704},{"krate":0,"index":1705},{"krate":0,"index":1709},{"krate":0,"index":1711},{"krate":0,"index":1712},{"krate":0,"index":1713},{"krate":0,"index":1714},{"krate":0,"index":1715}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":377305,"byte_end":377314,"line_start":1280,"line_end":1280,"column_start":19,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1717},{"krate":0,"index":1718},{"krate":0,"index":1719},{"krate":0,"index":1720},{"krate":0,"index":1721},{"krate":0,"index":1722},{"krate":0,"index":1723},{"krate":0,"index":1724},{"krate":0,"index":1725},{"krate":0,"index":1726},{"krate":0,"index":1727},{"krate":0,"index":1728},{"krate":0,"index":1729},{"krate":0,"index":1730},{"krate":0,"index":1731},{"krate":0,"index":1732}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":389530,"byte_end":389539,"line_start":1644,"line_end":1644,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1734},{"krate":0,"index":1735}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":389758,"byte_end":389767,"line_start":1653,"line_end":1653,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1737}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":389894,"byte_end":389903,"line_start":1660,"line_end":1660,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1739},{"krate":0,"index":1740}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":390909,"byte_end":390918,"line_start":1688,"line_end":1688,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1742},{"krate":0,"index":1743}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":392889,"byte_end":392898,"line_start":1736,"line_end":1736,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1745},{"krate":0,"index":1746}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":393117,"byte_end":393126,"line_start":1745,"line_end":1745,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1748}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":394302,"byte_end":394311,"line_start":1776,"line_end":1776,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1750},{"krate":0,"index":1751}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":394664,"byte_end":394685,"line_start":1791,"line_end":1791,"column_start":19,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1753},{"krate":0,"index":1754},{"krate":0,"index":1755}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":395286,"byte_end":395307,"line_start":1811,"line_end":1811,"column_start":28,"column_end":49},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":395341,"byte_end":395362,"line_start":1813,"line_end":1813,"column_start":30,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":1758}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":395743,"byte_end":395765,"line_start":1829,"line_end":1829,"column_start":19,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1760},{"krate":0,"index":1761},{"krate":0,"index":1762}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":396292,"byte_end":396314,"line_start":1847,"line_end":1847,"column_start":28,"column_end":50},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":396348,"byte_end":396370,"line_start":1849,"line_end":1849,"column_start":30,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":1765}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":397682,"byte_end":397691,"line_start":1886,"line_end":1886,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1767}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":398947,"byte_end":398956,"line_start":1921,"line_end":1921,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1769}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":399556,"byte_end":399565,"line_start":1943,"line_end":1943,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1771},{"krate":0,"index":1772}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":400400,"byte_end":400409,"line_start":1974,"line_end":1974,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1775}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":403880,"byte_end":403889,"line_start":2069,"line_end":2069,"column_start":29,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1791}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":404165,"byte_end":404178,"line_start":2078,"line_end":2078,"column_start":54,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":1800}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":404480,"byte_end":404496,"line_start":2090,"line_end":2090,"column_start":36,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":1805},{"krate":0,"index":1806},{"krate":0,"index":1807}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":405165,"byte_end":405174,"line_start":2114,"line_end":2114,"column_start":40,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1811}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":496061,"byte_end":496074,"line_start":11,"line_end":11,"column_start":25,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1925}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":496318,"byte_end":496331,"line_start":20,"line_end":20,"column_start":50,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":1934}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":496601,"byte_end":496621,"line_start":32,"line_end":32,"column_start":32,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":1939},{"krate":0,"index":1940},{"krate":0,"index":1941}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":496989,"byte_end":497002,"line_start":47,"line_end":47,"column_start":36,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1945}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":500016,"byte_end":500043,"line_start":146,"line_end":146,"column_start":36,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":1973},{"krate":0,"index":1974},{"krate":0,"index":1975},{"krate":0,"index":1978}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":504030,"byte_end":504063,"line_start":269,"line_end":269,"column_start":36,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":2007},{"krate":0,"index":2008},{"krate":0,"index":2009},{"krate":0,"index":2011},{"krate":0,"index":2013}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":507803,"byte_end":507831,"line_start":392,"line_end":392,"column_start":36,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":2041},{"krate":0,"index":2042},{"krate":0,"index":2043},{"krate":0,"index":2046}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":511862,"byte_end":511896,"line_start":518,"line_end":518,"column_start":36,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":2075},{"krate":0,"index":2076},{"krate":0,"index":2077},{"krate":0,"index":2079},{"krate":0,"index":2081}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":515626,"byte_end":515654,"line_start":641,"line_end":641,"column_start":36,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":2109},{"krate":0,"index":2110},{"krate":0,"index":2111},{"krate":0,"index":2114}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":519619,"byte_end":519653,"line_start":764,"line_end":764,"column_start":36,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":2143},{"krate":0,"index":2144},{"krate":0,"index":2145},{"krate":0,"index":2147},{"krate":0,"index":2149}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":523267,"byte_end":523290,"line_start":887,"line_end":887,"column_start":36,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":2177},{"krate":0,"index":2178},{"krate":0,"index":2179},{"krate":0,"index":2182}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":527004,"byte_end":527033,"line_start":1007,"line_end":1007,"column_start":36,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":2211},{"krate":0,"index":2212},{"krate":0,"index":2213},{"krate":0,"index":2215},{"krate":0,"index":2217}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":530100,"byte_end":530110,"line_start":1113,"line_end":1113,"column_start":55,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":2237}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":530400,"byte_end":530410,"line_start":1121,"line_end":1121,"column_start":57,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":2241}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Inherent","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":435948,"byte_end":435961,"line_start":81,"line_end":81,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":2246},{"krate":0,"index":2247},{"krate":0,"index":2248},{"krate":0,"index":2250},{"krate":0,"index":2251},{"krate":0,"index":2252},{"krate":0,"index":2253},{"krate":0,"index":2255},{"krate":0,"index":2256},{"krate":0,"index":2257},{"krate":0,"index":2258},{"krate":0,"index":2259},{"krate":0,"index":2260},{"krate":0,"index":2261},{"krate":0,"index":2262},{"krate":0,"index":2263},{"krate":0,"index":2264},{"krate":0,"index":2268},{"krate":0,"index":2270},{"krate":0,"index":2272},{"krate":0,"index":2273}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":463931,"byte_end":463944,"line_start":753,"line_end":753,"column_start":19,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2275},{"krate":0,"index":2276},{"krate":0,"index":2277},{"krate":0,"index":2278},{"krate":0,"index":2279},{"krate":0,"index":2280},{"krate":0,"index":2281},{"krate":0,"index":2282},{"krate":0,"index":2283},{"krate":0,"index":2284},{"krate":0,"index":2286},{"krate":0,"index":2288},{"krate":0,"index":2290},{"krate":0,"index":2292},{"krate":0,"index":2294},{"krate":0,"index":2296}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":474574,"byte_end":474587,"line_start":1064,"line_end":1064,"column_start":19,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2299},{"krate":0,"index":2300},{"krate":0,"index":2301},{"krate":0,"index":2302},{"krate":0,"index":2303},{"krate":0,"index":2305},{"krate":0,"index":2307},{"krate":0,"index":2309}],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":482407,"byte_end":482420,"line_start":1276,"line_end":1276,"column_start":27,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":2312},{"krate":0,"index":2313}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":482651,"byte_end":482664,"line_start":1285,"line_end":1285,"column_start":33,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2315}],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":484985,"byte_end":484998,"line_start":1340,"line_end":1340,"column_start":27,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":2317},{"krate":0,"index":2318}],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":485229,"byte_end":485242,"line_start":1349,"line_end":1349,"column_start":33,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2320}],"docs":"","sig":null,"attributes":[]},{"id":135,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":486972,"byte_end":486985,"line_start":1395,"line_end":1395,"column_start":29,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":2322},{"krate":0,"index":2323}],"docs":"","sig":null,"attributes":[]},{"id":136,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":488183,"byte_end":488196,"line_start":1431,"line_end":1431,"column_start":21,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2325}],"docs":"","sig":null,"attributes":[]},{"id":137,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":489284,"byte_end":489297,"line_start":1462,"line_end":1462,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2327}],"docs":"","sig":null,"attributes":[]},{"id":138,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":490027,"byte_end":490040,"line_start":1484,"line_end":1484,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2329},{"krate":0,"index":2330}],"docs":"","sig":null,"attributes":[]},{"id":139,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":491387,"byte_end":491400,"line_start":1526,"line_end":1526,"column_start":18,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2333}],"docs":"","sig":null,"attributes":[]},{"id":140,"kind":"Inherent","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\internals.rs","byte_start":537141,"byte_end":537150,"line_start":113,"line_end":113,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":2379},{"krate":0,"index":2380},{"krate":0,"index":2381},{"krate":0,"index":2382},{"krate":0,"index":2383}],"docs":"","sig":null,"attributes":[]},{"id":141,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\internals.rs","byte_start":538089,"byte_end":538098,"line_start":150,"line_end":150,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2385}],"docs":"","sig":null,"attributes":[]},{"id":142,"kind":"Inherent","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\internals.rs","byte_start":546228,"byte_end":546230,"line_start":271,"line_end":271,"column_start":6,"column_end":8},"value":"","parent":null,"children":[{"krate":0,"index":2395},{"krate":0,"index":2396},{"krate":0,"index":2397},{"krate":0,"index":2398},{"krate":0,"index":2399},{"krate":0,"index":2400},{"krate":0,"index":2401},{"krate":0,"index":2402},{"krate":0,"index":2403},{"krate":0,"index":2404},{"krate":0,"index":2405},{"krate":0,"index":2406}],"docs":"","sig":null,"attributes":[]},{"id":143,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\internals.rs","byte_start":548308,"byte_end":548310,"line_start":355,"line_end":355,"column_start":21,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":2408}],"docs":"","sig":null,"attributes":[]},{"id":144,"kind":"Inherent","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\internals.rs","byte_start":548923,"byte_end":548926,"line_start":376,"line_end":376,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":2410},{"krate":0,"index":2411},{"krate":0,"index":2412},{"krate":0,"index":2413},{"krate":0,"index":2414},{"krate":0,"index":2415},{"krate":0,"index":2416},{"krate":0,"index":2417},{"krate":0,"index":2418},{"krate":0,"index":2419}],"docs":"","sig":null,"attributes":[]},{"id":145,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\internals.rs","byte_start":550905,"byte_end":550908,"line_start":460,"line_end":460,"column_start":21,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":2421}],"docs":"","sig":null,"attributes":[]},{"id":146,"kind":"Inherent","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":565238,"byte_end":565245,"line_start":52,"line_end":52,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":2438},{"krate":0,"index":2439},{"krate":0,"index":2440}],"docs":"","sig":null,"attributes":[]},{"id":147,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":567779,"byte_end":567786,"line_start":134,"line_end":134,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2442}],"docs":"","sig":null,"attributes":[]},{"id":148,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\serde.rs","byte_start":624341,"byte_end":624350,"line_start":8,"line_end":8,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2523}],"docs":"","sig":null,"attributes":[]},{"id":149,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\serde.rs","byte_start":624570,"byte_end":624586,"line_start":19,"line_end":19,"column_start":32,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":2529},{"krate":0,"index":2530},{"krate":0,"index":2531}],"docs":"","sig":null,"attributes":[]},{"id":150,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\serde.rs","byte_start":624941,"byte_end":624950,"line_start":34,"line_end":34,"column_start":36,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":2535}],"docs":"","sig":null,"attributes":[]},{"id":151,"kind":"Inherent","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":576973,"byte_end":576982,"line_start":197,"line_end":197,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":2538},{"krate":0,"index":2539},{"krate":0,"index":2540},{"krate":0,"index":2541},{"krate":0,"index":2543},{"krate":0,"index":2544},{"krate":0,"index":2546},{"krate":0,"index":2547},{"krate":0,"index":2548},{"krate":0,"index":2549},{"krate":0,"index":2550},{"krate":0,"index":2551},{"krate":0,"index":2552},{"krate":0,"index":2553},{"krate":0,"index":2557},{"krate":0,"index":2561},{"krate":0,"index":2563},{"krate":0,"index":2564},{"krate":0,"index":2565}],"docs":"","sig":null,"attributes":[]},{"id":152,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":601167,"byte_end":601176,"line_start":807,"line_end":807,"column_start":19,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2567},{"krate":0,"index":2568},{"krate":0,"index":2569},{"krate":0,"index":2570},{"krate":0,"index":2571},{"krate":0,"index":2572},{"krate":0,"index":2573},{"krate":0,"index":2574},{"krate":0,"index":2575}],"docs":"","sig":null,"attributes":[]},{"id":153,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":610727,"byte_end":610736,"line_start":1065,"line_end":1065,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2577},{"krate":0,"index":2578}],"docs":"","sig":null,"attributes":[]},{"id":154,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":610917,"byte_end":610926,"line_start":1074,"line_end":1074,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":2580}],"docs":"","sig":null,"attributes":[]},{"id":155,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":613285,"byte_end":613294,"line_start":1126,"line_end":1126,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2582},{"krate":0,"index":2583}],"docs":"","sig":null,"attributes":[]},{"id":156,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":613475,"byte_end":613484,"line_start":1135,"line_end":1135,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":2585}],"docs":"","sig":null,"attributes":[]},{"id":157,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":615857,"byte_end":615866,"line_start":1187,"line_end":1187,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2587},{"krate":0,"index":2588}],"docs":"","sig":null,"attributes":[]},{"id":158,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":617250,"byte_end":617259,"line_start":1224,"line_end":1224,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2590}],"docs":"","sig":null,"attributes":[]},{"id":159,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":619108,"byte_end":619117,"line_start":1274,"line_end":1274,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2592}],"docs":"","sig":null,"attributes":[]},{"id":160,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":619887,"byte_end":619896,"line_start":1299,"line_end":1299,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2594},{"krate":0,"index":2595}],"docs":"","sig":null,"attributes":[]},{"id":161,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":620783,"byte_end":620792,"line_start":1331,"line_end":1331,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":2598}],"docs":"","sig":null,"attributes":[]},{"id":162,"kind":"Inherent","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":647618,"byte_end":647629,"line_start":31,"line_end":31,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":2727},{"krate":0,"index":2728},{"krate":0,"index":2729},{"krate":0,"index":2730},{"krate":0,"index":2731},{"krate":0,"index":2732}],"docs":"","sig":null,"attributes":[]},{"id":163,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":650182,"byte_end":650193,"line_start":105,"line_end":105,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2734},{"krate":0,"index":2735},{"krate":0,"index":2736},{"krate":0,"index":2737},{"krate":0,"index":2738},{"krate":0,"index":2739}],"docs":"","sig":null,"attributes":[]},{"id":164,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":650781,"byte_end":650792,"line_start":127,"line_end":127,"column_start":17,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2741}],"docs":"","sig":null,"attributes":[]},{"id":165,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":650873,"byte_end":650884,"line_start":133,"line_end":133,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2743}],"docs":"","sig":null,"attributes":[]},{"id":166,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":651382,"byte_end":651393,"line_start":147,"line_end":147,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2745}],"docs":"","sig":null,"attributes":[]},{"id":167,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":652161,"byte_end":652170,"line_start":168,"line_end":168,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2749},{"krate":0,"index":2750}],"docs":"","sig":null,"attributes":[]},{"id":168,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":652358,"byte_end":652367,"line_start":177,"line_end":177,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2752},{"krate":0,"index":2753}],"docs":"","sig":null,"attributes":[]},{"id":169,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":652556,"byte_end":652569,"line_start":186,"line_end":186,"column_start":27,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":2755},{"krate":0,"index":2756}],"docs":"","sig":null,"attributes":[]},{"id":170,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":652765,"byte_end":652778,"line_start":195,"line_end":195,"column_start":27,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":2758},{"krate":0,"index":2759}],"docs":"","sig":null,"attributes":[]},{"id":171,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":652989,"byte_end":652997,"line_start":204,"line_end":204,"column_start":41,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":2762},{"krate":0,"index":2763}],"docs":"","sig":null,"attributes":[]},{"id":172,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":653209,"byte_end":653217,"line_start":213,"line_end":213,"column_start":41,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":2766},{"krate":0,"index":2767}],"docs":"","sig":null,"attributes":[]},{"id":173,"kind":"Inherent","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\local\\windows.rs","byte_start":668416,"byte_end":668424,"line_start":90,"line_end":90,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":2851},{"krate":0,"index":2852}],"docs":"","sig":null,"attributes":[]},{"id":174,"kind":"Inherent","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\local\\mod.rs","byte_start":655620,"byte_end":655625,"line_start":57,"line_end":57,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":2879},{"krate":0,"index":2880}],"docs":"","sig":null,"attributes":[]},{"id":175,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\local\\mod.rs","byte_start":656638,"byte_end":656643,"line_start":89,"line_end":89,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":2882},{"krate":0,"index":2883},{"krate":0,"index":2884},{"krate":0,"index":2886},{"krate":0,"index":2888},{"krate":0,"index":2889},{"krate":0,"index":2890},{"krate":0,"index":2892},{"krate":0,"index":2893},{"krate":0,"index":2894}],"docs":"","sig":null,"attributes":[]},{"id":176,"kind":"Inherent","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\utc.rs","byte_start":675418,"byte_end":675421,"line_start":47,"line_end":47,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":2937},{"krate":0,"index":2938}],"docs":"","sig":null,"attributes":[]},{"id":177,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\utc.rs","byte_start":676447,"byte_end":676450,"line_start":78,"line_end":78,"column_start":19,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":2940},{"krate":0,"index":2941},{"krate":0,"index":2942},{"krate":0,"index":2943},{"krate":0,"index":2944},{"krate":0,"index":2945}],"docs":"","sig":null,"attributes":[]},{"id":178,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\utc.rs","byte_start":676970,"byte_end":676973,"line_start":100,"line_end":100,"column_start":17,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":2947}],"docs":"","sig":null,"attributes":[]},{"id":179,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\utc.rs","byte_start":677069,"byte_end":677072,"line_start":106,"line_end":106,"column_start":21,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":2949}],"docs":"","sig":null,"attributes":[]},{"id":180,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\utc.rs","byte_start":677188,"byte_end":677191,"line_start":112,"line_end":112,"column_start":23,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2951}],"docs":"","sig":null,"attributes":[]},{"id":181,"kind":"Inherent","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":627694,"byte_end":627705,"line_start":52,"line_end":52,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":2957},{"krate":0,"index":2958},{"krate":0,"index":2959},{"krate":0,"index":2960}],"docs":"","sig":null,"attributes":[]},{"id":182,"kind":"Inherent","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":628886,"byte_end":628897,"line_start":87,"line_end":87,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2965},{"krate":0,"index":2966},{"krate":0,"index":2967},{"krate":0,"index":2968},{"krate":0,"index":2969}],"docs":"","sig":null,"attributes":[]},{"id":183,"kind":"Inherent","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":632107,"byte_end":632118,"line_start":180,"line_end":180,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2972}],"docs":"","sig":null,"attributes":[]},{"id":184,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":679116,"byte_end":679117,"line_start":47,"line_end":47,"column_start":25,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":3056},{"krate":0,"index":3057}],"docs":"","sig":null,"attributes":[]},{"id":185,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":682498,"byte_end":682506,"line_start":148,"line_end":148,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":3066},{"krate":0,"index":3067},{"krate":0,"index":3068}],"docs":"","sig":null,"attributes":[]},{"id":186,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":682855,"byte_end":682868,"line_start":160,"line_end":160,"column_start":24,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":3070},{"krate":0,"index":3071},{"krate":0,"index":3072}],"docs":"","sig":null,"attributes":[]},{"id":187,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":686744,"byte_end":686757,"line_start":280,"line_end":280,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":3078}],"docs":"","sig":null,"attributes":[]},{"id":188,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":687336,"byte_end":687349,"line_start":297,"line_end":297,"column_start":28,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":3080}],"docs":"","sig":null,"attributes":[]},{"id":189,"kind":"Inherent","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":699971,"byte_end":699978,"line_start":31,"line_end":31,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":3096},{"krate":0,"index":3097},{"krate":0,"index":3098},{"krate":0,"index":3099},{"krate":0,"index":3100},{"krate":0,"index":3101}],"docs":"","sig":null,"attributes":[]},{"id":190,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":703969,"byte_end":703976,"line_start":141,"line_end":141,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":3103}],"docs":"","sig":null,"attributes":[]},{"id":191,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":704624,"byte_end":704631,"line_start":158,"line_end":158,"column_start":36,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":3105},{"krate":0,"index":3106}],"docs":"","sig":null,"attributes":[]},{"id":192,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":705600,"byte_end":705617,"line_start":195,"line_end":195,"column_start":28,"column_end":45},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":193,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":705644,"byte_end":705661,"line_start":197,"line_end":197,"column_start":23,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":3109}],"docs":"","sig":null,"attributes":[]},{"id":194,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":705800,"byte_end":705817,"line_start":203,"line_end":203,"column_start":21,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":3111}],"docs":"","sig":null,"attributes":[]},{"id":195,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":706176,"byte_end":706183,"line_start":217,"line_end":217,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":3127}],"docs":"","sig":null,"attributes":[]},{"id":196,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":706437,"byte_end":706451,"line_start":228,"line_end":228,"column_start":36,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":3133},{"krate":0,"index":3134},{"krate":0,"index":3135}],"docs":"","sig":null,"attributes":[]},{"id":197,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":706864,"byte_end":706871,"line_start":243,"line_end":243,"column_start":40,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":3140}],"docs":"","sig":null,"attributes":[]},{"id":198,"kind":"Inherent","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":710360,"byte_end":710365,"line_start":60,"line_end":60,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":3154},{"krate":0,"index":3155},{"krate":0,"index":3156},{"krate":0,"index":3157}],"docs":"","sig":null,"attributes":[]},{"id":199,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":713595,"byte_end":713600,"line_start":155,"line_end":155,"column_start":36,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":3159},{"krate":0,"index":3160},{"krate":0,"index":3161}],"docs":"","sig":null,"attributes":[]},{"id":200,"kind":"Inherent","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":714903,"byte_end":714909,"line_start":196,"line_end":196,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":3163}],"docs":"","sig":null,"attributes":[]},{"id":201,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":715210,"byte_end":715225,"line_start":209,"line_end":209,"column_start":21,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":3165}],"docs":"","sig":null,"attributes":[]},{"id":202,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":715483,"byte_end":715488,"line_start":222,"line_end":222,"column_start":29,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":3181}],"docs":"","sig":null,"attributes":[]},{"id":203,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":715746,"byte_end":715758,"line_start":233,"line_end":233,"column_start":36,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":3187},{"krate":0,"index":3188},{"krate":0,"index":3189}],"docs":"","sig":null,"attributes":[]},{"id":204,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":716176,"byte_end":716181,"line_start":248,"line_end":248,"column_start":40,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":3194}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":21539,"byte_end":21545,"line_start":476,"line_end":476,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":1043}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":176280,"byte_end":176288,"line_start":741,"line_end":741,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":1480}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":21678,"byte_end":21683,"line_start":482,"line_end":482,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":1546}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":21786,"byte_end":21792,"line_start":486,"line_end":486,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":2646}}],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":25383,"byte_end":25391,"line_start":72,"line_end":72,"column_start":6,"column_end":14},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":3253},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":34099,"byte_end":34107,"line_start":311,"line_end":311,"column_start":14,"column_end":22},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":3253},"to":{"krate":2,"index":3245}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":34395,"byte_end":34403,"line_start":324,"line_end":324,"column_start":14,"column_end":22},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":3253},"to":{"krate":2,"index":3218}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":34747,"byte_end":34755,"line_start":338,"line_end":338,"column_start":14,"column_end":22},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":3253},"to":{"krate":2,"index":3223}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":35091,"byte_end":35099,"line_start":352,"line_end":352,"column_start":19,"column_end":27},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":3253},"to":{"krate":2,"index":3228}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":35530,"byte_end":35538,"line_start":364,"line_end":364,"column_start":19,"column_end":27},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":3253},"to":{"krate":2,"index":3233}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":36170,"byte_end":36178,"line_start":385,"line_end":385,"column_start":43,"column_end":51},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":3253},"to":{"krate":2,"index":7957}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":36382,"byte_end":36390,"line_start":392,"line_end":392,"column_start":35,"column_end":43},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":3253},"to":{"krate":2,"index":7957}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":36542,"byte_end":36550,"line_start":398,"line_end":398,"column_start":23,"column_end":31},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":3253},"to":{"krate":2,"index":9914}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":38098,"byte_end":38113,"line_start":441,"line_end":441,"column_start":23,"column_end":38},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":3272},"to":{"krate":2,"index":9914}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\oldtime.rs","byte_start":38313,"byte_end":38328,"line_start":448,"line_end":448,"column_start":16,"column_end":31},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":3272},"to":{"krate":1,"index":2555}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":54657,"byte_end":54661,"line_start":72,"line_end":72,"column_start":20,"column_end":24},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":3287},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":63353,"byte_end":63357,"line_start":310,"line_end":310,"column_start":20,"column_end":24},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":3287},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":65449,"byte_end":65453,"line_start":378,"line_end":378,"column_start":33,"column_end":37},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":3287},"to":{"krate":0,"index":3214}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":67288,"byte_end":67292,"line_start":453,"line_end":453,"column_start":29,"column_end":33},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":3287},"to":{"krate":2,"index":3160}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":67372,"byte_end":67376,"line_start":454,"line_end":454,"column_start":36,"column_end":40},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":3287},"to":{"krate":2,"index":3150}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":67481,"byte_end":67485,"line_start":456,"line_end":456,"column_start":60,"column_end":64},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":3287},"to":{"krate":2,"index":2802}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":67605,"byte_end":67609,"line_start":462,"line_end":462,"column_start":27,"column_end":31},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":3287},"to":{"krate":2,"index":2807}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":67652,"byte_end":67656,"line_start":464,"line_end":464,"column_start":35,"column_end":39},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":3287},"to":{"krate":2,"index":2848}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":67808,"byte_end":67812,"line_start":470,"line_end":470,"column_start":28,"column_end":32},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":3287},"to":{"krate":2,"index":2838}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":67947,"byte_end":67951,"line_start":476,"line_end":476,"column_start":35,"column_end":39},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":3287},"to":{"krate":2,"index":10120}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":68090,"byte_end":68094,"line_start":482,"line_end":482,"column_start":41,"column_end":45},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":3287},"to":{"krate":2,"index":3218}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":68324,"byte_end":68328,"line_start":491,"line_end":491,"column_start":47,"column_end":51},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":3287},"to":{"krate":2,"index":3249}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":68541,"byte_end":68545,"line_start":498,"line_end":498,"column_start":41,"column_end":45},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":3287},"to":{"krate":2,"index":3223}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":68775,"byte_end":68779,"line_start":507,"line_end":507,"column_start":47,"column_end":51},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":3287},"to":{"krate":2,"index":3253}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":68989,"byte_end":68993,"line_start":514,"line_end":514,"column_start":38,"column_end":42},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":3287},"to":{"krate":2,"index":3223}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":69178,"byte_end":69182,"line_start":523,"line_end":523,"column_start":35,"column_end":39},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":3287},"to":{"krate":2,"index":9907}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":69356,"byte_end":69360,"line_start":529,"line_end":529,"column_start":37,"column_end":41},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":3287},"to":{"krate":2,"index":9914}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":112954,"byte_end":112962,"line_start":30,"line_end":30,"column_start":39,"column_end":47},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":3334},"to":{"krate":16,"index":2117}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":113210,"byte_end":113223,"line_start":39,"line_end":39,"column_start":50,"column_end":63},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":503},"to":{"krate":2,"index":9914}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":113556,"byte_end":113571,"line_start":52,"line_end":52,"column_start":32,"column_end":47},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":511},"to":{"krate":16,"index":1663}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":114227,"byte_end":114235,"line_start":74,"line_end":74,"column_start":36,"column_end":44},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":3334},"to":{"krate":16,"index":1577}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":114657,"byte_end":114665,"line_start":89,"line_end":89,"column_start":36,"column_end":44},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":3334},"to":{"krate":16,"index":1577}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":115186,"byte_end":115194,"line_start":106,"line_end":106,"column_start":36,"column_end":44},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":3334},"to":{"krate":16,"index":1577}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":118245,"byte_end":118272,"line_start":207,"line_end":207,"column_start":36,"column_end":63},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":3298},"to":{"krate":16,"index":1663}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":122243,"byte_end":122276,"line_start":334,"line_end":334,"column_start":36,"column_end":69},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":600},"to":{"krate":16,"index":1663}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":126013,"byte_end":126041,"line_start":458,"line_end":458,"column_start":36,"column_end":64},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":3302},"to":{"krate":16,"index":1663}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":130021,"byte_end":130055,"line_start":584,"line_end":584,"column_start":36,"column_end":70},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":679},"to":{"krate":16,"index":1663}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":133813,"byte_end":133841,"line_start":708,"line_end":708,"column_start":36,"column_end":64},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":3306},"to":{"krate":16,"index":1663}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":138290,"byte_end":138324,"line_start":844,"line_end":844,"column_start":36,"column_end":70},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":761},"to":{"krate":16,"index":1663}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":141936,"byte_end":141959,"line_start":968,"line_end":968,"column_start":36,"column_end":59},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":3294},"to":{"krate":16,"index":1663}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\serde.rs","byte_start":145599,"byte_end":145628,"line_start":1088,"line_end":1088,"column_start":36,"column_end":65},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":840},"to":{"krate":16,"index":1663}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":75925,"byte_end":75933,"line_start":98,"line_end":98,"column_start":20,"column_end":28},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":3334},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":86044,"byte_end":86052,"line_start":384,"line_end":384,"column_start":18,"column_end":26},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":3334},"to":{"krate":2,"index":3128}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":86196,"byte_end":86204,"line_start":391,"line_end":391,"column_start":18,"column_end":26},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":3334},"to":{"krate":2,"index":3128}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":86326,"byte_end":86334,"line_start":397,"line_end":397,"column_start":18,"column_end":26},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":3334},"to":{"krate":2,"index":3128}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":86569,"byte_end":86577,"line_start":404,"line_end":404,"column_start":30,"column_end":38},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":3334},"to":{"krate":2,"index":3056}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":87083,"byte_end":87091,"line_start":416,"line_end":416,"column_start":30,"column_end":38},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":3334},"to":{"krate":2,"index":3056}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":87501,"byte_end":87509,"line_start":426,"line_end":426,"column_start":38,"column_end":46},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":3334},"to":{"krate":2,"index":3056}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":87961,"byte_end":87969,"line_start":438,"line_end":438,"column_start":38,"column_end":46},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":3334},"to":{"krate":2,"index":3056}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":88417,"byte_end":88425,"line_start":450,"line_end":450,"column_start":32,"column_end":40},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":3334},"to":{"krate":2,"index":3056}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":88863,"byte_end":88871,"line_start":462,"line_end":462,"column_start":32,"column_end":40},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":3334},"to":{"krate":2,"index":3056}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":89587,"byte_end":89595,"line_start":480,"line_end":480,"column_start":6,"column_end":14},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":3334},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":92224,"byte_end":92232,"line_start":542,"line_end":542,"column_start":20,"column_end":28},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":3334},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":97875,"byte_end":97883,"line_start":695,"line_end":695,"column_start":33,"column_end":41},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":3334},"to":{"krate":0,"index":3214}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":99740,"byte_end":99748,"line_start":769,"line_end":769,"column_start":33,"column_end":41},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":3334},"to":{"krate":0,"index":3233}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":100788,"byte_end":100796,"line_start":809,"line_end":809,"column_start":29,"column_end":37},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":3334},"to":{"krate":2,"index":3160}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":100876,"byte_end":100884,"line_start":810,"line_end":810,"column_start":36,"column_end":44},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":3334},"to":{"krate":2,"index":3150}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":100993,"byte_end":101001,"line_start":812,"line_end":812,"column_start":64,"column_end":72},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":3334},"to":{"krate":2,"index":2802}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":101133,"byte_end":101141,"line_start":818,"line_end":818,"column_start":27,"column_end":35},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":3334},"to":{"krate":2,"index":2807}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":101214,"byte_end":101222,"line_start":820,"line_end":820,"column_start":65,"column_end":73},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":3334},"to":{"krate":2,"index":2848}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":101961,"byte_end":101969,"line_start":841,"line_end":841,"column_start":28,"column_end":36},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":3334},"to":{"krate":2,"index":2838}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":102116,"byte_end":102124,"line_start":847,"line_end":847,"column_start":35,"column_end":43},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":3334},"to":{"krate":2,"index":10120}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":102267,"byte_end":102275,"line_start":853,"line_end":853,"column_start":41,"column_end":49},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":3334},"to":{"krate":2,"index":3218}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":102517,"byte_end":102525,"line_start":862,"line_end":862,"column_start":47,"column_end":55},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":3334},"to":{"krate":2,"index":3249}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":102844,"byte_end":102852,"line_start":872,"line_end":872,"column_start":41,"column_end":49},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":3334},"to":{"krate":2,"index":3223}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":103094,"byte_end":103102,"line_start":881,"line_end":881,"column_start":47,"column_end":55},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":3334},"to":{"krate":2,"index":3253}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":103421,"byte_end":103429,"line_start":891,"line_end":891,"column_start":42,"column_end":50},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":3334},"to":{"krate":2,"index":3223}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":103618,"byte_end":103626,"line_start":900,"line_end":900,"column_start":35,"column_end":43},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":3334},"to":{"krate":2,"index":9907}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":103800,"byte_end":103808,"line_start":906,"line_end":906,"column_start":37,"column_end":45},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":3334},"to":{"krate":2,"index":9914}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":104441,"byte_end":104449,"line_start":926,"line_end":926,"column_start":23,"column_end":31},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":3334},"to":{"krate":2,"index":12561}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":105123,"byte_end":105131,"line_start":946,"line_end":946,"column_start":23,"column_end":31},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":3334},"to":{"krate":2,"index":12561}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":105376,"byte_end":105384,"line_start":955,"line_end":955,"column_start":27,"column_end":35},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":3334},"to":{"krate":2,"index":3056}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":106036,"byte_end":106044,"line_start":975,"line_end":975,"column_start":27,"column_end":35},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":3334},"to":{"krate":2,"index":3056}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":106243,"byte_end":106253,"line_start":982,"line_end":982,"column_start":43,"column_end":53},"kind":{"Impl":{"id":74}},"from":{"krate":1,"index":11191},"to":{"krate":2,"index":3056}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":153041,"byte_end":153056,"line_start":157,"line_end":157,"column_start":16,"column_end":31},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":1099},"to":{"krate":2,"index":2772}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":153146,"byte_end":153161,"line_start":163,"line_end":163,"column_start":20,"column_end":35},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":1099},"to":{"krate":2,"index":2802}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":153267,"byte_end":153282,"line_start":169,"line_end":169,"column_start":13,"column_end":28},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":1099},"to":{"krate":2,"index":2807}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":153307,"byte_end":153322,"line_start":171,"line_end":171,"column_start":21,"column_end":36},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":1099},"to":{"krate":2,"index":9907}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":159304,"byte_end":159314,"line_start":339,"line_end":339,"column_start":6,"column_end":16},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":3548},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":160862,"byte_end":160872,"line_start":385,"line_end":385,"column_start":23,"column_end":33},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":3548},"to":{"krate":2,"index":9914}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":161654,"byte_end":161664,"line_start":401,"line_end":401,"column_start":16,"column_end":26},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":3548},"to":{"krate":1,"index":2555}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":187910,"byte_end":187916,"line_start":128,"line_end":128,"column_start":6,"column_end":12},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":3591},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parse.rs","byte_start":257958,"byte_end":257966,"line_start":478,"line_end":478,"column_start":23,"column_end":31},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":3334},"to":{"krate":2,"index":12561}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\strftime.rs","byte_start":308713,"byte_end":308726,"line_start":213,"line_end":213,"column_start":10,"column_end":23},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":3627},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\strftime.rs","byte_start":310113,"byte_end":310126,"line_start":256,"line_end":256,"column_start":23,"column_end":36},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":3627},"to":{"krate":2,"index":8193}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":177201,"byte_end":177214,"line_start":764,"line_end":764,"column_start":62,"column_end":75},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":3646},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":179209,"byte_end":179222,"line_start":827,"line_end":827,"column_start":79,"column_end":92},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":3646},"to":{"krate":2,"index":9914}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":180503,"byte_end":180510,"line_start":873,"line_end":873,"column_start":18,"column_end":25},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":3899},"to":{"krate":2,"index":12561}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":182462,"byte_end":182467,"line_start":947,"line_end":947,"column_start":18,"column_end":23},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":3946},"to":{"krate":2,"index":12561}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":330262,"byte_end":330271,"line_start":62,"line_end":62,"column_start":6,"column_end":15},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":3655},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":336010,"byte_end":336019,"line_start":207,"line_end":207,"column_start":6,"column_end":15},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":3660},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":377305,"byte_end":377314,"line_start":1280,"line_end":1280,"column_start":19,"column_end":28},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":3660},"to":{"krate":0,"index":3214}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":389530,"byte_end":389539,"line_start":1644,"line_end":1644,"column_start":27,"column_end":36},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":3660},"to":{"krate":2,"index":3218}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":389758,"byte_end":389767,"line_start":1653,"line_end":1653,"column_start":33,"column_end":42},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":3660},"to":{"krate":2,"index":3249}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":389894,"byte_end":389903,"line_start":1660,"line_end":1660,"column_start":22,"column_end":31},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":3660},"to":{"krate":2,"index":3218}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":390909,"byte_end":390918,"line_start":1688,"line_end":1688,"column_start":22,"column_end":31},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":3660},"to":{"krate":2,"index":3223}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":392889,"byte_end":392898,"line_start":1736,"line_end":1736,"column_start":27,"column_end":36},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":3660},"to":{"krate":2,"index":3223}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":393117,"byte_end":393126,"line_start":1745,"line_end":1745,"column_start":33,"column_end":42},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":3660},"to":{"krate":2,"index":3253}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":394302,"byte_end":394311,"line_start":1776,"line_end":1776,"column_start":25,"column_end":34},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":3660},"to":{"krate":2,"index":3223}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":394664,"byte_end":394685,"line_start":1791,"line_end":1791,"column_start":19,"column_end":40},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":3679},"to":{"krate":2,"index":8193}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":395286,"byte_end":395307,"line_start":1811,"line_end":1811,"column_start":28,"column_end":49},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":3679},"to":{"krate":2,"index":8067}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":395341,"byte_end":395362,"line_start":1813,"line_end":1813,"column_start":30,"column_end":51},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":3679},"to":{"krate":2,"index":8042}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":395743,"byte_end":395765,"line_start":1829,"line_end":1829,"column_start":19,"column_end":41},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":3700},"to":{"krate":2,"index":8193}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":396292,"byte_end":396314,"line_start":1847,"line_end":1847,"column_start":28,"column_end":50},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":3700},"to":{"krate":2,"index":8067}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":396348,"byte_end":396370,"line_start":1849,"line_end":1849,"column_start":30,"column_end":52},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":3700},"to":{"krate":2,"index":8042}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":397682,"byte_end":397691,"line_start":1886,"line_end":1886,"column_start":21,"column_end":30},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":3660},"to":{"krate":2,"index":9907}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":398947,"byte_end":398956,"line_start":1921,"line_end":1921,"column_start":23,"column_end":32},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":3660},"to":{"krate":2,"index":9914}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":399556,"byte_end":399565,"line_start":1943,"line_end":1943,"column_start":23,"column_end":32},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":3660},"to":{"krate":2,"index":12561}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":400400,"byte_end":400409,"line_start":1974,"line_end":1974,"column_start":18,"column_end":27},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":3660},"to":{"krate":2,"index":3128}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":403880,"byte_end":403889,"line_start":2069,"line_end":2069,"column_start":29,"column_end":38},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":3660},"to":{"krate":16,"index":2117}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":404165,"byte_end":404178,"line_start":2078,"line_end":2078,"column_start":54,"column_end":67},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":1793},"to":{"krate":2,"index":9914}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":404480,"byte_end":404496,"line_start":2090,"line_end":2090,"column_start":36,"column_end":52},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":1801},"to":{"krate":16,"index":1663}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":405165,"byte_end":405174,"line_start":2114,"line_end":2114,"column_start":40,"column_end":49},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":3660},"to":{"krate":16,"index":1577}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":496061,"byte_end":496074,"line_start":11,"line_end":11,"column_start":25,"column_end":38},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":3721},"to":{"krate":16,"index":2117}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":496318,"byte_end":496331,"line_start":20,"line_end":20,"column_start":50,"column_end":63},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":1927},"to":{"krate":2,"index":9914}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":496601,"byte_end":496621,"line_start":32,"line_end":32,"column_start":32,"column_end":52},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":1935},"to":{"krate":16,"index":1663}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":496989,"byte_end":497002,"line_start":47,"line_end":47,"column_start":36,"column_end":49},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":3721},"to":{"krate":16,"index":1577}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":500016,"byte_end":500043,"line_start":146,"line_end":146,"column_start":36,"column_end":63},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":1969},"to":{"krate":16,"index":1663}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":504030,"byte_end":504063,"line_start":269,"line_end":269,"column_start":36,"column_end":69},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":2003},"to":{"krate":16,"index":1663}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":507803,"byte_end":507831,"line_start":392,"line_end":392,"column_start":36,"column_end":64},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":2037},"to":{"krate":16,"index":1663}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":511862,"byte_end":511896,"line_start":518,"line_end":518,"column_start":36,"column_end":70},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":2071},"to":{"krate":16,"index":1663}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":515626,"byte_end":515654,"line_start":641,"line_end":641,"column_start":36,"column_end":64},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":2105},"to":{"krate":16,"index":1663}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":519619,"byte_end":519653,"line_start":764,"line_end":764,"column_start":36,"column_end":70},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":2139},"to":{"krate":16,"index":1663}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":523267,"byte_end":523290,"line_start":887,"line_end":887,"column_start":36,"column_end":59},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":2173},"to":{"krate":16,"index":1663}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":527004,"byte_end":527033,"line_start":1007,"line_end":1007,"column_start":36,"column_end":65},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":2207},"to":{"krate":16,"index":1663}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":530100,"byte_end":530110,"line_start":1113,"line_end":1113,"column_start":55,"column_end":65},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":2223},"to":{"krate":2,"index":9907}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\serde.rs","byte_start":530400,"byte_end":530410,"line_start":1121,"line_end":1121,"column_start":57,"column_end":67},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":2223},"to":{"krate":2,"index":9914}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":435948,"byte_end":435961,"line_start":81,"line_end":81,"column_start":6,"column_end":19},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":3721},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":463931,"byte_end":463944,"line_start":753,"line_end":753,"column_start":19,"column_end":32},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":3721},"to":{"krate":0,"index":3214}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":474574,"byte_end":474587,"line_start":1064,"line_end":1064,"column_start":19,"column_end":32},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":3721},"to":{"krate":0,"index":3233}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":482407,"byte_end":482420,"line_start":1276,"line_end":1276,"column_start":27,"column_end":40},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":3721},"to":{"krate":2,"index":3218}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":482651,"byte_end":482664,"line_start":1285,"line_end":1285,"column_start":33,"column_end":46},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":3721},"to":{"krate":2,"index":3249}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":484985,"byte_end":484998,"line_start":1340,"line_end":1340,"column_start":27,"column_end":40},"kind":{"Impl":{"id":133}},"from":{"krate":0,"index":3721},"to":{"krate":2,"index":3223}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":485229,"byte_end":485242,"line_start":1349,"line_end":1349,"column_start":33,"column_end":46},"kind":{"Impl":{"id":134}},"from":{"krate":0,"index":3721},"to":{"krate":2,"index":3253}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":486972,"byte_end":486985,"line_start":1395,"line_end":1395,"column_start":29,"column_end":42},"kind":{"Impl":{"id":135}},"from":{"krate":0,"index":3721},"to":{"krate":2,"index":3223}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":488183,"byte_end":488196,"line_start":1431,"line_end":1431,"column_start":21,"column_end":34},"kind":{"Impl":{"id":136}},"from":{"krate":0,"index":3721},"to":{"krate":2,"index":9907}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":489284,"byte_end":489297,"line_start":1462,"line_end":1462,"column_start":23,"column_end":36},"kind":{"Impl":{"id":137}},"from":{"krate":0,"index":3721},"to":{"krate":2,"index":9914}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":490027,"byte_end":490040,"line_start":1484,"line_end":1484,"column_start":23,"column_end":36},"kind":{"Impl":{"id":138}},"from":{"krate":0,"index":3721},"to":{"krate":2,"index":12561}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":491387,"byte_end":491400,"line_start":1526,"line_end":1526,"column_start":18,"column_end":31},"kind":{"Impl":{"id":139}},"from":{"krate":0,"index":3721},"to":{"krate":2,"index":3128}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\internals.rs","byte_start":537141,"byte_end":537150,"line_start":113,"line_end":113,"column_start":6,"column_end":15},"kind":{"Impl":{"id":140}},"from":{"krate":0,"index":3741},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\internals.rs","byte_start":538089,"byte_end":538098,"line_start":150,"line_end":150,"column_start":21,"column_end":30},"kind":{"Impl":{"id":141}},"from":{"krate":0,"index":3741},"to":{"krate":2,"index":9907}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\internals.rs","byte_start":546228,"byte_end":546230,"line_start":271,"line_end":271,"column_start":6,"column_end":8},"kind":{"Impl":{"id":142}},"from":{"krate":0,"index":3754},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\internals.rs","byte_start":548308,"byte_end":548310,"line_start":355,"line_end":355,"column_start":21,"column_end":23},"kind":{"Impl":{"id":143}},"from":{"krate":0,"index":3754},"to":{"krate":2,"index":9907}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\internals.rs","byte_start":548923,"byte_end":548926,"line_start":376,"line_end":376,"column_start":6,"column_end":9},"kind":{"Impl":{"id":144}},"from":{"krate":0,"index":3766},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\internals.rs","byte_start":550905,"byte_end":550908,"line_start":460,"line_end":460,"column_start":21,"column_end":24},"kind":{"Impl":{"id":145}},"from":{"krate":0,"index":3766},"to":{"krate":2,"index":9907}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":565238,"byte_end":565245,"line_start":52,"line_end":52,"column_start":6,"column_end":13},"kind":{"Impl":{"id":146}},"from":{"krate":0,"index":3778},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":567779,"byte_end":567786,"line_start":134,"line_end":134,"column_start":21,"column_end":28},"kind":{"Impl":{"id":147}},"from":{"krate":0,"index":3778},"to":{"krate":2,"index":9907}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\serde.rs","byte_start":624341,"byte_end":624350,"line_start":8,"line_end":8,"column_start":25,"column_end":34},"kind":{"Impl":{"id":148}},"from":{"krate":0,"index":3794},"to":{"krate":16,"index":2117}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\serde.rs","byte_start":624570,"byte_end":624586,"line_start":19,"line_end":19,"column_start":32,"column_end":48},"kind":{"Impl":{"id":149}},"from":{"krate":0,"index":2525},"to":{"krate":16,"index":1663}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\serde.rs","byte_start":624941,"byte_end":624950,"line_start":34,"line_end":34,"column_start":36,"column_end":45},"kind":{"Impl":{"id":150}},"from":{"krate":0,"index":3794},"to":{"krate":16,"index":1577}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":576973,"byte_end":576982,"line_start":197,"line_end":197,"column_start":6,"column_end":15},"kind":{"Impl":{"id":151}},"from":{"krate":0,"index":3794},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":601167,"byte_end":601176,"line_start":807,"line_end":807,"column_start":19,"column_end":28},"kind":{"Impl":{"id":152}},"from":{"krate":0,"index":3794},"to":{"krate":0,"index":3233}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":610727,"byte_end":610736,"line_start":1065,"line_end":1065,"column_start":27,"column_end":36},"kind":{"Impl":{"id":153}},"from":{"krate":0,"index":3794},"to":{"krate":2,"index":3218}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":610917,"byte_end":610926,"line_start":1074,"line_end":1074,"column_start":33,"column_end":42},"kind":{"Impl":{"id":154}},"from":{"krate":0,"index":3794},"to":{"krate":2,"index":3249}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":613285,"byte_end":613294,"line_start":1126,"line_end":1126,"column_start":27,"column_end":36},"kind":{"Impl":{"id":155}},"from":{"krate":0,"index":3794},"to":{"krate":2,"index":3223}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":613475,"byte_end":613484,"line_start":1135,"line_end":1135,"column_start":33,"column_end":42},"kind":{"Impl":{"id":156}},"from":{"krate":0,"index":3794},"to":{"krate":2,"index":3253}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":615857,"byte_end":615866,"line_start":1187,"line_end":1187,"column_start":25,"column_end":34},"kind":{"Impl":{"id":157}},"from":{"krate":0,"index":3794},"to":{"krate":2,"index":3223}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":617250,"byte_end":617259,"line_start":1224,"line_end":1224,"column_start":21,"column_end":30},"kind":{"Impl":{"id":158}},"from":{"krate":0,"index":3794},"to":{"krate":2,"index":9907}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":619108,"byte_end":619117,"line_start":1274,"line_end":1274,"column_start":23,"column_end":32},"kind":{"Impl":{"id":159}},"from":{"krate":0,"index":3794},"to":{"krate":2,"index":9914}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":619887,"byte_end":619896,"line_start":1299,"line_end":1299,"column_start":23,"column_end":32},"kind":{"Impl":{"id":160}},"from":{"krate":0,"index":3794},"to":{"krate":2,"index":12561}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":620783,"byte_end":620792,"line_start":1331,"line_end":1331,"column_start":18,"column_end":27},"kind":{"Impl":{"id":161}},"from":{"krate":0,"index":3794},"to":{"krate":2,"index":3128}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":647618,"byte_end":647629,"line_start":31,"line_end":31,"column_start":6,"column_end":17},"kind":{"Impl":{"id":162}},"from":{"krate":0,"index":3814},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":650182,"byte_end":650193,"line_start":105,"line_end":105,"column_start":19,"column_end":30},"kind":{"Impl":{"id":163}},"from":{"krate":0,"index":3814},"to":{"krate":0,"index":2975}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":650781,"byte_end":650792,"line_start":127,"line_end":127,"column_start":17,"column_end":28},"kind":{"Impl":{"id":164}},"from":{"krate":0,"index":3814},"to":{"krate":0,"index":2973}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":650873,"byte_end":650884,"line_start":133,"line_end":133,"column_start":21,"column_end":32},"kind":{"Impl":{"id":165}},"from":{"krate":0,"index":3814},"to":{"krate":2,"index":9907}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":651382,"byte_end":651393,"line_start":147,"line_end":147,"column_start":23,"column_end":34},"kind":{"Impl":{"id":166}},"from":{"krate":0,"index":3814},"to":{"krate":2,"index":9914}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":652161,"byte_end":652170,"line_start":168,"line_end":168,"column_start":27,"column_end":36},"kind":{"Impl":{"id":167}},"from":{"krate":0,"index":3794},"to":{"krate":2,"index":3218}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":652358,"byte_end":652367,"line_start":177,"line_end":177,"column_start":27,"column_end":36},"kind":{"Impl":{"id":168}},"from":{"krate":0,"index":3794},"to":{"krate":2,"index":3223}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":652556,"byte_end":652569,"line_start":186,"line_end":186,"column_start":27,"column_end":40},"kind":{"Impl":{"id":169}},"from":{"krate":0,"index":3721},"to":{"krate":2,"index":3218}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":652765,"byte_end":652778,"line_start":195,"line_end":195,"column_start":27,"column_end":40},"kind":{"Impl":{"id":170}},"from":{"krate":0,"index":3721},"to":{"krate":2,"index":3223}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":652989,"byte_end":652997,"line_start":204,"line_end":204,"column_start":41,"column_end":49},"kind":{"Impl":{"id":171}},"from":{"krate":0,"index":3334},"to":{"krate":2,"index":3218}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":653209,"byte_end":653217,"line_start":213,"line_end":213,"column_start":41,"column_end":49},"kind":{"Impl":{"id":172}},"from":{"krate":0,"index":3334},"to":{"krate":2,"index":3223}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\local\\windows.rs","byte_start":668416,"byte_end":668424,"line_start":90,"line_end":90,"column_start":6,"column_end":14},"kind":{"Impl":{"id":173}},"from":{"krate":0,"index":2847},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\local\\mod.rs","byte_start":655620,"byte_end":655625,"line_start":57,"line_end":57,"column_start":6,"column_end":11},"kind":{"Impl":{"id":174}},"from":{"krate":0,"index":3829},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\local\\mod.rs","byte_start":656638,"byte_end":656643,"line_start":89,"line_end":89,"column_start":19,"column_end":24},"kind":{"Impl":{"id":175}},"from":{"krate":0,"index":3829},"to":{"krate":0,"index":2975}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\utc.rs","byte_start":675418,"byte_end":675421,"line_start":47,"line_end":47,"column_start":6,"column_end":9},"kind":{"Impl":{"id":176}},"from":{"krate":0,"index":3836},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\utc.rs","byte_start":676447,"byte_end":676450,"line_start":78,"line_end":78,"column_start":19,"column_end":22},"kind":{"Impl":{"id":177}},"from":{"krate":0,"index":3836},"to":{"krate":0,"index":2975}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\utc.rs","byte_start":676970,"byte_end":676973,"line_start":100,"line_end":100,"column_start":17,"column_end":20},"kind":{"Impl":{"id":178}},"from":{"krate":0,"index":3836},"to":{"krate":0,"index":2973}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\utc.rs","byte_start":677069,"byte_end":677072,"line_start":106,"line_end":106,"column_start":21,"column_end":24},"kind":{"Impl":{"id":179}},"from":{"krate":0,"index":3836},"to":{"krate":2,"index":9907}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\utc.rs","byte_start":677188,"byte_end":677191,"line_start":112,"line_end":112,"column_start":23,"column_end":26},"kind":{"Impl":{"id":180}},"from":{"krate":0,"index":3836},"to":{"krate":2,"index":9914}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":627694,"byte_end":627705,"line_start":52,"line_end":52,"column_start":9,"column_end":20},"kind":{"Impl":{"id":181}},"from":{"krate":0,"index":3847},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":628886,"byte_end":628897,"line_start":87,"line_end":87,"column_start":20,"column_end":31},"kind":{"Impl":{"id":182}},"from":{"krate":0,"index":3847},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":632107,"byte_end":632118,"line_start":180,"line_end":180,"column_start":21,"column_end":32},"kind":{"Impl":{"id":183}},"from":{"krate":0,"index":3847},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":632580,"byte_end":632585,"line_start":194,"line_end":194,"column_start":19,"column_end":24},"kind":"SuperTrait","from":{"krate":2,"index":3155},"to":{"krate":0,"index":2973}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":632588,"byte_end":632593,"line_start":194,"line_end":194,"column_start":27,"column_end":32},"kind":"SuperTrait","from":{"krate":2,"index":2772},"to":{"krate":0,"index":2973}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":632601,"byte_end":632606,"line_start":194,"line_end":194,"column_start":40,"column_end":45},"kind":"SuperTrait","from":{"krate":2,"index":9907},"to":{"krate":0,"index":2973}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":632896,"byte_end":632901,"line_start":203,"line_end":203,"column_start":21,"column_end":26},"kind":"SuperTrait","from":{"krate":2,"index":3155},"to":{"krate":0,"index":2975}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":632904,"byte_end":632909,"line_start":203,"line_end":203,"column_start":29,"column_end":34},"kind":"SuperTrait","from":{"krate":2,"index":2772},"to":{"krate":0,"index":2975}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":679116,"byte_end":679117,"line_start":47,"line_end":47,"column_start":25,"column_end":26},"kind":{"Impl":{"id":184}},"from":{"krate":0,"index":3055},"to":{"krate":0,"index":3051}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":680814,"byte_end":680819,"line_start":101,"line_end":101,"column_start":26,"column_end":31},"kind":"SuperTrait","from":{"krate":2,"index":3155},"to":{"krate":0,"index":3059}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":682498,"byte_end":682506,"line_start":148,"line_end":148,"column_start":38,"column_end":46},"kind":{"Impl":{"id":185}},"from":{"krate":0,"index":3334},"to":{"krate":0,"index":3059}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":682855,"byte_end":682868,"line_start":160,"line_end":160,"column_start":24,"column_end":37},"kind":{"Impl":{"id":186}},"from":{"krate":0,"index":3721},"to":{"krate":0,"index":3059}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":686744,"byte_end":686757,"line_start":280,"line_end":280,"column_start":23,"column_end":36},"kind":{"Impl":{"id":187}},"from":{"krate":0,"index":3881},"to":{"krate":2,"index":9914}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":687336,"byte_end":687349,"line_start":297,"line_end":297,"column_start":28,"column_end":41},"kind":{"Impl":{"id":188}},"from":{"krate":0,"index":3881},"to":{"krate":1,"index":2555}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":699971,"byte_end":699978,"line_start":31,"line_end":31,"column_start":6,"column_end":13},"kind":{"Impl":{"id":189}},"from":{"krate":0,"index":3899},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":703969,"byte_end":703976,"line_start":141,"line_end":141,"column_start":23,"column_end":30},"kind":{"Impl":{"id":190}},"from":{"krate":0,"index":3899},"to":{"krate":2,"index":9914}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":704624,"byte_end":704631,"line_start":158,"line_end":158,"column_start":36,"column_end":43},"kind":{"Impl":{"id":191}},"from":{"krate":0,"index":3899},"to":{"krate":19,"index":333}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":705600,"byte_end":705617,"line_start":195,"line_end":195,"column_start":28,"column_end":45},"kind":{"Impl":{"id":192}},"from":{"krate":0,"index":3935},"to":{"krate":1,"index":2555}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":705644,"byte_end":705661,"line_start":197,"line_end":197,"column_start":23,"column_end":40},"kind":{"Impl":{"id":193}},"from":{"krate":0,"index":3935},"to":{"krate":2,"index":9914}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":705800,"byte_end":705817,"line_start":203,"line_end":203,"column_start":21,"column_end":38},"kind":{"Impl":{"id":194}},"from":{"krate":0,"index":3935},"to":{"krate":2,"index":9907}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":706176,"byte_end":706183,"line_start":217,"line_end":217,"column_start":29,"column_end":36},"kind":{"Impl":{"id":195}},"from":{"krate":0,"index":3899},"to":{"krate":16,"index":2117}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":706437,"byte_end":706451,"line_start":228,"line_end":228,"column_start":36,"column_end":50},"kind":{"Impl":{"id":196}},"from":{"krate":0,"index":3129},"to":{"krate":16,"index":1663}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":706864,"byte_end":706871,"line_start":243,"line_end":243,"column_start":40,"column_end":47},"kind":{"Impl":{"id":197}},"from":{"krate":0,"index":3899},"to":{"krate":16,"index":1577}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":710360,"byte_end":710365,"line_start":60,"line_end":60,"column_start":6,"column_end":11},"kind":{"Impl":{"id":198}},"from":{"krate":0,"index":3946},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":713595,"byte_end":713600,"line_start":155,"line_end":155,"column_start":36,"column_end":41},"kind":{"Impl":{"id":199}},"from":{"krate":0,"index":3946},"to":{"krate":19,"index":333}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":714903,"byte_end":714909,"line_start":196,"line_end":196,"column_start":6,"column_end":12},"kind":{"Impl":{"id":200}},"from":{"krate":0,"index":3997},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":715210,"byte_end":715225,"line_start":209,"line_end":209,"column_start":21,"column_end":36},"kind":{"Impl":{"id":201}},"from":{"krate":0,"index":4017},"to":{"krate":2,"index":9907}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":715483,"byte_end":715488,"line_start":222,"line_end":222,"column_start":29,"column_end":34},"kind":{"Impl":{"id":202}},"from":{"krate":0,"index":3946},"to":{"krate":16,"index":2117}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":715746,"byte_end":715758,"line_start":233,"line_end":233,"column_start":36,"column_end":48},"kind":{"Impl":{"id":203}},"from":{"krate":0,"index":3183},"to":{"krate":16,"index":1663}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":716176,"byte_end":716181,"line_start":248,"line_end":248,"column_start":40,"column_end":45},"kind":{"Impl":{"id":204}},"from":{"krate":0,"index":3946},"to":{"krate":16,"index":1577}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":719461,"byte_end":719466,"line_start":4,"line_end":4,"column_start":21,"column_end":26},"kind":"SuperTrait","from":{"krate":2,"index":3155},"to":{"krate":0,"index":3214}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":723697,"byte_end":723702,"line_start":122,"line_end":122,"column_start":21,"column_end":26},"kind":"SuperTrait","from":{"krate":2,"index":3155},"to":{"krate":0,"index":3233}}]}