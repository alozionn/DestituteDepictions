{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1","program":"C:\\Users\\Andrei\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","textwrap","--edition=2021","C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=255c5fc1e11a1ff6","-C","extra-filename=-255c5fc1e11a1ff6","--out-dir","d:\\Programming\\DestituteDepictions\\src-tauri\\migration\\target\\rls\\debug\\deps","-L","dependency=d:\\Programming\\DestituteDepictions\\src-tauri\\migration\\target\\rls\\debug\\deps","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\Andrei\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"d:\\Programming\\DestituteDepictions\\src-tauri\\migration\\target\\rls\\debug\\deps\\libtextwrap-255c5fc1e11a1ff6.rmeta"},"prelude":{"crate_id":{"name":"textwrap","disambiguator":[10286230797509935261,0]},"crate_root":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src","external_crates":[{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[8526938853280630398,0]}},{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","num":2,"id":{"name":"core","disambiguator":[5339428516588690145,0]}},{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[263601903543822771,0]}},{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[7343628043363739070,0]}},{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[14796848713614703829,0]}},{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[2248661955232720858,0]}},{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[6100837883140397065,0]}},{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[6763488366047601591,0]}},{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","num":9,"id":{"name":"miniz_oxide","disambiguator":[79841370634592438,0]}},{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[14720684392801985393,0]}},{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","num":11,"id":{"name":"adler","disambiguator":[1205045013435031913,0]}},{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[9970316023349964410,0]}},{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","num":13,"id":{"name":"std_detect","disambiguator":[17496692589544781456,0]}},{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","num":14,"id":{"name":"rustc_demangle","disambiguator":[17700294896468204783,0]}},{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","num":15,"id":{"name":"panic_unwind","disambiguator":[8939469696884238691,0]}}],"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":0,"byte_end":66657,"line_start":1,"line_end":2008,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":8},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":7364,"byte_end":7370,"line_start":206,"line_end":206,"column_start":30,"column_end":36},"alias_span":null,"name":"dedent","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":7},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":7372,"byte_end":7378,"line_start":206,"line_end":206,"column_start":38,"column_end":44},"alias_span":null,"name":"indent","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":158},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":7428,"byte_end":7441,"line_start":209,"line_end":209,"column_start":26,"column_end":39},"alias_span":null,"name":"WordSeparator","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":167},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":7492,"byte_end":7504,"line_start":212,"line_end":212,"column_start":25,"column_end":37},"alias_span":null,"name":"WordSplitter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":177},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":7557,"byte_end":7570,"line_start":215,"line_end":215,"column_start":26,"column_end":39},"alias_span":null,"name":"WrapAlgorithm","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":190},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":7611,"byte_end":7621,"line_start":218,"line_end":218,"column_start":22,"column_end":32},"alias_span":null,"name":"LineEnding","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":0,"byte_end":66657,"line_start":1,"line_end":2008,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":6},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":14},{"krate":0,"index":17},{"krate":0,"index":30},{"krate":0,"index":33},{"krate":0,"index":55},{"krate":0,"index":58},{"krate":0,"index":80},{"krate":0,"index":83},{"krate":0,"index":93},{"krate":0,"index":96},{"krate":0,"index":243},{"krate":0,"index":253},{"krate":0,"index":256},{"krate":0,"index":126},{"krate":0,"index":129},{"krate":0,"index":132},{"krate":0,"index":142},{"krate":0,"index":145},{"krate":0,"index":146},{"krate":0,"index":149},{"krate":0,"index":153},{"krate":0,"index":156}],"decl_id":null,"docs":" The textwrap library provides functions for word wrapping and\n indenting text.","sig":null,"attributes":[{"value":"/ The textwrap library provides functions for word wrapping and","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":0,"byte_end":65,"line_start":1,"line_end":1,"column_start":1,"column_end":66}},{"value":"/ indenting text.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":66,"byte_end":85,"line_start":2,"line_end":2,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":86,"byte_end":89,"line_start":3,"line_end":3,"column_start":1,"column_end":4}},{"value":"/ # Wrapping Text","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":90,"byte_end":109,"line_start":4,"line_end":4,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":110,"byte_end":113,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ Wrapping text can be very useful in command-line programs where","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":114,"byte_end":181,"line_start":6,"line_end":6,"column_start":1,"column_end":68}},{"value":"/ you want to format dynamic output nicely so it looks good in a","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":182,"byte_end":248,"line_start":7,"line_end":7,"column_start":1,"column_end":67}},{"value":"/ terminal. A quick example:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":249,"byte_end":279,"line_start":8,"line_end":8,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":280,"byte_end":283,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":284,"byte_end":291,"line_start":10,"line_end":10,"column_start":1,"column_end":8}},{"value":"/ # #[cfg(feature = \"smawk\")] {","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":292,"byte_end":325,"line_start":11,"line_end":11,"column_start":1,"column_end":34}},{"value":"/ let text = \"textwrap: a small library for wrapping text.\";","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":326,"byte_end":388,"line_start":12,"line_end":12,"column_start":1,"column_end":63}},{"value":"/ assert_eq!(textwrap::wrap(text, 18),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":389,"byte_end":429,"line_start":13,"line_end":13,"column_start":1,"column_end":41}},{"value":"/            vec![\"textwrap: a\",","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":430,"byte_end":464,"line_start":14,"line_end":14,"column_start":1,"column_end":35}},{"value":"/                 \"small library for\",","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":465,"byte_end":505,"line_start":15,"line_end":15,"column_start":1,"column_end":41}},{"value":"/                 \"wrapping text.\"]);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":506,"byte_end":545,"line_start":16,"line_end":16,"column_start":1,"column_end":40}},{"value":"/ # }","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":546,"byte_end":553,"line_start":17,"line_end":17,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":554,"byte_end":561,"line_start":18,"line_end":18,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":562,"byte_end":565,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ The [`wrap`] function returns the individual lines, use [`fill`]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":566,"byte_end":634,"line_start":20,"line_end":20,"column_start":1,"column_end":69}},{"value":"/ is you want the lines joined with `'\\n'` to form a `String`.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":635,"byte_end":699,"line_start":21,"line_end":21,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":700,"byte_end":703,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ If you enable the `hyphenation` Cargo feature, you can get","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":704,"byte_end":766,"line_start":23,"line_end":23,"column_start":1,"column_end":63}},{"value":"/ automatic hyphenation for a number of languages:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":767,"byte_end":819,"line_start":24,"line_end":24,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":820,"byte_end":823,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":824,"byte_end":831,"line_start":26,"line_end":26,"column_start":1,"column_end":8}},{"value":"/ #[cfg(feature = \"hyphenation\")] {","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":832,"byte_end":869,"line_start":27,"line_end":27,"column_start":1,"column_end":38}},{"value":"/ use hyphenation::{Language, Load, Standard};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":870,"byte_end":918,"line_start":28,"line_end":28,"column_start":1,"column_end":49}},{"value":"/ use textwrap::{wrap, Options, WordSplitter};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":919,"byte_end":967,"line_start":29,"line_end":29,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":968,"byte_end":971,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ let text = \"textwrap: a small library for wrapping text.\";","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":972,"byte_end":1034,"line_start":31,"line_end":31,"column_start":1,"column_end":63}},{"value":"/ let dictionary = Standard::from_embedded(Language::EnglishUS).unwrap();","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":1035,"byte_end":1110,"line_start":32,"line_end":32,"column_start":1,"column_end":76}},{"value":"/ let options = Options::new(18).word_splitter(WordSplitter::Hyphenation(dictionary));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":1111,"byte_end":1199,"line_start":33,"line_end":33,"column_start":1,"column_end":89}},{"value":"/ assert_eq!(wrap(text, &options),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":1200,"byte_end":1236,"line_start":34,"line_end":34,"column_start":1,"column_end":37}},{"value":"/            vec![\"textwrap: a small\",","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":1237,"byte_end":1277,"line_start":35,"line_end":35,"column_start":1,"column_end":41}},{"value":"/                 \"library for wrap-\",","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":1278,"byte_end":1318,"line_start":36,"line_end":36,"column_start":1,"column_end":41}},{"value":"/                 \"ping text.\"]);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":1319,"byte_end":1354,"line_start":37,"line_end":37,"column_start":1,"column_end":36}},{"value":"/ }","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":1355,"byte_end":1360,"line_start":38,"line_end":38,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":1361,"byte_end":1368,"line_start":39,"line_end":39,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":1369,"byte_end":1372,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ See also the [`unfill`] and [`refill`] functions which allow you to","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":1373,"byte_end":1444,"line_start":41,"line_end":41,"column_start":1,"column_end":72}},{"value":"/ manipulate already wrapped text.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":1445,"byte_end":1481,"line_start":42,"line_end":42,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":1482,"byte_end":1485,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ ## Wrapping Strings at Compile Time","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":1486,"byte_end":1525,"line_start":44,"line_end":44,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":1526,"byte_end":1529,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ If your strings are known at compile time, please take a look at","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":1530,"byte_end":1598,"line_start":46,"line_end":46,"column_start":1,"column_end":69}},{"value":"/ the procedural macros from the [textwrap-macros] crate.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":1599,"byte_end":1658,"line_start":47,"line_end":47,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":1659,"byte_end":1662,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ ## Displayed Width vs Byte Size","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":1663,"byte_end":1698,"line_start":49,"line_end":49,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":1699,"byte_end":1702,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ To word wrap text, one must know the width of each word so one can","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":1703,"byte_end":1773,"line_start":51,"line_end":51,"column_start":1,"column_end":71}},{"value":"/ know when to break lines. This library will by default measure the","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":1774,"byte_end":1844,"line_start":52,"line_end":52,"column_start":1,"column_end":71}},{"value":"/ width of text using the _displayed width_, not the size in bytes.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":1845,"byte_end":1914,"line_start":53,"line_end":53,"column_start":1,"column_end":70}},{"value":"/ The `unicode-width` Cargo feature controls this.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":1915,"byte_end":1967,"line_start":54,"line_end":54,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":1968,"byte_end":1971,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ This is important for non-ASCII text. ASCII characters such as `a`","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":1972,"byte_end":2042,"line_start":56,"line_end":56,"column_start":1,"column_end":71}},{"value":"/ and `!` are simple and take up one column each. This means that","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":2043,"byte_end":2110,"line_start":57,"line_end":57,"column_start":1,"column_end":68}},{"value":"/ the displayed width is equal to the string length in bytes.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":2111,"byte_end":2174,"line_start":58,"line_end":58,"column_start":1,"column_end":64}},{"value":"/ However, non-ASCII characters and symbols take up more than one","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":2175,"byte_end":2242,"line_start":59,"line_end":59,"column_start":1,"column_end":68}},{"value":"/ byte when UTF-8 encoded: `é` is `0xc3 0xa9` (two bytes) and `⚙` is","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":2243,"byte_end":2316,"line_start":60,"line_end":60,"column_start":1,"column_end":71}},{"value":"/ `0xe2 0x9a 0x99` (three bytes) in UTF-8, respectively.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":2317,"byte_end":2375,"line_start":61,"line_end":61,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":2376,"byte_end":2379,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ This is why we take care to use the displayed width instead of the","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":2380,"byte_end":2450,"line_start":63,"line_end":63,"column_start":1,"column_end":71}},{"value":"/ byte count when computing line lengths. All functions in this","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":2451,"byte_end":2516,"line_start":64,"line_end":64,"column_start":1,"column_end":66}},{"value":"/ library handle Unicode characters like this when the","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":2517,"byte_end":2573,"line_start":65,"line_end":65,"column_start":1,"column_end":57}},{"value":"/ `unicode-width` Cargo feature is enabled (it is enabled by","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":2574,"byte_end":2636,"line_start":66,"line_end":66,"column_start":1,"column_end":63}},{"value":"/ default).","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":2637,"byte_end":2650,"line_start":67,"line_end":67,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":2651,"byte_end":2654,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ # Indentation and Dedentation","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":2655,"byte_end":2688,"line_start":69,"line_end":69,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":2689,"byte_end":2692,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ The textwrap library also offers functions for adding a prefix to","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":2693,"byte_end":2762,"line_start":71,"line_end":71,"column_start":1,"column_end":70}},{"value":"/ every line of a string and to remove leading whitespace. As an","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":2763,"byte_end":2829,"line_start":72,"line_end":72,"column_start":1,"column_end":67}},{"value":"/ example, the [`indent`] function allows you to turn lines of text","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":2830,"byte_end":2899,"line_start":73,"line_end":73,"column_start":1,"column_end":70}},{"value":"/ into a bullet list:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":2900,"byte_end":2923,"line_start":74,"line_end":74,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":2924,"byte_end":2927,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":2928,"byte_end":2935,"line_start":76,"line_end":76,"column_start":1,"column_end":8}},{"value":"/ let before = \"\\","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":2936,"byte_end":2955,"line_start":77,"line_end":77,"column_start":1,"column_end":20}},{"value":"/ foo","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":2956,"byte_end":2963,"line_start":78,"line_end":78,"column_start":1,"column_end":8}},{"value":"/ bar","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":2964,"byte_end":2971,"line_start":79,"line_end":79,"column_start":1,"column_end":8}},{"value":"/ baz","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":2972,"byte_end":2979,"line_start":80,"line_end":80,"column_start":1,"column_end":8}},{"value":"/ \";","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":2980,"byte_end":2986,"line_start":81,"line_end":81,"column_start":1,"column_end":7}},{"value":"/ let after = \"\\","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":2987,"byte_end":3005,"line_start":82,"line_end":82,"column_start":1,"column_end":19}},{"value":"/ * foo","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":3006,"byte_end":3015,"line_start":83,"line_end":83,"column_start":1,"column_end":10}},{"value":"/ * bar","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":3016,"byte_end":3025,"line_start":84,"line_end":84,"column_start":1,"column_end":10}},{"value":"/ * baz","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":3026,"byte_end":3035,"line_start":85,"line_end":85,"column_start":1,"column_end":10}},{"value":"/ \";","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":3036,"byte_end":3042,"line_start":86,"line_end":86,"column_start":1,"column_end":7}},{"value":"/ assert_eq!(textwrap::indent(before, \"* \"), after);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":3043,"byte_end":3097,"line_start":87,"line_end":87,"column_start":1,"column_end":55}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":3098,"byte_end":3105,"line_start":88,"line_end":88,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":3106,"byte_end":3109,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"/ Removing leading whitespace is done with [`dedent`]:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":3110,"byte_end":3166,"line_start":90,"line_end":90,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":3167,"byte_end":3170,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":3171,"byte_end":3178,"line_start":92,"line_end":92,"column_start":1,"column_end":8}},{"value":"/ let before = \"","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":3179,"byte_end":3197,"line_start":93,"line_end":93,"column_start":1,"column_end":19}},{"value":"/     Some","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":3198,"byte_end":3210,"line_start":94,"line_end":94,"column_start":1,"column_end":13}},{"value":"/       indented","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":3211,"byte_end":3229,"line_start":95,"line_end":95,"column_start":1,"column_end":19}},{"value":"/         text","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":3230,"byte_end":3246,"line_start":96,"line_end":96,"column_start":1,"column_end":17}},{"value":"/ \";","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":3247,"byte_end":3253,"line_start":97,"line_end":97,"column_start":1,"column_end":7}},{"value":"/ let after = \"","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":3254,"byte_end":3271,"line_start":98,"line_end":98,"column_start":1,"column_end":18}},{"value":"/ Some","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":3272,"byte_end":3280,"line_start":99,"line_end":99,"column_start":1,"column_end":9}},{"value":"/   indented","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":3281,"byte_end":3295,"line_start":100,"line_end":100,"column_start":1,"column_end":15}},{"value":"/     text","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":3296,"byte_end":3308,"line_start":101,"line_end":101,"column_start":1,"column_end":13}},{"value":"/ \";","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":3309,"byte_end":3315,"line_start":102,"line_end":102,"column_start":1,"column_end":7}},{"value":"/ assert_eq!(textwrap::dedent(before), after);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":3316,"byte_end":3364,"line_start":103,"line_end":103,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":3365,"byte_end":3372,"line_start":104,"line_end":104,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":3373,"byte_end":3376,"line_start":105,"line_end":105,"column_start":1,"column_end":4}},{"value":"/ # Cargo Features","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":3377,"byte_end":3397,"line_start":106,"line_end":106,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":3398,"byte_end":3401,"line_start":107,"line_end":107,"column_start":1,"column_end":4}},{"value":"/ The textwrap library can be slimmed down as needed via a number of","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":3402,"byte_end":3472,"line_start":108,"line_end":108,"column_start":1,"column_end":71}},{"value":"/ Cargo features. This means you only pay for the features you","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":3473,"byte_end":3537,"line_start":109,"line_end":109,"column_start":1,"column_end":65}},{"value":"/ actually use.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":3538,"byte_end":3555,"line_start":110,"line_end":110,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":3556,"byte_end":3559,"line_start":111,"line_end":111,"column_start":1,"column_end":4}},{"value":"/ The full dependency graph, where dashed lines indicate optional","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":3560,"byte_end":3627,"line_start":112,"line_end":112,"column_start":1,"column_end":68}},{"value":"/ dependencies, is shown below:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":3628,"byte_end":3661,"line_start":113,"line_end":113,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":3662,"byte_end":3665,"line_start":114,"line_end":114,"column_start":1,"column_end":4}},{"value":"/ <img src=\"https://raw.githubusercontent.com/mgeisler/textwrap/master/images/textwrap-0.15.1.svg\">","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":3666,"byte_end":3767,"line_start":115,"line_end":115,"column_start":1,"column_end":102}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":3768,"byte_end":3771,"line_start":116,"line_end":116,"column_start":1,"column_end":4}},{"value":"/ ## Default Features","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":3772,"byte_end":3795,"line_start":117,"line_end":117,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":3796,"byte_end":3799,"line_start":118,"line_end":118,"column_start":1,"column_end":4}},{"value":"/ These features are enabled by default:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":3800,"byte_end":3842,"line_start":119,"line_end":119,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":3843,"byte_end":3846,"line_start":120,"line_end":120,"column_start":1,"column_end":4}},{"value":"/ * `unicode-linebreak`: enables finding words using the","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":3847,"byte_end":3905,"line_start":121,"line_end":121,"column_start":1,"column_end":59}},{"value":"/   [unicode-linebreak] crate, which implements the line breaking","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":3906,"byte_end":3973,"line_start":122,"line_end":122,"column_start":1,"column_end":68}},{"value":"/   algorithm described in [Unicode Standard Annex","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":3974,"byte_end":4026,"line_start":123,"line_end":123,"column_start":1,"column_end":53}},{"value":"/   #14](https://www.unicode.org/reports/tr14/).","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":4027,"byte_end":4077,"line_start":124,"line_end":124,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":4078,"byte_end":4081,"line_start":125,"line_end":125,"column_start":1,"column_end":4}},{"value":"/   This feature can be disabled if you are happy to find words","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":4082,"byte_end":4147,"line_start":126,"line_end":126,"column_start":1,"column_end":66}},{"value":"/   separated by ASCII space characters only. People wrapping text","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":4148,"byte_end":4216,"line_start":127,"line_end":127,"column_start":1,"column_end":69}},{"value":"/   with emojis or East-Asian characters will want most likely want","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":4217,"byte_end":4286,"line_start":128,"line_end":128,"column_start":1,"column_end":70}},{"value":"/   to enable this feature. See [`WordSeparator`] for details.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":4287,"byte_end":4351,"line_start":129,"line_end":129,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":4352,"byte_end":4355,"line_start":130,"line_end":130,"column_start":1,"column_end":4}},{"value":"/ * `unicode-width`: enables correct width computation of non-ASCII","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":4356,"byte_end":4425,"line_start":131,"line_end":131,"column_start":1,"column_end":70}},{"value":"/   characters via the [unicode-width] crate. Without this feature,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":4426,"byte_end":4495,"line_start":132,"line_end":132,"column_start":1,"column_end":70}},{"value":"/   every [`char`] is 1 column wide, except for emojis which are 2","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":4496,"byte_end":4564,"line_start":133,"line_end":133,"column_start":1,"column_end":69}},{"value":"/   columns wide. See the [`core::display_width`] function for","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":4565,"byte_end":4629,"line_start":134,"line_end":134,"column_start":1,"column_end":65}},{"value":"/   details.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":4630,"byte_end":4644,"line_start":135,"line_end":135,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":4645,"byte_end":4648,"line_start":136,"line_end":136,"column_start":1,"column_end":4}},{"value":"/   This feature can be disabled if you only need to wrap ASCII","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":4649,"byte_end":4714,"line_start":137,"line_end":137,"column_start":1,"column_end":66}},{"value":"/   text, or if the functions in [`core`] are used directly with","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":4715,"byte_end":4781,"line_start":138,"line_end":138,"column_start":1,"column_end":67}},{"value":"/   [`core::Fragment`]s for which the widths have been computed in","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":4782,"byte_end":4850,"line_start":139,"line_end":139,"column_start":1,"column_end":69}},{"value":"/   other ways.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":4851,"byte_end":4868,"line_start":140,"line_end":140,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":4869,"byte_end":4872,"line_start":141,"line_end":141,"column_start":1,"column_end":4}},{"value":"/ * `smawk`: enables linear-time wrapping of the whole paragraph via","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":4873,"byte_end":4943,"line_start":142,"line_end":142,"column_start":1,"column_end":71}},{"value":"/   the [smawk] crate. See the [`wrap_algorithms::wrap_optimal_fit`]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":4944,"byte_end":5014,"line_start":143,"line_end":143,"column_start":1,"column_end":71}},{"value":"/   function for details on the optimal-fit algorithm.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":5015,"byte_end":5071,"line_start":144,"line_end":144,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":5072,"byte_end":5075,"line_start":145,"line_end":145,"column_start":1,"column_end":4}},{"value":"/   This feature can be disabled if you only ever intend to use","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":5076,"byte_end":5141,"line_start":146,"line_end":146,"column_start":1,"column_end":66}},{"value":"/   [`wrap_algorithms::wrap_first_fit`].","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":5142,"byte_end":5184,"line_start":147,"line_end":147,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":5185,"byte_end":5188,"line_start":148,"line_end":148,"column_start":1,"column_end":4}},{"value":"/ With Rust 1.59.0, the size impact of the above features on your","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":5189,"byte_end":5256,"line_start":149,"line_end":149,"column_start":1,"column_end":68}},{"value":"/ binary is as follows:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":5257,"byte_end":5282,"line_start":150,"line_end":150,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":5283,"byte_end":5286,"line_start":151,"line_end":151,"column_start":1,"column_end":4}},{"value":"/ | Configuration                            |  Binary Size |    Delta |","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":5287,"byte_end":5361,"line_start":152,"line_end":152,"column_start":1,"column_end":75}},{"value":"/ | :---                                     |         ---: |     ---: |","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":5362,"byte_end":5436,"line_start":153,"line_end":153,"column_start":1,"column_end":75}},{"value":"/ | quick-and-dirty implementation           |       289 KB |     — KB |","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":5437,"byte_end":5513,"line_start":154,"line_end":154,"column_start":1,"column_end":75}},{"value":"/ | textwrap without default features        |       301 KB |    12 KB |","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":5514,"byte_end":5588,"line_start":155,"line_end":155,"column_start":1,"column_end":75}},{"value":"/ | textwrap with smawk                      |       317 KB |    28 KB |","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":5589,"byte_end":5663,"line_start":156,"line_end":156,"column_start":1,"column_end":75}},{"value":"/ | textwrap with unicode-width              |       313 KB |    24 KB |","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":5664,"byte_end":5738,"line_start":157,"line_end":157,"column_start":1,"column_end":75}},{"value":"/ | textwrap with unicode-linebreak          |       395 KB |   106 KB |","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":5739,"byte_end":5813,"line_start":158,"line_end":158,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":5814,"byte_end":5817,"line_start":159,"line_end":159,"column_start":1,"column_end":4}},{"value":"/ The above sizes are the stripped sizes and the binary is compiled","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":5818,"byte_end":5887,"line_start":160,"line_end":160,"column_start":1,"column_end":70}},{"value":"/ in release mode with this profile:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":5888,"byte_end":5926,"line_start":161,"line_end":161,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":5927,"byte_end":5930,"line_start":162,"line_end":162,"column_start":1,"column_end":4}},{"value":"/ ```toml","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":5931,"byte_end":5942,"line_start":163,"line_end":163,"column_start":1,"column_end":12}},{"value":"/ [profile.release]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":5943,"byte_end":5964,"line_start":164,"line_end":164,"column_start":1,"column_end":22}},{"value":"/ lto = true","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":5965,"byte_end":5979,"line_start":165,"line_end":165,"column_start":1,"column_end":15}},{"value":"/ codegen-units = 1","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":5980,"byte_end":6001,"line_start":166,"line_end":166,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":6002,"byte_end":6009,"line_start":167,"line_end":167,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":6010,"byte_end":6013,"line_start":168,"line_end":168,"column_start":1,"column_end":4}},{"value":"/ See the [binary-sizes demo] if you want to reproduce these","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":6014,"byte_end":6076,"line_start":169,"line_end":169,"column_start":1,"column_end":63}},{"value":"/ results.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":6077,"byte_end":6089,"line_start":170,"line_end":170,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":6090,"byte_end":6093,"line_start":171,"line_end":171,"column_start":1,"column_end":4}},{"value":"/ ## Optional Features","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":6094,"byte_end":6118,"line_start":172,"line_end":172,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":6119,"byte_end":6122,"line_start":173,"line_end":173,"column_start":1,"column_end":4}},{"value":"/ These Cargo features enable new functionality:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":6123,"byte_end":6173,"line_start":174,"line_end":174,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":6174,"byte_end":6177,"line_start":175,"line_end":175,"column_start":1,"column_end":4}},{"value":"/ * `terminal_size`: enables automatic detection of the terminal","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":6178,"byte_end":6244,"line_start":176,"line_end":176,"column_start":1,"column_end":67}},{"value":"/   width via the [terminal_size] crate. See the","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":6245,"byte_end":6295,"line_start":177,"line_end":177,"column_start":1,"column_end":51}},{"value":"/   [`Options::with_termwidth`] constructor for details.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":6296,"byte_end":6354,"line_start":178,"line_end":178,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":6355,"byte_end":6358,"line_start":179,"line_end":179,"column_start":1,"column_end":4}},{"value":"/ * `hyphenation`: enables language-sensitive hyphenation via the","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":6359,"byte_end":6426,"line_start":180,"line_end":180,"column_start":1,"column_end":68}},{"value":"/   [hyphenation] crate. See the [`word_splitters::WordSplitter`]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":6427,"byte_end":6494,"line_start":181,"line_end":181,"column_start":1,"column_end":68}},{"value":"/   trait for details.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":6495,"byte_end":6519,"line_start":182,"line_end":182,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":6520,"byte_end":6523,"line_start":183,"line_end":183,"column_start":1,"column_end":4}},{"value":"/ [unicode-linebreak]: https://docs.rs/unicode-linebreak/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":6524,"byte_end":6583,"line_start":184,"line_end":184,"column_start":1,"column_end":60}},{"value":"/ [unicode-width]: https://docs.rs/unicode-width/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":6584,"byte_end":6635,"line_start":185,"line_end":185,"column_start":1,"column_end":52}},{"value":"/ [smawk]: https://docs.rs/smawk/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":6636,"byte_end":6671,"line_start":186,"line_end":186,"column_start":1,"column_end":36}},{"value":"/ [binary-sizes demo]: https://github.com/mgeisler/textwrap/tree/master/examples/binary-sizes","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":6672,"byte_end":6767,"line_start":187,"line_end":187,"column_start":1,"column_end":96}},{"value":"/ [textwrap-macros]: https://docs.rs/textwrap-macros/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":6768,"byte_end":6823,"line_start":188,"line_end":188,"column_start":1,"column_end":56}},{"value":"/ [terminal_size]: https://docs.rs/terminal_size/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":6824,"byte_end":6875,"line_start":189,"line_end":189,"column_start":1,"column_end":52}},{"value":"/ [hyphenation]: https://docs.rs/hyphenation/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":6876,"byte_end":6923,"line_start":190,"line_end":190,"column_start":1,"column_end":48}},{"value":"forbid(unsafe_code)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":6984,"byte_end":7007,"line_start":193,"line_end":193,"column_start":1,"column_end":24}},{"value":"deny(missing_docs)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":7063,"byte_end":7085,"line_start":194,"line_end":194,"column_start":1,"column_end":23}},{"value":"deny(missing_debug_implementations)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":7086,"byte_end":7125,"line_start":195,"line_end":195,"column_start":1,"column_end":40}},{"value":"allow(clippy :: redundant_field_names)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":7126,"byte_end":7166,"line_start":196,"line_end":196,"column_start":1,"column_end":41}}]},{"kind":"Function","id":{"krate":0,"index":7},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\indentation.rs","byte_start":68088,"byte_end":68094,"line_start":52,"line_end":52,"column_start":8,"column_end":14},"name":"indent","qualname":"::indentation::indent","value":"fn indent(&str, &str) -> String","parent":null,"children":[],"decl_id":null,"docs":" Indent each line by the given prefix.","sig":null,"attributes":[{"value":"/ Indent each line by the given prefix.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\indentation.rs","byte_start":66853,"byte_end":66894,"line_start":7,"line_end":7,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\indentation.rs","byte_start":66895,"byte_end":66898,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\indentation.rs","byte_start":66899,"byte_end":66913,"line_start":9,"line_end":9,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\indentation.rs","byte_start":66914,"byte_end":66917,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\indentation.rs","byte_start":66918,"byte_end":66925,"line_start":11,"line_end":11,"column_start":1,"column_end":8}},{"value":"/ use textwrap::indent;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\indentation.rs","byte_start":66926,"byte_end":66951,"line_start":12,"line_end":12,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\indentation.rs","byte_start":66952,"byte_end":66955,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(indent(\"First line.\\nSecond line.\\n\", \"  \"),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\indentation.rs","byte_start":66956,"byte_end":67015,"line_start":14,"line_end":14,"column_start":1,"column_end":60}},{"value":"/            \"  First line.\\n  Second line.\\n\");","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\indentation.rs","byte_start":67016,"byte_end":67066,"line_start":15,"line_end":15,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\indentation.rs","byte_start":67067,"byte_end":67074,"line_start":16,"line_end":16,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\indentation.rs","byte_start":67075,"byte_end":67078,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ When indenting, trailing whitespace is stripped from the prefix.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\indentation.rs","byte_start":67079,"byte_end":67147,"line_start":18,"line_end":18,"column_start":1,"column_end":69}},{"value":"/ This means that empty lines remain empty afterwards:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\indentation.rs","byte_start":67148,"byte_end":67204,"line_start":19,"line_end":19,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\indentation.rs","byte_start":67205,"byte_end":67208,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\indentation.rs","byte_start":67209,"byte_end":67216,"line_start":21,"line_end":21,"column_start":1,"column_end":8}},{"value":"/ use textwrap::indent;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\indentation.rs","byte_start":67217,"byte_end":67242,"line_start":22,"line_end":22,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\indentation.rs","byte_start":67243,"byte_end":67246,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(indent(\"First line.\\n\\n\\nSecond line.\\n\", \"  \"),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\indentation.rs","byte_start":67247,"byte_end":67310,"line_start":24,"line_end":24,"column_start":1,"column_end":64}},{"value":"/            \"  First line.\\n\\n\\n  Second line.\\n\");","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\indentation.rs","byte_start":67311,"byte_end":67365,"line_start":25,"line_end":25,"column_start":1,"column_end":55}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\indentation.rs","byte_start":67366,"byte_end":67373,"line_start":26,"line_end":26,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\indentation.rs","byte_start":67374,"byte_end":67377,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ Notice how `\"\\n\\n\\n\"` remained as `\"\\n\\n\\n\"`.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\indentation.rs","byte_start":67378,"byte_end":67427,"line_start":28,"line_end":28,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\indentation.rs","byte_start":67428,"byte_end":67431,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ This feature is useful when you want to indent text and have a","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\indentation.rs","byte_start":67432,"byte_end":67498,"line_start":30,"line_end":30,"column_start":1,"column_end":67}},{"value":"/ space between your prefix and the text. In this case, you _don't_","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\indentation.rs","byte_start":67499,"byte_end":67568,"line_start":31,"line_end":31,"column_start":1,"column_end":70}},{"value":"/ want a trailing space on empty lines:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\indentation.rs","byte_start":67569,"byte_end":67610,"line_start":32,"line_end":32,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\indentation.rs","byte_start":67611,"byte_end":67614,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\indentation.rs","byte_start":67615,"byte_end":67622,"line_start":34,"line_end":34,"column_start":1,"column_end":8}},{"value":"/ use textwrap::indent;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\indentation.rs","byte_start":67623,"byte_end":67648,"line_start":35,"line_end":35,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\indentation.rs","byte_start":67649,"byte_end":67652,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(indent(\"foo = 123\\n\\nprint(foo)\\n\", \"# \"),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\indentation.rs","byte_start":67653,"byte_end":67710,"line_start":37,"line_end":37,"column_start":1,"column_end":58}},{"value":"/            \"# foo = 123\\n#\\n# print(foo)\\n\");","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\indentation.rs","byte_start":67711,"byte_end":67760,"line_start":38,"line_end":38,"column_start":1,"column_end":50}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\indentation.rs","byte_start":67761,"byte_end":67768,"line_start":39,"line_end":39,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\indentation.rs","byte_start":67769,"byte_end":67772,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ Notice how `\"\\n\\n\"` became `\"\\n#\\n\"` instead of `\"\\n# \\n\"` which","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\indentation.rs","byte_start":67773,"byte_end":67841,"line_start":41,"line_end":41,"column_start":1,"column_end":69}},{"value":"/ would have trailing whitespace.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\indentation.rs","byte_start":67842,"byte_end":67877,"line_start":42,"line_end":42,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\indentation.rs","byte_start":67878,"byte_end":67881,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ Leading and trailing whitespace coming from the text itself is","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\indentation.rs","byte_start":67882,"byte_end":67948,"line_start":44,"line_end":44,"column_start":1,"column_end":67}},{"value":"/ kept unchanged:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\indentation.rs","byte_start":67949,"byte_end":67968,"line_start":45,"line_end":45,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\indentation.rs","byte_start":67969,"byte_end":67972,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\indentation.rs","byte_start":67973,"byte_end":67980,"line_start":47,"line_end":47,"column_start":1,"column_end":8}},{"value":"/ use textwrap::indent;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\indentation.rs","byte_start":67981,"byte_end":68006,"line_start":48,"line_end":48,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\indentation.rs","byte_start":68007,"byte_end":68010,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(indent(\" \\t  Foo   \", \"->\"), \"-> \\t  Foo   \");","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\indentation.rs","byte_start":68011,"byte_end":68072,"line_start":50,"line_end":50,"column_start":1,"column_end":62}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\indentation.rs","byte_start":68073,"byte_end":68080,"line_start":51,"line_end":51,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":8},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\indentation.rs","byte_start":69313,"byte_end":69319,"line_start":95,"line_end":95,"column_start":8,"column_end":14},"name":"dedent","qualname":"::indentation::dedent","value":"fn dedent(&str) -> String","parent":null,"children":[],"decl_id":null,"docs":" Removes common leading whitespace from each line.","sig":null,"attributes":[{"value":"/ Removes common leading whitespace from each line.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\indentation.rs","byte_start":68924,"byte_end":68977,"line_start":77,"line_end":77,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\indentation.rs","byte_start":68978,"byte_end":68981,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ This function will look at each non-empty line and determine the","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\indentation.rs","byte_start":68982,"byte_end":69050,"line_start":79,"line_end":79,"column_start":1,"column_end":69}},{"value":"/ maximum amount of whitespace that can be removed from all lines:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\indentation.rs","byte_start":69051,"byte_end":69119,"line_start":80,"line_end":80,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\indentation.rs","byte_start":69120,"byte_end":69123,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\indentation.rs","byte_start":69124,"byte_end":69131,"line_start":82,"line_end":82,"column_start":1,"column_end":8}},{"value":"/ use textwrap::dedent;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\indentation.rs","byte_start":69132,"byte_end":69157,"line_start":83,"line_end":83,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\indentation.rs","byte_start":69158,"byte_end":69161,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(dedent(\"","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\indentation.rs","byte_start":69162,"byte_end":69185,"line_start":85,"line_end":85,"column_start":1,"column_end":24}},{"value":"/     1st line","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\indentation.rs","byte_start":69186,"byte_end":69202,"line_start":86,"line_end":86,"column_start":1,"column_end":17}},{"value":"/       2nd line","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\indentation.rs","byte_start":69203,"byte_end":69221,"line_start":87,"line_end":87,"column_start":1,"column_end":19}},{"value":"/     3rd line","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\indentation.rs","byte_start":69222,"byte_end":69238,"line_start":88,"line_end":88,"column_start":1,"column_end":17}},{"value":"/ \"), \"","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\indentation.rs","byte_start":69239,"byte_end":69248,"line_start":89,"line_end":89,"column_start":1,"column_end":10}},{"value":"/ 1st line","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\indentation.rs","byte_start":69249,"byte_end":69261,"line_start":90,"line_end":90,"column_start":1,"column_end":13}},{"value":"/   2nd line","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\indentation.rs","byte_start":69262,"byte_end":69276,"line_start":91,"line_end":91,"column_start":1,"column_end":15}},{"value":"/ 3rd line","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\indentation.rs","byte_start":69277,"byte_end":69289,"line_start":92,"line_end":92,"column_start":1,"column_end":13}},{"value":"/ \");","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\indentation.rs","byte_start":69290,"byte_end":69297,"line_start":93,"line_end":93,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\indentation.rs","byte_start":69298,"byte_end":69305,"line_start":94,"line_end":94,"column_start":1,"column_end":8}}]},{"kind":"TupleVariant","id":{"krate":0,"index":159},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_separators.rs","byte_start":77001,"byte_end":77011,"line_start":55,"line_end":55,"column_start":5,"column_end":15},"name":"AsciiSpace","qualname":"::word_separators::WordSeparator::AsciiSpace","value":"WordSeparator::AsciiSpace","parent":{"krate":0,"index":158},"children":[],"decl_id":null,"docs":" Find words by splitting on runs of `' '` characters.","sig":null,"attributes":[{"value":"/ Find words by splitting on runs of `' '` characters.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_separators.rs","byte_start":76599,"byte_end":76655,"line_start":43,"line_end":43,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_separators.rs","byte_start":76660,"byte_end":76663,"line_start":44,"line_end":44,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_separators.rs","byte_start":76668,"byte_end":76682,"line_start":45,"line_end":45,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_separators.rs","byte_start":76687,"byte_end":76690,"line_start":46,"line_end":46,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_separators.rs","byte_start":76695,"byte_end":76702,"line_start":47,"line_end":47,"column_start":5,"column_end":12}},{"value":"/ use textwrap::core::Word;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_separators.rs","byte_start":76707,"byte_end":76736,"line_start":48,"line_end":48,"column_start":5,"column_end":34}},{"value":"/ use textwrap::WordSeparator::AsciiSpace;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_separators.rs","byte_start":76741,"byte_end":76785,"line_start":49,"line_end":49,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_separators.rs","byte_start":76790,"byte_end":76793,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/ let words = AsciiSpace.find_words(\"Hello   World!\").collect::<Vec<_>>();","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_separators.rs","byte_start":76798,"byte_end":76874,"line_start":51,"line_end":51,"column_start":5,"column_end":81}},{"value":"/ assert_eq!(words, vec![Word::from(\"Hello   \"),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_separators.rs","byte_start":76879,"byte_end":76929,"line_start":52,"line_end":52,"column_start":5,"column_end":55}},{"value":"/                        Word::from(\"World!\")]);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_separators.rs","byte_start":76934,"byte_end":76984,"line_start":53,"line_end":53,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_separators.rs","byte_start":76989,"byte_end":76996,"line_start":54,"line_end":54,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":161},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_separators.rs","byte_start":79679,"byte_end":79685,"line_start":122,"line_end":122,"column_start":5,"column_end":11},"name":"Custom","qualname":"::word_separators::WordSeparator::Custom","value":"WordSeparator::Custom(fn(line: &str) -> Box<dyn Iterator<Item = Word>>)","parent":{"krate":0,"index":158},"children":[],"decl_id":null,"docs":" Find words using a custom word separator\n","sig":null,"attributes":[{"value":"/ Find words using a custom word separator","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_separators.rs","byte_start":79630,"byte_end":79674,"line_start":121,"line_end":121,"column_start":5,"column_end":49}}]},{"kind":"Field","id":{"krate":0,"index":163},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_separators.rs","byte_start":79686,"byte_end":79743,"line_start":122,"line_end":122,"column_start":12,"column_end":69},"name":"0","qualname":"::word_separators::WordSeparator::Custom::0","value":"for<'r> fn(&'r str) -> std::boxed::Box<(dyn std::iter::Iterator<for<'r> Item = core::Word<'r>> + 'r)>","parent":{"krate":0,"index":161},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":158},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_separators.rs","byte_start":76579,"byte_end":76592,"line_start":42,"line_end":42,"column_start":10,"column_end":23},"name":"WordSeparator","qualname":"::word_separators::WordSeparator","value":"enum WordSeparator {\n    AsciiSpace,\n    Custom(fn(line: &str) -> Box<dyn Iterator<Item = Word>>),\n}","parent":null,"children":[{"krate":0,"index":159},{"krate":0,"index":161}],"decl_id":null,"docs":" Describes where words occur in a line of text.","sig":null,"attributes":[{"value":"/ Describes where words occur in a line of text.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_separators.rs","byte_start":75791,"byte_end":75841,"line_start":21,"line_end":21,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_separators.rs","byte_start":75842,"byte_end":75845,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ The simplest approach is say that words are separated by one or","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_separators.rs","byte_start":75846,"byte_end":75913,"line_start":23,"line_end":23,"column_start":1,"column_end":68}},{"value":"/ more ASCII spaces (`' '`). This works for Western languages","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_separators.rs","byte_start":75914,"byte_end":75977,"line_start":24,"line_end":24,"column_start":1,"column_end":64}},{"value":"/ without emojis. A more complex approach is to use the Unicode line","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_separators.rs","byte_start":75978,"byte_end":76048,"line_start":25,"line_end":25,"column_start":1,"column_end":71}},{"value":"/ breaking algorithm, which finds break points in non-ASCII text.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_separators.rs","byte_start":76049,"byte_end":76116,"line_start":26,"line_end":26,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_separators.rs","byte_start":76117,"byte_end":76120,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ The line breaks occur between words, please see","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_separators.rs","byte_start":76121,"byte_end":76172,"line_start":28,"line_end":28,"column_start":1,"column_end":52}},{"value":"/ [`WordSplitter`](crate::WordSplitter) for options of how to handle","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_separators.rs","byte_start":76173,"byte_end":76243,"line_start":29,"line_end":29,"column_start":1,"column_end":71}},{"value":"/ hyphenation of individual words.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_separators.rs","byte_start":76244,"byte_end":76280,"line_start":30,"line_end":30,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_separators.rs","byte_start":76281,"byte_end":76284,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_separators.rs","byte_start":76285,"byte_end":76299,"line_start":32,"line_end":32,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_separators.rs","byte_start":76300,"byte_end":76303,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_separators.rs","byte_start":76304,"byte_end":76311,"line_start":34,"line_end":34,"column_start":1,"column_end":8}},{"value":"/ use textwrap::core::Word;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_separators.rs","byte_start":76312,"byte_end":76341,"line_start":35,"line_end":35,"column_start":1,"column_end":30}},{"value":"/ use textwrap::WordSeparator::AsciiSpace;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_separators.rs","byte_start":76342,"byte_end":76386,"line_start":36,"line_end":36,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_separators.rs","byte_start":76387,"byte_end":76390,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ let words = AsciiSpace.find_words(\"Hello World!\").collect::<Vec<_>>();","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_separators.rs","byte_start":76391,"byte_end":76465,"line_start":38,"line_end":38,"column_start":1,"column_end":75}},{"value":"/ assert_eq!(words, vec![Word::from(\"Hello \"), Word::from(\"World!\")]);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_separators.rs","byte_start":76466,"byte_end":76538,"line_start":39,"line_end":39,"column_start":1,"column_end":73}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_separators.rs","byte_start":76539,"byte_end":76546,"line_start":40,"line_end":40,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":22},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_separators.rs","byte_start":79797,"byte_end":79800,"line_start":126,"line_end":126,"column_start":8,"column_end":11},"name":"fmt","qualname":"<WordSeparator as std::fmt::Debug>::fmt","value":"fn fmt(&Self, &mut std::fmt::Formatter) -> std::fmt::Result","parent":{"krate":2,"index":9907},"children":[],"decl_id":{"krate":2,"index":9908},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":24},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_separators.rs","byte_start":80440,"byte_end":80443,"line_start":142,"line_end":142,"column_start":18,"column_end":21},"name":"new","qualname":"<WordSeparator>::new","value":"const fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new word separator.","sig":null,"attributes":[{"value":"/ Create a new word separator.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_separators.rs","byte_start":80206,"byte_end":80238,"line_start":137,"line_end":137,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_separators.rs","byte_start":80243,"byte_end":80246,"line_start":138,"line_end":138,"column_start":5,"column_end":8}},{"value":"/ The best available algorithm is used by default, i.e.,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_separators.rs","byte_start":80251,"byte_end":80309,"line_start":139,"line_end":139,"column_start":5,"column_end":63}},{"value":"/ [`WordSeparator::UnicodeBreakProperties`] if available,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_separators.rs","byte_start":80314,"byte_end":80373,"line_start":140,"line_end":140,"column_start":5,"column_end":64}},{"value":"/ otherwise [`WordSeparator::AsciiSpace`].","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_separators.rs","byte_start":80378,"byte_end":80422,"line_start":141,"line_end":141,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":25},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_separators.rs","byte_start":80966,"byte_end":80976,"line_start":158,"line_end":158,"column_start":12,"column_end":22},"name":"find_words","qualname":"<WordSeparator>::find_words","value":"fn find_words<'a>(&Self, &'a str) -> Box<dyn Iterator<Item = Word> + 'a>","parent":null,"children":[],"decl_id":null,"docs":" Find all words in `line`.\n","sig":null,"attributes":[{"value":"/ Find all words in `line`.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_separators.rs","byte_start":80925,"byte_end":80954,"line_start":157,"line_end":157,"column_start":5,"column_end":34}}]},{"kind":"Mod","id":{"krate":0,"index":33},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"word_splitters","qualname":"::word_splitters","value":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","parent":null,"children":[{"krate":0,"index":34},{"krate":0,"index":35},{"krate":0,"index":38},{"krate":0,"index":167},{"krate":0,"index":175},{"krate":0,"index":41},{"krate":0,"index":43},{"krate":0,"index":45},{"krate":0,"index":49}],"decl_id":null,"docs":" Word splitting functionality.","sig":null,"attributes":[{"value":"/ Word splitting functionality.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":90145,"byte_end":90178,"line_start":1,"line_end":1,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":90179,"byte_end":90182,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ To wrap text into lines, long words sometimes need to be split","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":90183,"byte_end":90249,"line_start":3,"line_end":3,"column_start":1,"column_end":67}},{"value":"/ across lines. The [`WordSplitter`] enum defines this","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":90250,"byte_end":90306,"line_start":4,"line_end":4,"column_start":1,"column_end":57}},{"value":"/ functionality.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":90307,"byte_end":90325,"line_start":5,"line_end":5,"column_start":1,"column_end":19}}]},{"kind":"TupleVariant","id":{"krate":0,"index":168},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":91948,"byte_end":91961,"line_start":50,"line_end":50,"column_start":5,"column_end":18},"name":"NoHyphenation","qualname":"::word_splitters::WordSplitter::NoHyphenation","value":"WordSplitter::NoHyphenation","parent":{"krate":0,"index":167},"children":[],"decl_id":null,"docs":" Use this as a [`Options.word_splitter`] to avoid any kind of\n hyphenation:","sig":null,"attributes":[{"value":"/ Use this as a [`Options.word_splitter`] to avoid any kind of","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":91516,"byte_end":91580,"line_start":38,"line_end":38,"column_start":5,"column_end":69}},{"value":"/ hyphenation:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":91585,"byte_end":91601,"line_start":39,"line_end":39,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":91606,"byte_end":91609,"line_start":40,"line_end":40,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":91614,"byte_end":91621,"line_start":41,"line_end":41,"column_start":5,"column_end":12}},{"value":"/ use textwrap::{wrap, Options, WordSplitter};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":91626,"byte_end":91674,"line_start":42,"line_end":42,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":91679,"byte_end":91682,"line_start":43,"line_end":43,"column_start":5,"column_end":8}},{"value":"/ let options = Options::new(8).word_splitter(WordSplitter::NoHyphenation);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":91687,"byte_end":91764,"line_start":44,"line_end":44,"column_start":5,"column_end":82}},{"value":"/ assert_eq!(wrap(\"foo bar-baz\", &options),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":91769,"byte_end":91814,"line_start":45,"line_end":45,"column_start":5,"column_end":50}},{"value":"/            vec![\"foo\", \"bar-baz\"]);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":91819,"byte_end":91858,"line_start":46,"line_end":46,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":91863,"byte_end":91870,"line_start":47,"line_end":47,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":91875,"byte_end":91878,"line_start":48,"line_end":48,"column_start":5,"column_end":8}},{"value":"/ [`Options.word_splitter`]: super::Options::word_splitter","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":91883,"byte_end":91943,"line_start":49,"line_end":49,"column_start":5,"column_end":65}}]},{"kind":"TupleVariant","id":{"krate":0,"index":170},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":92538,"byte_end":92552,"line_start":68,"line_end":68,"column_start":5,"column_end":19},"name":"HyphenSplitter","qualname":"::word_splitters::WordSplitter::HyphenSplitter","value":"WordSplitter::HyphenSplitter","parent":{"krate":0,"index":167},"children":[],"decl_id":null,"docs":" `HyphenSplitter` is the default `WordSplitter` used by\n [`Options::new`](super::Options::new). It will split words on\n existing hyphens in the word.","sig":null,"attributes":[{"value":"/ `HyphenSplitter` is the default `WordSplitter` used by","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":91968,"byte_end":92026,"line_start":52,"line_end":52,"column_start":5,"column_end":63}},{"value":"/ [`Options::new`](super::Options::new). It will split words on","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":92031,"byte_end":92096,"line_start":53,"line_end":53,"column_start":5,"column_end":70}},{"value":"/ existing hyphens in the word.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":92101,"byte_end":92134,"line_start":54,"line_end":54,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":92139,"byte_end":92142,"line_start":55,"line_end":55,"column_start":5,"column_end":8}},{"value":"/ It will only use hyphens that are surrounded by alphanumeric","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":92147,"byte_end":92211,"line_start":56,"line_end":56,"column_start":5,"column_end":69}},{"value":"/ characters, which prevents a word like `\"--foo-bar\"` from","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":92216,"byte_end":92277,"line_start":57,"line_end":57,"column_start":5,"column_end":66}},{"value":"/ being split into `\"--\"` and `\"foo-bar\"`.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":92282,"byte_end":92326,"line_start":58,"line_end":58,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":92331,"byte_end":92334,"line_start":59,"line_end":59,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":92339,"byte_end":92353,"line_start":60,"line_end":60,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":92358,"byte_end":92361,"line_start":61,"line_end":61,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":92366,"byte_end":92373,"line_start":62,"line_end":62,"column_start":5,"column_end":12}},{"value":"/ use textwrap::WordSplitter;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":92378,"byte_end":92409,"line_start":63,"line_end":63,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":92414,"byte_end":92417,"line_start":64,"line_end":64,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(WordSplitter::HyphenSplitter.split_points(\"--foo-bar\"),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":92422,"byte_end":92492,"line_start":65,"line_end":65,"column_start":5,"column_end":75}},{"value":"/            vec![6]);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":92497,"byte_end":92521,"line_start":66,"line_end":66,"column_start":5,"column_end":29}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":92526,"byte_end":92533,"line_start":67,"line_end":67,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":172},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":93135,"byte_end":93141,"line_start":88,"line_end":88,"column_start":5,"column_end":11},"name":"Custom","qualname":"::word_splitters::WordSplitter::Custom","value":"WordSplitter::Custom(fn(word: &str) -> Vec<usize>)","parent":{"krate":0,"index":167},"children":[],"decl_id":null,"docs":" Use a custom function as the word splitter.","sig":null,"attributes":[{"value":"/ Use a custom function as the word splitter.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":92559,"byte_end":92606,"line_start":70,"line_end":70,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":92611,"byte_end":92614,"line_start":71,"line_end":71,"column_start":5,"column_end":8}},{"value":"/ This varian lets you implement a custom word splitter using","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":92619,"byte_end":92682,"line_start":72,"line_end":72,"column_start":5,"column_end":68}},{"value":"/ your own function.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":92687,"byte_end":92709,"line_start":73,"line_end":73,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":92714,"byte_end":92717,"line_start":74,"line_end":74,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":92722,"byte_end":92736,"line_start":75,"line_end":75,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":92741,"byte_end":92744,"line_start":76,"line_end":76,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":92749,"byte_end":92756,"line_start":77,"line_end":77,"column_start":5,"column_end":12}},{"value":"/ use textwrap::WordSplitter;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":92761,"byte_end":92792,"line_start":78,"line_end":78,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":92797,"byte_end":92800,"line_start":79,"line_end":79,"column_start":5,"column_end":8}},{"value":"/ fn split_at_underscore(word: &str) -> Vec<usize> {","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":92805,"byte_end":92859,"line_start":80,"line_end":80,"column_start":5,"column_end":59}},{"value":"/     word.match_indices('_').map(|(idx, _)| idx + 1).collect()","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":92864,"byte_end":92929,"line_start":81,"line_end":81,"column_start":5,"column_end":70}},{"value":"/ }","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":92934,"byte_end":92939,"line_start":82,"line_end":82,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":92944,"byte_end":92947,"line_start":83,"line_end":83,"column_start":5,"column_end":8}},{"value":"/ let word_splitter = WordSplitter::Custom(split_at_underscore);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":92952,"byte_end":93018,"line_start":84,"line_end":84,"column_start":5,"column_end":71}},{"value":"/ assert_eq!(word_splitter.split_points(\"a_long_identifier\"),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":93023,"byte_end":93086,"line_start":85,"line_end":85,"column_start":5,"column_end":68}},{"value":"/            vec![2, 7]);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":93091,"byte_end":93118,"line_start":86,"line_end":86,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":93123,"byte_end":93130,"line_start":87,"line_end":87,"column_start":5,"column_end":12}}]},{"kind":"Field","id":{"krate":0,"index":174},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":93142,"byte_end":93170,"line_start":88,"line_end":88,"column_start":12,"column_end":40},"name":"0","qualname":"::word_splitters::WordSplitter::Custom::0","value":"for<'r> fn(&'r str) -> std::vec::Vec<usize>","parent":{"krate":0,"index":172},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":167},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":91497,"byte_end":91509,"line_start":37,"line_end":37,"column_start":10,"column_end":22},"name":"WordSplitter","qualname":"::word_splitters::WordSplitter","value":"enum WordSplitter {\n    NoHyphenation,\n    HyphenSplitter,\n    Custom(fn(word: &str) -> Vec<usize>),\n}","parent":null,"children":[{"krate":0,"index":168},{"krate":0,"index":170},{"krate":0,"index":172}],"decl_id":null,"docs":" The `WordSplitter` enum describes where words can be split.","sig":null,"attributes":[{"value":"/ The `WordSplitter` enum describes where words can be split.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":90368,"byte_end":90431,"line_start":9,"line_end":9,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":90432,"byte_end":90435,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ If the textwrap crate has been compiled with the `hyphenation`","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":90436,"byte_end":90502,"line_start":11,"line_end":11,"column_start":1,"column_end":67}},{"value":"/ Cargo feature enabled, you will find a","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":90503,"byte_end":90545,"line_start":12,"line_end":12,"column_start":1,"column_end":43}},{"value":"/ [`WordSplitter::Hyphenation`] variant. Use this struct for","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":90546,"byte_end":90608,"line_start":13,"line_end":13,"column_start":1,"column_end":63}},{"value":"/ language-aware hyphenation:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":90609,"byte_end":90640,"line_start":14,"line_end":14,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":90641,"byte_end":90644,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":90645,"byte_end":90652,"line_start":16,"line_end":16,"column_start":1,"column_end":8}},{"value":"/ #[cfg(feature = \"hyphenation\")] {","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":90653,"byte_end":90690,"line_start":17,"line_end":17,"column_start":1,"column_end":38}},{"value":"/     use hyphenation::{Language, Load, Standard};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":90691,"byte_end":90743,"line_start":18,"line_end":18,"column_start":1,"column_end":53}},{"value":"/     use textwrap::{wrap, Options, WordSplitter};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":90744,"byte_end":90796,"line_start":19,"line_end":19,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":90797,"byte_end":90800,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/     let text = \"Oxidation is the loss of electrons.\";","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":90801,"byte_end":90858,"line_start":21,"line_end":21,"column_start":1,"column_end":58}},{"value":"/     let dictionary = Standard::from_embedded(Language::EnglishUS).unwrap();","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":90859,"byte_end":90938,"line_start":22,"line_end":22,"column_start":1,"column_end":80}},{"value":"/     let options = Options::new(8).word_splitter(WordSplitter::Hyphenation(dictionary));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":90939,"byte_end":91030,"line_start":23,"line_end":23,"column_start":1,"column_end":92}},{"value":"/     assert_eq!(wrap(text, &options), vec![\"Oxida-\",","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":91031,"byte_end":91086,"line_start":24,"line_end":24,"column_start":1,"column_end":56}},{"value":"/                                           \"tion is\",","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":91087,"byte_end":91143,"line_start":25,"line_end":25,"column_start":1,"column_end":57}},{"value":"/                                           \"the loss\",","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":91144,"byte_end":91201,"line_start":26,"line_end":26,"column_start":1,"column_end":58}},{"value":"/                                           \"of elec-\",","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":91202,"byte_end":91259,"line_start":27,"line_end":27,"column_start":1,"column_end":58}},{"value":"/                                           \"trons.\"]);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":91260,"byte_end":91317,"line_start":28,"line_end":28,"column_start":1,"column_end":58}},{"value":"/ }","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":91318,"byte_end":91323,"line_start":29,"line_end":29,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":91324,"byte_end":91331,"line_start":30,"line_end":30,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":91332,"byte_end":91335,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ Please see the documentation for the [hyphenation] crate for more","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":91336,"byte_end":91405,"line_start":32,"line_end":32,"column_start":1,"column_end":70}},{"value":"/ details.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":91406,"byte_end":91418,"line_start":33,"line_end":33,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":91419,"byte_end":91422,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ [hyphenation]: https://docs.rs/hyphenation/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":91423,"byte_end":91470,"line_start":35,"line_end":35,"column_start":1,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":42},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":93592,"byte_end":93595,"line_start":102,"line_end":102,"column_start":8,"column_end":11},"name":"fmt","qualname":"<WordSplitter as std::fmt::Debug>::fmt","value":"fn fmt(&Self, &mut std::fmt::Formatter) -> std::fmt::Result","parent":{"krate":2,"index":9907},"children":[],"decl_id":{"krate":2,"index":9908},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":44},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":94106,"byte_end":94108,"line_start":114,"line_end":114,"column_start":8,"column_end":10},"name":"eq","qualname":"<WordSplitter as std::cmp::PartialEq>::eq","value":"fn eq(&Self, &WordSplitter) -> bool","parent":{"krate":2,"index":2802},"children":[],"decl_id":{"krate":2,"index":2804},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":46},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":95329,"byte_end":95341,"line_start":143,"line_end":143,"column_start":12,"column_end":24},"name":"split_points","qualname":"<WordSplitter>::split_points","value":"fn split_points(&Self, &str) -> Vec<usize>","parent":null,"children":[],"decl_id":null,"docs":" Return all possible indices where `word` can be split.","sig":null,"attributes":[{"value":"/ Return all possible indices where `word` can be split.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":94627,"byte_end":94685,"line_start":128,"line_end":128,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":94690,"byte_end":94693,"line_start":129,"line_end":129,"column_start":5,"column_end":8}},{"value":"/ The indices are in the range `0..word.len()`. They point to","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":94698,"byte_end":94761,"line_start":130,"line_end":130,"column_start":5,"column_end":68}},{"value":"/ the index _after_ the split point, i.e., after `-` if","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":94766,"byte_end":94823,"line_start":131,"line_end":131,"column_start":5,"column_end":62}},{"value":"/ splitting on hyphens. This way, `word.split_at(idx)` will","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":94828,"byte_end":94889,"line_start":132,"line_end":132,"column_start":5,"column_end":66}},{"value":"/ break the word into two well-formed pieces.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":94894,"byte_end":94941,"line_start":133,"line_end":133,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":94946,"byte_end":94949,"line_start":134,"line_end":134,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":94954,"byte_end":94968,"line_start":135,"line_end":135,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":94973,"byte_end":94976,"line_start":136,"line_end":136,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":94981,"byte_end":94988,"line_start":137,"line_end":137,"column_start":5,"column_end":12}},{"value":"/ use textwrap::WordSplitter;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":94993,"byte_end":95024,"line_start":138,"line_end":138,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(WordSplitter::NoHyphenation.split_points(\"cannot-be-split\"), vec![]);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":95029,"byte_end":95113,"line_start":139,"line_end":139,"column_start":5,"column_end":89}},{"value":"/ assert_eq!(WordSplitter::HyphenSplitter.split_points(\"can-be-split\"), vec![4, 7]);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":95118,"byte_end":95204,"line_start":140,"line_end":140,"column_start":5,"column_end":91}},{"value":"/ assert_eq!(WordSplitter::Custom(|word| vec![word.len()/2]).split_points(\"middle\"), vec![3]);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":95209,"byte_end":95305,"line_start":141,"line_end":141,"column_start":5,"column_end":101}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":95310,"byte_end":95317,"line_start":142,"line_end":142,"column_start":5,"column_end":12}}]},{"kind":"Function","id":{"krate":0,"index":49},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":96875,"byte_end":96886,"line_start":181,"line_end":181,"column_start":8,"column_end":19},"name":"split_words","qualname":"::word_splitters::split_words","value":"fn split_words<'a, I>(I, &'a WordSplitter) -> /*impl Trait*/ where\nI: IntoIterator<Item = Word>","parent":null,"children":[],"decl_id":null,"docs":" Split words into smaller words according to the split points given\n by `word_splitter`.","sig":null,"attributes":[{"value":"/ Split words into smaller words according to the split points given","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":96570,"byte_end":96640,"line_start":175,"line_end":175,"column_start":1,"column_end":71}},{"value":"/ by `word_splitter`.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":96641,"byte_end":96664,"line_start":176,"line_end":176,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":96665,"byte_end":96668,"line_start":177,"line_end":177,"column_start":1,"column_end":4}},{"value":"/ Note that we split all words, regardless of their length. This is","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":96669,"byte_end":96738,"line_start":178,"line_end":178,"column_start":1,"column_end":70}},{"value":"/ to more cleanly separate the business of splitting (including","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":96739,"byte_end":96804,"line_start":179,"line_end":179,"column_start":1,"column_end":66}},{"value":"/ automatic hyphenation) from the business of word wrapping.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":96805,"byte_end":96867,"line_start":180,"line_end":180,"column_start":1,"column_end":63}}]},{"kind":"Mod","id":{"krate":0,"index":58},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"wrap_algorithms","qualname":"::wrap_algorithms","value":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","parent":null,"children":[{"krate":0,"index":59},{"krate":0,"index":60},{"krate":0,"index":63},{"krate":0,"index":177},{"krate":0,"index":185},{"krate":0,"index":189},{"krate":0,"index":66},{"krate":0,"index":68},{"krate":0,"index":74},{"krate":0,"index":76}],"decl_id":null,"docs":" Word wrapping algorithms.","sig":null,"attributes":[{"value":"/ Word wrapping algorithms.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":100600,"byte_end":100629,"line_start":1,"line_end":1,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":100630,"byte_end":100633,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ After a text has been broken into words (or [`Fragment`]s), one","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":100634,"byte_end":100701,"line_start":3,"line_end":3,"column_start":1,"column_end":68}},{"value":"/ now has to decide how to break the fragments into lines. The","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":100702,"byte_end":100766,"line_start":4,"line_end":4,"column_start":1,"column_end":65}},{"value":"/ simplest algorithm for this is implemented by [`wrap_first_fit`]:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":100767,"byte_end":100836,"line_start":5,"line_end":5,"column_start":1,"column_end":70}},{"value":"/ it uses no look-ahead and simply adds fragments to the line as","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":100837,"byte_end":100903,"line_start":6,"line_end":6,"column_start":1,"column_end":67}},{"value":"/ long as they fit. However, this can lead to poor line breaks if a","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":100904,"byte_end":100973,"line_start":7,"line_end":7,"column_start":1,"column_end":70}},{"value":"/ large fragment almost-but-not-quite fits on a line. When that","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":100974,"byte_end":101039,"line_start":8,"line_end":8,"column_start":1,"column_end":66}},{"value":"/ happens, the fragment is moved to the next line and it will leave","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":101040,"byte_end":101109,"line_start":9,"line_end":9,"column_start":1,"column_end":70}},{"value":"/ behind a large gap. A more advanced algorithm, implemented by","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":101110,"byte_end":101175,"line_start":10,"line_end":10,"column_start":1,"column_end":66}},{"value":"/ [`wrap_optimal_fit`], will take this into account. The optimal-fit","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":101176,"byte_end":101246,"line_start":11,"line_end":11,"column_start":1,"column_end":71}},{"value":"/ algorithm considers all possible line breaks and will attempt to","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":101247,"byte_end":101315,"line_start":12,"line_end":12,"column_start":1,"column_end":69}},{"value":"/ minimize the gaps left behind by overly short lines.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":101316,"byte_end":101372,"line_start":13,"line_end":13,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":101373,"byte_end":101376,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ While both algorithms run in linear time, the first-fit algorithm","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":101377,"byte_end":101446,"line_start":15,"line_end":15,"column_start":1,"column_end":70}},{"value":"/ is about 4 times faster than the optimal-fit algorithm.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":101447,"byte_end":101506,"line_start":16,"line_end":16,"column_start":1,"column_end":60}}]},{"kind":"TupleVariant","id":{"krate":0,"index":178},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":102371,"byte_end":102379,"line_start":40,"line_end":40,"column_start":5,"column_end":13},"name":"FirstFit","qualname":"::wrap_algorithms::WrapAlgorithm::FirstFit","value":"WrapAlgorithm::FirstFit","parent":{"krate":0,"index":177},"children":[],"decl_id":null,"docs":" Wrap words using a fast and simple algorithm.","sig":null,"attributes":[{"value":"/ Wrap words using a fast and simple algorithm.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":102139,"byte_end":102188,"line_start":35,"line_end":35,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":102193,"byte_end":102196,"line_start":36,"line_end":36,"column_start":5,"column_end":8}},{"value":"/ This algorithm uses no look-ahead when finding line breaks.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":102201,"byte_end":102264,"line_start":37,"line_end":37,"column_start":5,"column_end":68}},{"value":"/ Implemented by [`wrap_first_fit`], please see that function for","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":102269,"byte_end":102336,"line_start":38,"line_end":38,"column_start":5,"column_end":72}},{"value":"/ details and examples.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":102341,"byte_end":102366,"line_start":39,"line_end":39,"column_start":5,"column_end":30}}]},{"kind":"TupleVariant","id":{"krate":0,"index":180},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":104063,"byte_end":104069,"line_start":87,"line_end":87,"column_start":5,"column_end":11},"name":"Custom","qualname":"::wrap_algorithms::WrapAlgorithm::Custom","value":"WrapAlgorithm::Custom(for<'a, 'b> fn(words: &'b [Word], line_widths: &'b [usize]) -> Vec<&'b [Word]>)","parent":{"krate":0,"index":177},"children":[],"decl_id":null,"docs":" Custom wrapping function.","sig":null,"attributes":[{"value":"/ Custom wrapping function.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":102996,"byte_end":103025,"line_start":57,"line_end":57,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":103030,"byte_end":103033,"line_start":58,"line_end":58,"column_start":5,"column_end":8}},{"value":"/ Use this if you want to implement your own wrapping algorithm.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":103038,"byte_end":103104,"line_start":59,"line_end":59,"column_start":5,"column_end":71}},{"value":"/ The function can freely decide how to turn a slice of","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":103109,"byte_end":103166,"line_start":60,"line_end":60,"column_start":5,"column_end":62}},{"value":"/ [`Word`]s into lines.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":103171,"byte_end":103196,"line_start":61,"line_end":61,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":103201,"byte_end":103204,"line_start":62,"line_end":62,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":103209,"byte_end":103222,"line_start":63,"line_end":63,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":103227,"byte_end":103230,"line_start":64,"line_end":64,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":103235,"byte_end":103242,"line_start":65,"line_end":65,"column_start":5,"column_end":12}},{"value":"/ use textwrap::core::Word;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":103247,"byte_end":103276,"line_start":66,"line_end":66,"column_start":5,"column_end":34}},{"value":"/ use textwrap::{wrap, Options, WrapAlgorithm};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":103281,"byte_end":103330,"line_start":67,"line_end":67,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":103335,"byte_end":103338,"line_start":68,"line_end":68,"column_start":5,"column_end":8}},{"value":"/ fn stair<'a, 'b>(words: &'b [Word<'a>], _: &'b [usize]) -> Vec<&'b [Word<'a>]> {","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":103343,"byte_end":103427,"line_start":69,"line_end":69,"column_start":5,"column_end":89}},{"value":"/     let mut lines = Vec::new();","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":103432,"byte_end":103467,"line_start":70,"line_end":70,"column_start":5,"column_end":40}},{"value":"/     let mut step = 1;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":103472,"byte_end":103497,"line_start":71,"line_end":71,"column_start":5,"column_end":30}},{"value":"/     let mut start_idx = 0;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":103502,"byte_end":103532,"line_start":72,"line_end":72,"column_start":5,"column_end":35}},{"value":"/     while start_idx + step <= words.len() {","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":103537,"byte_end":103584,"line_start":73,"line_end":73,"column_start":5,"column_end":52}},{"value":"/       lines.push(&words[start_idx .. start_idx+step]);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":103589,"byte_end":103647,"line_start":74,"line_end":74,"column_start":5,"column_end":63}},{"value":"/       start_idx += step;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":103652,"byte_end":103680,"line_start":75,"line_end":75,"column_start":5,"column_end":33}},{"value":"/       step += 1;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":103685,"byte_end":103705,"line_start":76,"line_end":76,"column_start":5,"column_end":25}},{"value":"/     }","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":103710,"byte_end":103719,"line_start":77,"line_end":77,"column_start":5,"column_end":14}},{"value":"/     lines","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":103724,"byte_end":103737,"line_start":78,"line_end":78,"column_start":5,"column_end":18}},{"value":"/ }","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":103742,"byte_end":103747,"line_start":79,"line_end":79,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":103752,"byte_end":103755,"line_start":80,"line_end":80,"column_start":5,"column_end":8}},{"value":"/ let options = Options::new(10).wrap_algorithm(WrapAlgorithm::Custom(stair));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":103760,"byte_end":103840,"line_start":81,"line_end":81,"column_start":5,"column_end":85}},{"value":"/ assert_eq!(wrap(\"First, second, third, fourth, fifth, sixth\", options),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":103845,"byte_end":103920,"line_start":82,"line_end":82,"column_start":5,"column_end":80}},{"value":"/            vec![\"First,\",","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":103925,"byte_end":103954,"line_start":83,"line_end":83,"column_start":5,"column_end":34}},{"value":"/                 \"second, third,\",","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":103959,"byte_end":103996,"line_start":84,"line_end":84,"column_start":5,"column_end":42}},{"value":"/                 \"fourth, fifth, sixth\"]);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":104001,"byte_end":104046,"line_start":85,"line_end":85,"column_start":5,"column_end":50}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":104051,"byte_end":104058,"line_start":86,"line_end":86,"column_start":5,"column_end":12}}]},{"kind":"Field","id":{"krate":0,"index":182},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":104070,"byte_end":104156,"line_start":87,"line_end":87,"column_start":12,"column_end":98},"name":"0","qualname":"::wrap_algorithms::WrapAlgorithm::Custom::0","value":"for<'b, 'a> fn(&'b [core::Word<'a>], &'b [usize]) -> std::vec::Vec<&'b [core::Word<'a>]>","parent":{"krate":0,"index":180},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":177},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":102119,"byte_end":102132,"line_start":34,"line_end":34,"column_start":10,"column_end":23},"name":"WrapAlgorithm","qualname":"::wrap_algorithms::WrapAlgorithm","value":"enum WrapAlgorithm {\n    FirstFit,\n    Custom(for<'a, 'b> fn(words: &'b [Word], line_widths: &'b [usize])\n                -> Vec<&'b [Word]>),\n}","parent":null,"children":[{"krate":0,"index":178},{"krate":0,"index":180}],"decl_id":null,"docs":" Describes how to wrap words into lines.","sig":null,"attributes":[{"value":"/ Describes how to wrap words into lines.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":101681,"byte_end":101724,"line_start":25,"line_end":25,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":101725,"byte_end":101728,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ The simplest approach is to wrap words one word at a time and","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":101729,"byte_end":101794,"line_start":27,"line_end":27,"column_start":1,"column_end":66}},{"value":"/ accept the first way of wrapping which fit","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":101795,"byte_end":101841,"line_start":28,"line_end":28,"column_start":1,"column_end":47}},{"value":"/ ([`WrapAlgorithm::FirstFit`]). If the `smawk` Cargo feature is","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":101842,"byte_end":101908,"line_start":29,"line_end":29,"column_start":1,"column_end":67}},{"value":"/ enabled, a more complex algorithm is available which will look at","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":101909,"byte_end":101978,"line_start":30,"line_end":30,"column_start":1,"column_end":70}},{"value":"/ an entire paragraph at a time in order to find optimal line breaks","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":101979,"byte_end":102049,"line_start":31,"line_end":31,"column_start":1,"column_end":71}},{"value":"/ ([`WrapAlgorithm::OptimalFit`]).","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":102050,"byte_end":102086,"line_start":32,"line_end":32,"column_start":1,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":67},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":104210,"byte_end":104213,"line_start":91,"line_end":91,"column_start":8,"column_end":11},"name":"fmt","qualname":"<WrapAlgorithm as std::fmt::Debug>::fmt","value":"fn fmt(&Self, &mut std::fmt::Formatter) -> std::fmt::Result","parent":{"krate":2,"index":9907},"children":[],"decl_id":{"krate":2,"index":9908},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":69},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":104822,"byte_end":104825,"line_start":107,"line_end":107,"column_start":18,"column_end":21},"name":"new","qualname":"<WrapAlgorithm>::new","value":"const fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create new wrap algorithm.","sig":null,"attributes":[{"value":"/ Create new wrap algorithm.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":104605,"byte_end":104635,"line_start":102,"line_end":102,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":104640,"byte_end":104643,"line_start":103,"line_end":103,"column_start":5,"column_end":8}},{"value":"/ The best wrapping algorithm is used by default, i.e.,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":104648,"byte_end":104705,"line_start":104,"line_end":104,"column_start":5,"column_end":62}},{"value":"/ [`WrapAlgorithm::OptimalFit`] if available, otherwise","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":104710,"byte_end":104767,"line_start":105,"line_end":105,"column_start":5,"column_end":62}},{"value":"/ [`WrapAlgorithm::FirstFit`].","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":104772,"byte_end":104804,"line_start":106,"line_end":106,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":70},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":105646,"byte_end":105650,"line_start":135,"line_end":135,"column_start":12,"column_end":16},"name":"wrap","qualname":"<WrapAlgorithm>::wrap","value":"fn wrap<'a, 'b>(&Self, &'b [Word], &'b [usize]) -> Vec<&'b [Word]>","parent":null,"children":[],"decl_id":null,"docs":" Wrap words according to line widths.","sig":null,"attributes":[{"value":"/ Wrap words according to line widths.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":105380,"byte_end":105420,"line_start":129,"line_end":129,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":105425,"byte_end":105428,"line_start":130,"line_end":130,"column_start":5,"column_end":8}},{"value":"/ The `line_widths` slice gives the target line width for each","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":105433,"byte_end":105497,"line_start":131,"line_end":131,"column_start":5,"column_end":69}},{"value":"/ line (the last slice element is repeated as necessary). This","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":105502,"byte_end":105566,"line_start":132,"line_end":132,"column_start":5,"column_end":69}},{"value":"/ can be used to implement hanging indentation.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":105571,"byte_end":105620,"line_start":133,"line_end":133,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":105625,"byte_end":105634,"line_start":134,"line_end":134,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":75},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":106634,"byte_end":106641,"line_start":162,"line_end":162,"column_start":8,"column_end":15},"name":"default","qualname":"<WrapAlgorithm as std::default::Default>::default","value":"fn default() -> Self","parent":{"krate":2,"index":3128},"children":[],"decl_id":{"krate":2,"index":3129},"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":76},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":112722,"byte_end":112736,"line_start":315,"line_end":315,"column_start":8,"column_end":22},"name":"wrap_first_fit","qualname":"::wrap_algorithms::wrap_first_fit","value":"fn wrap_first_fit<'a, 'b, T>(&'a [T], &'b [f64]) -> Vec<&'a [T]> where\nT: Fragment","parent":null,"children":[],"decl_id":null,"docs":" Wrap abstract fragments into lines with a first-fit algorithm.","sig":null,"attributes":[{"value":"/ Wrap abstract fragments into lines with a first-fit algorithm.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":106692,"byte_end":106758,"line_start":167,"line_end":167,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":106759,"byte_end":106762,"line_start":168,"line_end":168,"column_start":1,"column_end":4}},{"value":"/ The `line_widths` slice gives the target line width for each line","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":106763,"byte_end":106832,"line_start":169,"line_end":169,"column_start":1,"column_end":70}},{"value":"/ (the last slice element is repeated as necessary). This can be","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":106833,"byte_end":106899,"line_start":170,"line_end":170,"column_start":1,"column_end":67}},{"value":"/ used to implement hanging indentation.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":106900,"byte_end":106942,"line_start":171,"line_end":171,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":106943,"byte_end":106946,"line_start":172,"line_end":172,"column_start":1,"column_end":4}},{"value":"/ The fragments must already have been split into the desired","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":106947,"byte_end":107010,"line_start":173,"line_end":173,"column_start":1,"column_end":64}},{"value":"/ widths, this function will not (and cannot) attempt to split them","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":107011,"byte_end":107080,"line_start":174,"line_end":174,"column_start":1,"column_end":70}},{"value":"/ further when arranging them into lines.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":107081,"byte_end":107124,"line_start":175,"line_end":175,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":107125,"byte_end":107128,"line_start":176,"line_end":176,"column_start":1,"column_end":4}},{"value":"/ # First-Fit Algorithm","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":107129,"byte_end":107154,"line_start":177,"line_end":177,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":107155,"byte_end":107158,"line_start":178,"line_end":178,"column_start":1,"column_end":4}},{"value":"/ This implements a simple “greedy” algorithm: accumulate fragments","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":107159,"byte_end":107232,"line_start":179,"line_end":179,"column_start":1,"column_end":70}},{"value":"/ one by one and when a fragment no longer fits, start a new line.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":107233,"byte_end":107301,"line_start":180,"line_end":180,"column_start":1,"column_end":69}},{"value":"/ There is no look-ahead, we simply take first fit of the fragments","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":107302,"byte_end":107371,"line_start":181,"line_end":181,"column_start":1,"column_end":70}},{"value":"/ we find.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":107372,"byte_end":107384,"line_start":182,"line_end":182,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":107385,"byte_end":107388,"line_start":183,"line_end":183,"column_start":1,"column_end":4}},{"value":"/ While fast and predictable, this algorithm can produce poor line","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":107389,"byte_end":107457,"line_start":184,"line_end":184,"column_start":1,"column_end":69}},{"value":"/ breaks when a long fragment is moved to a new line, leaving behind","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":107458,"byte_end":107528,"line_start":185,"line_end":185,"column_start":1,"column_end":71}},{"value":"/ a large gap:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":107529,"byte_end":107545,"line_start":186,"line_end":186,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":107546,"byte_end":107549,"line_start":187,"line_end":187,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":107550,"byte_end":107557,"line_start":188,"line_end":188,"column_start":1,"column_end":8}},{"value":"/ use textwrap::core::Word;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":107558,"byte_end":107587,"line_start":189,"line_end":189,"column_start":1,"column_end":30}},{"value":"/ use textwrap::wrap_algorithms::wrap_first_fit;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":107588,"byte_end":107638,"line_start":190,"line_end":190,"column_start":1,"column_end":51}},{"value":"/ use textwrap::WordSeparator;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":107639,"byte_end":107671,"line_start":191,"line_end":191,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":107672,"byte_end":107675,"line_start":192,"line_end":192,"column_start":1,"column_end":4}},{"value":"/ // Helper to convert wrapped lines to a Vec<String>.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":107676,"byte_end":107732,"line_start":193,"line_end":193,"column_start":1,"column_end":57}},{"value":"/ fn lines_to_strings(lines: Vec<&[Word<'_>]>) -> Vec<String> {","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":107733,"byte_end":107798,"line_start":194,"line_end":194,"column_start":1,"column_end":66}},{"value":"/     lines.iter().map(|line| {","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":107799,"byte_end":107832,"line_start":195,"line_end":195,"column_start":1,"column_end":34}},{"value":"/         line.iter().map(|word| &**word).collect::<Vec<_>>().join(\" \")","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":107833,"byte_end":107906,"line_start":196,"line_end":196,"column_start":1,"column_end":74}},{"value":"/     }).collect::<Vec<_>>()","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":107907,"byte_end":107937,"line_start":197,"line_end":197,"column_start":1,"column_end":31}},{"value":"/ }","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":107938,"byte_end":107943,"line_start":198,"line_end":198,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":107944,"byte_end":107947,"line_start":199,"line_end":199,"column_start":1,"column_end":4}},{"value":"/ let text = \"These few words will unfortunately not wrap nicely.\";","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":107948,"byte_end":108017,"line_start":200,"line_end":200,"column_start":1,"column_end":70}},{"value":"/ let words = WordSeparator::AsciiSpace.find_words(text).collect::<Vec<_>>();","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":108018,"byte_end":108097,"line_start":201,"line_end":201,"column_start":1,"column_end":80}},{"value":"/ assert_eq!(lines_to_strings(wrap_first_fit(&words, &[15.0])),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":108098,"byte_end":108163,"line_start":202,"line_end":202,"column_start":1,"column_end":66}},{"value":"/            vec![\"These few words\",","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":108164,"byte_end":108202,"line_start":203,"line_end":203,"column_start":1,"column_end":39}},{"value":"/                 \"will\",  // <-- short line","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":108203,"byte_end":108249,"line_start":204,"line_end":204,"column_start":1,"column_end":47}},{"value":"/                 \"unfortunately\",","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":108250,"byte_end":108286,"line_start":205,"line_end":205,"column_start":1,"column_end":37}},{"value":"/                 \"not wrap\",","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":108287,"byte_end":108318,"line_start":206,"line_end":206,"column_start":1,"column_end":32}},{"value":"/                 \"nicely.\"]);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":108319,"byte_end":108351,"line_start":207,"line_end":207,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":108352,"byte_end":108355,"line_start":208,"line_end":208,"column_start":1,"column_end":4}},{"value":"/ // We can avoid the short line if we look ahead:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":108356,"byte_end":108408,"line_start":209,"line_end":209,"column_start":1,"column_end":53}},{"value":"/ #[cfg(feature = \"smawk\")]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":108409,"byte_end":108438,"line_start":210,"line_end":210,"column_start":1,"column_end":30}},{"value":"/ use textwrap::wrap_algorithms::{wrap_optimal_fit, Penalties};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":108439,"byte_end":108504,"line_start":211,"line_end":211,"column_start":1,"column_end":66}},{"value":"/ #[cfg(feature = \"smawk\")]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":108505,"byte_end":108534,"line_start":212,"line_end":212,"column_start":1,"column_end":30}},{"value":"/ assert_eq!(lines_to_strings(wrap_optimal_fit(&words, &[15.0], &Penalties::new()).unwrap()),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":108535,"byte_end":108630,"line_start":213,"line_end":213,"column_start":1,"column_end":96}},{"value":"/            vec![\"These few\",","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":108631,"byte_end":108663,"line_start":214,"line_end":214,"column_start":1,"column_end":33}},{"value":"/                 \"words will\",","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":108664,"byte_end":108697,"line_start":215,"line_end":215,"column_start":1,"column_end":34}},{"value":"/                 \"unfortunately\",","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":108698,"byte_end":108734,"line_start":216,"line_end":216,"column_start":1,"column_end":37}},{"value":"/                 \"not wrap\",","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":108735,"byte_end":108766,"line_start":217,"line_end":217,"column_start":1,"column_end":32}},{"value":"/                 \"nicely.\"]);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":108767,"byte_end":108799,"line_start":218,"line_end":218,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":108800,"byte_end":108807,"line_start":219,"line_end":219,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":108808,"byte_end":108811,"line_start":220,"line_end":220,"column_start":1,"column_end":4}},{"value":"/ The [`wrap_optimal_fit`] function was used above to get better","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":108812,"byte_end":108878,"line_start":221,"line_end":221,"column_start":1,"column_end":67}},{"value":"/ line breaks. It uses an advanced algorithm which tries to avoid","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":108879,"byte_end":108946,"line_start":222,"line_end":222,"column_start":1,"column_end":68}},{"value":"/ short lines. This function is about 4 times faster than","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":108947,"byte_end":109006,"line_start":223,"line_end":223,"column_start":1,"column_end":60}},{"value":"/ [`wrap_optimal_fit`].","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":109007,"byte_end":109032,"line_start":224,"line_end":224,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":109033,"byte_end":109036,"line_start":225,"line_end":225,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":109037,"byte_end":109051,"line_start":226,"line_end":226,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":109052,"byte_end":109055,"line_start":227,"line_end":227,"column_start":1,"column_end":4}},{"value":"/ Imagine you're building a house site and you have a number of","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":109056,"byte_end":109121,"line_start":228,"line_end":228,"column_start":1,"column_end":66}},{"value":"/ tasks you need to execute. Things like pour foundation, complete","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":109122,"byte_end":109190,"line_start":229,"line_end":229,"column_start":1,"column_end":69}},{"value":"/ framing, install plumbing, electric cabling, install insulation.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":109191,"byte_end":109259,"line_start":230,"line_end":230,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":109260,"byte_end":109263,"line_start":231,"line_end":231,"column_start":1,"column_end":4}},{"value":"/ The construction workers can only work during daytime, so they","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":109264,"byte_end":109330,"line_start":232,"line_end":232,"column_start":1,"column_end":67}},{"value":"/ need to pack up everything at night. Because they need to secure","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":109331,"byte_end":109399,"line_start":233,"line_end":233,"column_start":1,"column_end":69}},{"value":"/ their tools and move machines back to the garage, this process","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":109400,"byte_end":109466,"line_start":234,"line_end":234,"column_start":1,"column_end":67}},{"value":"/ takes much more time than the time it would take them to simply","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":109467,"byte_end":109534,"line_start":235,"line_end":235,"column_start":1,"column_end":68}},{"value":"/ switch to another task.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":109535,"byte_end":109562,"line_start":236,"line_end":236,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":109563,"byte_end":109566,"line_start":237,"line_end":237,"column_start":1,"column_end":4}},{"value":"/ You would like to make a list of tasks to execute every day based","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":109567,"byte_end":109636,"line_start":238,"line_end":238,"column_start":1,"column_end":70}},{"value":"/ on your estimates. You can model this with a program like this:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":109637,"byte_end":109704,"line_start":239,"line_end":239,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":109705,"byte_end":109708,"line_start":240,"line_end":240,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":109709,"byte_end":109716,"line_start":241,"line_end":241,"column_start":1,"column_end":8}},{"value":"/ use textwrap::core::{Fragment, Word};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":109717,"byte_end":109758,"line_start":242,"line_end":242,"column_start":1,"column_end":42}},{"value":"/ use textwrap::wrap_algorithms::wrap_first_fit;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":109759,"byte_end":109809,"line_start":243,"line_end":243,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":109810,"byte_end":109813,"line_start":244,"line_end":244,"column_start":1,"column_end":4}},{"value":"/ #[derive(Debug)]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":109814,"byte_end":109834,"line_start":245,"line_end":245,"column_start":1,"column_end":21}},{"value":"/ struct Task<'a> {","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":109835,"byte_end":109856,"line_start":246,"line_end":246,"column_start":1,"column_end":22}},{"value":"/     name: &'a str,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":109857,"byte_end":109879,"line_start":247,"line_end":247,"column_start":1,"column_end":23}},{"value":"/     hours: f64,   // Time needed to complete task.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":109880,"byte_end":109934,"line_start":248,"line_end":248,"column_start":1,"column_end":55}},{"value":"/     sweep: f64,   // Time needed for a quick sweep after task during the day.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":109935,"byte_end":110016,"line_start":249,"line_end":249,"column_start":1,"column_end":82}},{"value":"/     cleanup: f64, // Time needed for full cleanup if day ends with this task.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":110017,"byte_end":110098,"line_start":250,"line_end":250,"column_start":1,"column_end":82}},{"value":"/ }","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":110099,"byte_end":110104,"line_start":251,"line_end":251,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":110105,"byte_end":110108,"line_start":252,"line_end":252,"column_start":1,"column_end":4}},{"value":"/ impl Fragment for Task<'_> {","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":110109,"byte_end":110141,"line_start":253,"line_end":253,"column_start":1,"column_end":33}},{"value":"/     fn width(&self) -> f64 { self.hours }","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":110142,"byte_end":110187,"line_start":254,"line_end":254,"column_start":1,"column_end":46}},{"value":"/     fn whitespace_width(&self) -> f64 { self.sweep }","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":110188,"byte_end":110244,"line_start":255,"line_end":255,"column_start":1,"column_end":57}},{"value":"/     fn penalty_width(&self) -> f64 { self.cleanup }","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":110245,"byte_end":110300,"line_start":256,"line_end":256,"column_start":1,"column_end":56}},{"value":"/ }","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":110301,"byte_end":110306,"line_start":257,"line_end":257,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":110307,"byte_end":110310,"line_start":258,"line_end":258,"column_start":1,"column_end":4}},{"value":"/ // The morning tasks","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":110311,"byte_end":110335,"line_start":259,"line_end":259,"column_start":1,"column_end":25}},{"value":"/ let tasks = vec![","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":110336,"byte_end":110357,"line_start":260,"line_end":260,"column_start":1,"column_end":22}},{"value":"/     Task { name: \"Foundation\",  hours: 4.0, sweep: 2.0, cleanup: 3.0 },","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":110358,"byte_end":110433,"line_start":261,"line_end":261,"column_start":1,"column_end":76}},{"value":"/     Task { name: \"Framing\",     hours: 3.0, sweep: 1.0, cleanup: 2.0 },","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":110434,"byte_end":110509,"line_start":262,"line_end":262,"column_start":1,"column_end":76}},{"value":"/     Task { name: \"Plumbing\",    hours: 2.0, sweep: 2.0, cleanup: 2.0 },","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":110510,"byte_end":110585,"line_start":263,"line_end":263,"column_start":1,"column_end":76}},{"value":"/     Task { name: \"Electrical\",  hours: 2.0, sweep: 1.0, cleanup: 2.0 },","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":110586,"byte_end":110661,"line_start":264,"line_end":264,"column_start":1,"column_end":76}},{"value":"/     Task { name: \"Insulation\",  hours: 2.0, sweep: 1.0, cleanup: 2.0 },","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":110662,"byte_end":110737,"line_start":265,"line_end":265,"column_start":1,"column_end":76}},{"value":"/     Task { name: \"Drywall\",     hours: 3.0, sweep: 1.0, cleanup: 2.0 },","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":110738,"byte_end":110813,"line_start":266,"line_end":266,"column_start":1,"column_end":76}},{"value":"/     Task { name: \"Floors\",      hours: 3.0, sweep: 1.0, cleanup: 2.0 },","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":110814,"byte_end":110889,"line_start":267,"line_end":267,"column_start":1,"column_end":76}},{"value":"/     Task { name: \"Countertops\", hours: 1.0, sweep: 1.0, cleanup: 2.0 },","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":110890,"byte_end":110965,"line_start":268,"line_end":268,"column_start":1,"column_end":76}},{"value":"/     Task { name: \"Bathrooms\",   hours: 2.0, sweep: 1.0, cleanup: 2.0 },","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":110966,"byte_end":111041,"line_start":269,"line_end":269,"column_start":1,"column_end":76}},{"value":"/ ];","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":111042,"byte_end":111048,"line_start":270,"line_end":270,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":111049,"byte_end":111052,"line_start":271,"line_end":271,"column_start":1,"column_end":4}},{"value":"/ // Fill tasks into days, taking `day_length` into account. The","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":111053,"byte_end":111119,"line_start":272,"line_end":272,"column_start":1,"column_end":67}},{"value":"/ // output shows the hours worked per day along with the names of","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":111120,"byte_end":111188,"line_start":273,"line_end":273,"column_start":1,"column_end":69}},{"value":"/ // the tasks for that day.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":111189,"byte_end":111219,"line_start":274,"line_end":274,"column_start":1,"column_end":31}},{"value":"/ fn assign_days<'a>(tasks: &[Task<'a>], day_length: f64) -> Vec<(f64, Vec<&'a str>)> {","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":111220,"byte_end":111309,"line_start":275,"line_end":275,"column_start":1,"column_end":90}},{"value":"/     let mut days = Vec::new();","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":111310,"byte_end":111344,"line_start":276,"line_end":276,"column_start":1,"column_end":35}},{"value":"/     // Assign tasks to days. The assignment is a vector of slices,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":111345,"byte_end":111415,"line_start":277,"line_end":277,"column_start":1,"column_end":71}},{"value":"/     // with a slice per day.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":111416,"byte_end":111448,"line_start":278,"line_end":278,"column_start":1,"column_end":33}},{"value":"/     let assigned_days: Vec<&[Task<'a>]> = wrap_first_fit(&tasks, &[day_length]);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":111449,"byte_end":111533,"line_start":279,"line_end":279,"column_start":1,"column_end":85}},{"value":"/     for day in assigned_days.iter() {","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":111534,"byte_end":111575,"line_start":280,"line_end":280,"column_start":1,"column_end":42}},{"value":"/         let last = day.last().unwrap();","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":111576,"byte_end":111619,"line_start":281,"line_end":281,"column_start":1,"column_end":44}},{"value":"/         let work_hours: f64 = day.iter().map(|t| t.hours + t.sweep).sum();","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":111620,"byte_end":111698,"line_start":282,"line_end":282,"column_start":1,"column_end":79}},{"value":"/         let names = day.iter().map(|t| t.name).collect::<Vec<_>>();","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":111699,"byte_end":111770,"line_start":283,"line_end":283,"column_start":1,"column_end":72}},{"value":"/         days.push((work_hours - last.sweep + last.cleanup, names));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":111771,"byte_end":111842,"line_start":284,"line_end":284,"column_start":1,"column_end":72}},{"value":"/     }","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":111843,"byte_end":111852,"line_start":285,"line_end":285,"column_start":1,"column_end":10}},{"value":"/     days","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":111853,"byte_end":111865,"line_start":286,"line_end":286,"column_start":1,"column_end":13}},{"value":"/ }","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":111866,"byte_end":111871,"line_start":287,"line_end":287,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":111872,"byte_end":111875,"line_start":288,"line_end":288,"column_start":1,"column_end":4}},{"value":"/ // With a single crew working 8 hours a day:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":111876,"byte_end":111924,"line_start":289,"line_end":289,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":111925,"byte_end":111940,"line_start":290,"line_end":290,"column_start":1,"column_end":16}},{"value":"/     assign_days(&tasks, 8.0),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":111941,"byte_end":111974,"line_start":291,"line_end":291,"column_start":1,"column_end":34}},{"value":"/     [","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":111975,"byte_end":111984,"line_start":292,"line_end":292,"column_start":1,"column_end":10}},{"value":"/         (7.0, vec![\"Foundation\"]),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":111985,"byte_end":112023,"line_start":293,"line_end":293,"column_start":1,"column_end":39}},{"value":"/         (8.0, vec![\"Framing\", \"Plumbing\"]),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":112024,"byte_end":112071,"line_start":294,"line_end":294,"column_start":1,"column_end":48}},{"value":"/         (7.0, vec![\"Electrical\", \"Insulation\"]),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":112072,"byte_end":112124,"line_start":295,"line_end":295,"column_start":1,"column_end":53}},{"value":"/         (5.0, vec![\"Drywall\"]),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":112125,"byte_end":112160,"line_start":296,"line_end":296,"column_start":1,"column_end":36}},{"value":"/         (7.0, vec![\"Floors\", \"Countertops\"]),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":112161,"byte_end":112210,"line_start":297,"line_end":297,"column_start":1,"column_end":50}},{"value":"/         (4.0, vec![\"Bathrooms\"]),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":112211,"byte_end":112248,"line_start":298,"line_end":298,"column_start":1,"column_end":38}},{"value":"/     ]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":112249,"byte_end":112258,"line_start":299,"line_end":299,"column_start":1,"column_end":10}},{"value":"/ );","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":112259,"byte_end":112265,"line_start":300,"line_end":300,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":112266,"byte_end":112269,"line_start":301,"line_end":301,"column_start":1,"column_end":4}},{"value":"/ // With two crews working in shifts, 16 hours a day:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":112270,"byte_end":112326,"line_start":302,"line_end":302,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":112327,"byte_end":112342,"line_start":303,"line_end":303,"column_start":1,"column_end":16}},{"value":"/     assign_days(&tasks, 16.0),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":112343,"byte_end":112377,"line_start":304,"line_end":304,"column_start":1,"column_end":35}},{"value":"/     [","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":112378,"byte_end":112387,"line_start":305,"line_end":305,"column_start":1,"column_end":10}},{"value":"/         (14.0, vec![\"Foundation\", \"Framing\", \"Plumbing\"]),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":112388,"byte_end":112450,"line_start":306,"line_end":306,"column_start":1,"column_end":63}},{"value":"/         (15.0, vec![\"Electrical\", \"Insulation\", \"Drywall\", \"Floors\"]),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":112451,"byte_end":112525,"line_start":307,"line_end":307,"column_start":1,"column_end":75}},{"value":"/         (6.0, vec![\"Countertops\", \"Bathrooms\"]),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":112526,"byte_end":112578,"line_start":308,"line_end":308,"column_start":1,"column_end":53}},{"value":"/     ]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":112579,"byte_end":112588,"line_start":309,"line_end":309,"column_start":1,"column_end":10}},{"value":"/ );","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":112589,"byte_end":112595,"line_start":310,"line_end":310,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":112596,"byte_end":112603,"line_start":311,"line_end":311,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":112604,"byte_end":112607,"line_start":312,"line_end":312,"column_start":1,"column_end":4}},{"value":"/ Apologies to anyone who actually knows how to build a house and","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":112608,"byte_end":112675,"line_start":313,"line_end":313,"column_start":1,"column_end":68}},{"value":"/ knows how long each step takes :-)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":112676,"byte_end":112714,"line_start":314,"line_end":314,"column_start":1,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":191},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\line_ending.rs","byte_start":115017,"byte_end":115021,"line_start":12,"line_end":12,"column_start":5,"column_end":9},"name":"CRLF","qualname":"::line_ending::LineEnding::CRLF","value":"LineEnding::CRLF","parent":{"krate":0,"index":190},"children":[],"decl_id":null,"docs":" _Carriage return and line feed_ – a line ending sequence\n historically used in Windows. Corresponds to the sequence\n of ASCII control characters `0x0D 0x0A` or `\\r\\n`\n","sig":null,"attributes":[{"value":"/ _Carriage return and line feed_ – a line ending sequence","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\line_ending.rs","byte_start":114826,"byte_end":114888,"line_start":9,"line_end":9,"column_start":5,"column_end":65}},{"value":"/ historically used in Windows. Corresponds to the sequence","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\line_ending.rs","byte_start":114893,"byte_end":114954,"line_start":10,"line_end":10,"column_start":5,"column_end":66}},{"value":"/ of ASCII control characters `0x0D 0x0A` or `\\r\\n`","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\line_ending.rs","byte_start":114959,"byte_end":115012,"line_start":11,"line_end":11,"column_start":5,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":193},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\line_ending.rs","byte_start":115159,"byte_end":115161,"line_start":15,"line_end":15,"column_start":5,"column_end":7},"name":"LF","qualname":"::line_ending::LineEnding::LF","value":"LineEnding::LF","parent":{"krate":0,"index":190},"children":[],"decl_id":null,"docs":" _Line feed_ – a line ending historically used in Unix.\n  Corresponds to the ASCII control character `0x0A` or `\\n`\n","sig":null,"attributes":[{"value":"/ _Line feed_ – a line ending historically used in Unix.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\line_ending.rs","byte_start":115027,"byte_end":115087,"line_start":13,"line_end":13,"column_start":5,"column_end":63}},{"value":"/  Corresponds to the ASCII control character `0x0A` or `\\n`","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\line_ending.rs","byte_start":115092,"byte_end":115154,"line_start":14,"line_end":14,"column_start":5,"column_end":67}}]},{"kind":"Enum","id":{"krate":0,"index":190},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\line_ending.rs","byte_start":114809,"byte_end":114819,"line_start":8,"line_end":8,"column_start":10,"column_end":20},"name":"LineEnding","qualname":"::line_ending::LineEnding","value":"enum LineEnding { CRLF, LF, }","parent":null,"children":[{"krate":0,"index":191},{"krate":0,"index":193}],"decl_id":null,"docs":" Supported line endings. Like in the Rust standard library, two line\n endings are supported: `\\r\\n` and `\\n`\n","sig":null,"attributes":[{"value":"/ Supported line endings. Like in the Rust standard library, two line","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\line_ending.rs","byte_start":114640,"byte_end":114711,"line_start":5,"line_end":5,"column_start":1,"column_end":72}},{"value":"/ endings are supported: `\\r\\n` and `\\n`","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\line_ending.rs","byte_start":114712,"byte_end":114754,"line_start":6,"line_end":6,"column_start":1,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":88},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\line_ending.rs","byte_start":115286,"byte_end":115292,"line_start":21,"line_end":21,"column_start":18,"column_end":24},"name":"as_str","qualname":"<LineEnding>::as_str","value":"const fn as_str(&Self) -> &'static str","parent":null,"children":[],"decl_id":null,"docs":" Turns this [`LineEnding`] value into its ASCII representation.\n","sig":null,"attributes":[{"value":"/ Turns this [`LineEnding`] value into its ASCII representation.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\line_ending.rs","byte_start":115188,"byte_end":115254,"line_start":19,"line_end":19,"column_start":5,"column_end":71}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\line_ending.rs","byte_start":115259,"byte_end":115268,"line_start":20,"line_end":20,"column_start":5,"column_end":14}}]},{"kind":"Mod","id":{"krate":0,"index":96},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"core","qualname":"::core","value":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","parent":null,"children":[{"krate":0,"index":97},{"krate":0,"index":98},{"krate":0,"index":99},{"krate":0,"index":101},{"krate":0,"index":102},{"krate":0,"index":103},{"krate":0,"index":104},{"krate":0,"index":218},{"krate":0,"index":224},{"krate":0,"index":227},{"krate":0,"index":229},{"krate":0,"index":232},{"krate":0,"index":234},{"krate":0,"index":238},{"krate":0,"index":240},{"krate":0,"index":108},{"krate":0,"index":111},{"krate":0,"index":119},{"krate":0,"index":123}],"decl_id":null,"docs":" Building blocks for advanced wrapping functionality.","sig":null,"attributes":[{"value":"/ Building blocks for advanced wrapping functionality.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":117222,"byte_end":117278,"line_start":1,"line_end":1,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":117279,"byte_end":117282,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ The functions and structs in this module can be used to implement","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":117283,"byte_end":117352,"line_start":3,"line_end":3,"column_start":1,"column_end":70}},{"value":"/ advanced wrapping functionality when the [`wrap`](super::wrap) and","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":117353,"byte_end":117423,"line_start":4,"line_end":4,"column_start":1,"column_end":71}},{"value":"/ [`fill`](super::fill) function don't do what you want.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":117424,"byte_end":117482,"line_start":5,"line_end":5,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":117483,"byte_end":117486,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ In general, you want to follow these steps when wrapping","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":117487,"byte_end":117547,"line_start":7,"line_end":7,"column_start":1,"column_end":61}},{"value":"/ something:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":117548,"byte_end":117562,"line_start":8,"line_end":8,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":117563,"byte_end":117566,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ 1. Split your input into [`Fragment`]s. These are abstract blocks","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":117567,"byte_end":117636,"line_start":10,"line_end":10,"column_start":1,"column_end":70}},{"value":"/    of text or content which can be wrapped into lines. See","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":117637,"byte_end":117699,"line_start":11,"line_end":11,"column_start":1,"column_end":63}},{"value":"/    [`WordSeparator`](crate::word_separators::WordSeparator) for","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":117700,"byte_end":117767,"line_start":12,"line_end":12,"column_start":1,"column_end":68}},{"value":"/    how to do this for text.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":117768,"byte_end":117799,"line_start":13,"line_end":13,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":117800,"byte_end":117803,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ 2. Potentially split your fragments into smaller pieces. This","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":117804,"byte_end":117869,"line_start":15,"line_end":15,"column_start":1,"column_end":66}},{"value":"/    allows you to implement things like hyphenation. If you use the","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":117870,"byte_end":117940,"line_start":16,"line_end":16,"column_start":1,"column_end":71}},{"value":"/    `Word` type, you can use [`WordSplitter`](crate::WordSplitter)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":117941,"byte_end":118010,"line_start":17,"line_end":17,"column_start":1,"column_end":70}},{"value":"/    enum for this.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":118011,"byte_end":118032,"line_start":18,"line_end":18,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":118033,"byte_end":118036,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ 3. Potentially break apart fragments that are still too large to","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":118037,"byte_end":118105,"line_start":20,"line_end":20,"column_start":1,"column_end":69}},{"value":"/    fit on a single line. This is implemented in [`break_words`].","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":118106,"byte_end":118174,"line_start":21,"line_end":21,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":118175,"byte_end":118178,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ 4. Finally take your fragments and put them into lines. There are","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":118179,"byte_end":118248,"line_start":23,"line_end":23,"column_start":1,"column_end":70}},{"value":"/    two algorithms for this in the","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":118249,"byte_end":118286,"line_start":24,"line_end":24,"column_start":1,"column_end":38}},{"value":"/    [`wrap_algorithms`](crate::wrap_algorithms) module:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":118287,"byte_end":118345,"line_start":25,"line_end":25,"column_start":1,"column_end":59}},{"value":"/    [`wrap_optimal_fit`](crate::wrap_algorithms::wrap_optimal_fit)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":118346,"byte_end":118415,"line_start":26,"line_end":26,"column_start":1,"column_end":70}},{"value":"/    and [`wrap_first_fit`](crate::wrap_algorithms::wrap_first_fit).","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":118416,"byte_end":118486,"line_start":27,"line_end":27,"column_start":1,"column_end":71}},{"value":"/    The former produces better line breaks, the latter is faster.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":118487,"byte_end":118555,"line_start":28,"line_end":28,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":118556,"byte_end":118559,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ 5. Iterate through the slices returned by the wrapping functions","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":118560,"byte_end":118628,"line_start":30,"line_end":30,"column_start":1,"column_end":69}},{"value":"/    and construct your lines of output.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":118629,"byte_end":118671,"line_start":31,"line_end":31,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":118672,"byte_end":118675,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ Please [open an issue](https://github.com/mgeisler/textwrap/) if","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":118676,"byte_end":118744,"line_start":33,"line_end":33,"column_start":1,"column_end":69}},{"value":"/ the functionality here is not sufficient or if you have ideas for","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":118745,"byte_end":118814,"line_start":34,"line_end":34,"column_start":1,"column_end":70}},{"value":"/ improving it. We would love to hear from you!","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":118815,"byte_end":118864,"line_start":35,"line_end":35,"column_start":1,"column_end":50}}]},{"kind":"Function","id":{"krate":0,"index":103},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":124350,"byte_end":124363,"line_start":175,"line_end":175,"column_start":8,"column_end":21},"name":"display_width","qualname":"::core::display_width","value":"fn display_width(&str) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Compute the display width of `text` while skipping over ANSI\n escape sequences.","sig":null,"attributes":[{"value":"/ Compute the display width of `text` while skipping over ANSI","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":120413,"byte_end":120477,"line_start":83,"line_end":83,"column_start":1,"column_end":65}},{"value":"/ escape sequences.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":120478,"byte_end":120499,"line_start":84,"line_end":84,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":120500,"byte_end":120503,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":120504,"byte_end":120518,"line_start":86,"line_end":86,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":120519,"byte_end":120522,"line_start":87,"line_end":87,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":120523,"byte_end":120530,"line_start":88,"line_end":88,"column_start":1,"column_end":8}},{"value":"/ use textwrap::core::display_width;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":120531,"byte_end":120569,"line_start":89,"line_end":89,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":120570,"byte_end":120573,"line_start":90,"line_end":90,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(display_width(\"Café Plain\"), 10);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":120574,"byte_end":120623,"line_start":91,"line_end":91,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(display_width(\"\\u{1b}[31mCafé Rouge\\u{1b}[0m\"), 10);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":120624,"byte_end":120692,"line_start":92,"line_end":92,"column_start":1,"column_end":68}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":120693,"byte_end":120700,"line_start":93,"line_end":93,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":120701,"byte_end":120704,"line_start":94,"line_end":94,"column_start":1,"column_end":4}},{"value":"/ **Note:** When the `unicode-width` Cargo feature is disabled, the","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":120705,"byte_end":120774,"line_start":95,"line_end":95,"column_start":1,"column_end":70}},{"value":"/ width of a `char` is determined by a crude approximation which","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":120775,"byte_end":120841,"line_start":96,"line_end":96,"column_start":1,"column_end":67}},{"value":"/ simply counts chars below U+1100 as 1 column wide, and all other","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":120842,"byte_end":120910,"line_start":97,"line_end":97,"column_start":1,"column_end":69}},{"value":"/ characters as 2 columns wide. With the feature enabled, function","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":120911,"byte_end":120979,"line_start":98,"line_end":98,"column_start":1,"column_end":69}},{"value":"/ will correctly deal with [combining characters] in their","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":120980,"byte_end":121040,"line_start":99,"line_end":99,"column_start":1,"column_end":61}},{"value":"/ decomposed form (see [Unicode equivalence]).","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":121041,"byte_end":121089,"line_start":100,"line_end":100,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":121090,"byte_end":121093,"line_start":101,"line_end":101,"column_start":1,"column_end":4}},{"value":"/ An example of a decomposed character is “é”, which can be","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":121094,"byte_end":121160,"line_start":102,"line_end":102,"column_start":1,"column_end":62}},{"value":"/ decomposed into: “e” followed by a combining acute accent: “◌́”.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":121161,"byte_end":121240,"line_start":103,"line_end":103,"column_start":1,"column_end":69}},{"value":"/ Without the `unicode-width` Cargo feature, every `char` below","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":121241,"byte_end":121306,"line_start":104,"line_end":104,"column_start":1,"column_end":66}},{"value":"/ U+1100 has a width of 1. This includes the combining accent:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":121307,"byte_end":121371,"line_start":105,"line_end":105,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":121372,"byte_end":121375,"line_start":106,"line_end":106,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":121376,"byte_end":121383,"line_start":107,"line_end":107,"column_start":1,"column_end":8}},{"value":"/ use textwrap::core::display_width;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":121384,"byte_end":121422,"line_start":108,"line_end":108,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":121423,"byte_end":121426,"line_start":109,"line_end":109,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(display_width(\"Cafe Plain\"), 10);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":121427,"byte_end":121475,"line_start":110,"line_end":110,"column_start":1,"column_end":49}},{"value":"/ #[cfg(feature = \"unicode-width\")]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":121476,"byte_end":121513,"line_start":111,"line_end":111,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(display_width(\"Cafe\\u{301} Plain\"), 10);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":121514,"byte_end":121569,"line_start":112,"line_end":112,"column_start":1,"column_end":56}},{"value":"/ #[cfg(not(feature = \"unicode-width\"))]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":121570,"byte_end":121612,"line_start":113,"line_end":113,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(display_width(\"Cafe\\u{301} Plain\"), 11);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":121613,"byte_end":121668,"line_start":114,"line_end":114,"column_start":1,"column_end":56}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":121669,"byte_end":121676,"line_start":115,"line_end":115,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":121677,"byte_end":121680,"line_start":116,"line_end":116,"column_start":1,"column_end":4}},{"value":"/ ## Emojis and CJK Characters","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":121681,"byte_end":121713,"line_start":117,"line_end":117,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":121714,"byte_end":121717,"line_start":118,"line_end":118,"column_start":1,"column_end":4}},{"value":"/ Characters such as emojis and [CJK characters] used in the","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":121718,"byte_end":121780,"line_start":119,"line_end":119,"column_start":1,"column_end":63}},{"value":"/ Chinese, Japanese, and Korean langauges are seen as double-width,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":121781,"byte_end":121850,"line_start":120,"line_end":120,"column_start":1,"column_end":70}},{"value":"/ even if the `unicode-width` feature is disabled:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":121851,"byte_end":121903,"line_start":121,"line_end":121,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":121904,"byte_end":121907,"line_start":122,"line_end":122,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":121908,"byte_end":121915,"line_start":123,"line_end":123,"column_start":1,"column_end":8}},{"value":"/ use textwrap::core::display_width;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":121916,"byte_end":121954,"line_start":124,"line_end":124,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":121955,"byte_end":121958,"line_start":125,"line_end":125,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(display_width(\"😂😭🥺🤣✨😍🙏🥰😊🔥\"), 20);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":121959,"byte_end":122036,"line_start":126,"line_end":126,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(display_width(\"你好\"), 4);  // “Nǐ hǎo” or “Hello” in Chinese","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":122037,"byte_end":122125,"line_start":127,"line_end":127,"column_start":1,"column_end":75}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":122126,"byte_end":122133,"line_start":128,"line_end":128,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":122134,"byte_end":122137,"line_start":129,"line_end":129,"column_start":1,"column_end":4}},{"value":"/ # Limitations","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":122138,"byte_end":122155,"line_start":130,"line_end":130,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":122156,"byte_end":122159,"line_start":131,"line_end":131,"column_start":1,"column_end":4}},{"value":"/ The displayed width of a string cannot always be computed from the","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":122160,"byte_end":122230,"line_start":132,"line_end":132,"column_start":1,"column_end":71}},{"value":"/ string alone. This is because the width depends on the rendering","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":122231,"byte_end":122299,"line_start":133,"line_end":133,"column_start":1,"column_end":69}},{"value":"/ engine used. This is particularly visible with [emoji modifier","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":122300,"byte_end":122366,"line_start":134,"line_end":134,"column_start":1,"column_end":67}},{"value":"/ sequences] where a base emoji is modified with, e.g., skin tone or","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":122367,"byte_end":122437,"line_start":135,"line_end":135,"column_start":1,"column_end":71}},{"value":"/ hair color modifiers. It is up to the rendering engine to detect","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":122438,"byte_end":122506,"line_start":136,"line_end":136,"column_start":1,"column_end":69}},{"value":"/ this and to produce a suitable emoji.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":122507,"byte_end":122548,"line_start":137,"line_end":137,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":122549,"byte_end":122552,"line_start":138,"line_end":138,"column_start":1,"column_end":4}},{"value":"/ A simple example is “❤️”, which consists of “❤” (U+2764: Black","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":122553,"byte_end":122633,"line_start":139,"line_end":139,"column_start":1,"column_end":67}},{"value":"/ Heart Symbol) followed by U+FE0F (Variation Selector-16). By","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":122634,"byte_end":122698,"line_start":140,"line_end":140,"column_start":1,"column_end":65}},{"value":"/ itself, “❤” is a black heart, but if you follow it with the","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":122699,"byte_end":122768,"line_start":141,"line_end":141,"column_start":1,"column_end":64}},{"value":"/ variant selector, you may get a wider red heart.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":122769,"byte_end":122821,"line_start":142,"line_end":142,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":122822,"byte_end":122825,"line_start":143,"line_end":143,"column_start":1,"column_end":4}},{"value":"/ A more complex example would be “👨‍🦰” which should depict a man","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":122826,"byte_end":122905,"line_start":144,"line_end":144,"column_start":1,"column_end":68}},{"value":"/ with red hair. Here the computed width is too large — and the","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":122906,"byte_end":122973,"line_start":145,"line_end":145,"column_start":1,"column_end":66}},{"value":"/ width differs depending on the use of the `unicode-width` feature:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":122974,"byte_end":123044,"line_start":146,"line_end":146,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":123045,"byte_end":123048,"line_start":147,"line_end":147,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":123049,"byte_end":123056,"line_start":148,"line_end":148,"column_start":1,"column_end":8}},{"value":"/ use textwrap::core::display_width;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":123057,"byte_end":123095,"line_start":149,"line_end":149,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":123096,"byte_end":123099,"line_start":150,"line_end":150,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(\"👨‍🦰\".chars().collect::<Vec<char>>(), ['\\u{1f468}', '\\u{200d}', '\\u{1f9b0}']);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":123100,"byte_end":123201,"line_start":151,"line_end":151,"column_start":1,"column_end":94}},{"value":"/ #[cfg(feature = \"unicode-width\")]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":123202,"byte_end":123239,"line_start":152,"line_end":152,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(display_width(\"👨‍🦰\"), 4);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":123240,"byte_end":123288,"line_start":153,"line_end":153,"column_start":1,"column_end":41}},{"value":"/ #[cfg(not(feature = \"unicode-width\"))]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":123289,"byte_end":123331,"line_start":154,"line_end":154,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(display_width(\"👨‍🦰\"), 6);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":123332,"byte_end":123380,"line_start":155,"line_end":155,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":123381,"byte_end":123388,"line_start":156,"line_end":156,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":123389,"byte_end":123392,"line_start":157,"line_end":157,"column_start":1,"column_end":4}},{"value":"/ This happens because the grapheme consists of three code points:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":123393,"byte_end":123461,"line_start":158,"line_end":158,"column_start":1,"column_end":69}},{"value":"/ “👨” (U+1F468: Man), Zero Width Joiner (U+200D), and “🦰”","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":123462,"byte_end":123535,"line_start":159,"line_end":159,"column_start":1,"column_end":60}},{"value":"/ (U+1F9B0: Red Hair). You can see them above in the test. With","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":123536,"byte_end":123601,"line_start":160,"line_end":160,"column_start":1,"column_end":66}},{"value":"/ `unicode-width` enabled, the ZWJ is correctly seen as having zero","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":123602,"byte_end":123671,"line_start":161,"line_end":161,"column_start":1,"column_end":70}},{"value":"/ width, without it is counted as a double-width character.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":123672,"byte_end":123733,"line_start":162,"line_end":162,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":123734,"byte_end":123737,"line_start":163,"line_end":163,"column_start":1,"column_end":4}},{"value":"/ ## Terminal Support","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":123738,"byte_end":123761,"line_start":164,"line_end":164,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":123762,"byte_end":123765,"line_start":165,"line_end":165,"column_start":1,"column_end":4}},{"value":"/ Modern browsers typically do a great job at combining characters","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":123766,"byte_end":123834,"line_start":166,"line_end":166,"column_start":1,"column_end":69}},{"value":"/ as shown above, but terminals often struggle more. As an example,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":123835,"byte_end":123904,"line_start":167,"line_end":167,"column_start":1,"column_end":70}},{"value":"/ Gnome Terminal version 3.38.1, shows “❤️” as a big red heart, but","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":123905,"byte_end":123982,"line_start":168,"line_end":168,"column_start":1,"column_end":70}},{"value":"/ shows \"👨‍🦰\" as “👨🦰”.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":123983,"byte_end":124025,"line_start":169,"line_end":169,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":124026,"byte_end":124029,"line_start":170,"line_end":170,"column_start":1,"column_end":4}},{"value":"/ [combining characters]: https://en.wikipedia.org/wiki/Combining_character","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":124030,"byte_end":124107,"line_start":171,"line_end":171,"column_start":1,"column_end":78}},{"value":"/ [Unicode equivalence]: https://en.wikipedia.org/wiki/Unicode_equivalence","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":124108,"byte_end":124184,"line_start":172,"line_end":172,"column_start":1,"column_end":77}},{"value":"/ [CJK characters]: https://en.wikipedia.org/wiki/CJK_characters","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":124185,"byte_end":124251,"line_start":173,"line_end":173,"column_start":1,"column_end":67}},{"value":"/ [emoji modifier sequences]: https://unicode.org/emoji/charts/full-emoji-modifiers.html","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":124252,"byte_end":124342,"line_start":174,"line_end":174,"column_start":1,"column_end":91}}]},{"kind":"Trait","id":{"krate":0,"index":104},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":125165,"byte_end":125173,"line_start":197,"line_end":197,"column_start":11,"column_end":19},"name":"Fragment","qualname":"::core::Fragment","value":"Fragment: std::fmt::Debug","parent":null,"children":[{"krate":0,"index":105},{"krate":0,"index":106},{"krate":0,"index":107}],"decl_id":null,"docs":" A (text) fragment denotes the unit which we wrap into lines.","sig":null,"attributes":[{"value":"/ A (text) fragment denotes the unit which we wrap into lines.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":124621,"byte_end":124685,"line_start":187,"line_end":187,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":124686,"byte_end":124689,"line_start":188,"line_end":188,"column_start":1,"column_end":4}},{"value":"/ Fragments represent an abstract _word_ plus the _whitespace_","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":124690,"byte_end":124754,"line_start":189,"line_end":189,"column_start":1,"column_end":65}},{"value":"/ following the word. In case the word falls at the end of the line,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":124755,"byte_end":124825,"line_start":190,"line_end":190,"column_start":1,"column_end":71}},{"value":"/ the whitespace is dropped and a so-called _penalty_ is inserted","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":124826,"byte_end":124893,"line_start":191,"line_end":191,"column_start":1,"column_end":68}},{"value":"/ instead (typically `\"-\"` if the word was hyphenated).","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":124894,"byte_end":124951,"line_start":192,"line_end":192,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":124952,"byte_end":124955,"line_start":193,"line_end":193,"column_start":1,"column_end":4}},{"value":"/ For wrapping purposes, the precise content of the word, the","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":124956,"byte_end":125019,"line_start":194,"line_end":194,"column_start":1,"column_end":64}},{"value":"/ whitespace, and the penalty is irrelevant. All we need to know is","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":125020,"byte_end":125089,"line_start":195,"line_end":195,"column_start":1,"column_end":70}},{"value":"/ the displayed width of each part, which this trait provides.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":125090,"byte_end":125154,"line_start":196,"line_end":196,"column_start":1,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":105},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":125262,"byte_end":125267,"line_start":199,"line_end":199,"column_start":8,"column_end":13},"name":"width","qualname":"::core::Fragment::width","value":"fn width(&Self) -> f64","parent":{"krate":0,"index":104},"children":[],"decl_id":null,"docs":" Displayed width of word represented by this fragment.\n","sig":null,"attributes":[{"value":"/ Displayed width of word represented by this fragment.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":125197,"byte_end":125254,"line_start":198,"line_end":198,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":106},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":125410,"byte_end":125426,"line_start":203,"line_end":203,"column_start":8,"column_end":24},"name":"whitespace_width","qualname":"::core::Fragment::whitespace_width","value":"fn whitespace_width(&Self) -> f64","parent":{"krate":0,"index":104},"children":[],"decl_id":null,"docs":" Displayed width of the whitespace that must follow the word\n when the word is not at the end of a line.\n","sig":null,"attributes":[{"value":"/ Displayed width of the whitespace that must follow the word","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":125288,"byte_end":125351,"line_start":201,"line_end":201,"column_start":5,"column_end":68}},{"value":"/ when the word is not at the end of a line.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":125356,"byte_end":125402,"line_start":202,"line_end":202,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":107},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":125559,"byte_end":125572,"line_start":207,"line_end":207,"column_start":8,"column_end":21},"name":"penalty_width","qualname":"::core::Fragment::penalty_width","value":"fn penalty_width(&Self) -> f64","parent":{"krate":0,"index":104},"children":[],"decl_id":null,"docs":" Displayed width of the penalty that must be inserted if the\n word falls at the end of a line.\n","sig":null,"attributes":[{"value":"/ Displayed width of the penalty that must be inserted if the","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":125447,"byte_end":125510,"line_start":205,"line_end":205,"column_start":5,"column_end":68}},{"value":"/ word falls at the end of a line.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":125515,"byte_end":125551,"line_start":206,"line_end":206,"column_start":5,"column_end":41}}]},{"kind":"Struct","id":{"krate":0,"index":218},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":125839,"byte_end":125843,"line_start":215,"line_end":215,"column_start":12,"column_end":16},"name":"Word","qualname":"::core::Word","value":"Word { word, whitespace, penalty }","parent":null,"children":[{"krate":0,"index":220},{"krate":0,"index":221},{"krate":0,"index":222},{"krate":0,"index":223}],"decl_id":null,"docs":" A piece of wrappable text, including any trailing whitespace.","sig":null,"attributes":[{"value":"/ A piece of wrappable text, including any trailing whitespace.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":125591,"byte_end":125656,"line_start":210,"line_end":210,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":125657,"byte_end":125660,"line_start":211,"line_end":211,"column_start":1,"column_end":4}},{"value":"/ A `Word` is an example of a [`Fragment`], so it has a width,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":125661,"byte_end":125725,"line_start":212,"line_end":212,"column_start":1,"column_end":65}},{"value":"/ trailing whitespace, and potentially a penalty item.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":125726,"byte_end":125782,"line_start":213,"line_end":213,"column_start":1,"column_end":57}}]},{"kind":"Field","id":{"krate":0,"index":220},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":125880,"byte_end":125884,"line_start":217,"line_end":217,"column_start":9,"column_end":13},"name":"word","qualname":"::core::Word::word","value":"&'a str","parent":{"krate":0,"index":218},"children":[],"decl_id":null,"docs":" Word content.\n","sig":null,"attributes":[{"value":"/ Word content.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":125854,"byte_end":125871,"line_start":216,"line_end":216,"column_start":5,"column_end":22}}]},{"kind":"Field","id":{"krate":0,"index":221},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":125980,"byte_end":125990,"line_start":219,"line_end":219,"column_start":9,"column_end":19},"name":"whitespace","qualname":"::core::Word::whitespace","value":"&'a str","parent":{"krate":0,"index":218},"children":[],"decl_id":null,"docs":" Whitespace to insert if the word does not fall at the end of a line.\n","sig":null,"attributes":[{"value":"/ Whitespace to insert if the word does not fall at the end of a line.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":125899,"byte_end":125971,"line_start":218,"line_end":218,"column_start":5,"column_end":77}}]},{"kind":"Field","id":{"krate":0,"index":222},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":126082,"byte_end":126089,"line_start":221,"line_end":221,"column_start":9,"column_end":16},"name":"penalty","qualname":"::core::Word::penalty","value":"&'a str","parent":{"krate":0,"index":218},"children":[],"decl_id":null,"docs":" Penalty string to insert if the word falls at the end of a line.\n","sig":null,"attributes":[{"value":"/ Penalty string to insert if the word falls at the end of a line.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":126005,"byte_end":126073,"line_start":220,"line_end":220,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":110},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":126231,"byte_end":126236,"line_start":229,"line_end":229,"column_start":8,"column_end":13},"name":"deref","qualname":"<Word as std::ops::Deref>::deref","value":"fn deref(&Self) -> &Self::Target","parent":{"krate":2,"index":3369},"children":[],"decl_id":{"krate":2,"index":3371},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":113},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":126477,"byte_end":126481,"line_start":239,"line_end":239,"column_start":12,"column_end":16},"name":"from","qualname":"<Word>::from","value":"fn from(&str) -> Word","parent":null,"children":[],"decl_id":null,"docs":" Construct a `Word` from a string.","sig":null,"attributes":[{"value":"/ Construct a `Word` from a string.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":126314,"byte_end":126351,"line_start":235,"line_end":235,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":126356,"byte_end":126359,"line_start":236,"line_end":236,"column_start":5,"column_end":8}},{"value":"/ A trailing stretch of `' '` is automatically taken to be the","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":126364,"byte_end":126428,"line_start":237,"line_end":237,"column_start":5,"column_end":69}},{"value":"/ whitespace part of the word.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":126433,"byte_end":126465,"line_start":238,"line_end":238,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":114},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":127165,"byte_end":127176,"line_start":262,"line_end":262,"column_start":12,"column_end":23},"name":"break_apart","qualname":"<Word>::break_apart","value":"fn break_apart<'b>(&'b Self, usize) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Break this word into smaller words with a width of at most\n `line_width`. The whitespace and penalty from this `Word` is\n added to the last piece.","sig":null,"attributes":[{"value":"/ Break this word into smaller words with a width of at most","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":126737,"byte_end":126799,"line_start":249,"line_end":249,"column_start":5,"column_end":67}},{"value":"/ `line_width`. The whitespace and penalty from this `Word` is","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":126804,"byte_end":126868,"line_start":250,"line_end":250,"column_start":5,"column_end":69}},{"value":"/ added to the last piece.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":126873,"byte_end":126901,"line_start":251,"line_end":251,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":126906,"byte_end":126909,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":126914,"byte_end":126928,"line_start":253,"line_end":253,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":126933,"byte_end":126936,"line_start":254,"line_end":254,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":126941,"byte_end":126948,"line_start":255,"line_end":255,"column_start":5,"column_end":12}},{"value":"/ use textwrap::core::Word;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":126953,"byte_end":126982,"line_start":256,"line_end":256,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":126987,"byte_end":127002,"line_start":257,"line_end":257,"column_start":5,"column_end":20}},{"value":"/     Word::from(\"Hello!  \").break_apart(3).collect::<Vec<_>>(),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":127007,"byte_end":127073,"line_start":258,"line_end":258,"column_start":5,"column_end":71}},{"value":"/     vec![Word::from(\"Hel\"), Word::from(\"lo!  \")]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":127078,"byte_end":127130,"line_start":259,"line_end":259,"column_start":5,"column_end":57}},{"value":"/ );","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":127135,"byte_end":127141,"line_start":260,"line_end":260,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":127146,"byte_end":127153,"line_start":261,"line_end":261,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":120},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":128544,"byte_end":128549,"line_start":306,"line_end":306,"column_start":8,"column_end":13},"name":"width","qualname":"<Word as core::Fragment>::width","value":"fn width(&Self) -> f64","parent":{"krate":0,"index":104},"children":[],"decl_id":{"krate":0,"index":105},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":128527,"byte_end":128536,"line_start":305,"line_end":305,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":121},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":128742,"byte_end":128758,"line_start":313,"line_end":313,"column_start":8,"column_end":24},"name":"whitespace_width","qualname":"<Word as core::Fragment>::whitespace_width","value":"fn whitespace_width(&Self) -> f64","parent":{"krate":0,"index":104},"children":[],"decl_id":{"krate":0,"index":106},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":128725,"byte_end":128734,"line_start":312,"line_end":312,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":122},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":128956,"byte_end":128969,"line_start":320,"line_end":320,"column_start":8,"column_end":21},"name":"penalty_width","qualname":"<Word as core::Fragment>::penalty_width","value":"fn penalty_width(&Self) -> f64","parent":{"krate":0,"index":104},"children":[],"decl_id":{"krate":0,"index":107},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":128939,"byte_end":128948,"line_start":319,"line_end":319,"column_start":5,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":123},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":129280,"byte_end":129291,"line_start":330,"line_end":330,"column_start":8,"column_end":19},"name":"break_words","qualname":"::core::break_words","value":"fn break_words<'a, I>(I, usize) -> Vec<Word> where I: IntoIterator<Item =\nWord>","parent":null,"children":[],"decl_id":null,"docs":" Forcibly break words wider than `line_width` into smaller words.","sig":null,"attributes":[{"value":"/ Forcibly break words wider than `line_width` into smaller words.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":129029,"byte_end":129097,"line_start":325,"line_end":325,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":129098,"byte_end":129101,"line_start":326,"line_end":326,"column_start":1,"column_end":4}},{"value":"/ This simply calls [`Word::break_apart`] on words that are too","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":129102,"byte_end":129167,"line_start":327,"line_end":327,"column_start":1,"column_end":66}},{"value":"/ wide. This means that no extra `'-'` is inserted, the word is","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":129168,"byte_end":129233,"line_start":328,"line_end":328,"column_start":1,"column_end":66}},{"value":"/ simply broken into smaller pieces.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":129234,"byte_end":129272,"line_start":329,"line_end":329,"column_start":1,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":243},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":7737,"byte_end":7744,"line_start":224,"line_end":224,"column_start":12,"column_end":19},"name":"Options","qualname":"::Options","value":"Options { width, line_ending, initial_indent, subsequent_indent, break_words, wrap_algorithm, word_separator, word_splitter }","parent":null,"children":[{"krate":0,"index":245},{"krate":0,"index":246},{"krate":0,"index":247},{"krate":0,"index":248},{"krate":0,"index":249},{"krate":0,"index":250},{"krate":0,"index":251},{"krate":0,"index":252}],"decl_id":null,"docs":" Holds configuration options for wrapping and filling text.\n","sig":null,"attributes":[{"value":"/ Holds configuration options for wrapping and filling text.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":7639,"byte_end":7701,"line_start":222,"line_end":222,"column_start":1,"column_end":63}}]},{"kind":"Field","id":{"krate":0,"index":245},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":7823,"byte_end":7828,"line_start":226,"line_end":226,"column_start":9,"column_end":14},"name":"width","qualname":"::Options::width","value":"usize","parent":{"krate":0,"index":243},"children":[],"decl_id":null,"docs":" The width in columns at which the text will be wrapped.\n","sig":null,"attributes":[{"value":"/ The width in columns at which the text will be wrapped.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":7755,"byte_end":7814,"line_start":225,"line_end":225,"column_start":5,"column_end":64}}]},{"kind":"Field","id":{"krate":0,"index":246},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":7890,"byte_end":7901,"line_start":228,"line_end":228,"column_start":9,"column_end":20},"name":"line_ending","qualname":"::Options::line_ending","value":"line_ending::LineEnding","parent":{"krate":0,"index":243},"children":[],"decl_id":null,"docs":" Line ending used for breaking lines.\n","sig":null,"attributes":[{"value":"/ Line ending used for breaking lines.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":7841,"byte_end":7881,"line_start":227,"line_end":227,"column_start":5,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":247},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":8030,"byte_end":8044,"line_start":231,"line_end":231,"column_start":9,"column_end":23},"name":"initial_indent","qualname":"::Options::initial_indent","value":"&'a str","parent":{"krate":0,"index":243},"children":[],"decl_id":null,"docs":" Indentation used for the first line of output. See the\n [`Options::initial_indent`] method.\n","sig":null,"attributes":[{"value":"/ Indentation used for the first line of output. See the","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":7919,"byte_end":7977,"line_start":229,"line_end":229,"column_start":5,"column_end":63}},{"value":"/ [`Options::initial_indent`] method.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":7982,"byte_end":8021,"line_start":230,"line_end":230,"column_start":5,"column_end":44}}]},{"kind":"Field","id":{"krate":0,"index":248},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":8175,"byte_end":8192,"line_start":234,"line_end":234,"column_start":9,"column_end":26},"name":"subsequent_indent","qualname":"::Options::subsequent_indent","value":"&'a str","parent":{"krate":0,"index":243},"children":[],"decl_id":null,"docs":" Indentation used for subsequent lines of output. See the\n [`Options::subsequent_indent`] method.\n","sig":null,"attributes":[{"value":"/ Indentation used for subsequent lines of output. See the","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":8059,"byte_end":8119,"line_start":232,"line_end":232,"column_start":5,"column_end":65}},{"value":"/ [`Options::subsequent_indent`] method.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":8124,"byte_end":8166,"line_start":233,"line_end":233,"column_start":5,"column_end":47}}]},{"kind":"Field","id":{"krate":0,"index":249},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":8401,"byte_end":8412,"line_start":238,"line_end":238,"column_start":9,"column_end":20},"name":"break_words","qualname":"::Options::break_words","value":"bool","parent":{"krate":0,"index":243},"children":[],"decl_id":null,"docs":" Allow long words to be broken if they cannot fit on a line.\n When set to `false`, some lines may be longer than\n `self.width`. See the [`Options::break_words`] method.\n","sig":null,"attributes":[{"value":"/ Allow long words to be broken if they cannot fit on a line.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":8207,"byte_end":8270,"line_start":235,"line_end":235,"column_start":5,"column_end":68}},{"value":"/ When set to `false`, some lines may be longer than","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":8275,"byte_end":8329,"line_start":236,"line_end":236,"column_start":5,"column_end":59}},{"value":"/ `self.width`. See the [`Options::break_words`] method.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":8334,"byte_end":8392,"line_start":237,"line_end":237,"column_start":5,"column_end":63}}]},{"kind":"Field","id":{"krate":0,"index":250},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":8556,"byte_end":8570,"line_start":241,"line_end":241,"column_start":9,"column_end":23},"name":"wrap_algorithm","qualname":"::Options::wrap_algorithm","value":"wrap_algorithms::WrapAlgorithm","parent":{"krate":0,"index":243},"children":[],"decl_id":null,"docs":" Wrapping algorithm to use, see the implementations of the\n [`wrap_algorithms::WrapAlgorithm`] trait for details.\n","sig":null,"attributes":[{"value":"/ Wrapping algorithm to use, see the implementations of the","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":8424,"byte_end":8485,"line_start":239,"line_end":239,"column_start":5,"column_end":66}},{"value":"/ [`wrap_algorithms::WrapAlgorithm`] trait for details.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":8490,"byte_end":8547,"line_start":240,"line_end":240,"column_start":5,"column_end":62}}]},{"kind":"Field","id":{"krate":0,"index":251},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":8746,"byte_end":8760,"line_start":245,"line_end":245,"column_start":9,"column_end":23},"name":"word_separator","qualname":"::Options::word_separator","value":"word_separators::WordSeparator","parent":{"krate":0,"index":243},"children":[],"decl_id":null,"docs":" The line breaking algorithm to use, see\n [`word_separators::WordSeparator`] trait for an overview and\n possible implementations.\n","sig":null,"attributes":[{"value":"/ The line breaking algorithm to use, see","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":8591,"byte_end":8634,"line_start":242,"line_end":242,"column_start":5,"column_end":48}},{"value":"/ [`word_separators::WordSeparator`] trait for an overview and","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":8639,"byte_end":8703,"line_start":243,"line_end":243,"column_start":5,"column_end":69}},{"value":"/ possible implementations.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":8708,"byte_end":8737,"line_start":244,"line_end":244,"column_start":5,"column_end":34}}]},{"kind":"Field","id":{"krate":0,"index":252},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":8965,"byte_end":8978,"line_start":249,"line_end":249,"column_start":9,"column_end":22},"name":"word_splitter","qualname":"::Options::word_splitter","value":"word_splitters::WordSplitter","parent":{"krate":0,"index":243},"children":[],"decl_id":null,"docs":" The method for splitting words. This can be used to prohibit\n splitting words on hyphens, or it can be used to implement\n language-aware machine hyphenation.\n","sig":null,"attributes":[{"value":"/ The method for splitting words. This can be used to prohibit","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":8781,"byte_end":8845,"line_start":246,"line_end":246,"column_start":5,"column_end":69}},{"value":"/ splitting words on hyphens, or it can be used to implement","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":8850,"byte_end":8912,"line_start":247,"line_end":247,"column_start":5,"column_end":67}},{"value":"/ language-aware machine hyphenation.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":8917,"byte_end":8956,"line_start":248,"line_end":248,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":128},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":9053,"byte_end":9057,"line_start":253,"line_end":253,"column_start":8,"column_end":12},"name":"from","qualname":"<Options as std::convert::From>::from","value":"fn from(&'a Options) -> Self","parent":{"krate":2,"index":3056},"children":[],"decl_id":{"krate":2,"index":3058},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":131},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":9572,"byte_end":9576,"line_start":268,"line_end":268,"column_start":8,"column_end":12},"name":"from","qualname":"<Options as std::convert::From>::from","value":"fn from(usize) -> Self","parent":{"krate":2,"index":3056},"children":[],"decl_id":{"krate":2,"index":3058},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":134},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":11236,"byte_end":11239,"line_start":309,"line_end":309,"column_start":18,"column_end":21},"name":"new","qualname":"<Options>::new","value":"const fn new(usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new [`Options`] with the specified width. Equivalent to","sig":null,"attributes":[{"value":"/ Creates a new [`Options`] with the specified width. Equivalent to","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":9665,"byte_end":9734,"line_start":274,"line_end":274,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":9739,"byte_end":9742,"line_start":275,"line_end":275,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":9747,"byte_end":9754,"line_start":276,"line_end":276,"column_start":5,"column_end":12}},{"value":"/ # use textwrap::{LineEnding, Options, WordSplitter, WordSeparator, WrapAlgorithm};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":9759,"byte_end":9845,"line_start":277,"line_end":277,"column_start":5,"column_end":91}},{"value":"/ # let width = 80;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":9850,"byte_end":9871,"line_start":278,"line_end":278,"column_start":5,"column_end":26}},{"value":"/ # let actual = Options::new(width);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":9876,"byte_end":9915,"line_start":279,"line_end":279,"column_start":5,"column_end":44}},{"value":"/ # let expected =","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":9920,"byte_end":9940,"line_start":280,"line_end":280,"column_start":5,"column_end":25}},{"value":"/ Options {","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":9945,"byte_end":9958,"line_start":281,"line_end":281,"column_start":5,"column_end":18}},{"value":"/     width: width,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":9963,"byte_end":9984,"line_start":282,"line_end":282,"column_start":5,"column_end":26}},{"value":"/     line_ending: LineEnding::LF,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":9989,"byte_end":10025,"line_start":283,"line_end":283,"column_start":5,"column_end":41}},{"value":"/     initial_indent: \"\",","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":10030,"byte_end":10057,"line_start":284,"line_end":284,"column_start":5,"column_end":32}},{"value":"/     subsequent_indent: \"\",","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":10062,"byte_end":10092,"line_start":285,"line_end":285,"column_start":5,"column_end":35}},{"value":"/     break_words: true,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":10097,"byte_end":10123,"line_start":286,"line_end":286,"column_start":5,"column_end":31}},{"value":"/     #[cfg(feature = \"unicode-linebreak\")]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":10128,"byte_end":10173,"line_start":287,"line_end":287,"column_start":5,"column_end":50}},{"value":"/     word_separator: WordSeparator::UnicodeBreakProperties,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":10178,"byte_end":10240,"line_start":288,"line_end":288,"column_start":5,"column_end":67}},{"value":"/     #[cfg(not(feature = \"unicode-linebreak\"))]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":10245,"byte_end":10295,"line_start":289,"line_end":289,"column_start":5,"column_end":55}},{"value":"/     word_separator: WordSeparator::AsciiSpace,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":10300,"byte_end":10350,"line_start":290,"line_end":290,"column_start":5,"column_end":55}},{"value":"/     #[cfg(feature = \"smawk\")]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":10355,"byte_end":10388,"line_start":291,"line_end":291,"column_start":5,"column_end":38}},{"value":"/     wrap_algorithm: WrapAlgorithm::new_optimal_fit(),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":10393,"byte_end":10450,"line_start":292,"line_end":292,"column_start":5,"column_end":62}},{"value":"/     #[cfg(not(feature = \"smawk\"))]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":10455,"byte_end":10493,"line_start":293,"line_end":293,"column_start":5,"column_end":43}},{"value":"/     wrap_algorithm: WrapAlgorithm::FirstFit,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":10498,"byte_end":10546,"line_start":294,"line_end":294,"column_start":5,"column_end":53}},{"value":"/     word_splitter: WordSplitter::HyphenSplitter,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":10551,"byte_end":10603,"line_start":295,"line_end":295,"column_start":5,"column_end":57}},{"value":"/ }","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":10608,"byte_end":10613,"line_start":296,"line_end":296,"column_start":5,"column_end":10}},{"value":"/ # ;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":10618,"byte_end":10625,"line_start":297,"line_end":297,"column_start":5,"column_end":12}},{"value":"/ # assert_eq!(actual.width, expected.width);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":10630,"byte_end":10677,"line_start":298,"line_end":298,"column_start":5,"column_end":52}},{"value":"/ # assert_eq!(actual.line_ending, expected.line_ending);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":10682,"byte_end":10741,"line_start":299,"line_end":299,"column_start":5,"column_end":64}},{"value":"/ # assert_eq!(actual.initial_indent, expected.initial_indent);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":10746,"byte_end":10811,"line_start":300,"line_end":300,"column_start":5,"column_end":70}},{"value":"/ # assert_eq!(actual.subsequent_indent, expected.subsequent_indent);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":10816,"byte_end":10887,"line_start":301,"line_end":301,"column_start":5,"column_end":76}},{"value":"/ # assert_eq!(actual.break_words, expected.break_words);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":10892,"byte_end":10951,"line_start":302,"line_end":302,"column_start":5,"column_end":64}},{"value":"/ # assert_eq!(actual.word_splitter, expected.word_splitter);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":10956,"byte_end":11019,"line_start":303,"line_end":303,"column_start":5,"column_end":68}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":11024,"byte_end":11031,"line_start":304,"line_end":304,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":11036,"byte_end":11039,"line_start":305,"line_end":305,"column_start":5,"column_end":8}},{"value":"/ Note that the default word separator and wrap algorithms","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":11044,"byte_end":11104,"line_start":306,"line_end":306,"column_start":5,"column_end":65}},{"value":"/ changes based on the available Cargo features. The best","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":11109,"byte_end":11168,"line_start":307,"line_end":307,"column_start":5,"column_end":64}},{"value":"/ available algorithms are used by default.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":11173,"byte_end":11218,"line_start":308,"line_end":308,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":135},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":12874,"byte_end":12885,"line_start":359,"line_end":359,"column_start":12,"column_end":23},"name":"line_ending","qualname":"<Options>::line_ending","value":"fn line_ending(Self, LineEnding) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Change [`self.line_ending`]. This specifies which of the\n supported line endings should be used to break the lines of the\n input text.","sig":null,"attributes":[{"value":"/ Change [`self.line_ending`]. This specifies which of the","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":12340,"byte_end":12400,"line_start":344,"line_end":344,"column_start":5,"column_end":65}},{"value":"/ supported line endings should be used to break the lines of the","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":12405,"byte_end":12472,"line_start":345,"line_end":345,"column_start":5,"column_end":72}},{"value":"/ input text.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":12477,"byte_end":12492,"line_start":346,"line_end":346,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":12497,"byte_end":12500,"line_start":347,"line_end":347,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":12505,"byte_end":12519,"line_start":348,"line_end":348,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":12524,"byte_end":12527,"line_start":349,"line_end":349,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":12532,"byte_end":12539,"line_start":350,"line_end":350,"column_start":5,"column_end":12}},{"value":"/ use textwrap::{refill, LineEnding, Options};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":12544,"byte_end":12592,"line_start":351,"line_end":351,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":12597,"byte_end":12600,"line_start":352,"line_end":352,"column_start":5,"column_end":8}},{"value":"/ let options = Options::new(15).line_ending(LineEnding::CRLF);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":12605,"byte_end":12670,"line_start":353,"line_end":353,"column_start":5,"column_end":70}},{"value":"/ assert_eq!(refill(\"This is a little example.\", options),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":12675,"byte_end":12735,"line_start":354,"line_end":354,"column_start":5,"column_end":65}},{"value":"/            \"This is a\\r\\nlittle example.\");","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":12740,"byte_end":12787,"line_start":355,"line_end":355,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":12792,"byte_end":12799,"line_start":356,"line_end":356,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":12804,"byte_end":12807,"line_start":357,"line_end":357,"column_start":5,"column_end":8}},{"value":"/ [`self.line_ending`]: #structfield.line_ending","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":12812,"byte_end":12862,"line_start":358,"line_end":358,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":136},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":13664,"byte_end":13678,"line_start":384,"line_end":384,"column_start":12,"column_end":26},"name":"initial_indent","qualname":"<Options>::initial_indent","value":"fn initial_indent(Self, &'a str) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Change [`self.initial_indent`]. The initial indentation is\n used on the very first line of output.","sig":null,"attributes":[{"value":"/ Change [`self.initial_indent`]. The initial indentation is","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":13010,"byte_end":13072,"line_start":366,"line_end":366,"column_start":5,"column_end":67}},{"value":"/ used on the very first line of output.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":13077,"byte_end":13119,"line_start":367,"line_end":367,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":13124,"byte_end":13127,"line_start":368,"line_end":368,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":13132,"byte_end":13146,"line_start":369,"line_end":369,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":13151,"byte_end":13154,"line_start":370,"line_end":370,"column_start":5,"column_end":8}},{"value":"/ Classic paragraph indentation can be achieved by specifying an","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":13159,"byte_end":13225,"line_start":371,"line_end":371,"column_start":5,"column_end":71}},{"value":"/ initial indentation and wrapping each paragraph by itself:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":13230,"byte_end":13292,"line_start":372,"line_end":372,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":13297,"byte_end":13300,"line_start":373,"line_end":373,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":13305,"byte_end":13312,"line_start":374,"line_end":374,"column_start":5,"column_end":12}},{"value":"/ use textwrap::{wrap, Options};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":13317,"byte_end":13351,"line_start":375,"line_end":375,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":13356,"byte_end":13359,"line_start":376,"line_end":376,"column_start":5,"column_end":8}},{"value":"/ let options = Options::new(16).initial_indent(\"    \");","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":13364,"byte_end":13422,"line_start":377,"line_end":377,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(wrap(\"This is a little example.\", options),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":13427,"byte_end":13485,"line_start":378,"line_end":378,"column_start":5,"column_end":63}},{"value":"/            vec![\"    This is a\",","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":13490,"byte_end":13526,"line_start":379,"line_end":379,"column_start":5,"column_end":41}},{"value":"/                 \"little example.\"]);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":13531,"byte_end":13571,"line_start":380,"line_end":380,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":13576,"byte_end":13583,"line_start":381,"line_end":381,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":13588,"byte_end":13591,"line_start":382,"line_end":382,"column_start":5,"column_end":8}},{"value":"/ [`self.initial_indent`]: #structfield.initial_indent","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":13596,"byte_end":13652,"line_start":383,"line_end":383,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":137},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":14871,"byte_end":14888,"line_start":420,"line_end":420,"column_start":12,"column_end":29},"name":"subsequent_indent","qualname":"<Options>::subsequent_indent","value":"fn subsequent_indent(Self, &'a str) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Change [`self.subsequent_indent`]. The subsequent indentation\n is used on lines following the first line of output.","sig":null,"attributes":[{"value":"/ Change [`self.subsequent_indent`]. The subsequent indentation","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":13806,"byte_end":13871,"line_start":391,"line_end":391,"column_start":5,"column_end":70}},{"value":"/ is used on lines following the first line of output.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":13876,"byte_end":13932,"line_start":392,"line_end":392,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":13937,"byte_end":13940,"line_start":393,"line_end":393,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":13945,"byte_end":13959,"line_start":394,"line_end":394,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":13964,"byte_end":13967,"line_start":395,"line_end":395,"column_start":5,"column_end":8}},{"value":"/ Combining initial and subsequent indentation lets you format a","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":13972,"byte_end":14038,"line_start":396,"line_end":396,"column_start":5,"column_end":71}},{"value":"/ single paragraph as a bullet list:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":14043,"byte_end":14081,"line_start":397,"line_end":397,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":14086,"byte_end":14089,"line_start":398,"line_end":398,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":14094,"byte_end":14101,"line_start":399,"line_end":399,"column_start":5,"column_end":12}},{"value":"/ use textwrap::{wrap, Options};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":14106,"byte_end":14140,"line_start":400,"line_end":400,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":14145,"byte_end":14148,"line_start":401,"line_end":401,"column_start":5,"column_end":8}},{"value":"/ let options = Options::new(12)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":14153,"byte_end":14187,"line_start":402,"line_end":402,"column_start":5,"column_end":39}},{"value":"/     .initial_indent(\"* \")","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":14192,"byte_end":14221,"line_start":403,"line_end":403,"column_start":5,"column_end":34}},{"value":"/     .subsequent_indent(\"  \");","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":14226,"byte_end":14259,"line_start":404,"line_end":404,"column_start":5,"column_end":38}},{"value":"/ #[cfg(feature = \"smawk\")]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":14264,"byte_end":14293,"line_start":405,"line_end":405,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(wrap(\"This is a little example.\", options),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":14298,"byte_end":14356,"line_start":406,"line_end":406,"column_start":5,"column_end":63}},{"value":"/            vec![\"* This is\",","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":14361,"byte_end":14393,"line_start":407,"line_end":407,"column_start":5,"column_end":37}},{"value":"/                 \"  a little\",","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":14398,"byte_end":14431,"line_start":408,"line_end":408,"column_start":5,"column_end":38}},{"value":"/                 \"  example.\"]);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":14436,"byte_end":14471,"line_start":409,"line_end":409,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":14476,"byte_end":14479,"line_start":410,"line_end":410,"column_start":5,"column_end":8}},{"value":"/ // Without the `smawk` feature, the wrapping is a little different:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":14484,"byte_end":14555,"line_start":411,"line_end":411,"column_start":5,"column_end":76}},{"value":"/ #[cfg(not(feature = \"smawk\"))]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":14560,"byte_end":14594,"line_start":412,"line_end":412,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(wrap(\"This is a little example.\", options),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":14599,"byte_end":14657,"line_start":413,"line_end":413,"column_start":5,"column_end":63}},{"value":"/            vec![\"* This is a\",","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":14662,"byte_end":14696,"line_start":414,"line_end":414,"column_start":5,"column_end":39}},{"value":"/                 \"  little\",","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":14701,"byte_end":14732,"line_start":415,"line_end":415,"column_start":5,"column_end":36}},{"value":"/                 \"  example.\"]);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":14737,"byte_end":14772,"line_start":416,"line_end":416,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":14777,"byte_end":14784,"line_start":417,"line_end":417,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":14789,"byte_end":14792,"line_start":418,"line_end":418,"column_start":5,"column_end":8}},{"value":"/ [`self.subsequent_indent`]: #structfield.subsequent_indent","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":14797,"byte_end":14859,"line_start":419,"line_end":419,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":138},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":15782,"byte_end":15793,"line_start":450,"line_end":450,"column_start":12,"column_end":23},"name":"break_words","qualname":"<Options>::break_words","value":"fn break_words(Self, bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Change [`self.break_words`]. This controls if words longer\n than `self.width` can be broken, or if they will be left\n sticking out into the right margin.","sig":null,"attributes":[{"value":"/ Change [`self.break_words`]. This controls if words longer","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":15019,"byte_end":15081,"line_start":427,"line_end":427,"column_start":5,"column_end":67}},{"value":"/ than `self.width` can be broken, or if they will be left","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":15086,"byte_end":15146,"line_start":428,"line_end":428,"column_start":5,"column_end":65}},{"value":"/ sticking out into the right margin.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":15151,"byte_end":15190,"line_start":429,"line_end":429,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":15195,"byte_end":15198,"line_start":430,"line_end":430,"column_start":5,"column_end":8}},{"value":"/ See [`Options::word_splitter`] instead if you want to control","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":15203,"byte_end":15268,"line_start":431,"line_end":431,"column_start":5,"column_end":70}},{"value":"/ hyphenation.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":15273,"byte_end":15289,"line_start":432,"line_end":432,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":15294,"byte_end":15297,"line_start":433,"line_end":433,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":15302,"byte_end":15316,"line_start":434,"line_end":434,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":15321,"byte_end":15324,"line_start":435,"line_end":435,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":15329,"byte_end":15336,"line_start":436,"line_end":436,"column_start":5,"column_end":12}},{"value":"/ use textwrap::{wrap, Options};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":15341,"byte_end":15375,"line_start":437,"line_end":437,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":15380,"byte_end":15383,"line_start":438,"line_end":438,"column_start":5,"column_end":8}},{"value":"/ let options = Options::new(4).break_words(true);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":15388,"byte_end":15440,"line_start":439,"line_end":439,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(wrap(\"This is a little example.\", options),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":15445,"byte_end":15503,"line_start":440,"line_end":440,"column_start":5,"column_end":63}},{"value":"/            vec![\"This\",","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":15508,"byte_end":15535,"line_start":441,"line_end":441,"column_start":5,"column_end":32}},{"value":"/                 \"is a\",","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":15540,"byte_end":15567,"line_start":442,"line_end":442,"column_start":5,"column_end":32}},{"value":"/                 \"litt\",","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":15572,"byte_end":15599,"line_start":443,"line_end":443,"column_start":5,"column_end":32}},{"value":"/                 \"le\",","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":15604,"byte_end":15629,"line_start":444,"line_end":444,"column_start":5,"column_end":30}},{"value":"/                 \"exam\",","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":15634,"byte_end":15661,"line_start":445,"line_end":445,"column_start":5,"column_end":32}},{"value":"/                 \"ple.\"]);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":15666,"byte_end":15695,"line_start":446,"line_end":446,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":15700,"byte_end":15707,"line_start":447,"line_end":447,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":15712,"byte_end":15715,"line_start":448,"line_end":448,"column_start":5,"column_end":8}},{"value":"/ [`self.break_words`]: #structfield.break_words","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":15720,"byte_end":15770,"line_start":449,"line_end":449,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":139},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":16116,"byte_end":16130,"line_start":462,"line_end":462,"column_start":12,"column_end":26},"name":"word_separator","qualname":"<Options>::word_separator","value":"fn word_separator(Self, WordSeparator) -> Options","parent":null,"children":[],"decl_id":null,"docs":" Change [`self.word_separator`].","sig":null,"attributes":[{"value":"/ Change [`self.word_separator`].","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":15917,"byte_end":15952,"line_start":457,"line_end":457,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":15957,"byte_end":15960,"line_start":458,"line_end":458,"column_start":5,"column_end":8}},{"value":"/ See [`word_separators::WordSeparator`] for details on the choices.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":15965,"byte_end":16035,"line_start":459,"line_end":459,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":16040,"byte_end":16043,"line_start":460,"line_end":460,"column_start":5,"column_end":8}},{"value":"/ [`self.word_separator`]: #structfield.word_separator","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":16048,"byte_end":16104,"line_start":461,"line_end":461,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":140},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":16802,"byte_end":16816,"line_start":481,"line_end":481,"column_start":12,"column_end":26},"name":"wrap_algorithm","qualname":"<Options>::wrap_algorithm","value":"fn wrap_algorithm(Self, WrapAlgorithm) -> Options","parent":null,"children":[],"decl_id":null,"docs":" Change [`self.wrap_algorithm`].","sig":null,"attributes":[{"value":"/ Change [`self.wrap_algorithm`].","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":16585,"byte_end":16620,"line_start":475,"line_end":475,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":16625,"byte_end":16628,"line_start":476,"line_end":476,"column_start":5,"column_end":8}},{"value":"/ See the [`wrap_algorithms::WrapAlgorithm`] trait for details on","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":16633,"byte_end":16700,"line_start":477,"line_end":477,"column_start":5,"column_end":72}},{"value":"/ the choices.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":16705,"byte_end":16721,"line_start":478,"line_end":478,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":16726,"byte_end":16729,"line_start":479,"line_end":479,"column_start":5,"column_end":8}},{"value":"/ [`self.wrap_algorithm`]: #structfield.wrap_algorithm","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":16734,"byte_end":16790,"line_start":480,"line_end":480,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":141},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":18501,"byte_end":18514,"line_start":526,"line_end":526,"column_start":12,"column_end":25},"name":"word_splitter","qualname":"<Options>::word_splitter","value":"fn word_splitter(Self, WordSplitter) -> Options","parent":null,"children":[],"decl_id":null,"docs":" Change [`self.word_splitter`]. The\n [`word_splitters::WordSplitter`] is used to fit part of a word\n into the current line when wrapping text.","sig":null,"attributes":[{"value":"/ Change [`self.word_splitter`]. The","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":17271,"byte_end":17309,"line_start":494,"line_end":494,"column_start":5,"column_end":43}},{"value":"/ [`word_splitters::WordSplitter`] is used to fit part of a word","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":17314,"byte_end":17380,"line_start":495,"line_end":495,"column_start":5,"column_end":71}},{"value":"/ into the current line when wrapping text.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":17385,"byte_end":17430,"line_start":496,"line_end":496,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":17435,"byte_end":17438,"line_start":497,"line_end":497,"column_start":5,"column_end":8}},{"value":"/ See [`Options::break_words`] instead if you want to control the","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":17443,"byte_end":17510,"line_start":498,"line_end":498,"column_start":5,"column_end":72}},{"value":"/ handling of words longer than the line width.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":17515,"byte_end":17564,"line_start":499,"line_end":499,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":17569,"byte_end":17572,"line_start":500,"line_end":500,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":17577,"byte_end":17591,"line_start":501,"line_end":501,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":17596,"byte_end":17599,"line_start":502,"line_end":502,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":17604,"byte_end":17611,"line_start":503,"line_end":503,"column_start":5,"column_end":12}},{"value":"/ use textwrap::{wrap, Options, WordSplitter};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":17616,"byte_end":17664,"line_start":504,"line_end":504,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":17669,"byte_end":17672,"line_start":505,"line_end":505,"column_start":5,"column_end":8}},{"value":"/ // The default is WordSplitter::HyphenSplitter.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":17677,"byte_end":17728,"line_start":506,"line_end":506,"column_start":5,"column_end":56}},{"value":"/ let options = Options::new(5);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":17733,"byte_end":17767,"line_start":507,"line_end":507,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(wrap(\"foo-bar-baz\", &options),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":17772,"byte_end":17817,"line_start":508,"line_end":508,"column_start":5,"column_end":50}},{"value":"/            vec![\"foo-\", \"bar-\", \"baz\"]);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":17822,"byte_end":17866,"line_start":509,"line_end":509,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":17871,"byte_end":17874,"line_start":510,"line_end":510,"column_start":5,"column_end":8}},{"value":"/ // The word is now so long that break_words kick in:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":17879,"byte_end":17935,"line_start":511,"line_end":511,"column_start":5,"column_end":61}},{"value":"/ let options = Options::new(5)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":17940,"byte_end":17973,"line_start":512,"line_end":512,"column_start":5,"column_end":38}},{"value":"/     .word_splitter(WordSplitter::NoHyphenation);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":17978,"byte_end":18030,"line_start":513,"line_end":513,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(wrap(\"foo-bar-baz\", &options),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":18035,"byte_end":18080,"line_start":514,"line_end":514,"column_start":5,"column_end":50}},{"value":"/            vec![\"foo-b\", \"ar-ba\", \"z\"]);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":18085,"byte_end":18129,"line_start":515,"line_end":515,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":18134,"byte_end":18137,"line_start":516,"line_end":516,"column_start":5,"column_end":8}},{"value":"/ // If you want to breaks at all, disable both:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":18142,"byte_end":18192,"line_start":517,"line_end":517,"column_start":5,"column_end":55}},{"value":"/ let options = Options::new(5)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":18197,"byte_end":18230,"line_start":518,"line_end":518,"column_start":5,"column_end":38}},{"value":"/     .break_words(false)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":18235,"byte_end":18262,"line_start":519,"line_end":519,"column_start":5,"column_end":32}},{"value":"/     .word_splitter(WordSplitter::NoHyphenation);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":18267,"byte_end":18319,"line_start":520,"line_end":520,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(wrap(\"foo-bar-baz\", &options),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":18324,"byte_end":18369,"line_start":521,"line_end":521,"column_start":5,"column_end":50}},{"value":"/            vec![\"foo-bar-baz\"]);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":18374,"byte_end":18410,"line_start":522,"line_end":522,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":18415,"byte_end":18422,"line_start":523,"line_end":523,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":18427,"byte_end":18430,"line_start":524,"line_end":524,"column_start":5,"column_end":8}},{"value":"/ [`self.word_splitter`]: #structfield.word_splitter","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":18435,"byte_end":18489,"line_start":525,"line_end":525,"column_start":5,"column_end":59}}]},{"kind":"Function","id":{"krate":0,"index":142},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":20694,"byte_end":20698,"line_start":599,"line_end":599,"column_start":8,"column_end":12},"name":"fill","qualname":"::fill","value":"fn fill<'a, Opt>(&str, Opt) -> String where Opt: Into<Options>","parent":null,"children":[],"decl_id":null,"docs":" Fill a line of text at a given width.","sig":null,"attributes":[{"value":"/ Fill a line of text at a given width.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":19791,"byte_end":19832,"line_start":567,"line_end":567,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":19833,"byte_end":19836,"line_start":568,"line_end":568,"column_start":1,"column_end":4}},{"value":"/ The result is a [`String`], complete with newlines between each","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":19837,"byte_end":19904,"line_start":569,"line_end":569,"column_start":1,"column_end":68}},{"value":"/ line. Use the [`wrap`] function if you need access to the","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":19905,"byte_end":19966,"line_start":570,"line_end":570,"column_start":1,"column_end":62}},{"value":"/ individual lines.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":19967,"byte_end":19988,"line_start":571,"line_end":571,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":19989,"byte_end":19992,"line_start":572,"line_end":572,"column_start":1,"column_end":4}},{"value":"/ The easiest way to use this function is to pass an integer for","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":19993,"byte_end":20059,"line_start":573,"line_end":573,"column_start":1,"column_end":67}},{"value":"/ `width_or_options`:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":20060,"byte_end":20083,"line_start":574,"line_end":574,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":20084,"byte_end":20087,"line_start":575,"line_end":575,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":20088,"byte_end":20095,"line_start":576,"line_end":576,"column_start":1,"column_end":8}},{"value":"/ use textwrap::fill;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":20096,"byte_end":20119,"line_start":577,"line_end":577,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":20120,"byte_end":20123,"line_start":578,"line_end":578,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":20124,"byte_end":20139,"line_start":579,"line_end":579,"column_start":1,"column_end":16}},{"value":"/     fill(\"Memory safety without garbage collection.\", 15),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":20140,"byte_end":20202,"line_start":580,"line_end":580,"column_start":1,"column_end":63}},{"value":"/     \"Memory safety\\nwithout garbage\\ncollection.\"","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":20203,"byte_end":20256,"line_start":581,"line_end":581,"column_start":1,"column_end":54}},{"value":"/ );","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":20257,"byte_end":20263,"line_start":582,"line_end":582,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":20264,"byte_end":20271,"line_start":583,"line_end":583,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":20272,"byte_end":20275,"line_start":584,"line_end":584,"column_start":1,"column_end":4}},{"value":"/ If you need to customize the wrapping, you can pass an [`Options`]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":20276,"byte_end":20346,"line_start":585,"line_end":585,"column_start":1,"column_end":71}},{"value":"/ instead of an `usize`:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":20347,"byte_end":20373,"line_start":586,"line_end":586,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":20374,"byte_end":20377,"line_start":587,"line_end":587,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":20378,"byte_end":20385,"line_start":588,"line_end":588,"column_start":1,"column_end":8}},{"value":"/ use textwrap::{fill, Options};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":20386,"byte_end":20420,"line_start":589,"line_end":589,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":20421,"byte_end":20424,"line_start":590,"line_end":590,"column_start":1,"column_end":4}},{"value":"/ let options = Options::new(15)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":20425,"byte_end":20459,"line_start":591,"line_end":591,"column_start":1,"column_end":35}},{"value":"/     .initial_indent(\"- \")","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":20460,"byte_end":20489,"line_start":592,"line_end":592,"column_start":1,"column_end":30}},{"value":"/     .subsequent_indent(\"  \");","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":20490,"byte_end":20523,"line_start":593,"line_end":593,"column_start":1,"column_end":34}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":20524,"byte_end":20539,"line_start":594,"line_end":594,"column_start":1,"column_end":16}},{"value":"/     fill(\"Memory safety without garbage collection.\", &options),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":20540,"byte_end":20608,"line_start":595,"line_end":595,"column_start":1,"column_end":69}},{"value":"/     \"- Memory safety\\n  without\\n  garbage\\n  collection.\"","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":20609,"byte_end":20671,"line_start":596,"line_end":596,"column_start":1,"column_end":63}},{"value":"/ );","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":20672,"byte_end":20678,"line_start":597,"line_end":597,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":20679,"byte_end":20686,"line_start":598,"line_end":598,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":145},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":22976,"byte_end":22982,"line_start":675,"line_end":675,"column_start":8,"column_end":14},"name":"unfill","qualname":"::unfill","value":"fn unfill(&str) -> (String, Options)","parent":null,"children":[],"decl_id":null,"docs":" Unpack a paragraph of already-wrapped text.","sig":null,"attributes":[{"value":"/ Unpack a paragraph of already-wrapped text.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":21228,"byte_end":21275,"line_start":620,"line_end":620,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":21276,"byte_end":21279,"line_start":621,"line_end":621,"column_start":1,"column_end":4}},{"value":"/ This function attempts to recover the original text from a single","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":21280,"byte_end":21349,"line_start":622,"line_end":622,"column_start":1,"column_end":70}},{"value":"/ paragraph of text produced by the [`fill`] function. This means","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":21350,"byte_end":21417,"line_start":623,"line_end":623,"column_start":1,"column_end":68}},{"value":"/ that it turns","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":21418,"byte_end":21435,"line_start":624,"line_end":624,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":21436,"byte_end":21439,"line_start":625,"line_end":625,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":21440,"byte_end":21451,"line_start":626,"line_end":626,"column_start":1,"column_end":12}},{"value":"/ textwrap: a small","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":21452,"byte_end":21473,"line_start":627,"line_end":627,"column_start":1,"column_end":22}},{"value":"/ library for","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":21474,"byte_end":21489,"line_start":628,"line_end":628,"column_start":1,"column_end":16}},{"value":"/ wrapping text.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":21490,"byte_end":21508,"line_start":629,"line_end":629,"column_start":1,"column_end":19}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":21509,"byte_end":21516,"line_start":630,"line_end":630,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":21517,"byte_end":21520,"line_start":631,"line_end":631,"column_start":1,"column_end":4}},{"value":"/ back into","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":21521,"byte_end":21534,"line_start":632,"line_end":632,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":21535,"byte_end":21538,"line_start":633,"line_end":633,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":21539,"byte_end":21550,"line_start":634,"line_end":634,"column_start":1,"column_end":12}},{"value":"/ textwrap: a small library for wrapping text.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":21551,"byte_end":21599,"line_start":635,"line_end":635,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":21600,"byte_end":21607,"line_start":636,"line_end":636,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":21608,"byte_end":21611,"line_start":637,"line_end":637,"column_start":1,"column_end":4}},{"value":"/ In addition, it will recognize a common prefix and a common line","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":21612,"byte_end":21680,"line_start":638,"line_end":638,"column_start":1,"column_end":69}},{"value":"/ ending among the lines.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":21681,"byte_end":21708,"line_start":639,"line_end":639,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":21709,"byte_end":21712,"line_start":640,"line_end":640,"column_start":1,"column_end":4}},{"value":"/ The prefix of the first line is returned in","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":21713,"byte_end":21760,"line_start":641,"line_end":641,"column_start":1,"column_end":48}},{"value":"/ [`Options::initial_indent`] and the prefix (if any) of the the","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":21761,"byte_end":21827,"line_start":642,"line_end":642,"column_start":1,"column_end":67}},{"value":"/ other lines is returned in [`Options::subsequent_indent`].","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":21828,"byte_end":21890,"line_start":643,"line_end":643,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":21891,"byte_end":21894,"line_start":644,"line_end":644,"column_start":1,"column_end":4}},{"value":"/ Line ending is returned in [`Options::line_ending`]. If line ending","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":21895,"byte_end":21966,"line_start":645,"line_end":645,"column_start":1,"column_end":72}},{"value":"/ can not be confidently detected (mixed or no line endings in the","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":21967,"byte_end":22035,"line_start":646,"line_end":646,"column_start":1,"column_end":69}},{"value":"/ input), [`LineEnding::LF`] will be returned.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":22036,"byte_end":22084,"line_start":647,"line_end":647,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":22085,"byte_end":22088,"line_start":648,"line_end":648,"column_start":1,"column_end":4}},{"value":"/ In addition to `' '`, the prefixes can consist of characters used","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":22089,"byte_end":22158,"line_start":649,"line_end":649,"column_start":1,"column_end":70}},{"value":"/ for unordered lists (`'-'`, `'+'`, and `'*'`) and block quotes","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":22159,"byte_end":22225,"line_start":650,"line_end":650,"column_start":1,"column_end":67}},{"value":"/ (`'>'`) in Markdown as well as characters often used for inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":22226,"byte_end":22293,"line_start":651,"line_end":651,"column_start":1,"column_end":68}},{"value":"/ comments (`'#'` and `'/'`).","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":22294,"byte_end":22325,"line_start":652,"line_end":652,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":22326,"byte_end":22329,"line_start":653,"line_end":653,"column_start":1,"column_end":4}},{"value":"/ The text must come from a single wrapped paragraph. This means","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":22330,"byte_end":22396,"line_start":654,"line_end":654,"column_start":1,"column_end":67}},{"value":"/ that there can be no empty lines (`\"\\n\\n\"` or `\"\\r\\n\\r\\n\"`) within","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":22397,"byte_end":22467,"line_start":655,"line_end":655,"column_start":1,"column_end":71}},{"value":"/ the text. It is unspecified what happens if `unfill` is called on","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":22468,"byte_end":22537,"line_start":656,"line_end":656,"column_start":1,"column_end":70}},{"value":"/ more than one paragraph of text.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":22538,"byte_end":22574,"line_start":657,"line_end":657,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":22575,"byte_end":22578,"line_start":658,"line_end":658,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":22579,"byte_end":22593,"line_start":659,"line_end":659,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":22594,"byte_end":22597,"line_start":660,"line_end":660,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":22598,"byte_end":22605,"line_start":661,"line_end":661,"column_start":1,"column_end":8}},{"value":"/ use textwrap::{LineEnding, unfill};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":22606,"byte_end":22645,"line_start":662,"line_end":662,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":22646,"byte_end":22649,"line_start":663,"line_end":663,"column_start":1,"column_end":4}},{"value":"/ let (text, options) = unfill(\"\\","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":22650,"byte_end":22685,"line_start":664,"line_end":664,"column_start":1,"column_end":36}},{"value":"/ * This is an","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":22686,"byte_end":22702,"line_start":665,"line_end":665,"column_start":1,"column_end":17}},{"value":"/   example of","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":22703,"byte_end":22719,"line_start":666,"line_end":666,"column_start":1,"column_end":17}},{"value":"/   a list item.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":22720,"byte_end":22738,"line_start":667,"line_end":667,"column_start":1,"column_end":19}},{"value":"/ \");","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":22739,"byte_end":22746,"line_start":668,"line_end":668,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":22747,"byte_end":22750,"line_start":669,"line_end":669,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(text, \"This is an example of a list item.\\n\");","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":22751,"byte_end":22812,"line_start":670,"line_end":670,"column_start":1,"column_end":62}},{"value":"/ assert_eq!(options.initial_indent, \"* \");","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":22813,"byte_end":22858,"line_start":671,"line_end":671,"column_start":1,"column_end":46}},{"value":"/ assert_eq!(options.subsequent_indent, \"  \");","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":22859,"byte_end":22907,"line_start":672,"line_end":672,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(options.line_ending, LineEnding::LF);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":22908,"byte_end":22960,"line_start":673,"line_end":673,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":22961,"byte_end":22968,"line_start":674,"line_end":674,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":146},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":26187,"byte_end":26193,"line_start":783,"line_end":783,"column_start":8,"column_end":14},"name":"refill","qualname":"::refill","value":"fn refill<'a, Opt>(&str, Opt) -> String where Opt: Into<Options>","parent":null,"children":[],"decl_id":null,"docs":" Refill a paragraph of wrapped text with a new width.","sig":null,"attributes":[{"value":"/ Refill a paragraph of wrapped text with a new width.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":24948,"byte_end":25004,"line_start":729,"line_end":729,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":25005,"byte_end":25008,"line_start":730,"line_end":730,"column_start":1,"column_end":4}},{"value":"/ This function will first use the [`unfill`] function to remove","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":25009,"byte_end":25075,"line_start":731,"line_end":731,"column_start":1,"column_end":67}},{"value":"/ newlines from the text. Afterwards the text is filled again using","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":25076,"byte_end":25145,"line_start":732,"line_end":732,"column_start":1,"column_end":70}},{"value":"/ the [`fill`] function.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":25146,"byte_end":25172,"line_start":733,"line_end":733,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":25173,"byte_end":25176,"line_start":734,"line_end":734,"column_start":1,"column_end":4}},{"value":"/ The `new_width_or_options` argument specify the new width and can","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":25177,"byte_end":25246,"line_start":735,"line_end":735,"column_start":1,"column_end":70}},{"value":"/ specify other options as well — except for","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":25247,"byte_end":25295,"line_start":736,"line_end":736,"column_start":1,"column_end":47}},{"value":"/ [`Options::initial_indent`] and [`Options::subsequent_indent`],","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":25296,"byte_end":25363,"line_start":737,"line_end":737,"column_start":1,"column_end":68}},{"value":"/ which are deduced from `filled_text`.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":25364,"byte_end":25405,"line_start":738,"line_end":738,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":25406,"byte_end":25409,"line_start":739,"line_end":739,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":25410,"byte_end":25424,"line_start":740,"line_end":740,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":25425,"byte_end":25428,"line_start":741,"line_end":741,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":25429,"byte_end":25436,"line_start":742,"line_end":742,"column_start":1,"column_end":8}},{"value":"/ use textwrap::refill;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":25437,"byte_end":25462,"line_start":743,"line_end":743,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":25463,"byte_end":25466,"line_start":744,"line_end":744,"column_start":1,"column_end":4}},{"value":"/ // Some loosely wrapped text. The \"> \" prefix is recognized automatically.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":25467,"byte_end":25545,"line_start":745,"line_end":745,"column_start":1,"column_end":79}},{"value":"/ let text = \"\\","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":25546,"byte_end":25563,"line_start":746,"line_end":746,"column_start":1,"column_end":18}},{"value":"/ > Memory","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":25564,"byte_end":25576,"line_start":747,"line_end":747,"column_start":1,"column_end":13}},{"value":"/ > safety without garbage","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":25577,"byte_end":25605,"line_start":748,"line_end":748,"column_start":1,"column_end":29}},{"value":"/ > collection.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":25606,"byte_end":25623,"line_start":749,"line_end":749,"column_start":1,"column_end":18}},{"value":"/ \";","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":25624,"byte_end":25630,"line_start":750,"line_end":750,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":25631,"byte_end":25634,"line_start":751,"line_end":751,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(refill(text, 20), \"\\","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":25635,"byte_end":25670,"line_start":752,"line_end":752,"column_start":1,"column_end":36}},{"value":"/ > Memory safety","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":25671,"byte_end":25690,"line_start":753,"line_end":753,"column_start":1,"column_end":20}},{"value":"/ > without garbage","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":25691,"byte_end":25712,"line_start":754,"line_end":754,"column_start":1,"column_end":22}},{"value":"/ > collection.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":25713,"byte_end":25730,"line_start":755,"line_end":755,"column_start":1,"column_end":18}},{"value":"/ \");","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":25731,"byte_end":25738,"line_start":756,"line_end":756,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":25739,"byte_end":25742,"line_start":757,"line_end":757,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(refill(text, 40), \"\\","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":25743,"byte_end":25778,"line_start":758,"line_end":758,"column_start":1,"column_end":36}},{"value":"/ > Memory safety without garbage","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":25779,"byte_end":25814,"line_start":759,"line_end":759,"column_start":1,"column_end":36}},{"value":"/ > collection.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":25815,"byte_end":25832,"line_start":760,"line_end":760,"column_start":1,"column_end":18}},{"value":"/ \");","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":25833,"byte_end":25840,"line_start":761,"line_end":761,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":25841,"byte_end":25844,"line_start":762,"line_end":762,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(refill(text, 60), \"\\","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":25845,"byte_end":25880,"line_start":763,"line_end":763,"column_start":1,"column_end":36}},{"value":"/ > Memory safety without garbage collection.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":25881,"byte_end":25928,"line_start":764,"line_end":764,"column_start":1,"column_end":48}},{"value":"/ \");","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":25929,"byte_end":25936,"line_start":765,"line_end":765,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":25937,"byte_end":25944,"line_start":766,"line_end":766,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":25945,"byte_end":25948,"line_start":767,"line_end":767,"column_start":1,"column_end":4}},{"value":"/ You can also reshape bullet points:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":25949,"byte_end":25988,"line_start":768,"line_end":768,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":25989,"byte_end":25992,"line_start":769,"line_end":769,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":25993,"byte_end":26000,"line_start":770,"line_end":770,"column_start":1,"column_end":8}},{"value":"/ use textwrap::refill;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":26001,"byte_end":26026,"line_start":771,"line_end":771,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":26027,"byte_end":26030,"line_start":772,"line_end":772,"column_start":1,"column_end":4}},{"value":"/ let text = \"\\","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":26031,"byte_end":26048,"line_start":773,"line_end":773,"column_start":1,"column_end":18}},{"value":"/ - This is my","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":26049,"byte_end":26065,"line_start":774,"line_end":774,"column_start":1,"column_end":17}},{"value":"/   list item.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":26066,"byte_end":26082,"line_start":775,"line_end":775,"column_start":1,"column_end":17}},{"value":"/ \";","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":26083,"byte_end":26089,"line_start":776,"line_end":776,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":26090,"byte_end":26093,"line_start":777,"line_end":777,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(refill(text, 20), \"\\","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":26094,"byte_end":26129,"line_start":778,"line_end":778,"column_start":1,"column_end":36}},{"value":"/ - This is my list","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":26130,"byte_end":26151,"line_start":779,"line_end":779,"column_start":1,"column_end":22}},{"value":"/   item.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":26152,"byte_end":26163,"line_start":780,"line_end":780,"column_start":1,"column_end":12}},{"value":"/ \");","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":26164,"byte_end":26171,"line_start":781,"line_end":781,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":26172,"byte_end":26179,"line_start":782,"line_end":782,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":149},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":32379,"byte_end":32383,"line_start":974,"line_end":974,"column_start":8,"column_end":12},"name":"wrap","qualname":"::wrap","value":"fn wrap<'a, Opt>(&str, Opt) -> Vec<Cow<, str>> where Opt: Into<Options>","parent":null,"children":[],"decl_id":null,"docs":" Wrap a line of text at a given width.","sig":null,"attributes":[{"value":"/ Wrap a line of text at a given width.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":26927,"byte_end":26968,"line_start":804,"line_end":804,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":26969,"byte_end":26972,"line_start":805,"line_end":805,"column_start":1,"column_end":4}},{"value":"/ The result is a vector of lines, each line is of type [`Cow<'_,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":26973,"byte_end":27040,"line_start":806,"line_end":806,"column_start":1,"column_end":68}},{"value":"/ str>`](Cow), which means that the line will borrow from the input","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":27041,"byte_end":27110,"line_start":807,"line_end":807,"column_start":1,"column_end":70}},{"value":"/ `&str` if possible. The lines do not have trailing whitespace,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":27111,"byte_end":27177,"line_start":808,"line_end":808,"column_start":1,"column_end":67}},{"value":"/ including a final `'\\n'`. Please use the [`fill`] function if you","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":27178,"byte_end":27247,"line_start":809,"line_end":809,"column_start":1,"column_end":70}},{"value":"/ need a [`String`] instead.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":27248,"byte_end":27278,"line_start":810,"line_end":810,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":27279,"byte_end":27282,"line_start":811,"line_end":811,"column_start":1,"column_end":4}},{"value":"/ The easiest way to use this function is to pass an integer for","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":27283,"byte_end":27349,"line_start":812,"line_end":812,"column_start":1,"column_end":67}},{"value":"/ `width_or_options`:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":27350,"byte_end":27373,"line_start":813,"line_end":813,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":27374,"byte_end":27377,"line_start":814,"line_end":814,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":27378,"byte_end":27385,"line_start":815,"line_end":815,"column_start":1,"column_end":8}},{"value":"/ use textwrap::wrap;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":27386,"byte_end":27409,"line_start":816,"line_end":816,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":27410,"byte_end":27413,"line_start":817,"line_end":817,"column_start":1,"column_end":4}},{"value":"/ let lines = wrap(\"Memory safety without garbage collection.\", 15);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":27414,"byte_end":27484,"line_start":818,"line_end":818,"column_start":1,"column_end":71}},{"value":"/ assert_eq!(lines, &[","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":27485,"byte_end":27509,"line_start":819,"line_end":819,"column_start":1,"column_end":25}},{"value":"/     \"Memory safety\",","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":27510,"byte_end":27534,"line_start":820,"line_end":820,"column_start":1,"column_end":25}},{"value":"/     \"without garbage\",","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":27535,"byte_end":27561,"line_start":821,"line_end":821,"column_start":1,"column_end":27}},{"value":"/     \"collection.\",","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":27562,"byte_end":27584,"line_start":822,"line_end":822,"column_start":1,"column_end":23}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":27585,"byte_end":27592,"line_start":823,"line_end":823,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":27593,"byte_end":27600,"line_start":824,"line_end":824,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":27601,"byte_end":27604,"line_start":825,"line_end":825,"column_start":1,"column_end":4}},{"value":"/ If you need to customize the wrapping, you can pass an [`Options`]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":27605,"byte_end":27675,"line_start":826,"line_end":826,"column_start":1,"column_end":71}},{"value":"/ instead of an `usize`:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":27676,"byte_end":27702,"line_start":827,"line_end":827,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":27703,"byte_end":27706,"line_start":828,"line_end":828,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":27707,"byte_end":27714,"line_start":829,"line_end":829,"column_start":1,"column_end":8}},{"value":"/ use textwrap::{wrap, Options};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":27715,"byte_end":27749,"line_start":830,"line_end":830,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":27750,"byte_end":27753,"line_start":831,"line_end":831,"column_start":1,"column_end":4}},{"value":"/ let options = Options::new(15)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":27754,"byte_end":27788,"line_start":832,"line_end":832,"column_start":1,"column_end":35}},{"value":"/     .initial_indent(\"- \")","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":27789,"byte_end":27818,"line_start":833,"line_end":833,"column_start":1,"column_end":30}},{"value":"/     .subsequent_indent(\"  \");","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":27819,"byte_end":27852,"line_start":834,"line_end":834,"column_start":1,"column_end":34}},{"value":"/ let lines = wrap(\"Memory safety without garbage collection.\", &options);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":27853,"byte_end":27929,"line_start":835,"line_end":835,"column_start":1,"column_end":77}},{"value":"/ assert_eq!(lines, &[","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":27930,"byte_end":27954,"line_start":836,"line_end":836,"column_start":1,"column_end":25}},{"value":"/     \"- Memory safety\",","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":27955,"byte_end":27981,"line_start":837,"line_end":837,"column_start":1,"column_end":27}},{"value":"/     \"  without\",","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":27982,"byte_end":28002,"line_start":838,"line_end":838,"column_start":1,"column_end":21}},{"value":"/     \"  garbage\",","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":28003,"byte_end":28023,"line_start":839,"line_end":839,"column_start":1,"column_end":21}},{"value":"/     \"  collection.\",","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":28024,"byte_end":28048,"line_start":840,"line_end":840,"column_start":1,"column_end":25}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":28049,"byte_end":28056,"line_start":841,"line_end":841,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":28057,"byte_end":28064,"line_start":842,"line_end":842,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":28065,"byte_end":28068,"line_start":843,"line_end":843,"column_start":1,"column_end":4}},{"value":"/ # Optimal-Fit Wrapping","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":28069,"byte_end":28095,"line_start":844,"line_end":844,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":28096,"byte_end":28099,"line_start":845,"line_end":845,"column_start":1,"column_end":4}},{"value":"/ By default, `wrap` will try to ensure an even right margin by","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":28100,"byte_end":28165,"line_start":846,"line_end":846,"column_start":1,"column_end":66}},{"value":"/ finding breaks which avoid short lines. We call this an","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":28166,"byte_end":28225,"line_start":847,"line_end":847,"column_start":1,"column_end":60}},{"value":"/ “optimal-fit algorithm” since the line breaks are computed by","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":28226,"byte_end":28295,"line_start":848,"line_end":848,"column_start":1,"column_end":66}},{"value":"/ considering all possible line breaks. The alternative is a","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":28296,"byte_end":28358,"line_start":849,"line_end":849,"column_start":1,"column_end":63}},{"value":"/ “first-fit algorithm” which simply accumulates words until they no","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":28359,"byte_end":28433,"line_start":850,"line_end":850,"column_start":1,"column_end":71}},{"value":"/ longer fit on the line.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":28434,"byte_end":28461,"line_start":851,"line_end":851,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":28462,"byte_end":28465,"line_start":852,"line_end":852,"column_start":1,"column_end":4}},{"value":"/ As an example, using the first-fit algorithm to wrap the famous","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":28466,"byte_end":28533,"line_start":853,"line_end":853,"column_start":1,"column_end":68}},{"value":"/ Hamlet quote “To be, or not to be: that is the question” in a","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":28534,"byte_end":28603,"line_start":854,"line_end":854,"column_start":1,"column_end":66}},{"value":"/ narrow column with room for only 10 characters looks like this:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":28604,"byte_end":28671,"line_start":855,"line_end":855,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":28672,"byte_end":28675,"line_start":856,"line_end":856,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":28676,"byte_end":28683,"line_start":857,"line_end":857,"column_start":1,"column_end":8}},{"value":"/ # use textwrap::{WrapAlgorithm::FirstFit, Options, wrap};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":28684,"byte_end":28745,"line_start":858,"line_end":858,"column_start":1,"column_end":62}},{"value":"/ #","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":28746,"byte_end":28751,"line_start":859,"line_end":859,"column_start":1,"column_end":6}},{"value":"/ # let lines = wrap(\"To be, or not to be: that is the question\",","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":28752,"byte_end":28819,"line_start":860,"line_end":860,"column_start":1,"column_end":68}},{"value":"/ #                  Options::new(10).wrap_algorithm(FirstFit));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":28820,"byte_end":28886,"line_start":861,"line_end":861,"column_start":1,"column_end":67}},{"value":"/ # assert_eq!(lines.join(\"\\n\") + \"\\n\", \"\\","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":28887,"byte_end":28931,"line_start":862,"line_end":862,"column_start":1,"column_end":45}},{"value":"/ To be, or","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":28932,"byte_end":28945,"line_start":863,"line_end":863,"column_start":1,"column_end":14}},{"value":"/ not to be:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":28946,"byte_end":28960,"line_start":864,"line_end":864,"column_start":1,"column_end":15}},{"value":"/ that is","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":28961,"byte_end":28972,"line_start":865,"line_end":865,"column_start":1,"column_end":12}},{"value":"/ the","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":28973,"byte_end":28980,"line_start":866,"line_end":866,"column_start":1,"column_end":8}},{"value":"/ question","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":28981,"byte_end":28993,"line_start":867,"line_end":867,"column_start":1,"column_end":13}},{"value":"/ # \");","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":28994,"byte_end":29003,"line_start":868,"line_end":868,"column_start":1,"column_end":10}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":29004,"byte_end":29011,"line_start":869,"line_end":869,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":29012,"byte_end":29015,"line_start":870,"line_end":870,"column_start":1,"column_end":4}},{"value":"/ Notice how the second to last line is quite narrow because","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":29016,"byte_end":29078,"line_start":871,"line_end":871,"column_start":1,"column_end":63}},{"value":"/ “question” was too large to fit? The greedy first-fit algorithm","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":29079,"byte_end":29150,"line_start":872,"line_end":872,"column_start":1,"column_end":68}},{"value":"/ doesn’t look ahead, so it has no other option than to put","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":29151,"byte_end":29214,"line_start":873,"line_end":873,"column_start":1,"column_end":62}},{"value":"/ “question” onto its own line.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":29215,"byte_end":29252,"line_start":874,"line_end":874,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":29253,"byte_end":29256,"line_start":875,"line_end":875,"column_start":1,"column_end":4}},{"value":"/ With the optimal-fit wrapping algorithm, the previous lines are","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":29257,"byte_end":29324,"line_start":876,"line_end":876,"column_start":1,"column_end":68}},{"value":"/ shortened slightly in order to make the word “is” go into the","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":29325,"byte_end":29394,"line_start":877,"line_end":877,"column_start":1,"column_end":66}},{"value":"/ second last line:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":29395,"byte_end":29416,"line_start":878,"line_end":878,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":29417,"byte_end":29420,"line_start":879,"line_end":879,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":29421,"byte_end":29428,"line_start":880,"line_end":880,"column_start":1,"column_end":8}},{"value":"/ # #[cfg(feature = \"smawk\")] {","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":29429,"byte_end":29462,"line_start":881,"line_end":881,"column_start":1,"column_end":34}},{"value":"/ # use textwrap::{Options, WrapAlgorithm, wrap};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":29463,"byte_end":29514,"line_start":882,"line_end":882,"column_start":1,"column_end":52}},{"value":"/ #","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":29515,"byte_end":29520,"line_start":883,"line_end":883,"column_start":1,"column_end":6}},{"value":"/ # let lines = wrap(","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":29521,"byte_end":29544,"line_start":884,"line_end":884,"column_start":1,"column_end":24}},{"value":"/ #     \"To be, or not to be: that is the question\",","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":29545,"byte_end":29599,"line_start":885,"line_end":885,"column_start":1,"column_end":55}},{"value":"/ #     Options::new(10).wrap_algorithm(WrapAlgorithm::new_optimal_fit())","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":29600,"byte_end":29675,"line_start":886,"line_end":886,"column_start":1,"column_end":76}},{"value":"/ # );","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":29676,"byte_end":29684,"line_start":887,"line_end":887,"column_start":1,"column_end":9}},{"value":"/ # assert_eq!(lines.join(\"\\n\") + \"\\n\", \"\\","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":29685,"byte_end":29729,"line_start":888,"line_end":888,"column_start":1,"column_end":45}},{"value":"/ To be,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":29730,"byte_end":29740,"line_start":889,"line_end":889,"column_start":1,"column_end":11}},{"value":"/ or not to","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":29741,"byte_end":29754,"line_start":890,"line_end":890,"column_start":1,"column_end":14}},{"value":"/ be: that","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":29755,"byte_end":29767,"line_start":891,"line_end":891,"column_start":1,"column_end":13}},{"value":"/ is the","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":29768,"byte_end":29778,"line_start":892,"line_end":892,"column_start":1,"column_end":11}},{"value":"/ question","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":29779,"byte_end":29791,"line_start":893,"line_end":893,"column_start":1,"column_end":13}},{"value":"/ # \"); }","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":29792,"byte_end":29803,"line_start":894,"line_end":894,"column_start":1,"column_end":12}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":29804,"byte_end":29811,"line_start":895,"line_end":895,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":29812,"byte_end":29815,"line_start":896,"line_end":896,"column_start":1,"column_end":4}},{"value":"/ Please see [`WrapAlgorithm`] for details on the choices.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":29816,"byte_end":29876,"line_start":897,"line_end":897,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":29877,"byte_end":29880,"line_start":898,"line_end":898,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":29881,"byte_end":29895,"line_start":899,"line_end":899,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":29896,"byte_end":29899,"line_start":900,"line_end":900,"column_start":1,"column_end":4}},{"value":"/ The returned iterator yields lines of type `Cow<'_, str>`. If","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":29900,"byte_end":29965,"line_start":901,"line_end":901,"column_start":1,"column_end":66}},{"value":"/ possible, the wrapped lines will borrow from the input string. As","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":29966,"byte_end":30035,"line_start":902,"line_end":902,"column_start":1,"column_end":70}},{"value":"/ an example, a hanging indentation, the first line can borrow from","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":30036,"byte_end":30105,"line_start":903,"line_end":903,"column_start":1,"column_end":70}},{"value":"/ the input, but the subsequent lines become owned strings:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":30106,"byte_end":30167,"line_start":904,"line_end":904,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":30168,"byte_end":30171,"line_start":905,"line_end":905,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":30172,"byte_end":30179,"line_start":906,"line_end":906,"column_start":1,"column_end":8}},{"value":"/ use std::borrow::Cow::{Borrowed, Owned};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":30180,"byte_end":30224,"line_start":907,"line_end":907,"column_start":1,"column_end":45}},{"value":"/ use textwrap::{wrap, Options};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":30225,"byte_end":30259,"line_start":908,"line_end":908,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":30260,"byte_end":30263,"line_start":909,"line_end":909,"column_start":1,"column_end":4}},{"value":"/ let options = Options::new(15).subsequent_indent(\"....\");","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":30264,"byte_end":30325,"line_start":910,"line_end":910,"column_start":1,"column_end":62}},{"value":"/ let lines = wrap(\"Wrapping text all day long.\", &options);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":30326,"byte_end":30388,"line_start":911,"line_end":911,"column_start":1,"column_end":63}},{"value":"/ let annotated = lines","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":30389,"byte_end":30414,"line_start":912,"line_end":912,"column_start":1,"column_end":26}},{"value":"/     .iter()","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":30415,"byte_end":30430,"line_start":913,"line_end":913,"column_start":1,"column_end":16}},{"value":"/     .map(|line| match line {","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":30431,"byte_end":30463,"line_start":914,"line_end":914,"column_start":1,"column_end":33}},{"value":"/         Borrowed(text) => format!(\"[Borrowed] {}\", text),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":30464,"byte_end":30525,"line_start":915,"line_end":915,"column_start":1,"column_end":62}},{"value":"/         Owned(text) => format!(\"[Owned]    {}\", text),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":30526,"byte_end":30584,"line_start":916,"line_end":916,"column_start":1,"column_end":59}},{"value":"/     })","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":30585,"byte_end":30595,"line_start":917,"line_end":917,"column_start":1,"column_end":11}},{"value":"/     .collect::<Vec<_>>();","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":30596,"byte_end":30625,"line_start":918,"line_end":918,"column_start":1,"column_end":30}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":30626,"byte_end":30641,"line_start":919,"line_end":919,"column_start":1,"column_end":16}},{"value":"/     annotated,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":30642,"byte_end":30660,"line_start":920,"line_end":920,"column_start":1,"column_end":19}},{"value":"/     &[","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":30661,"byte_end":30671,"line_start":921,"line_end":921,"column_start":1,"column_end":11}},{"value":"/         \"[Borrowed] Wrapping text\",","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":30672,"byte_end":30711,"line_start":922,"line_end":922,"column_start":1,"column_end":40}},{"value":"/         \"[Owned]    ....all day\",","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":30712,"byte_end":30749,"line_start":923,"line_end":923,"column_start":1,"column_end":38}},{"value":"/         \"[Owned]    ....long.\",","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":30750,"byte_end":30785,"line_start":924,"line_end":924,"column_start":1,"column_end":36}},{"value":"/     ]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":30786,"byte_end":30795,"line_start":925,"line_end":925,"column_start":1,"column_end":10}},{"value":"/ );","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":30796,"byte_end":30802,"line_start":926,"line_end":926,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":30803,"byte_end":30810,"line_start":927,"line_end":927,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":30811,"byte_end":30814,"line_start":928,"line_end":928,"column_start":1,"column_end":4}},{"value":"/ ## Leading and Trailing Whitespace","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":30815,"byte_end":30853,"line_start":929,"line_end":929,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":30854,"byte_end":30857,"line_start":930,"line_end":930,"column_start":1,"column_end":4}},{"value":"/ As a rule, leading whitespace (indentation) is preserved and","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":30858,"byte_end":30922,"line_start":931,"line_end":931,"column_start":1,"column_end":65}},{"value":"/ trailing whitespace is discarded.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":30923,"byte_end":30960,"line_start":932,"line_end":932,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":30961,"byte_end":30964,"line_start":933,"line_end":933,"column_start":1,"column_end":4}},{"value":"/ In more details, when wrapping words into lines, words are found","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":30965,"byte_end":31033,"line_start":934,"line_end":934,"column_start":1,"column_end":69}},{"value":"/ by splitting the input text on space characters. One or more","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":31034,"byte_end":31098,"line_start":935,"line_end":935,"column_start":1,"column_end":65}},{"value":"/ spaces (shown here as “␣”) are attached to the end of each word:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":31099,"byte_end":31173,"line_start":936,"line_end":936,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":31174,"byte_end":31177,"line_start":937,"line_end":937,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":31178,"byte_end":31189,"line_start":938,"line_end":938,"column_start":1,"column_end":12}},{"value":"/ \"Foo␣␣␣bar␣baz\" -> [\"Foo␣␣␣\", \"bar␣\", \"baz\"]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":31190,"byte_end":31254,"line_start":939,"line_end":939,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":31255,"byte_end":31262,"line_start":940,"line_end":940,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":31263,"byte_end":31266,"line_start":941,"line_end":941,"column_start":1,"column_end":4}},{"value":"/ These words are then put into lines. The interword whitespace is","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":31267,"byte_end":31335,"line_start":942,"line_end":942,"column_start":1,"column_end":69}},{"value":"/ preserved, unless the lines are wrapped so that the `\"Foo␣␣␣\"`","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":31336,"byte_end":31408,"line_start":943,"line_end":943,"column_start":1,"column_end":67}},{"value":"/ word falls at the end of a line:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":31409,"byte_end":31445,"line_start":944,"line_end":944,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":31446,"byte_end":31449,"line_start":945,"line_end":945,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":31450,"byte_end":31457,"line_start":946,"line_end":946,"column_start":1,"column_end":8}},{"value":"/ use textwrap::wrap;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":31458,"byte_end":31481,"line_start":947,"line_end":947,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":31482,"byte_end":31485,"line_start":948,"line_end":948,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(wrap(\"Foo   bar baz\", 10), vec![\"Foo   bar\", \"baz\"]);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":31486,"byte_end":31554,"line_start":949,"line_end":949,"column_start":1,"column_end":69}},{"value":"/ assert_eq!(wrap(\"Foo   bar baz\", 8), vec![\"Foo\", \"bar baz\"]);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":31555,"byte_end":31620,"line_start":950,"line_end":950,"column_start":1,"column_end":66}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":31621,"byte_end":31628,"line_start":951,"line_end":951,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":31629,"byte_end":31632,"line_start":952,"line_end":952,"column_start":1,"column_end":4}},{"value":"/ Notice how the trailing whitespace is removed in both case: in the","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":31633,"byte_end":31703,"line_start":953,"line_end":953,"column_start":1,"column_end":71}},{"value":"/ first example, `\"bar␣\"` becomes `\"bar\"` and in the second case","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":31704,"byte_end":31772,"line_start":954,"line_end":954,"column_start":1,"column_end":67}},{"value":"/ `\"Foo␣␣␣\"` becomes `\"Foo\"`.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":31773,"byte_end":31810,"line_start":955,"line_end":955,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":31811,"byte_end":31814,"line_start":956,"line_end":956,"column_start":1,"column_end":4}},{"value":"/ Leading whitespace is preserved when the following word fits on","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":31815,"byte_end":31882,"line_start":957,"line_end":957,"column_start":1,"column_end":68}},{"value":"/ the first line. To understand this, consider how words are found","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":31883,"byte_end":31951,"line_start":958,"line_end":958,"column_start":1,"column_end":69}},{"value":"/ in a text with leading spaces:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":31952,"byte_end":31986,"line_start":959,"line_end":959,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":31987,"byte_end":31990,"line_start":960,"line_end":960,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":31991,"byte_end":32002,"line_start":961,"line_end":961,"column_start":1,"column_end":12}},{"value":"/ \"␣␣foo␣bar\" -> [\"␣␣\", \"foo␣\", \"bar\"]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":32003,"byte_end":32055,"line_start":962,"line_end":962,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":32056,"byte_end":32063,"line_start":963,"line_end":963,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":32064,"byte_end":32067,"line_start":964,"line_end":964,"column_start":1,"column_end":4}},{"value":"/ When put into lines, the indentation is preserved if `\"foo\"` fits","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":32068,"byte_end":32137,"line_start":965,"line_end":965,"column_start":1,"column_end":70}},{"value":"/ on the first line, otherwise you end up with an empty line:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":32138,"byte_end":32201,"line_start":966,"line_end":966,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":32202,"byte_end":32205,"line_start":967,"line_end":967,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":32206,"byte_end":32213,"line_start":968,"line_end":968,"column_start":1,"column_end":8}},{"value":"/ use textwrap::wrap;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":32214,"byte_end":32237,"line_start":969,"line_end":969,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":32238,"byte_end":32241,"line_start":970,"line_end":970,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(wrap(\"  foo bar\", 8), vec![\"  foo\", \"bar\"]);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":32242,"byte_end":32301,"line_start":971,"line_end":971,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(wrap(\"  foo bar\", 4), vec![\"\", \"foo\", \"bar\"]);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":32302,"byte_end":32363,"line_start":972,"line_end":972,"column_start":1,"column_end":62}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":32364,"byte_end":32371,"line_start":973,"line_end":973,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":153},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":38079,"byte_end":38091,"line_start":1118,"line_end":1118,"column_start":8,"column_end":20},"name":"wrap_columns","qualname":"::wrap_columns","value":"fn wrap_columns<'a, Opt>(&str, usize, Opt, &str, &str, &str) -> Vec<String>\nwhere Opt: Into<Options>","parent":null,"children":[],"decl_id":null,"docs":" Wrap text into columns with a given total width.","sig":null,"attributes":[{"value":"/ Wrap text into columns with a given total width.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":35702,"byte_end":35754,"line_start":1061,"line_end":1061,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":35755,"byte_end":35758,"line_start":1062,"line_end":1062,"column_start":1,"column_end":4}},{"value":"/ The `left_gap`, `middle_gap` and `right_gap` arguments specify the","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":35759,"byte_end":35829,"line_start":1063,"line_end":1063,"column_start":1,"column_end":71}},{"value":"/ strings to insert before, between, and after the columns. The","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":35830,"byte_end":35895,"line_start":1064,"line_end":1064,"column_start":1,"column_end":66}},{"value":"/ total width of all columns and all gaps is specified using the","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":35896,"byte_end":35962,"line_start":1065,"line_end":1065,"column_start":1,"column_end":67}},{"value":"/ `total_width_or_options` argument. This argument can simply be an","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":35963,"byte_end":36032,"line_start":1066,"line_end":1066,"column_start":1,"column_end":70}},{"value":"/ integer if you want to use default settings when wrapping, or it","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":36033,"byte_end":36101,"line_start":1067,"line_end":1067,"column_start":1,"column_end":69}},{"value":"/ can be a [`Options`] value if you want to customize the wrapping.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":36102,"byte_end":36171,"line_start":1068,"line_end":1068,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":36172,"byte_end":36175,"line_start":1069,"line_end":1069,"column_start":1,"column_end":4}},{"value":"/ If the columns are narrow, it is recommended to set","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":36176,"byte_end":36231,"line_start":1070,"line_end":1070,"column_start":1,"column_end":56}},{"value":"/ [`Options::break_words`] to `true` to prevent words from","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":36232,"byte_end":36292,"line_start":1071,"line_end":1071,"column_start":1,"column_end":61}},{"value":"/ protruding into the margins.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":36293,"byte_end":36325,"line_start":1072,"line_end":1072,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":36326,"byte_end":36329,"line_start":1073,"line_end":1073,"column_start":1,"column_end":4}},{"value":"/ The per-column width is computed like this:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":36330,"byte_end":36377,"line_start":1074,"line_end":1074,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":36378,"byte_end":36381,"line_start":1075,"line_end":1075,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":36382,"byte_end":36389,"line_start":1076,"line_end":1076,"column_start":1,"column_end":8}},{"value":"/ # let (left_gap, middle_gap, right_gap) = (\"\", \"\", \"\");","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":36390,"byte_end":36449,"line_start":1077,"line_end":1077,"column_start":1,"column_end":60}},{"value":"/ # let columns = 2;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":36450,"byte_end":36472,"line_start":1078,"line_end":1078,"column_start":1,"column_end":23}},{"value":"/ # let options = textwrap::Options::new(80);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":36473,"byte_end":36520,"line_start":1079,"line_end":1079,"column_start":1,"column_end":48}},{"value":"/ let inner_width = options.width","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":36521,"byte_end":36556,"line_start":1080,"line_end":1080,"column_start":1,"column_end":36}},{"value":"/     - textwrap::core::display_width(left_gap)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":36557,"byte_end":36606,"line_start":1081,"line_end":1081,"column_start":1,"column_end":50}},{"value":"/     - textwrap::core::display_width(right_gap)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":36607,"byte_end":36657,"line_start":1082,"line_end":1082,"column_start":1,"column_end":51}},{"value":"/     - textwrap::core::display_width(middle_gap) * (columns - 1);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":36658,"byte_end":36726,"line_start":1083,"line_end":1083,"column_start":1,"column_end":69}},{"value":"/ let column_width = inner_width / columns;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":36727,"byte_end":36772,"line_start":1084,"line_end":1084,"column_start":1,"column_end":46}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":36773,"byte_end":36780,"line_start":1085,"line_end":1085,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":36781,"byte_end":36784,"line_start":1086,"line_end":1086,"column_start":1,"column_end":4}},{"value":"/ The `text` is wrapped using [`wrap`] and the given `options`","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":36785,"byte_end":36849,"line_start":1087,"line_end":1087,"column_start":1,"column_end":65}},{"value":"/ argument, but the width is overwritten to the computed","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":36850,"byte_end":36908,"line_start":1088,"line_end":1088,"column_start":1,"column_end":59}},{"value":"/ `column_width`.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":36909,"byte_end":36928,"line_start":1089,"line_end":1089,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":36929,"byte_end":36932,"line_start":1090,"line_end":1090,"column_start":1,"column_end":4}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":36933,"byte_end":36945,"line_start":1091,"line_end":1091,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":36946,"byte_end":36949,"line_start":1092,"line_end":1092,"column_start":1,"column_end":4}},{"value":"/ Panics if `columns` is zero.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":36950,"byte_end":36982,"line_start":1093,"line_end":1093,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":36983,"byte_end":36986,"line_start":1094,"line_end":1094,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":36987,"byte_end":37001,"line_start":1095,"line_end":1095,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":37002,"byte_end":37005,"line_start":1096,"line_end":1096,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":37006,"byte_end":37013,"line_start":1097,"line_end":1097,"column_start":1,"column_end":8}},{"value":"/ use textwrap::wrap_columns;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":37014,"byte_end":37045,"line_start":1098,"line_end":1098,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":37046,"byte_end":37049,"line_start":1099,"line_end":1099,"column_start":1,"column_end":4}},{"value":"/ let text = \"\\","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":37050,"byte_end":37067,"line_start":1100,"line_end":1100,"column_start":1,"column_end":18}},{"value":"/ This is an example text, which is wrapped into three columns. \\","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":37068,"byte_end":37135,"line_start":1101,"line_end":1101,"column_start":1,"column_end":68}},{"value":"/ Notice how the final column can be shorter than the others.\";","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":37136,"byte_end":37201,"line_start":1102,"line_end":1102,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":37202,"byte_end":37205,"line_start":1103,"line_end":1103,"column_start":1,"column_end":4}},{"value":"/ #[cfg(feature = \"smawk\")]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":37206,"byte_end":37235,"line_start":1104,"line_end":1104,"column_start":1,"column_end":30}},{"value":"/ assert_eq!(wrap_columns(text, 3, 50, \"| \", \" | \", \" |\"),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":37236,"byte_end":37296,"line_start":1105,"line_end":1105,"column_start":1,"column_end":61}},{"value":"/            vec![\"| This is       | into three    | column can be  |\",","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":37297,"byte_end":37370,"line_start":1106,"line_end":1106,"column_start":1,"column_end":74}},{"value":"/                 \"| an example    | columns.      | shorter than   |\",","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":37371,"byte_end":37444,"line_start":1107,"line_end":1107,"column_start":1,"column_end":74}},{"value":"/                 \"| text, which   | Notice how    | the others.    |\",","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":37445,"byte_end":37518,"line_start":1108,"line_end":1108,"column_start":1,"column_end":74}},{"value":"/                 \"| is wrapped    | the final     |                |\"]);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":37519,"byte_end":37594,"line_start":1109,"line_end":1109,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":37595,"byte_end":37598,"line_start":1110,"line_end":1110,"column_start":1,"column_end":4}},{"value":"/ // Without the `smawk` feature, the middle column is a little more uneven:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":37599,"byte_end":37677,"line_start":1111,"line_end":1111,"column_start":1,"column_end":79}},{"value":"/ #[cfg(not(feature = \"smawk\"))]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":37678,"byte_end":37712,"line_start":1112,"line_end":1112,"column_start":1,"column_end":35}},{"value":"/ assert_eq!(wrap_columns(text, 3, 50, \"| \", \" | \", \" |\"),","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":37713,"byte_end":37773,"line_start":1113,"line_end":1113,"column_start":1,"column_end":61}},{"value":"/            vec![\"| This is an    | three         | column can be  |\",","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":37774,"byte_end":37847,"line_start":1114,"line_end":1114,"column_start":1,"column_end":74}},{"value":"/                 \"| example text, | columns.      | shorter than   |\",","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":37848,"byte_end":37921,"line_start":1115,"line_end":1115,"column_start":1,"column_end":74}},{"value":"/                 \"| which is      | Notice how    | the others.    |\",","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":37922,"byte_end":37995,"line_start":1116,"line_end":1116,"column_start":1,"column_end":74}},{"value":"/                 \"| wrapped into  | the final     |                |\"]);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":37996,"byte_end":38071,"line_start":1117,"line_end":1117,"column_start":1,"column_end":76}}]},{"kind":"Function","id":{"krate":0,"index":156},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":41870,"byte_end":41882,"line_start":1225,"line_end":1225,"column_start":8,"column_end":20},"name":"fill_inplace","qualname":"::fill_inplace","value":"fn fill_inplace(&mut String, usize)","parent":null,"children":[],"decl_id":null,"docs":" Fill `text` in-place without reallocating the input string.","sig":null,"attributes":[{"value":"/ Fill `text` in-place without reallocating the input string.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":39757,"byte_end":39820,"line_start":1171,"line_end":1171,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":39821,"byte_end":39824,"line_start":1172,"line_end":1172,"column_start":1,"column_end":4}},{"value":"/ This function works by modifying the input string: some `' '`","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":39825,"byte_end":39890,"line_start":1173,"line_end":1173,"column_start":1,"column_end":66}},{"value":"/ characters will be replaced by `'\\n'` characters. The rest of the","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":39891,"byte_end":39960,"line_start":1174,"line_end":1174,"column_start":1,"column_end":70}},{"value":"/ text remains untouched.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":39961,"byte_end":39988,"line_start":1175,"line_end":1175,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":39989,"byte_end":39992,"line_start":1176,"line_end":1176,"column_start":1,"column_end":4}},{"value":"/ Since we can only replace existing whitespace in the input with","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":39993,"byte_end":40060,"line_start":1177,"line_end":1177,"column_start":1,"column_end":68}},{"value":"/ `'\\n'`, we cannot do hyphenation nor can we split words longer","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":40061,"byte_end":40127,"line_start":1178,"line_end":1178,"column_start":1,"column_end":67}},{"value":"/ than the line width. We also need to use `AsciiSpace` as the word","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":40128,"byte_end":40197,"line_start":1179,"line_end":1179,"column_start":1,"column_end":70}},{"value":"/ separator since we need `' '` characters between words in order to","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":40198,"byte_end":40268,"line_start":1180,"line_end":1180,"column_start":1,"column_end":71}},{"value":"/ replace some of them with a `'\\n'`. Indentation is also ruled out.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":40269,"byte_end":40339,"line_start":1181,"line_end":1181,"column_start":1,"column_end":71}},{"value":"/ In other words, `fill_inplace(width)` behaves as if you had called","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":40340,"byte_end":40410,"line_start":1182,"line_end":1182,"column_start":1,"column_end":71}},{"value":"/ [`fill`] with these options:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":40411,"byte_end":40443,"line_start":1183,"line_end":1183,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":40444,"byte_end":40447,"line_start":1184,"line_end":1184,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":40448,"byte_end":40455,"line_start":1185,"line_end":1185,"column_start":1,"column_end":8}},{"value":"/ # use textwrap::{core, LineEnding, Options, WordSplitter, WordSeparator, WrapAlgorithm};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":40456,"byte_end":40548,"line_start":1186,"line_end":1186,"column_start":1,"column_end":93}},{"value":"/ # let width = 80;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":40549,"byte_end":40570,"line_start":1187,"line_end":1187,"column_start":1,"column_end":22}},{"value":"/ Options {","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":40571,"byte_end":40584,"line_start":1188,"line_end":1188,"column_start":1,"column_end":14}},{"value":"/     width: width,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":40585,"byte_end":40606,"line_start":1189,"line_end":1189,"column_start":1,"column_end":22}},{"value":"/     line_ending: LineEnding::LF,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":40607,"byte_end":40643,"line_start":1190,"line_end":1190,"column_start":1,"column_end":37}},{"value":"/     initial_indent: \"\",","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":40644,"byte_end":40671,"line_start":1191,"line_end":1191,"column_start":1,"column_end":28}},{"value":"/     subsequent_indent: \"\",","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":40672,"byte_end":40702,"line_start":1192,"line_end":1192,"column_start":1,"column_end":31}},{"value":"/     break_words: false,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":40703,"byte_end":40730,"line_start":1193,"line_end":1193,"column_start":1,"column_end":28}},{"value":"/     word_separator: WordSeparator::AsciiSpace,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":40731,"byte_end":40781,"line_start":1194,"line_end":1194,"column_start":1,"column_end":51}},{"value":"/     wrap_algorithm: WrapAlgorithm::FirstFit,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":40782,"byte_end":40830,"line_start":1195,"line_end":1195,"column_start":1,"column_end":49}},{"value":"/     word_splitter: WordSplitter::NoHyphenation,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":40831,"byte_end":40882,"line_start":1196,"line_end":1196,"column_start":1,"column_end":52}},{"value":"/ };","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":40883,"byte_end":40889,"line_start":1197,"line_end":1197,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":40890,"byte_end":40897,"line_start":1198,"line_end":1198,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":40898,"byte_end":40901,"line_start":1199,"line_end":1199,"column_start":1,"column_end":4}},{"value":"/ The wrap algorithm is [`WrapAlgorithm::FirstFit`] since this","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":40902,"byte_end":40966,"line_start":1200,"line_end":1200,"column_start":1,"column_end":65}},{"value":"/ is the fastest algorithm — and the main reason to use","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":40967,"byte_end":41026,"line_start":1201,"line_end":1201,"column_start":1,"column_end":58}},{"value":"/ `fill_inplace` is to get the string broken into newlines as fast","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":41027,"byte_end":41095,"line_start":1202,"line_end":1202,"column_start":1,"column_end":69}},{"value":"/ as possible.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":41096,"byte_end":41112,"line_start":1203,"line_end":1203,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":41113,"byte_end":41116,"line_start":1204,"line_end":1204,"column_start":1,"column_end":4}},{"value":"/ A last difference is that (unlike [`fill`]) `fill_inplace` can","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":41117,"byte_end":41183,"line_start":1205,"line_end":1205,"column_start":1,"column_end":67}},{"value":"/ leave trailing whitespace on lines. This is because we wrap by","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":41184,"byte_end":41250,"line_start":1206,"line_end":1206,"column_start":1,"column_end":67}},{"value":"/ inserting a `'\\n'` at the final whitespace in the input string:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":41251,"byte_end":41318,"line_start":1207,"line_end":1207,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":41319,"byte_end":41322,"line_start":1208,"line_end":1208,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":41323,"byte_end":41330,"line_start":1209,"line_end":1209,"column_start":1,"column_end":8}},{"value":"/ let mut text = String::from(\"Hello   World!\");","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":41331,"byte_end":41381,"line_start":1210,"line_end":1210,"column_start":1,"column_end":51}},{"value":"/ textwrap::fill_inplace(&mut text, 10);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":41382,"byte_end":41424,"line_start":1211,"line_end":1211,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(text, \"Hello  \\nWorld!\");","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":41425,"byte_end":41465,"line_start":1212,"line_end":1212,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":41466,"byte_end":41473,"line_start":1213,"line_end":1213,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":41474,"byte_end":41477,"line_start":1214,"line_end":1214,"column_start":1,"column_end":4}},{"value":"/ If we didn't do this, the word `World!` would end up being","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":41478,"byte_end":41540,"line_start":1215,"line_end":1215,"column_start":1,"column_end":63}},{"value":"/ indented. You can avoid this if you make sure that your input text","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":41541,"byte_end":41611,"line_start":1216,"line_end":1216,"column_start":1,"column_end":71}},{"value":"/ has no double spaces.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":41612,"byte_end":41637,"line_start":1217,"line_end":1217,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":41638,"byte_end":41641,"line_start":1218,"line_end":1218,"column_start":1,"column_end":4}},{"value":"/ # Performance","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":41642,"byte_end":41659,"line_start":1219,"line_end":1219,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":41660,"byte_end":41663,"line_start":1220,"line_end":1220,"column_start":1,"column_end":4}},{"value":"/ In benchmarks, `fill_inplace` is about twice as fast as [`fill`].","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":41664,"byte_end":41733,"line_start":1221,"line_end":1221,"column_start":1,"column_end":70}},{"value":"/ Please see the [`linear`","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":41734,"byte_end":41762,"line_start":1222,"line_end":1222,"column_start":1,"column_end":29}},{"value":"/ benchmark](https://github.com/mgeisler/textwrap/blob/master/benches/linear.rs)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":41763,"byte_end":41845,"line_start":1223,"line_end":1223,"column_start":1,"column_end":83}},{"value":"/ for details.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":41846,"byte_end":41862,"line_start":1224,"line_end":1224,"column_start":1,"column_end":17}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_separators.rs","byte_start":79774,"byte_end":79787,"line_start":125,"line_end":125,"column_start":26,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":22}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_separators.rs","byte_start":80186,"byte_end":80199,"line_start":136,"line_end":136,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":24},{"krate":0,"index":25}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":93570,"byte_end":93582,"line_start":101,"line_end":101,"column_start":26,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":42}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":94084,"byte_end":94096,"line_start":113,"line_end":113,"column_start":34,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":44}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":94608,"byte_end":94620,"line_start":127,"line_end":127,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":46}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":104187,"byte_end":104200,"line_start":90,"line_end":90,"column_start":26,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":67}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":104585,"byte_end":104598,"line_start":101,"line_end":101,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":69},{"krate":0,"index":70}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":106611,"byte_end":106624,"line_start":161,"line_end":161,"column_start":18,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":75}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\line_ending.rs","byte_start":115171,"byte_end":115181,"line_start":18,"line_end":18,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":88}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\line_ending.rs","byte_start":115780,"byte_end":115793,"line_start":37,"line_end":37,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":91},{"krate":0,"index":92}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":126189,"byte_end":126193,"line_start":226,"line_end":226,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":109},{"krate":0,"index":110}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":126299,"byte_end":126303,"line_start":234,"line_end":234,"column_start":10,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":113},{"krate":0,"index":114}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":128512,"byte_end":128516,"line_start":304,"line_end":304,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":120},{"krate":0,"index":121},{"krate":0,"index":122}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":9032,"byte_end":9039,"line_start":252,"line_end":252,"column_start":36,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":128}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":9551,"byte_end":9558,"line_start":267,"line_end":267,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":131}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":9647,"byte_end":9654,"line_start":273,"line_end":273,"column_start":10,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":134},{"krate":0,"index":135},{"krate":0,"index":136},{"krate":0,"index":137},{"krate":0,"index":138},{"krate":0,"index":139},{"krate":0,"index":140},{"krate":0,"index":141}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":7452,"byte_end":7466,"line_start":211,"line_end":211,"column_start":9,"column_end":23},"ref_id":{"krate":0,"index":33}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":7515,"byte_end":7530,"line_start":214,"line_end":214,"column_start":9,"column_end":24},"ref_id":{"krate":0,"index":58}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":7632,"byte_end":7636,"line_start":220,"line_end":220,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":96}}],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_separators.rs","byte_start":79774,"byte_end":79787,"line_start":125,"line_end":125,"column_start":26,"column_end":39},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":158},"to":{"krate":2,"index":9907}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_separators.rs","byte_start":80186,"byte_end":80199,"line_start":136,"line_end":136,"column_start":6,"column_end":19},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":158},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":93570,"byte_end":93582,"line_start":101,"line_end":101,"column_start":26,"column_end":38},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":167},"to":{"krate":2,"index":9907}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":94084,"byte_end":94096,"line_start":113,"line_end":113,"column_start":34,"column_end":46},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":167},"to":{"krate":2,"index":2802}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\word_splitters.rs","byte_start":94608,"byte_end":94620,"line_start":127,"line_end":127,"column_start":6,"column_end":18},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":167},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":104187,"byte_end":104200,"line_start":90,"line_end":90,"column_start":26,"column_end":39},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":177},"to":{"krate":2,"index":9907}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":104585,"byte_end":104598,"line_start":101,"line_end":101,"column_start":6,"column_end":19},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":177},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\wrap_algorithms.rs","byte_start":106611,"byte_end":106624,"line_start":161,"line_end":161,"column_start":18,"column_end":31},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":177},"to":{"krate":2,"index":3128}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\line_ending.rs","byte_start":115171,"byte_end":115181,"line_start":18,"line_end":18,"column_start":6,"column_end":16},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":190},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\line_ending.rs","byte_start":115780,"byte_end":115793,"line_start":37,"line_end":37,"column_start":23,"column_end":36},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":206},"to":{"krate":2,"index":8193}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":125185,"byte_end":125190,"line_start":197,"line_end":197,"column_start":31,"column_end":36},"kind":"SuperTrait","from":{"krate":2,"index":9907},"to":{"krate":0,"index":104}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":126189,"byte_end":126193,"line_start":226,"line_end":226,"column_start":26,"column_end":30},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":218},"to":{"krate":2,"index":3369}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":126299,"byte_end":126303,"line_start":234,"line_end":234,"column_start":10,"column_end":14},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":218},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\core.rs","byte_start":128512,"byte_end":128516,"line_start":304,"line_end":304,"column_start":19,"column_end":23},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":218},"to":{"krate":0,"index":104}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":9032,"byte_end":9039,"line_start":252,"line_end":252,"column_start":36,"column_end":43},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":243},"to":{"krate":2,"index":3056}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":9551,"byte_end":9558,"line_start":267,"line_end":267,"column_start":26,"column_end":33},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":243},"to":{"krate":2,"index":3056}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\textwrap-0.15.1\\src\\lib.rs","byte_start":9647,"byte_end":9654,"line_start":273,"line_end":273,"column_start":10,"column_end":17},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":243},"to":{"krate":4294967295,"index":4294967295}}]}