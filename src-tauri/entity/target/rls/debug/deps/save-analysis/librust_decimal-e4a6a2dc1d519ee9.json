{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1","program":"C:\\Users\\Andrei\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","rust_decimal","--edition=2021","C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"serde\"","--cfg","feature=\"std\"","-C","metadata=e4a6a2dc1d519ee9","-C","extra-filename=-e4a6a2dc1d519ee9","--out-dir","d:\\Programming\\DestituteDepictions\\src-tauri\\entity\\target\\rls\\debug\\deps","-L","dependency=d:\\Programming\\DestituteDepictions\\src-tauri\\entity\\target\\rls\\debug\\deps","--extern","arrayvec=d:\\Programming\\DestituteDepictions\\src-tauri\\entity\\target\\rls\\debug\\deps\\libarrayvec-eaa9c5cefa2e820f.rmeta","--extern","num_traits=d:\\Programming\\DestituteDepictions\\src-tauri\\entity\\target\\rls\\debug\\deps\\libnum_traits-622eef8a488adc5c.rmeta","--extern","serde=d:\\Programming\\DestituteDepictions\\src-tauri\\entity\\target\\rls\\debug\\deps\\libserde-8dedf60d8a0c5e81.rmeta","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\Andrei\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"d:\\Programming\\DestituteDepictions\\src-tauri\\entity\\target\\rls\\debug\\deps\\librust_decimal-e4a6a2dc1d519ee9.rmeta"},"prelude":{"crate_id":{"name":"rust_decimal","disambiguator":[568750537630690550,0]},"crate_root":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src","external_crates":[{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[8526938853280630398,0]}},{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","num":2,"id":{"name":"core","disambiguator":[5339428516588690145,0]}},{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[263601903543822771,0]}},{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[7343628043363739070,0]}},{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[14796848713614703829,0]}},{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[2248661955232720858,0]}},{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[6100837883140397065,0]}},{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[6763488366047601591,0]}},{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\lib.rs","num":9,"id":{"name":"miniz_oxide","disambiguator":[79841370634592438,0]}},{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[14720684392801985393,0]}},{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\lib.rs","num":11,"id":{"name":"adler","disambiguator":[1205045013435031913,0]}},{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[9970316023349964410,0]}},{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\lib.rs","num":13,"id":{"name":"std_detect","disambiguator":[17496692589544781456,0]}},{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\lib.rs","num":14,"id":{"name":"rustc_demangle","disambiguator":[17700294896468204783,0]}},{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\lib.rs","num":15,"id":{"name":"panic_unwind","disambiguator":[8939469696884238691,0]}},{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","num":16,"id":{"name":"num_traits","disambiguator":[9592260288182239992,0]}},{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\str.rs","num":17,"id":{"name":"arrayvec","disambiguator":[3409267555265809472,0]}},{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\serde.rs","num":18,"id":{"name":"serde","disambiguator":[12132081963377550534,0]}},{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\serde.rs","num":19,"id":{"name":"serde_derive","disambiguator":[11166650514861956175,0]}}],"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\lib.rs","byte_start":0,"byte_end":2005,"line_start":1,"line_end":75,"column_start":1,"column_end":53}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":1055},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\lib.rs","byte_start":1211,"byte_end":1218,"line_start":52,"line_end":52,"column_start":19,"column_end":26},"alias_span":null,"name":"Decimal","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1063},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\lib.rs","byte_start":1220,"byte_end":1236,"line_start":52,"line_end":52,"column_start":28,"column_end":44},"alias_span":null,"name":"RoundingStrategy","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1189},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\lib.rs","byte_start":1254,"byte_end":1259,"line_start":53,"line_end":53,"column_start":16,"column_end":21},"alias_span":null,"name":"Error","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1055},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\lib.rs","byte_start":1520,"byte_end":1527,"line_start":61,"line_end":61,"column_start":21,"column_end":28},"alias_span":null,"name":"Decimal","value":"","parent":{"krate":0,"index":1011}},{"kind":"Use","ref_id":{"krate":0,"index":1063},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\lib.rs","byte_start":1529,"byte_end":1545,"line_start":61,"line_end":61,"column_start":30,"column_end":46},"alias_span":null,"name":"RoundingStrategy","value":"","parent":{"krate":0,"index":1011}},{"kind":"Use","ref_id":{"krate":2,"index":12561},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\lib.rs","byte_start":1571,"byte_end":1578,"line_start":62,"line_end":62,"column_start":24,"column_end":31},"alias_span":null,"name":"FromStr","value":"","parent":{"krate":0,"index":1011}},{"kind":"Use","ref_id":{"krate":16,"index":333},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\lib.rs","byte_start":1605,"byte_end":1618,"line_start":63,"line_end":63,"column_start":26,"column_end":39},"alias_span":null,"name":"FromPrimitive","value":"","parent":{"krate":0,"index":1011}},{"kind":"Use","ref_id":{"krate":16,"index":476},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\lib.rs","byte_start":1620,"byte_end":1623,"line_start":63,"line_end":63,"column_start":41,"column_end":44},"alias_span":null,"name":"One","value":"","parent":{"krate":0,"index":1011}},{"kind":"Use","ref_id":{"krate":16,"index":819},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\lib.rs","byte_start":1625,"byte_end":1631,"line_start":63,"line_end":63,"column_start":46,"column_end":52},"alias_span":null,"name":"Signed","value":"","parent":{"krate":0,"index":1011}},{"kind":"Use","ref_id":{"krate":16,"index":307},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\lib.rs","byte_start":1633,"byte_end":1644,"line_start":63,"line_end":63,"column_start":54,"column_end":65},"alias_span":null,"name":"ToPrimitive","value":"","parent":{"krate":0,"index":1011}},{"kind":"Use","ref_id":{"krate":16,"index":466},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\lib.rs","byte_start":1646,"byte_end":1650,"line_start":63,"line_end":63,"column_start":67,"column_end":71},"alias_span":null,"name":"Zero","value":"","parent":{"krate":0,"index":1011}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\lib.rs","byte_start":0,"byte_end":2005,"line_start":1,"line_end":75,"column_start":1,"column_end":53},"name":"","qualname":"::","value":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":27},{"krate":0,"index":371},{"krate":0,"index":392},{"krate":0,"index":700},{"krate":0,"index":851},{"krate":0,"index":943},{"krate":0,"index":1001},{"krate":0,"index":1002},{"krate":0,"index":1005},{"krate":0,"index":1008},{"krate":0,"index":1011},{"krate":0,"index":1038}],"decl_id":null,"docs":"A Decimal number implementation written in pure Rust suitable for financial calculations that require significant integral and fractional digits with no round-off errors.","sig":null,"attributes":[{"value":"forbid(unsafe_code)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\lib.rs","byte_start":67,"byte_end":90,"line_start":2,"line_end":2,"column_start":1,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":1040},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":6820,"byte_end":6835,"line_start":96,"line_end":96,"column_start":12,"column_end":27},"name":"UnpackedDecimal","qualname":"::decimal::UnpackedDecimal","value":"UnpackedDecimal { negative, scale, hi, mid, lo }","parent":null,"children":[{"krate":0,"index":1041},{"krate":0,"index":1042},{"krate":0,"index":1043},{"krate":0,"index":1044},{"krate":0,"index":1045}],"decl_id":null,"docs":" `UnpackedDecimal` contains unpacked representation of `Decimal` where each component\n of decimal-format stored in it's own field\n","sig":null,"attributes":[{"value":"/ `UnpackedDecimal` contains unpacked representation of `Decimal` where each component","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":6632,"byte_end":6720,"line_start":93,"line_end":93,"column_start":1,"column_end":89}},{"value":"/ of decimal-format stored in it's own field","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":6721,"byte_end":6767,"line_start":94,"line_end":94,"column_start":1,"column_end":47}}]},{"kind":"Field","id":{"krate":0,"index":1041},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":6846,"byte_end":6854,"line_start":97,"line_end":97,"column_start":9,"column_end":17},"name":"negative","qualname":"::decimal::UnpackedDecimal::negative","value":"bool","parent":{"krate":0,"index":1040},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1042},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":6870,"byte_end":6875,"line_start":98,"line_end":98,"column_start":9,"column_end":14},"name":"scale","qualname":"::decimal::UnpackedDecimal::scale","value":"u32","parent":{"krate":0,"index":1040},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1043},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":6890,"byte_end":6892,"line_start":99,"line_end":99,"column_start":9,"column_end":11},"name":"hi","qualname":"::decimal::UnpackedDecimal::hi","value":"u32","parent":{"krate":0,"index":1040},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1044},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":6907,"byte_end":6910,"line_start":100,"line_end":100,"column_start":9,"column_end":12},"name":"mid","qualname":"::decimal::UnpackedDecimal::mid","value":"u32","parent":{"krate":0,"index":1040},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1045},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":6925,"byte_end":6927,"line_start":101,"line_end":101,"column_start":9,"column_end":11},"name":"lo","qualname":"::decimal::UnpackedDecimal::lo","value":"u32","parent":{"krate":0,"index":1040},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1055},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":7870,"byte_end":7877,"line_start":127,"line_end":127,"column_start":12,"column_end":19},"name":"Decimal","qualname":"::decimal::Decimal","value":"Decimal {  }","parent":null,"children":[{"krate":0,"index":1056},{"krate":0,"index":1057},{"krate":0,"index":1058},{"krate":0,"index":1059}],"decl_id":null,"docs":" `Decimal` represents a 128 bit representation of a fixed-precision decimal number.\n The finite set of values of type `Decimal` are of the form m / 10<sup>e</sup>,\n where m is an integer such that -2<sup>96</sup> < m < 2<sup>96</sup>, and e is an integer\n between 0 and 28 inclusive.\n","sig":null,"attributes":[{"value":"/ `Decimal` represents a 128 bit representation of a fixed-precision decimal number.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":6937,"byte_end":7023,"line_start":104,"line_end":104,"column_start":1,"column_end":87}},{"value":"/ The finite set of values of type `Decimal` are of the form m / 10<sup>e</sup>,","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":7024,"byte_end":7106,"line_start":105,"line_end":105,"column_start":1,"column_end":83}},{"value":"/ where m is an integer such that -2<sup>96</sup> < m < 2<sup>96</sup>, and e is an integer","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":7107,"byte_end":7200,"line_start":106,"line_end":106,"column_start":1,"column_end":94}},{"value":"/ between 0 and 28 inclusive.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":7201,"byte_end":7232,"line_start":107,"line_end":107,"column_start":1,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1064},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":8651,"byte_end":8670,"line_start":148,"line_end":148,"column_start":5,"column_end":24},"name":"MidpointNearestEven","qualname":"::decimal::RoundingStrategy::MidpointNearestEven","value":"RoundingStrategy::MidpointNearestEven","parent":{"krate":0,"index":1063},"children":[],"decl_id":null,"docs":" When a number is halfway between two others, it is rounded toward the nearest even number.\n Also known as \"Bankers Rounding\".\n e.g.\n 6.5 -> 6, 7.5 -> 8\n","sig":null,"attributes":[{"value":"/ When a number is halfway between two others, it is rounded toward the nearest even number.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":8470,"byte_end":8564,"line_start":144,"line_end":144,"column_start":5,"column_end":99}},{"value":"/ Also known as \"Bankers Rounding\".","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":8569,"byte_end":8606,"line_start":145,"line_end":145,"column_start":5,"column_end":42}},{"value":"/ e.g.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":8611,"byte_end":8619,"line_start":146,"line_end":146,"column_start":5,"column_end":13}},{"value":"/ 6.5 -> 6, 7.5 -> 8","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":8624,"byte_end":8646,"line_start":147,"line_end":147,"column_start":5,"column_end":27}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1066},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":8837,"byte_end":8857,"line_start":151,"line_end":151,"column_start":5,"column_end":25},"name":"MidpointAwayFromZero","qualname":"::decimal::RoundingStrategy::MidpointAwayFromZero","value":"RoundingStrategy::MidpointAwayFromZero","parent":{"krate":0,"index":1063},"children":[],"decl_id":null,"docs":" When a number is halfway between two others, it is rounded toward the nearest number that\n is away from zero. e.g. 6.4 -> 6, 6.5 -> 7, -6.5 -> -7\n","sig":null,"attributes":[{"value":"/ When a number is halfway between two others, it is rounded toward the nearest number that","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":8676,"byte_end":8769,"line_start":149,"line_end":149,"column_start":5,"column_end":98}},{"value":"/ is away from zero. e.g. 6.4 -> 6, 6.5 -> 7, -6.5 -> -7","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":8774,"byte_end":8832,"line_start":150,"line_end":150,"column_start":5,"column_end":63}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1068},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":9021,"byte_end":9039,"line_start":154,"line_end":154,"column_start":5,"column_end":23},"name":"MidpointTowardZero","qualname":"::decimal::RoundingStrategy::MidpointTowardZero","value":"RoundingStrategy::MidpointTowardZero","parent":{"krate":0,"index":1063},"children":[],"decl_id":null,"docs":" When a number is halfway between two others, it is rounded toward the nearest number that\n is toward zero. e.g. 6.4 -> 6, 6.5 -> 6, -6.5 -> -6\n","sig":null,"attributes":[{"value":"/ When a number is halfway between two others, it is rounded toward the nearest number that","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":8863,"byte_end":8956,"line_start":152,"line_end":152,"column_start":5,"column_end":98}},{"value":"/ is toward zero. e.g. 6.4 -> 6, 6.5 -> 6, -6.5 -> -6","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":8961,"byte_end":9016,"line_start":153,"line_end":153,"column_start":5,"column_end":60}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1070},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":9121,"byte_end":9127,"line_start":156,"line_end":156,"column_start":5,"column_end":11},"name":"ToZero","qualname":"::decimal::RoundingStrategy::ToZero","value":"RoundingStrategy::ToZero","parent":{"krate":0,"index":1063},"children":[],"decl_id":null,"docs":" The number is always rounded toward zero. e.g. -6.8 -> -6, 6.8 -> 6\n","sig":null,"attributes":[{"value":"/ The number is always rounded toward zero. e.g. -6.8 -> -6, 6.8 -> 6","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":9045,"byte_end":9116,"line_start":155,"line_end":155,"column_start":5,"column_end":76}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1072},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":9212,"byte_end":9224,"line_start":158,"line_end":158,"column_start":5,"column_end":17},"name":"AwayFromZero","qualname":"::decimal::RoundingStrategy::AwayFromZero","value":"RoundingStrategy::AwayFromZero","parent":{"krate":0,"index":1063},"children":[],"decl_id":null,"docs":" The number is always rounded away from zero. e.g. -6.8 -> -7, 6.8 -> 7\n","sig":null,"attributes":[{"value":"/ The number is always rounded away from zero. e.g. -6.8 -> -7, 6.8 -> 7","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":9133,"byte_end":9207,"line_start":157,"line_end":157,"column_start":5,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1074},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":9320,"byte_end":9338,"line_start":160,"line_end":160,"column_start":5,"column_end":23},"name":"ToNegativeInfinity","qualname":"::decimal::RoundingStrategy::ToNegativeInfinity","value":"RoundingStrategy::ToNegativeInfinity","parent":{"krate":0,"index":1063},"children":[],"decl_id":null,"docs":" The number is always rounded towards negative infinity. e.g. 6.8 -> 6, -6.8 -> -7\n","sig":null,"attributes":[{"value":"/ The number is always rounded towards negative infinity. e.g. 6.8 -> 6, -6.8 -> -7","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":9230,"byte_end":9315,"line_start":159,"line_end":159,"column_start":5,"column_end":90}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1076},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":9434,"byte_end":9452,"line_start":162,"line_end":162,"column_start":5,"column_end":23},"name":"ToPositiveInfinity","qualname":"::decimal::RoundingStrategy::ToPositiveInfinity","value":"RoundingStrategy::ToPositiveInfinity","parent":{"krate":0,"index":1063},"children":[],"decl_id":null,"docs":" The number is always rounded towards positive infinity. e.g. 6.8 -> 7, -6.8 -> -6\n","sig":null,"attributes":[{"value":"/ The number is always rounded towards positive infinity. e.g. 6.8 -> 7, -6.8 -> -6","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":9344,"byte_end":9429,"line_start":161,"line_end":161,"column_start":5,"column_end":90}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1078},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":9701,"byte_end":9716,"line_start":168,"line_end":168,"column_start":5,"column_end":20},"name":"BankersRounding","qualname":"::decimal::RoundingStrategy::BankersRounding","value":"RoundingStrategy::BankersRounding","parent":{"krate":0,"index":1063},"children":[],"decl_id":null,"docs":" When a number is halfway between two others, it is rounded toward the nearest even number.\n e.g.\n 6.5 -> 6, 7.5 -> 8\n","sig":null,"attributes":[{"value":"/ When a number is halfway between two others, it is rounded toward the nearest even number.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":9459,"byte_end":9553,"line_start":164,"line_end":164,"column_start":5,"column_end":99}},{"value":"/ e.g.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":9558,"byte_end":9566,"line_start":165,"line_end":165,"column_start":5,"column_end":13}},{"value":"/ 6.5 -> 6, 7.5 -> 8","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":9571,"byte_end":9593,"line_start":166,"line_end":166,"column_start":5,"column_end":27}},{"value":"deprecated(since = \"1.11.0\", note =\n\"Please use RoundingStrategy::MidpointNearestEven instead\")","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":9598,"byte_end":9696,"line_start":167,"line_end":167,"column_start":5,"column_end":103}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1080},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":9900,"byte_end":9911,"line_start":171,"line_end":171,"column_start":5,"column_end":16},"name":"RoundHalfUp","qualname":"::decimal::RoundingStrategy::RoundHalfUp","value":"RoundingStrategy::RoundHalfUp","parent":{"krate":0,"index":1063},"children":[],"decl_id":null,"docs":" Rounds up if the value >= 5, otherwise rounds down, e.g. 6.5 -> 7\n","sig":null,"attributes":[{"value":"/ Rounds up if the value >= 5, otherwise rounds down, e.g. 6.5 -> 7","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":9722,"byte_end":9791,"line_start":169,"line_end":169,"column_start":5,"column_end":74}},{"value":"deprecated(since = \"1.11.0\", note =\n\"Please use RoundingStrategy::MidpointAwayFromZero instead\")","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":9796,"byte_end":9895,"line_start":170,"line_end":170,"column_start":5,"column_end":104}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1082},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":10119,"byte_end":10132,"line_start":174,"line_end":174,"column_start":5,"column_end":18},"name":"RoundHalfDown","qualname":"::decimal::RoundingStrategy::RoundHalfDown","value":"RoundingStrategy::RoundHalfDown","parent":{"krate":0,"index":1063},"children":[],"decl_id":null,"docs":" Rounds down if the value =< 5, otherwise rounds up, e.g. 6.5 -> 6, 6.51 -> 7 1.4999999 -> 1\n","sig":null,"attributes":[{"value":"/ Rounds down if the value =< 5, otherwise rounds up, e.g. 6.5 -> 6, 6.51 -> 7 1.4999999 -> 1","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":9917,"byte_end":10012,"line_start":172,"line_end":172,"column_start":5,"column_end":100}},{"value":"deprecated(since = \"1.11.0\", note =\n\"Please use RoundingStrategy::MidpointTowardZero instead\")","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":10017,"byte_end":10114,"line_start":173,"line_end":173,"column_start":5,"column_end":102}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1084},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":10255,"byte_end":10264,"line_start":177,"line_end":177,"column_start":5,"column_end":14},"name":"RoundDown","qualname":"::decimal::RoundingStrategy::RoundDown","value":"RoundingStrategy::RoundDown","parent":{"krate":0,"index":1063},"children":[],"decl_id":null,"docs":" Always round down.\n","sig":null,"attributes":[{"value":"/ Always round down.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":10138,"byte_end":10160,"line_start":175,"line_end":175,"column_start":5,"column_end":27}},{"value":"deprecated(since = \"1.11.0\", note =\n\"Please use RoundingStrategy::ToZero instead\")","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":10165,"byte_end":10250,"line_start":176,"line_end":176,"column_start":5,"column_end":90}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1086},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":10391,"byte_end":10398,"line_start":180,"line_end":180,"column_start":5,"column_end":12},"name":"RoundUp","qualname":"::decimal::RoundingStrategy::RoundUp","value":"RoundingStrategy::RoundUp","parent":{"krate":0,"index":1063},"children":[],"decl_id":null,"docs":" Always round up.\n","sig":null,"attributes":[{"value":"/ Always round up.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":10270,"byte_end":10290,"line_start":178,"line_end":178,"column_start":5,"column_end":25}},{"value":"deprecated(since = \"1.11.0\", note =\n\"Please use RoundingStrategy::AwayFromZero instead\")","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":10295,"byte_end":10386,"line_start":179,"line_end":179,"column_start":5,"column_end":96}}]},{"kind":"Enum","id":{"krate":0,"index":1063},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":8447,"byte_end":8463,"line_start":143,"line_end":143,"column_start":10,"column_end":26},"name":"RoundingStrategy","qualname":"::decimal::RoundingStrategy","value":"enum RoundingStrategy {\n    MidpointNearestEven,\n    MidpointAwayFromZero,\n    MidpointTowardZero,\n    ToZero,\n    AwayFromZero,\n    ToNegativeInfinity,\n    ToPositiveInfinity,\n    BankersRounding,\n    RoundHalfUp,\n    RoundHalfDown,\n    RoundDown,\n    RoundUp,\n}","parent":null,"children":[{"krate":0,"index":1064},{"krate":0,"index":1066},{"krate":0,"index":1068},{"krate":0,"index":1070},{"krate":0,"index":1072},{"krate":0,"index":1074},{"krate":0,"index":1076},{"krate":0,"index":1078},{"krate":0,"index":1080},{"krate":0,"index":1082},{"krate":0,"index":1084},{"krate":0,"index":1086}],"decl_id":null,"docs":" `RoundingStrategy` represents the different rounding strategies that can be used by\n `round_dp_with_strategy`.\n","sig":null,"attributes":[{"value":"/ `RoundingStrategy` represents the different rounding strategies that can be used by","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":8275,"byte_end":8362,"line_start":140,"line_end":140,"column_start":1,"column_end":88}},{"value":"/ `round_dp_with_strategy`.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":8363,"byte_end":8392,"line_start":141,"line_end":141,"column_start":1,"column_end":30}}]},{"kind":"Const","id":{"krate":0,"index":154},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":10763,"byte_end":10766,"line_start":195,"line_end":195,"column_start":15,"column_end":18},"name":"MIN","qualname":"::decimal::Decimal::MIN","value":"Decimal","parent":{"krate":0,"index":153},"children":[],"decl_id":null,"docs":" The smallest value that can be represented by this decimal type.","sig":null,"attributes":[{"value":"/ The smallest value that can be represented by this decimal type.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":10442,"byte_end":10510,"line_start":185,"line_end":185,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":10515,"byte_end":10518,"line_start":186,"line_end":186,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":10523,"byte_end":10537,"line_start":187,"line_end":187,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":10542,"byte_end":10545,"line_start":188,"line_end":188,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":10550,"byte_end":10566,"line_start":189,"line_end":189,"column_start":5,"column_end":21}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":10571,"byte_end":10578,"line_start":190,"line_end":190,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::Decimal;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":10583,"byte_end":10615,"line_start":191,"line_end":191,"column_start":5,"column_end":37}},{"value":"/ # use rust_decimal_macros::dec;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":10620,"byte_end":10655,"line_start":192,"line_end":192,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(Decimal::MIN, dec!(-79_228_162_514_264_337_593_543_950_335));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":10660,"byte_end":10736,"line_start":193,"line_end":193,"column_start":5,"column_end":81}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":10741,"byte_end":10748,"line_start":194,"line_end":194,"column_start":5,"column_end":12}}]},{"kind":"Const","id":{"krate":0,"index":155},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":11106,"byte_end":11109,"line_start":206,"line_end":206,"column_start":15,"column_end":18},"name":"MAX","qualname":"::decimal::Decimal::MAX","value":"Decimal","parent":{"krate":0,"index":153},"children":[],"decl_id":null,"docs":" The largest value that can be represented by this decimal type.","sig":null,"attributes":[{"value":"/ The largest value that can be represented by this decimal type.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":10787,"byte_end":10854,"line_start":196,"line_end":196,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":10859,"byte_end":10862,"line_start":197,"line_end":197,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":10867,"byte_end":10881,"line_start":198,"line_end":198,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":10886,"byte_end":10889,"line_start":199,"line_end":199,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":10894,"byte_end":10910,"line_start":200,"line_end":200,"column_start":5,"column_end":21}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":10915,"byte_end":10922,"line_start":201,"line_end":201,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::Decimal;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":10927,"byte_end":10959,"line_start":202,"line_end":202,"column_start":5,"column_end":37}},{"value":"/ # use rust_decimal_macros::dec;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":10964,"byte_end":10999,"line_start":203,"line_end":203,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(Decimal::MAX, dec!(79_228_162_514_264_337_593_543_950_335));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":11004,"byte_end":11079,"line_start":204,"line_end":204,"column_start":5,"column_end":80}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":11084,"byte_end":11091,"line_start":205,"line_end":205,"column_start":5,"column_end":12}}]},{"kind":"Const","id":{"krate":0,"index":156},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":11376,"byte_end":11380,"line_start":217,"line_end":217,"column_start":15,"column_end":19},"name":"ZERO","qualname":"::decimal::Decimal::ZERO","value":"Decimal","parent":{"krate":0,"index":153},"children":[],"decl_id":null,"docs":" A constant representing 0.","sig":null,"attributes":[{"value":"/ A constant representing 0.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":11130,"byte_end":11160,"line_start":207,"line_end":207,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":11165,"byte_end":11168,"line_start":208,"line_end":208,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":11173,"byte_end":11187,"line_start":209,"line_end":209,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":11192,"byte_end":11195,"line_start":210,"line_end":210,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":11200,"byte_end":11216,"line_start":211,"line_end":211,"column_start":5,"column_end":21}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":11221,"byte_end":11228,"line_start":212,"line_end":212,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::Decimal;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":11233,"byte_end":11265,"line_start":213,"line_end":213,"column_start":5,"column_end":37}},{"value":"/ # use rust_decimal_macros::dec;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":11270,"byte_end":11305,"line_start":214,"line_end":214,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(Decimal::ZERO, dec!(0));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":11310,"byte_end":11349,"line_start":215,"line_end":215,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":11354,"byte_end":11361,"line_start":216,"line_end":216,"column_start":5,"column_end":12}}]},{"kind":"Const","id":{"krate":0,"index":157},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":11647,"byte_end":11650,"line_start":228,"line_end":228,"column_start":15,"column_end":18},"name":"ONE","qualname":"::decimal::Decimal::ONE","value":"Decimal","parent":{"krate":0,"index":153},"children":[],"decl_id":null,"docs":" A constant representing 1.","sig":null,"attributes":[{"value":"/ A constant representing 1.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":11402,"byte_end":11432,"line_start":218,"line_end":218,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":11437,"byte_end":11440,"line_start":219,"line_end":219,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":11445,"byte_end":11459,"line_start":220,"line_end":220,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":11464,"byte_end":11467,"line_start":221,"line_end":221,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":11472,"byte_end":11488,"line_start":222,"line_end":222,"column_start":5,"column_end":21}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":11493,"byte_end":11500,"line_start":223,"line_end":223,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::Decimal;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":11505,"byte_end":11537,"line_start":224,"line_end":224,"column_start":5,"column_end":37}},{"value":"/ # use rust_decimal_macros::dec;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":11542,"byte_end":11577,"line_start":225,"line_end":225,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(Decimal::ONE, dec!(1));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":11582,"byte_end":11620,"line_start":226,"line_end":226,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":11625,"byte_end":11632,"line_start":227,"line_end":227,"column_start":5,"column_end":12}}]},{"kind":"Const","id":{"krate":0,"index":158},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":11927,"byte_end":11939,"line_start":239,"line_end":239,"column_start":15,"column_end":27},"name":"NEGATIVE_ONE","qualname":"::decimal::Decimal::NEGATIVE_ONE","value":"Decimal","parent":{"krate":0,"index":153},"children":[],"decl_id":null,"docs":" A constant representing -1.","sig":null,"attributes":[{"value":"/ A constant representing -1.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":11671,"byte_end":11702,"line_start":229,"line_end":229,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":11707,"byte_end":11710,"line_start":230,"line_end":230,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":11715,"byte_end":11729,"line_start":231,"line_end":231,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":11734,"byte_end":11737,"line_start":232,"line_end":232,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":11742,"byte_end":11758,"line_start":233,"line_end":233,"column_start":5,"column_end":21}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":11763,"byte_end":11770,"line_start":234,"line_end":234,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::Decimal;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":11775,"byte_end":11807,"line_start":235,"line_end":235,"column_start":5,"column_end":37}},{"value":"/ # use rust_decimal_macros::dec;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":11812,"byte_end":11847,"line_start":236,"line_end":236,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(Decimal::NEGATIVE_ONE, dec!(-1));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":11852,"byte_end":11900,"line_start":237,"line_end":237,"column_start":5,"column_end":53}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":11905,"byte_end":11912,"line_start":238,"line_end":238,"column_start":5,"column_end":12}}]},{"kind":"Const","id":{"krate":0,"index":159},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":12214,"byte_end":12217,"line_start":250,"line_end":250,"column_start":15,"column_end":18},"name":"TWO","qualname":"::decimal::Decimal::TWO","value":"Decimal","parent":{"krate":0,"index":153},"children":[],"decl_id":null,"docs":" A constant representing 2.","sig":null,"attributes":[{"value":"/ A constant representing 2.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":11969,"byte_end":11999,"line_start":240,"line_end":240,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":12004,"byte_end":12007,"line_start":241,"line_end":241,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":12012,"byte_end":12026,"line_start":242,"line_end":242,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":12031,"byte_end":12034,"line_start":243,"line_end":243,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":12039,"byte_end":12055,"line_start":244,"line_end":244,"column_start":5,"column_end":21}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":12060,"byte_end":12067,"line_start":245,"line_end":245,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::Decimal;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":12072,"byte_end":12104,"line_start":246,"line_end":246,"column_start":5,"column_end":37}},{"value":"/ # use rust_decimal_macros::dec;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":12109,"byte_end":12144,"line_start":247,"line_end":247,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(Decimal::TWO, dec!(2));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":12149,"byte_end":12187,"line_start":248,"line_end":248,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":12192,"byte_end":12199,"line_start":249,"line_end":249,"column_start":5,"column_end":12}}]},{"kind":"Const","id":{"krate":0,"index":160},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":12485,"byte_end":12488,"line_start":261,"line_end":261,"column_start":15,"column_end":18},"name":"TEN","qualname":"::decimal::Decimal::TEN","value":"Decimal","parent":{"krate":0,"index":153},"children":[],"decl_id":null,"docs":" A constant representing 10.","sig":null,"attributes":[{"value":"/ A constant representing 10.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":12238,"byte_end":12269,"line_start":251,"line_end":251,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":12274,"byte_end":12277,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":12282,"byte_end":12296,"line_start":253,"line_end":253,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":12301,"byte_end":12304,"line_start":254,"line_end":254,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":12309,"byte_end":12325,"line_start":255,"line_end":255,"column_start":5,"column_end":21}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":12330,"byte_end":12337,"line_start":256,"line_end":256,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::Decimal;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":12342,"byte_end":12374,"line_start":257,"line_end":257,"column_start":5,"column_end":37}},{"value":"/ # use rust_decimal_macros::dec;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":12379,"byte_end":12414,"line_start":258,"line_end":258,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(Decimal::TEN, dec!(10));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":12419,"byte_end":12458,"line_start":259,"line_end":259,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":12463,"byte_end":12470,"line_start":260,"line_end":260,"column_start":5,"column_end":12}}]},{"kind":"Const","id":{"krate":0,"index":161},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":12766,"byte_end":12777,"line_start":272,"line_end":272,"column_start":15,"column_end":26},"name":"ONE_HUNDRED","qualname":"::decimal::Decimal::ONE_HUNDRED","value":"Decimal","parent":{"krate":0,"index":153},"children":[],"decl_id":null,"docs":" A constant representing 100.","sig":null,"attributes":[{"value":"/ A constant representing 100.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":12509,"byte_end":12541,"line_start":262,"line_end":262,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":12546,"byte_end":12549,"line_start":263,"line_end":263,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":12554,"byte_end":12568,"line_start":264,"line_end":264,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":12573,"byte_end":12576,"line_start":265,"line_end":265,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":12581,"byte_end":12597,"line_start":266,"line_end":266,"column_start":5,"column_end":21}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":12602,"byte_end":12609,"line_start":267,"line_end":267,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::Decimal;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":12614,"byte_end":12646,"line_start":268,"line_end":268,"column_start":5,"column_end":37}},{"value":"/ # use rust_decimal_macros::dec;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":12651,"byte_end":12686,"line_start":269,"line_end":269,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(Decimal::ONE_HUNDRED, dec!(100));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":12691,"byte_end":12739,"line_start":270,"line_end":270,"column_start":5,"column_end":53}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":12744,"byte_end":12751,"line_start":271,"line_end":271,"column_start":5,"column_end":12}}]},{"kind":"Const","id":{"krate":0,"index":162},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":13066,"byte_end":13078,"line_start":283,"line_end":283,"column_start":15,"column_end":27},"name":"ONE_THOUSAND","qualname":"::decimal::Decimal::ONE_THOUSAND","value":"Decimal","parent":{"krate":0,"index":153},"children":[],"decl_id":null,"docs":" A constant representing 1000.","sig":null,"attributes":[{"value":"/ A constant representing 1000.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":12806,"byte_end":12839,"line_start":273,"line_end":273,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":12844,"byte_end":12847,"line_start":274,"line_end":274,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":12852,"byte_end":12866,"line_start":275,"line_end":275,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":12871,"byte_end":12874,"line_start":276,"line_end":276,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":12879,"byte_end":12895,"line_start":277,"line_end":277,"column_start":5,"column_end":21}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":12900,"byte_end":12907,"line_start":278,"line_end":278,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::Decimal;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":12912,"byte_end":12944,"line_start":279,"line_end":279,"column_start":5,"column_end":37}},{"value":"/ # use rust_decimal_macros::dec;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":12949,"byte_end":12984,"line_start":280,"line_end":280,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(Decimal::ONE_THOUSAND, dec!(1000));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":12989,"byte_end":13039,"line_start":281,"line_end":281,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":13044,"byte_end":13051,"line_start":282,"line_end":282,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":163},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":16595,"byte_end":16598,"line_start":408,"line_end":408,"column_start":12,"column_end":15},"name":"new","qualname":"<Decimal>::new","value":"fn new(i64, u32) -> Decimal","parent":null,"children":[],"decl_id":null,"docs":" Returns a `Decimal` with a 64 bit `m` representation and corresponding `e` scale.","sig":null,"attributes":[{"value":"/ Returns a `Decimal` with a 64 bit `m` representation and corresponding `e` scale.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":16017,"byte_end":16102,"line_start":388,"line_end":388,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":16107,"byte_end":16110,"line_start":389,"line_end":389,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":16115,"byte_end":16130,"line_start":390,"line_end":390,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":16135,"byte_end":16138,"line_start":391,"line_end":391,"column_start":5,"column_end":8}},{"value":"/ * `num` - An i64 that represents the `m` portion of the decimal number","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":16143,"byte_end":16217,"line_start":392,"line_end":392,"column_start":5,"column_end":79}},{"value":"/ * `scale` - A u32 representing the `e` portion of the decimal number.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":16222,"byte_end":16295,"line_start":393,"line_end":393,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":16300,"byte_end":16303,"line_start":394,"line_end":394,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":16308,"byte_end":16320,"line_start":395,"line_end":395,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":16325,"byte_end":16328,"line_start":396,"line_end":396,"column_start":5,"column_end":8}},{"value":"/ This function panics if `scale` is > 28.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":16333,"byte_end":16377,"line_start":397,"line_end":397,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":16382,"byte_end":16385,"line_start":398,"line_end":398,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":16390,"byte_end":16403,"line_start":399,"line_end":399,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":16408,"byte_end":16411,"line_start":400,"line_end":400,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":16416,"byte_end":16423,"line_start":401,"line_end":401,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::Decimal;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":16428,"byte_end":16460,"line_start":402,"line_end":402,"column_start":5,"column_end":37}},{"value":"/ #","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":16465,"byte_end":16470,"line_start":403,"line_end":403,"column_start":5,"column_end":10}},{"value":"/ let pi = Decimal::new(3141, 3);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":16475,"byte_end":16510,"line_start":404,"line_end":404,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(pi.to_string(), \"3.141\");","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":16515,"byte_end":16555,"line_start":405,"line_end":405,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":16560,"byte_end":16567,"line_start":406,"line_end":406,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":16572,"byte_end":16583,"line_start":407,"line_end":407,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":164},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":17064,"byte_end":17071,"line_start":425,"line_end":425,"column_start":18,"column_end":25},"name":"try_new","qualname":"<Decimal>::try_new","value":"const fn try_new(i64, u32) -> crate::Result<Decimal>","parent":null,"children":[],"decl_id":null,"docs":" Checked version of `Decimal::new`. Will return `Err` instead of panicking at run-time.","sig":null,"attributes":[{"value":"/ Checked version of `Decimal::new`. Will return `Err` instead of panicking at run-time.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":16760,"byte_end":16850,"line_start":415,"line_end":415,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":16855,"byte_end":16858,"line_start":416,"line_end":416,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":16863,"byte_end":16876,"line_start":417,"line_end":417,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":16881,"byte_end":16884,"line_start":418,"line_end":418,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":16889,"byte_end":16900,"line_start":419,"line_end":419,"column_start":5,"column_end":16}},{"value":"/ # use rust_decimal::Decimal;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":16905,"byte_end":16937,"line_start":420,"line_end":420,"column_start":5,"column_end":37}},{"value":"/ #","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":16942,"byte_end":16947,"line_start":421,"line_end":421,"column_start":5,"column_end":10}},{"value":"/ let max = Decimal::try_new(i64::MAX, u32::MAX);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":16952,"byte_end":17003,"line_start":422,"line_end":422,"column_start":5,"column_end":56}},{"value":"/ assert!(max.is_err());","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":17008,"byte_end":17034,"line_start":423,"line_end":423,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":17039,"byte_end":17046,"line_start":424,"line_end":424,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":165},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":18439,"byte_end":18459,"line_start":467,"line_end":467,"column_start":12,"column_end":32},"name":"from_i128_with_scale","qualname":"<Decimal>::from_i128_with_scale","value":"fn from_i128_with_scale(i128, u32) -> Decimal","parent":null,"children":[],"decl_id":null,"docs":" Creates a `Decimal` using a 128 bit signed `m` representation and corresponding `e` scale.","sig":null,"attributes":[{"value":"/ Creates a `Decimal` using a 128 bit signed `m` representation and corresponding `e` scale.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":17776,"byte_end":17870,"line_start":447,"line_end":447,"column_start":5,"column_end":99}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":17875,"byte_end":17878,"line_start":448,"line_end":448,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":17883,"byte_end":17898,"line_start":449,"line_end":449,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":17903,"byte_end":17906,"line_start":450,"line_end":450,"column_start":5,"column_end":8}},{"value":"/ * `num` - An i128 that represents the `m` portion of the decimal number","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":17911,"byte_end":17986,"line_start":451,"line_end":451,"column_start":5,"column_end":80}},{"value":"/ * `scale` - A u32 representing the `e` portion of the decimal number.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":17991,"byte_end":18064,"line_start":452,"line_end":452,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":18069,"byte_end":18072,"line_start":453,"line_end":453,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":18077,"byte_end":18089,"line_start":454,"line_end":454,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":18094,"byte_end":18097,"line_start":455,"line_end":455,"column_start":5,"column_end":8}},{"value":"/ This function panics if `scale` is > 28 or if `num` exceeds the maximum supported 96 bits.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":18102,"byte_end":18196,"line_start":456,"line_end":456,"column_start":5,"column_end":99}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":18201,"byte_end":18204,"line_start":457,"line_end":457,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":18209,"byte_end":18222,"line_start":458,"line_end":458,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":18227,"byte_end":18230,"line_start":459,"line_end":459,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":18235,"byte_end":18246,"line_start":460,"line_end":460,"column_start":5,"column_end":16}},{"value":"/ # use rust_decimal::Decimal;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":18251,"byte_end":18283,"line_start":461,"line_end":461,"column_start":5,"column_end":37}},{"value":"/ #","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":18288,"byte_end":18293,"line_start":462,"line_end":462,"column_start":5,"column_end":10}},{"value":"/ let pi = Decimal::from_i128_with_scale(3141i128, 3);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":18298,"byte_end":18354,"line_start":463,"line_end":463,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(pi.to_string(), \"3.141\");","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":18359,"byte_end":18399,"line_start":464,"line_end":464,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":18404,"byte_end":18411,"line_start":465,"line_end":465,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":18416,"byte_end":18427,"line_start":466,"line_end":466,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":166},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":18986,"byte_end":19010,"line_start":485,"line_end":485,"column_start":18,"column_end":42},"name":"try_from_i128_with_scale","qualname":"<Decimal>::try_from_i128_with_scale","value":"const fn try_from_i128_with_scale(i128, u32) -> crate::Result<Decimal>","parent":null,"children":[],"decl_id":null,"docs":" Checked version of `Decimal::from_i128_with_scale`. Will return `Err` instead\n of panicking at run-time.","sig":null,"attributes":[{"value":"/ Checked version of `Decimal::from_i128_with_scale`. Will return `Err` instead","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":18639,"byte_end":18720,"line_start":474,"line_end":474,"column_start":5,"column_end":86}},{"value":"/ of panicking at run-time.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":18725,"byte_end":18754,"line_start":475,"line_end":475,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":18759,"byte_end":18762,"line_start":476,"line_end":476,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":18767,"byte_end":18780,"line_start":477,"line_end":477,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":18785,"byte_end":18788,"line_start":478,"line_end":478,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":18793,"byte_end":18804,"line_start":479,"line_end":479,"column_start":5,"column_end":16}},{"value":"/ # use rust_decimal::Decimal;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":18809,"byte_end":18841,"line_start":480,"line_end":480,"column_start":5,"column_end":37}},{"value":"/ #","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":18846,"byte_end":18851,"line_start":481,"line_end":481,"column_start":5,"column_end":10}},{"value":"/ let max = Decimal::try_from_i128_with_scale(i128::MAX, u32::MAX);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":18856,"byte_end":18925,"line_start":482,"line_end":482,"column_start":5,"column_end":74}},{"value":"/ assert!(max.is_err());","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":18930,"byte_end":18956,"line_start":483,"line_end":483,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":18961,"byte_end":18968,"line_start":484,"line_end":484,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":167},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":20916,"byte_end":20926,"line_start":534,"line_end":534,"column_start":18,"column_end":28},"name":"from_parts","qualname":"<Decimal>::from_parts","value":"const fn from_parts(u32, u32, u32, bool, u32) -> Decimal","parent":null,"children":[],"decl_id":null,"docs":" Returns a `Decimal` using the instances constituent parts.","sig":null,"attributes":[{"value":"/ Returns a `Decimal` using the instances constituent parts.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":19811,"byte_end":19873,"line_start":508,"line_end":508,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":19878,"byte_end":19881,"line_start":509,"line_end":509,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":19886,"byte_end":19901,"line_start":510,"line_end":510,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":19906,"byte_end":19909,"line_start":511,"line_end":511,"column_start":5,"column_end":8}},{"value":"/ * `lo` - The low 32 bits of a 96-bit integer.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":19914,"byte_end":19963,"line_start":512,"line_end":512,"column_start":5,"column_end":54}},{"value":"/ * `mid` - The middle 32 bits of a 96-bit integer.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":19968,"byte_end":20021,"line_start":513,"line_end":513,"column_start":5,"column_end":58}},{"value":"/ * `hi` - The high 32 bits of a 96-bit integer.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":20026,"byte_end":20076,"line_start":514,"line_end":514,"column_start":5,"column_end":55}},{"value":"/ * `negative` - `true` to indicate a negative number.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":20081,"byte_end":20137,"line_start":515,"line_end":515,"column_start":5,"column_end":61}},{"value":"/ * `scale` - A power of 10 ranging from 0 to 28.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":20142,"byte_end":20193,"line_start":516,"line_end":516,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":20198,"byte_end":20201,"line_start":517,"line_end":517,"column_start":5,"column_end":8}},{"value":"/ # Caution: Undefined behavior","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":20206,"byte_end":20239,"line_start":518,"line_end":518,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":20244,"byte_end":20247,"line_start":519,"line_end":519,"column_start":5,"column_end":8}},{"value":"/ While a scale greater than 28 can be passed in, it will be automatically capped by this","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":20252,"byte_end":20343,"line_start":520,"line_end":520,"column_start":5,"column_end":96}},{"value":"/ function at the maximum precision. The library opts towards this functionality as opposed","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":20348,"byte_end":20441,"line_start":521,"line_end":521,"column_start":5,"column_end":98}},{"value":"/ to a panic to ensure that the function can be treated as constant. This may lead to","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":20446,"byte_end":20533,"line_start":522,"line_end":522,"column_start":5,"column_end":92}},{"value":"/ undefined behavior in downstream applications and should be treated with caution.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":20538,"byte_end":20623,"line_start":523,"line_end":523,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":20628,"byte_end":20631,"line_start":524,"line_end":524,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":20636,"byte_end":20649,"line_start":525,"line_end":525,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":20654,"byte_end":20657,"line_start":526,"line_end":526,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":20662,"byte_end":20669,"line_start":527,"line_end":527,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::Decimal;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":20674,"byte_end":20706,"line_start":528,"line_end":528,"column_start":5,"column_end":37}},{"value":"/ #","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":20711,"byte_end":20716,"line_start":529,"line_end":529,"column_start":5,"column_end":10}},{"value":"/ let pi = Decimal::from_parts(1102470952, 185874565, 1703060790, false, 28);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":20721,"byte_end":20800,"line_start":530,"line_end":530,"column_start":5,"column_end":84}},{"value":"/ assert_eq!(pi.to_string(), \"3.1415926535897932384626433832\");","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":20805,"byte_end":20870,"line_start":531,"line_end":531,"column_start":5,"column_end":70}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":20875,"byte_end":20882,"line_start":532,"line_end":532,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":20887,"byte_end":20898,"line_start":533,"line_end":533,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":169},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":22243,"byte_end":22258,"line_start":582,"line_end":582,"column_start":12,"column_end":27},"name":"from_scientific","qualname":"<Decimal>::from_scientific","value":"fn from_scientific(&str) -> Result<Decimal, Error>","parent":null,"children":[],"decl_id":null,"docs":" Returns a `Result` which if successful contains the `Decimal` constitution of\n the scientific notation provided by `value`.","sig":null,"attributes":[{"value":"/ Returns a `Result` which if successful contains the `Decimal` constitution of","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":21694,"byte_end":21775,"line_start":564,"line_end":564,"column_start":5,"column_end":86}},{"value":"/ the scientific notation provided by `value`.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":21780,"byte_end":21828,"line_start":565,"line_end":565,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":21833,"byte_end":21836,"line_start":566,"line_end":566,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":21841,"byte_end":21856,"line_start":567,"line_end":567,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":21861,"byte_end":21864,"line_start":568,"line_end":568,"column_start":5,"column_end":8}},{"value":"/ * `value` - The scientific notation of the `Decimal`.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":21869,"byte_end":21926,"line_start":569,"line_end":569,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":21931,"byte_end":21934,"line_start":570,"line_end":570,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":21939,"byte_end":21952,"line_start":571,"line_end":571,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":21957,"byte_end":21960,"line_start":572,"line_end":572,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":21965,"byte_end":21972,"line_start":573,"line_end":573,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::Decimal;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":21977,"byte_end":22009,"line_start":574,"line_end":574,"column_start":5,"column_end":37}},{"value":"/ #","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":22014,"byte_end":22019,"line_start":575,"line_end":575,"column_start":5,"column_end":10}},{"value":"/ # fn main() -> Result<(), rust_decimal::Error> {","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":22024,"byte_end":22076,"line_start":576,"line_end":576,"column_start":5,"column_end":57}},{"value":"/ let value = Decimal::from_scientific(\"9.7e-7\")?;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":22081,"byte_end":22133,"line_start":577,"line_end":577,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(value.to_string(), \"0.00000097\");","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":22138,"byte_end":22186,"line_start":578,"line_end":578,"column_start":5,"column_end":53}},{"value":"/ #     Ok(())","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":22191,"byte_end":22207,"line_start":579,"line_end":579,"column_start":5,"column_end":21}},{"value":"/ # }","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":22212,"byte_end":22219,"line_start":580,"line_end":580,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":22224,"byte_end":22231,"line_start":581,"line_end":581,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":179},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":25353,"byte_end":25367,"line_start":662,"line_end":662,"column_start":12,"column_end":26},"name":"from_str_radix","qualname":"<Decimal>::from_str_radix","value":"fn from_str_radix(&str, u32) -> Result<Self, crate::Error>","parent":null,"children":[],"decl_id":null,"docs":" Converts a string slice in a given base to a decimal.","sig":null,"attributes":[{"value":"/ Converts a string slice in a given base to a decimal.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":24716,"byte_end":24773,"line_start":640,"line_end":640,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":24778,"byte_end":24781,"line_start":641,"line_end":641,"column_start":5,"column_end":8}},{"value":"/ The string is expected to be an optional + sign followed by digits.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":24786,"byte_end":24857,"line_start":642,"line_end":642,"column_start":5,"column_end":76}},{"value":"/ Digits are a subset of these characters, depending on radix, and will return an error if outside","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":24862,"byte_end":24962,"line_start":643,"line_end":643,"column_start":5,"column_end":105}},{"value":"/ the expected range:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":24967,"byte_end":24990,"line_start":644,"line_end":644,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":24995,"byte_end":24998,"line_start":645,"line_end":645,"column_start":5,"column_end":8}},{"value":"/ * 0-9","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":25003,"byte_end":25012,"line_start":646,"line_end":646,"column_start":5,"column_end":14}},{"value":"/ * a-z","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":25017,"byte_end":25026,"line_start":647,"line_end":647,"column_start":5,"column_end":14}},{"value":"/ * A-Z","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":25031,"byte_end":25040,"line_start":648,"line_end":648,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":25045,"byte_end":25048,"line_start":649,"line_end":649,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":25053,"byte_end":25067,"line_start":650,"line_end":650,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":25072,"byte_end":25075,"line_start":651,"line_end":651,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":25080,"byte_end":25096,"line_start":652,"line_end":652,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":25101,"byte_end":25104,"line_start":653,"line_end":653,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":25109,"byte_end":25116,"line_start":654,"line_end":654,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::prelude::*;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":25121,"byte_end":25156,"line_start":655,"line_end":655,"column_start":5,"column_end":40}},{"value":"/ #","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":25161,"byte_end":25166,"line_start":656,"line_end":656,"column_start":5,"column_end":10}},{"value":"/ # fn main() -> Result<(), rust_decimal::Error> {","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":25171,"byte_end":25223,"line_start":657,"line_end":657,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(Decimal::from_str_radix(\"A\", 16)?.to_string(), \"10\");","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":25228,"byte_end":25296,"line_start":658,"line_end":658,"column_start":5,"column_end":73}},{"value":"/ #     Ok(())","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":25301,"byte_end":25317,"line_start":659,"line_end":659,"column_start":5,"column_end":21}},{"value":"/ # }","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":25322,"byte_end":25329,"line_start":660,"line_end":660,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":25334,"byte_end":25341,"line_start":661,"line_end":661,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":180},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":26330,"byte_end":26344,"line_start":688,"line_end":688,"column_start":12,"column_end":26},"name":"from_str_exact","qualname":"<Decimal>::from_str_exact","value":"fn from_str_exact(&str) -> Result<Self, crate::Error>","parent":null,"children":[],"decl_id":null,"docs":" Parses a string slice into a decimal. If the value underflows and cannot be represented with the\n given scale then this will return an error.","sig":null,"attributes":[{"value":"/ Parses a string slice into a decimal. If the value underflows and cannot be represented with the","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":25588,"byte_end":25688,"line_start":670,"line_end":670,"column_start":5,"column_end":105}},{"value":"/ given scale then this will return an error.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":25693,"byte_end":25740,"line_start":671,"line_end":671,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":25745,"byte_end":25748,"line_start":672,"line_end":672,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":25753,"byte_end":25767,"line_start":673,"line_end":673,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":25772,"byte_end":25775,"line_start":674,"line_end":674,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":25780,"byte_end":25796,"line_start":675,"line_end":675,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":25801,"byte_end":25804,"line_start":676,"line_end":676,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":25809,"byte_end":25816,"line_start":677,"line_end":677,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::prelude::*;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":25821,"byte_end":25856,"line_start":678,"line_end":678,"column_start":5,"column_end":40}},{"value":"/ # use rust_decimal::Error;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":25861,"byte_end":25891,"line_start":679,"line_end":679,"column_start":5,"column_end":35}},{"value":"/ #","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":25896,"byte_end":25901,"line_start":680,"line_end":680,"column_start":5,"column_end":10}},{"value":"/ # fn main() -> Result<(), rust_decimal::Error> {","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":25906,"byte_end":25958,"line_start":681,"line_end":681,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(Decimal::from_str_exact(\"0.001\")?.to_string(), \"0.001\");","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":25963,"byte_end":26034,"line_start":682,"line_end":682,"column_start":5,"column_end":76}},{"value":"/ assert_eq!(Decimal::from_str_exact(\"0.00000_00000_00000_00000_00000_001\")?.to_string(), \"0.0000000000000000000000000001\");","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":26039,"byte_end":26165,"line_start":683,"line_end":683,"column_start":5,"column_end":131}},{"value":"/ assert_eq!(Decimal::from_str_exact(\"0.00000_00000_00000_00000_00000_0001\"), Err(Error::Underflow));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":26170,"byte_end":26273,"line_start":684,"line_end":684,"column_start":5,"column_end":108}},{"value":"/ #     Ok(())","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":26278,"byte_end":26294,"line_start":685,"line_end":685,"column_start":5,"column_end":21}},{"value":"/ # }","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":26299,"byte_end":26306,"line_start":686,"line_end":686,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":26311,"byte_end":26318,"line_start":687,"line_end":687,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":181},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":26750,"byte_end":26755,"line_start":704,"line_end":704,"column_start":18,"column_end":23},"name":"scale","qualname":"<Decimal>::scale","value":"const fn scale(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the scale of the decimal number, otherwise known as `e`.","sig":null,"attributes":[{"value":"/ Returns the scale of the decimal number, otherwise known as `e`.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":26449,"byte_end":26517,"line_start":692,"line_end":692,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":26522,"byte_end":26525,"line_start":693,"line_end":693,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":26530,"byte_end":26543,"line_start":694,"line_end":694,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":26548,"byte_end":26551,"line_start":695,"line_end":695,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":26556,"byte_end":26563,"line_start":696,"line_end":696,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::Decimal;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":26568,"byte_end":26600,"line_start":697,"line_end":697,"column_start":5,"column_end":37}},{"value":"/ #","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":26605,"byte_end":26610,"line_start":698,"line_end":698,"column_start":5,"column_end":10}},{"value":"/ let num = Decimal::new(1234, 3);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":26615,"byte_end":26651,"line_start":699,"line_end":699,"column_start":5,"column_end":41}},{"value":"/ assert_eq!(num.scale(), 3u32);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":26656,"byte_end":26690,"line_start":700,"line_end":700,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":26695,"byte_end":26702,"line_start":701,"line_end":701,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":26707,"byte_end":26716,"line_start":702,"line_end":702,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":26721,"byte_end":26732,"line_start":703,"line_end":703,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":182},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":27189,"byte_end":27197,"line_start":721,"line_end":721,"column_start":18,"column_end":26},"name":"mantissa","qualname":"<Decimal>::mantissa","value":"const fn mantissa(&Self) -> i128","parent":null,"children":[],"decl_id":null,"docs":" Returns the mantissa of the decimal number.","sig":null,"attributes":[{"value":"/ Returns the mantissa of the decimal number.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":26841,"byte_end":26888,"line_start":708,"line_end":708,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":26893,"byte_end":26896,"line_start":709,"line_end":709,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":26901,"byte_end":26914,"line_start":710,"line_end":710,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":26919,"byte_end":26922,"line_start":711,"line_end":711,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":26927,"byte_end":26934,"line_start":712,"line_end":712,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::prelude::*;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":26939,"byte_end":26974,"line_start":713,"line_end":713,"column_start":5,"column_end":40}},{"value":"/ use rust_decimal_macros::dec;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":26979,"byte_end":27012,"line_start":714,"line_end":714,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":27017,"byte_end":27020,"line_start":715,"line_end":715,"column_start":5,"column_end":8}},{"value":"/ let num = dec!(-1.2345678);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":27025,"byte_end":27056,"line_start":716,"line_end":716,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(num.mantissa(), -12345678i128);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":27061,"byte_end":27107,"line_start":717,"line_end":717,"column_start":5,"column_end":51}},{"value":"/ assert_eq!(num.scale(), 7);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":27112,"byte_end":27143,"line_start":718,"line_end":718,"column_start":5,"column_end":36}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":27148,"byte_end":27155,"line_start":719,"line_end":719,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":27160,"byte_end":27171,"line_start":720,"line_end":720,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":183},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":27686,"byte_end":27693,"line_start":741,"line_end":741,"column_start":18,"column_end":25},"name":"is_zero","qualname":"<Decimal>::is_zero","value":"const fn is_zero(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if this Decimal number is equivalent to zero.","sig":null,"attributes":[{"value":"/ Returns true if this Decimal number is equivalent to zero.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":27417,"byte_end":27479,"line_start":730,"line_end":730,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":27484,"byte_end":27487,"line_start":731,"line_end":731,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":27492,"byte_end":27505,"line_start":732,"line_end":732,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":27510,"byte_end":27513,"line_start":733,"line_end":733,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":27518,"byte_end":27525,"line_start":734,"line_end":734,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::prelude::*;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":27530,"byte_end":27565,"line_start":735,"line_end":735,"column_start":5,"column_end":40}},{"value":"/ #","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":27570,"byte_end":27575,"line_start":736,"line_end":736,"column_start":5,"column_end":10}},{"value":"/ let num = Decimal::ZERO;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":27580,"byte_end":27608,"line_start":737,"line_end":737,"column_start":5,"column_end":33}},{"value":"/ assert!(num.is_zero());","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":27613,"byte_end":27640,"line_start":738,"line_end":738,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":27645,"byte_end":27652,"line_start":739,"line_end":739,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":27657,"byte_end":27668,"line_start":740,"line_end":740,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":184},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":28259,"byte_end":28267,"line_start":761,"line_end":761,"column_start":12,"column_end":20},"name":"set_sign","qualname":"<Decimal>::set_sign","value":"fn set_sign(&mut Self, bool)","parent":null,"children":[],"decl_id":null,"docs":" An optimized method for changing the sign of a decimal number.","sig":null,"attributes":[{"value":"/ An optimized method for changing the sign of a decimal number.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":27776,"byte_end":27842,"line_start":745,"line_end":745,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":27847,"byte_end":27850,"line_start":746,"line_end":746,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":27855,"byte_end":27870,"line_start":747,"line_end":747,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":27875,"byte_end":27878,"line_start":748,"line_end":748,"column_start":5,"column_end":8}},{"value":"/ * `positive`: true if the resulting decimal should be positive.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":27883,"byte_end":27950,"line_start":749,"line_end":749,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":27955,"byte_end":27958,"line_start":750,"line_end":750,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":27963,"byte_end":27976,"line_start":751,"line_end":751,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":27981,"byte_end":27984,"line_start":752,"line_end":752,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":27989,"byte_end":27996,"line_start":753,"line_end":753,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::Decimal;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":28001,"byte_end":28033,"line_start":754,"line_end":754,"column_start":5,"column_end":37}},{"value":"/ #","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":28038,"byte_end":28043,"line_start":755,"line_end":755,"column_start":5,"column_end":10}},{"value":"/ let mut one = Decimal::ONE;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":28048,"byte_end":28079,"line_start":756,"line_end":756,"column_start":5,"column_end":36}},{"value":"/ one.set_sign(false);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":28084,"byte_end":28108,"line_start":757,"line_end":757,"column_start":5,"column_end":29}},{"value":"/ assert_eq!(one.to_string(), \"-1\");","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":28113,"byte_end":28151,"line_start":758,"line_end":758,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":28156,"byte_end":28163,"line_start":759,"line_end":759,"column_start":5,"column_end":12}},{"value":"deprecated(since = \"1.4.0\", note =\n\"please use `set_sign_positive` instead\")","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":28168,"byte_end":28247,"line_start":760,"line_end":760,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":185},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":28780,"byte_end":28797,"line_start":781,"line_end":781,"column_start":12,"column_end":29},"name":"set_sign_positive","qualname":"<Decimal>::set_sign_positive","value":"fn set_sign_positive(&mut Self, bool)","parent":null,"children":[],"decl_id":null,"docs":" An optimized method for changing the sign of a decimal number.","sig":null,"attributes":[{"value":"/ An optimized method for changing the sign of a decimal number.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":28350,"byte_end":28416,"line_start":765,"line_end":765,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":28421,"byte_end":28424,"line_start":766,"line_end":766,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":28429,"byte_end":28444,"line_start":767,"line_end":767,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":28449,"byte_end":28452,"line_start":768,"line_end":768,"column_start":5,"column_end":8}},{"value":"/ * `positive`: true if the resulting decimal should be positive.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":28457,"byte_end":28524,"line_start":769,"line_end":769,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":28529,"byte_end":28532,"line_start":770,"line_end":770,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":28537,"byte_end":28550,"line_start":771,"line_end":771,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":28555,"byte_end":28558,"line_start":772,"line_end":772,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":28563,"byte_end":28570,"line_start":773,"line_end":773,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::Decimal;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":28575,"byte_end":28607,"line_start":774,"line_end":774,"column_start":5,"column_end":37}},{"value":"/ #","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":28612,"byte_end":28617,"line_start":775,"line_end":775,"column_start":5,"column_end":10}},{"value":"/ let mut one = Decimal::ONE;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":28622,"byte_end":28653,"line_start":776,"line_end":776,"column_start":5,"column_end":36}},{"value":"/ one.set_sign_positive(false);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":28658,"byte_end":28691,"line_start":777,"line_end":777,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(one.to_string(), \"-1\");","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":28696,"byte_end":28734,"line_start":778,"line_end":778,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":28739,"byte_end":28746,"line_start":779,"line_end":779,"column_start":5,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":28751,"byte_end":28768,"line_start":780,"line_end":780,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":186},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":29392,"byte_end":29409,"line_start":805,"line_end":805,"column_start":12,"column_end":29},"name":"set_sign_negative","qualname":"<Decimal>::set_sign_negative","value":"fn set_sign_negative(&mut Self, bool)","parent":null,"children":[],"decl_id":null,"docs":" An optimized method for changing the sign of a decimal number.","sig":null,"attributes":[{"value":"/ An optimized method for changing the sign of a decimal number.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":28963,"byte_end":29029,"line_start":789,"line_end":789,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":29034,"byte_end":29037,"line_start":790,"line_end":790,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":29042,"byte_end":29057,"line_start":791,"line_end":791,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":29062,"byte_end":29065,"line_start":792,"line_end":792,"column_start":5,"column_end":8}},{"value":"/ * `negative`: true if the resulting decimal should be negative.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":29070,"byte_end":29137,"line_start":793,"line_end":793,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":29142,"byte_end":29145,"line_start":794,"line_end":794,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":29150,"byte_end":29163,"line_start":795,"line_end":795,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":29168,"byte_end":29171,"line_start":796,"line_end":796,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":29176,"byte_end":29183,"line_start":797,"line_end":797,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::Decimal;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":29188,"byte_end":29220,"line_start":798,"line_end":798,"column_start":5,"column_end":37}},{"value":"/ #","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":29225,"byte_end":29230,"line_start":799,"line_end":799,"column_start":5,"column_end":10}},{"value":"/ let mut one = Decimal::ONE;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":29235,"byte_end":29266,"line_start":800,"line_end":800,"column_start":5,"column_end":36}},{"value":"/ one.set_sign_negative(true);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":29271,"byte_end":29303,"line_start":801,"line_end":801,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(one.to_string(), \"-1\");","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":29308,"byte_end":29346,"line_start":802,"line_end":802,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":29351,"byte_end":29358,"line_start":803,"line_end":803,"column_start":5,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":29363,"byte_end":29380,"line_start":804,"line_end":804,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":187},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":29960,"byte_end":29969,"line_start":827,"line_end":827,"column_start":12,"column_end":21},"name":"set_scale","qualname":"<Decimal>::set_scale","value":"fn set_scale(&mut Self, u32) -> Result<(), Error>","parent":null,"children":[],"decl_id":null,"docs":" An optimized method for changing the scale of a decimal number.","sig":null,"attributes":[{"value":"/ An optimized method for changing the scale of a decimal number.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":29493,"byte_end":29560,"line_start":809,"line_end":809,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":29565,"byte_end":29568,"line_start":810,"line_end":810,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":29573,"byte_end":29588,"line_start":811,"line_end":811,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":29593,"byte_end":29596,"line_start":812,"line_end":812,"column_start":5,"column_end":8}},{"value":"/ * `scale`: the new scale of the number","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":29601,"byte_end":29643,"line_start":813,"line_end":813,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":29648,"byte_end":29651,"line_start":814,"line_end":814,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":29656,"byte_end":29669,"line_start":815,"line_end":815,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":29674,"byte_end":29677,"line_start":816,"line_end":816,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":29682,"byte_end":29689,"line_start":817,"line_end":817,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::Decimal;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":29694,"byte_end":29726,"line_start":818,"line_end":818,"column_start":5,"column_end":37}},{"value":"/ #","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":29731,"byte_end":29736,"line_start":819,"line_end":819,"column_start":5,"column_end":10}},{"value":"/ # fn main() -> Result<(), rust_decimal::Error> {","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":29741,"byte_end":29793,"line_start":820,"line_end":820,"column_start":5,"column_end":57}},{"value":"/ let mut one = Decimal::ONE;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":29798,"byte_end":29829,"line_start":821,"line_end":821,"column_start":5,"column_end":36}},{"value":"/ one.set_scale(5)?;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":29834,"byte_end":29856,"line_start":822,"line_end":822,"column_start":5,"column_end":27}},{"value":"/ assert_eq!(one.to_string(), \"0.00001\");","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":29861,"byte_end":29904,"line_start":823,"line_end":823,"column_start":5,"column_end":48}},{"value":"/ #    Ok(())","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":29909,"byte_end":29924,"line_start":824,"line_end":824,"column_start":5,"column_end":20}},{"value":"/ # }","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":29929,"byte_end":29936,"line_start":825,"line_end":825,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":29941,"byte_end":29948,"line_start":826,"line_end":826,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":188},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":32150,"byte_end":32157,"line_start":878,"line_end":878,"column_start":12,"column_end":19},"name":"rescale","qualname":"<Decimal>::rescale","value":"fn rescale(&mut Self, u32)","parent":null,"children":[],"decl_id":null,"docs":" Modifies the `Decimal` towards the desired scale, attempting to do so without changing the\n underlying number itself.","sig":null,"attributes":[{"value":"/ Modifies the `Decimal` towards the desired scale, attempting to do so without changing the","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":30231,"byte_end":30325,"line_start":835,"line_end":835,"column_start":5,"column_end":99}},{"value":"/ underlying number itself.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":30330,"byte_end":30359,"line_start":836,"line_end":836,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":30364,"byte_end":30367,"line_start":837,"line_end":837,"column_start":5,"column_end":8}},{"value":"/ Setting the scale to something less then the current `Decimal`s scale will","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":30372,"byte_end":30450,"line_start":838,"line_end":838,"column_start":5,"column_end":83}},{"value":"/ cause the newly created `Decimal` to perform rounding using the `MidpointAwayFromZero` strategy.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":30455,"byte_end":30555,"line_start":839,"line_end":839,"column_start":5,"column_end":105}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":30560,"byte_end":30563,"line_start":840,"line_end":840,"column_start":5,"column_end":8}},{"value":"/ Scales greater than the maximum precision that can be represented by `Decimal` will be","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":30568,"byte_end":30658,"line_start":841,"line_end":841,"column_start":5,"column_end":95}},{"value":"/ automatically rounded to either `Decimal::MAX_PRECISION` or the maximum precision that can","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":30663,"byte_end":30757,"line_start":842,"line_end":842,"column_start":5,"column_end":99}},{"value":"/ be represented with the given mantissa.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":30762,"byte_end":30805,"line_start":843,"line_end":843,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":30810,"byte_end":30813,"line_start":844,"line_end":844,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":30818,"byte_end":30833,"line_start":845,"line_end":845,"column_start":5,"column_end":20}},{"value":"/ * `scale`: The desired scale to use for the new `Decimal` number.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":30838,"byte_end":30907,"line_start":846,"line_end":846,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":30912,"byte_end":30915,"line_start":847,"line_end":847,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":30920,"byte_end":30933,"line_start":848,"line_end":848,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":30938,"byte_end":30941,"line_start":849,"line_end":849,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":30946,"byte_end":30953,"line_start":850,"line_end":850,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::prelude::*;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":30958,"byte_end":30993,"line_start":851,"line_end":851,"column_start":5,"column_end":40}},{"value":"/ use rust_decimal_macros::dec;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":30998,"byte_end":31031,"line_start":852,"line_end":852,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":31036,"byte_end":31039,"line_start":853,"line_end":853,"column_start":5,"column_end":8}},{"value":"/ // Rescaling to a higher scale preserves the value","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":31044,"byte_end":31098,"line_start":854,"line_end":854,"column_start":5,"column_end":59}},{"value":"/ let mut number = dec!(1.123);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":31103,"byte_end":31136,"line_start":855,"line_end":855,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(number.scale(), 3);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":31141,"byte_end":31175,"line_start":856,"line_end":856,"column_start":5,"column_end":39}},{"value":"/ number.rescale(6);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":31180,"byte_end":31202,"line_start":857,"line_end":857,"column_start":5,"column_end":27}},{"value":"/ assert_eq!(number.to_string(), \"1.123000\");","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":31207,"byte_end":31254,"line_start":858,"line_end":858,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(number.scale(), 6);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":31259,"byte_end":31293,"line_start":859,"line_end":859,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":31298,"byte_end":31301,"line_start":860,"line_end":860,"column_start":5,"column_end":8}},{"value":"/ // Rescaling to a lower scale forces the number to be rounded","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":31306,"byte_end":31371,"line_start":861,"line_end":861,"column_start":5,"column_end":70}},{"value":"/ let mut number = dec!(1.45);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":31376,"byte_end":31408,"line_start":862,"line_end":862,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(number.scale(), 2);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":31413,"byte_end":31447,"line_start":863,"line_end":863,"column_start":5,"column_end":39}},{"value":"/ number.rescale(1);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":31452,"byte_end":31474,"line_start":864,"line_end":864,"column_start":5,"column_end":27}},{"value":"/ assert_eq!(number.to_string(), \"1.5\");","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":31479,"byte_end":31521,"line_start":865,"line_end":865,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(number.scale(), 1);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":31526,"byte_end":31560,"line_start":866,"line_end":866,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":31565,"byte_end":31568,"line_start":867,"line_end":867,"column_start":5,"column_end":8}},{"value":"/ // This function never fails. Consequently, if a scale is provided that is unable to be","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":31573,"byte_end":31664,"line_start":868,"line_end":868,"column_start":5,"column_end":96}},{"value":"/ // represented using the given mantissa, then the maximum possible scale is used.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":31669,"byte_end":31754,"line_start":869,"line_end":869,"column_start":5,"column_end":90}},{"value":"/ let mut number = dec!(11.76470588235294);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":31759,"byte_end":31804,"line_start":870,"line_end":870,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(number.scale(), 14);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":31809,"byte_end":31844,"line_start":871,"line_end":871,"column_start":5,"column_end":40}},{"value":"/ number.rescale(28);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":31849,"byte_end":31872,"line_start":872,"line_end":872,"column_start":5,"column_end":28}},{"value":"/ // A scale of 28 cannot be represented given this mantissa, however it was able to represent","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":31877,"byte_end":31973,"line_start":873,"line_end":873,"column_start":5,"column_end":101}},{"value":"/ // a number with a scale of 27","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":31978,"byte_end":32012,"line_start":874,"line_end":874,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(number.to_string(), \"11.764705882352940000000000000\");","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":32017,"byte_end":32086,"line_start":875,"line_end":875,"column_start":5,"column_end":74}},{"value":"/ assert_eq!(number.scale(), 27);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":32091,"byte_end":32126,"line_start":876,"line_end":876,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":32131,"byte_end":32138,"line_start":877,"line_end":877,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":189},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":32838,"byte_end":32847,"line_start":896,"line_end":896,"column_start":18,"column_end":27},"name":"serialize","qualname":"<Decimal>::serialize","value":"const fn serialize(&Self) -> [u8; ]","parent":null,"children":[],"decl_id":null,"docs":" Returns a serialized version of the decimal number.\n The resulting byte array will have the following representation:","sig":null,"attributes":[{"value":"/ Returns a serialized version of the decimal number.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":32518,"byte_end":32573,"line_start":888,"line_end":888,"column_start":5,"column_end":60}},{"value":"/ The resulting byte array will have the following representation:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":32578,"byte_end":32646,"line_start":889,"line_end":889,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":32651,"byte_end":32654,"line_start":890,"line_end":890,"column_start":5,"column_end":8}},{"value":"/ * Bytes 1-4: flags","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":32659,"byte_end":32681,"line_start":891,"line_end":891,"column_start":5,"column_end":27}},{"value":"/ * Bytes 5-8: lo portion of `m`","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":32686,"byte_end":32720,"line_start":892,"line_end":892,"column_start":5,"column_end":39}},{"value":"/ * Bytes 9-12: mid portion of `m`","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":32725,"byte_end":32761,"line_start":893,"line_end":893,"column_start":5,"column_end":41}},{"value":"/ * Bytes 13-16: high portion of `m`","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":32766,"byte_end":32804,"line_start":894,"line_end":894,"column_start":5,"column_end":43}},{"value":"must_use","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":32809,"byte_end":32820,"line_start":895,"line_end":895,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":191},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":33975,"byte_end":33986,"line_start":925,"line_end":925,"column_start":12,"column_end":23},"name":"deserialize","qualname":"<Decimal>::deserialize","value":"fn deserialize([u8; ]) -> Decimal","parent":null,"children":[],"decl_id":null,"docs":" Deserializes the given bytes into a decimal number.\n The deserialized byte representation must be 16 bytes and adhere to the following convention:","sig":null,"attributes":[{"value":"/ Deserializes the given bytes into a decimal number.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":33632,"byte_end":33687,"line_start":917,"line_end":917,"column_start":5,"column_end":60}},{"value":"/ The deserialized byte representation must be 16 bytes and adhere to the following convention:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":33692,"byte_end":33789,"line_start":918,"line_end":918,"column_start":5,"column_end":102}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":33794,"byte_end":33797,"line_start":919,"line_end":919,"column_start":5,"column_end":8}},{"value":"/ * Bytes 1-4: flags","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":33802,"byte_end":33824,"line_start":920,"line_end":920,"column_start":5,"column_end":27}},{"value":"/ * Bytes 5-8: lo portion of `m`","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":33829,"byte_end":33863,"line_start":921,"line_end":921,"column_start":5,"column_end":39}},{"value":"/ * Bytes 9-12: mid portion of `m`","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":33868,"byte_end":33904,"line_start":922,"line_end":922,"column_start":5,"column_end":41}},{"value":"/ * Bytes 13-16: high portion of `m`","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":33909,"byte_end":33947,"line_start":923,"line_end":923,"column_start":5,"column_end":43}},{"value":"must_use","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":33952,"byte_end":33963,"line_start":924,"line_end":924,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":193},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":35791,"byte_end":35802,"line_start":961,"line_end":961,"column_start":12,"column_end":23},"name":"is_negative","qualname":"<Decimal>::is_negative","value":"fn is_negative(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the decimal is negative.\n","sig":null,"attributes":[{"value":"/ Returns `true` if the decimal is negative.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":35634,"byte_end":35680,"line_start":958,"line_end":958,"column_start":5,"column_end":51}},{"value":"deprecated(since = \"0.6.3\", note = \"please use `is_sign_negative` instead\")","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":35685,"byte_end":35763,"line_start":959,"line_end":959,"column_start":5,"column_end":83}},{"value":"must_use","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":35768,"byte_end":35779,"line_start":960,"line_end":960,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":194},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":36020,"byte_end":36031,"line_start":968,"line_end":968,"column_start":12,"column_end":23},"name":"is_positive","qualname":"<Decimal>::is_positive","value":"fn is_positive(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the decimal is positive.\n","sig":null,"attributes":[{"value":"/ Returns `true` if the decimal is positive.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":35863,"byte_end":35909,"line_start":965,"line_end":965,"column_start":5,"column_end":51}},{"value":"deprecated(since = \"0.6.3\", note = \"please use `is_sign_positive` instead\")","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":35914,"byte_end":35992,"line_start":966,"line_end":966,"column_start":5,"column_end":83}},{"value":"must_use","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":35997,"byte_end":36008,"line_start":967,"line_end":967,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":195},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":36442,"byte_end":36458,"line_start":983,"line_end":983,"column_start":18,"column_end":34},"name":"is_sign_negative","qualname":"<Decimal>::is_sign_negative","value":"const fn is_sign_negative(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the sign bit of the decimal is negative.","sig":null,"attributes":[{"value":"/ Returns `true` if the sign bit of the decimal is negative.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":36092,"byte_end":36154,"line_start":972,"line_end":972,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":36159,"byte_end":36162,"line_start":973,"line_end":973,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":36167,"byte_end":36180,"line_start":974,"line_end":974,"column_start":5,"column_end":18}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":36185,"byte_end":36192,"line_start":975,"line_end":975,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::prelude::*;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":36197,"byte_end":36232,"line_start":976,"line_end":976,"column_start":5,"column_end":40}},{"value":"/ #","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":36237,"byte_end":36242,"line_start":977,"line_end":977,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(true, Decimal::new(-1, 0).is_sign_negative());","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":36247,"byte_end":36308,"line_start":978,"line_end":978,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(false, Decimal::new(1, 0).is_sign_negative());","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":36313,"byte_end":36374,"line_start":979,"line_end":979,"column_start":5,"column_end":66}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":36379,"byte_end":36386,"line_start":980,"line_end":980,"column_start":5,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":36391,"byte_end":36408,"line_start":981,"line_end":981,"column_start":5,"column_end":22}},{"value":"must_use","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":36413,"byte_end":36424,"line_start":982,"line_end":982,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":196},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":36872,"byte_end":36888,"line_start":998,"line_end":998,"column_start":18,"column_end":34},"name":"is_sign_positive","qualname":"<Decimal>::is_sign_positive","value":"const fn is_sign_positive(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the sign bit of the decimal is positive.","sig":null,"attributes":[{"value":"/ Returns `true` if the sign bit of the decimal is positive.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":36522,"byte_end":36584,"line_start":987,"line_end":987,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":36589,"byte_end":36592,"line_start":988,"line_end":988,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":36597,"byte_end":36610,"line_start":989,"line_end":989,"column_start":5,"column_end":18}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":36615,"byte_end":36622,"line_start":990,"line_end":990,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::prelude::*;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":36627,"byte_end":36662,"line_start":991,"line_end":991,"column_start":5,"column_end":40}},{"value":"/ #","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":36667,"byte_end":36672,"line_start":992,"line_end":992,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(false, Decimal::new(-1, 0).is_sign_positive());","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":36677,"byte_end":36739,"line_start":993,"line_end":993,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(true, Decimal::new(1, 0).is_sign_positive());","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":36744,"byte_end":36804,"line_start":994,"line_end":994,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":36809,"byte_end":36816,"line_start":995,"line_end":995,"column_start":5,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":36821,"byte_end":36838,"line_start":996,"line_end":996,"column_start":5,"column_end":22}},{"value":"must_use","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":36843,"byte_end":36854,"line_start":997,"line_end":997,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":197},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":37143,"byte_end":37152,"line_start":1005,"line_end":1005,"column_start":18,"column_end":27},"name":"min_value","qualname":"<Decimal>::min_value","value":"const fn min_value() -> Decimal","parent":null,"children":[],"decl_id":null,"docs":" Returns the minimum possible number that `Decimal` can represent.\n","sig":null,"attributes":[{"value":"/ Returns the minimum possible number that `Decimal` can represent.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":36953,"byte_end":37022,"line_start":1002,"line_end":1002,"column_start":5,"column_end":74}},{"value":"deprecated(since = \"1.12.0\", note =\n\"Use the associated constant Decimal::MIN\")","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":37027,"byte_end":37109,"line_start":1003,"line_end":1003,"column_start":5,"column_end":87}},{"value":"must_use","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":37114,"byte_end":37125,"line_start":1004,"line_end":1004,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":198},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":37381,"byte_end":37390,"line_start":1012,"line_end":1012,"column_start":18,"column_end":27},"name":"max_value","qualname":"<Decimal>::max_value","value":"const fn max_value() -> Decimal","parent":null,"children":[],"decl_id":null,"docs":" Returns the maximum possible number that `Decimal` can represent.\n","sig":null,"attributes":[{"value":"/ Returns the maximum possible number that `Decimal` can represent.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":37191,"byte_end":37260,"line_start":1009,"line_end":1009,"column_start":5,"column_end":74}},{"value":"deprecated(since = \"1.12.0\", note =\n\"Use the associated constant Decimal::MAX\")","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":37265,"byte_end":37347,"line_start":1010,"line_end":1010,"column_start":5,"column_end":87}},{"value":"must_use","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":37352,"byte_end":37363,"line_start":1011,"line_end":1011,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":199},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":37855,"byte_end":37860,"line_start":1030,"line_end":1030,"column_start":12,"column_end":17},"name":"trunc","qualname":"<Decimal>::trunc","value":"fn trunc(&Self) -> Decimal","parent":null,"children":[],"decl_id":null,"docs":" Returns a new `Decimal` integral with no fractional portion.\n This is a true truncation whereby no rounding is performed.","sig":null,"attributes":[{"value":"/ Returns a new `Decimal` integral with no fractional portion.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":37429,"byte_end":37493,"line_start":1016,"line_end":1016,"column_start":5,"column_end":69}},{"value":"/ This is a true truncation whereby no rounding is performed.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":37498,"byte_end":37561,"line_start":1017,"line_end":1017,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":37566,"byte_end":37569,"line_start":1018,"line_end":1018,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":37574,"byte_end":37587,"line_start":1019,"line_end":1019,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":37592,"byte_end":37595,"line_start":1020,"line_end":1020,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":37600,"byte_end":37607,"line_start":1021,"line_end":1021,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::Decimal;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":37612,"byte_end":37644,"line_start":1022,"line_end":1022,"column_start":5,"column_end":37}},{"value":"/ #","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":37649,"byte_end":37654,"line_start":1023,"line_end":1023,"column_start":5,"column_end":10}},{"value":"/ let pi = Decimal::new(3141, 3);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":37659,"byte_end":37694,"line_start":1024,"line_end":1024,"column_start":5,"column_end":40}},{"value":"/ let trunc = Decimal::new(3, 0);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":37699,"byte_end":37734,"line_start":1025,"line_end":1025,"column_start":5,"column_end":40}},{"value":"/ // note that it returns a decimal","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":37739,"byte_end":37776,"line_start":1026,"line_end":1026,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(pi.trunc(), trunc);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":37781,"byte_end":37815,"line_start":1027,"line_end":1027,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":37820,"byte_end":37827,"line_start":1028,"line_end":1028,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":37832,"byte_end":37843,"line_start":1029,"line_end":1029,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":200},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":39042,"byte_end":39047,"line_start":1069,"line_end":1069,"column_start":12,"column_end":17},"name":"fract","qualname":"<Decimal>::fract","value":"fn fract(&Self) -> Decimal","parent":null,"children":[],"decl_id":null,"docs":" Returns a new `Decimal` representing the fractional portion of the number.","sig":null,"attributes":[{"value":"/ Returns a new `Decimal` representing the fractional portion of the number.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":38668,"byte_end":38746,"line_start":1056,"line_end":1056,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":38751,"byte_end":38754,"line_start":1057,"line_end":1057,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":38759,"byte_end":38772,"line_start":1058,"line_end":1058,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":38777,"byte_end":38780,"line_start":1059,"line_end":1059,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":38785,"byte_end":38792,"line_start":1060,"line_end":1060,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::Decimal;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":38797,"byte_end":38829,"line_start":1061,"line_end":1061,"column_start":5,"column_end":37}},{"value":"/ #","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":38834,"byte_end":38839,"line_start":1062,"line_end":1062,"column_start":5,"column_end":10}},{"value":"/ let pi = Decimal::new(3141, 3);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":38844,"byte_end":38879,"line_start":1063,"line_end":1063,"column_start":5,"column_end":40}},{"value":"/ let fract = Decimal::new(141, 3);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":38884,"byte_end":38921,"line_start":1064,"line_end":1064,"column_start":5,"column_end":42}},{"value":"/ // note that it returns a decimal","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":38926,"byte_end":38963,"line_start":1065,"line_end":1065,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(pi.fract(), fract);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":38968,"byte_end":39002,"line_start":1066,"line_end":1066,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":39007,"byte_end":39014,"line_start":1067,"line_end":1067,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":39019,"byte_end":39030,"line_start":1068,"line_end":1068,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":201},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":39501,"byte_end":39504,"line_start":1086,"line_end":1086,"column_start":12,"column_end":15},"name":"abs","qualname":"<Decimal>::abs","value":"fn abs(&Self) -> Decimal","parent":null,"children":[],"decl_id":null,"docs":" Computes the absolute value of `self`.","sig":null,"attributes":[{"value":"/ Computes the absolute value of `self`.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":39232,"byte_end":39274,"line_start":1075,"line_end":1075,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":39279,"byte_end":39282,"line_start":1076,"line_end":1076,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":39287,"byte_end":39300,"line_start":1077,"line_end":1077,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":39305,"byte_end":39308,"line_start":1078,"line_end":1078,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":39313,"byte_end":39320,"line_start":1079,"line_end":1079,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::Decimal;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":39325,"byte_end":39357,"line_start":1080,"line_end":1080,"column_start":5,"column_end":37}},{"value":"/ #","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":39362,"byte_end":39367,"line_start":1081,"line_end":1081,"column_start":5,"column_end":10}},{"value":"/ let num = Decimal::new(-3141, 3);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":39372,"byte_end":39409,"line_start":1082,"line_end":1082,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(num.abs().to_string(), \"3.141\");","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":39414,"byte_end":39461,"line_start":1083,"line_end":1083,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":39466,"byte_end":39473,"line_start":1084,"line_end":1084,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":39478,"byte_end":39489,"line_start":1085,"line_end":1085,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":202},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":39898,"byte_end":39903,"line_start":1103,"line_end":1103,"column_start":12,"column_end":17},"name":"floor","qualname":"<Decimal>::floor","value":"fn floor(&Self) -> Decimal","parent":null,"children":[],"decl_id":null,"docs":" Returns the largest integer less than or equal to a number.","sig":null,"attributes":[{"value":"/ Returns the largest integer less than or equal to a number.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":39611,"byte_end":39674,"line_start":1092,"line_end":1092,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":39679,"byte_end":39682,"line_start":1093,"line_end":1093,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":39687,"byte_end":39700,"line_start":1094,"line_end":1094,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":39705,"byte_end":39708,"line_start":1095,"line_end":1095,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":39713,"byte_end":39720,"line_start":1096,"line_end":1096,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::Decimal;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":39725,"byte_end":39757,"line_start":1097,"line_end":1097,"column_start":5,"column_end":37}},{"value":"/ #","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":39762,"byte_end":39767,"line_start":1098,"line_end":1098,"column_start":5,"column_end":10}},{"value":"/ let num = Decimal::new(3641, 3);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":39772,"byte_end":39808,"line_start":1099,"line_end":1099,"column_start":5,"column_end":41}},{"value":"/ assert_eq!(num.floor().to_string(), \"3\");","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":39813,"byte_end":39858,"line_start":1100,"line_end":1100,"column_start":5,"column_end":50}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":39863,"byte_end":39870,"line_start":1101,"line_end":1101,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":39875,"byte_end":39886,"line_start":1102,"line_end":1102,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":203},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":40654,"byte_end":40658,"line_start":1132,"line_end":1132,"column_start":12,"column_end":16},"name":"ceil","qualname":"<Decimal>::ceil","value":"fn ceil(&Self) -> Decimal","parent":null,"children":[],"decl_id":null,"docs":" Returns the smallest integer greater than or equal to a number.","sig":null,"attributes":[{"value":"/ Returns the smallest integer greater than or equal to a number.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":40277,"byte_end":40344,"line_start":1119,"line_end":1119,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":40349,"byte_end":40352,"line_start":1120,"line_end":1120,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":40357,"byte_end":40370,"line_start":1121,"line_end":1121,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":40375,"byte_end":40378,"line_start":1122,"line_end":1122,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":40383,"byte_end":40390,"line_start":1123,"line_end":1123,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::Decimal;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":40395,"byte_end":40427,"line_start":1124,"line_end":1124,"column_start":5,"column_end":37}},{"value":"/ #","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":40432,"byte_end":40437,"line_start":1125,"line_end":1125,"column_start":5,"column_end":10}},{"value":"/ let num = Decimal::new(3141, 3);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":40442,"byte_end":40478,"line_start":1126,"line_end":1126,"column_start":5,"column_end":41}},{"value":"/ assert_eq!(num.ceil().to_string(), \"4\");","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":40483,"byte_end":40527,"line_start":1127,"line_end":1127,"column_start":5,"column_end":49}},{"value":"/ let num = Decimal::new(3, 0);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":40532,"byte_end":40565,"line_start":1128,"line_end":1128,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(num.ceil().to_string(), \"3\");","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":40570,"byte_end":40614,"line_start":1129,"line_end":1129,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":40619,"byte_end":40626,"line_start":1130,"line_end":1130,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":40631,"byte_end":40642,"line_start":1131,"line_end":1131,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":204},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":41261,"byte_end":41264,"line_start":1157,"line_end":1157,"column_start":12,"column_end":15},"name":"max","qualname":"<Decimal>::max","value":"fn max(Self, Decimal) -> Decimal","parent":null,"children":[],"decl_id":null,"docs":" Returns the maximum of the two numbers.","sig":null,"attributes":[{"value":"/ Returns the maximum of the two numbers.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":41006,"byte_end":41049,"line_start":1147,"line_end":1147,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":41054,"byte_end":41057,"line_start":1148,"line_end":1148,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":41062,"byte_end":41069,"line_start":1149,"line_end":1149,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::Decimal;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":41074,"byte_end":41106,"line_start":1150,"line_end":1150,"column_start":5,"column_end":37}},{"value":"/ #","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":41111,"byte_end":41116,"line_start":1151,"line_end":1151,"column_start":5,"column_end":10}},{"value":"/ let x = Decimal::new(1, 0);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":41121,"byte_end":41152,"line_start":1152,"line_end":1152,"column_start":5,"column_end":36}},{"value":"/ let y = Decimal::new(2, 0);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":41157,"byte_end":41188,"line_start":1153,"line_end":1153,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(y, x.max(y));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":41193,"byte_end":41221,"line_start":1154,"line_end":1154,"column_start":5,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":41226,"byte_end":41233,"line_start":1155,"line_end":1155,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":41238,"byte_end":41249,"line_start":1156,"line_end":1156,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":205},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":41654,"byte_end":41657,"line_start":1175,"line_end":1175,"column_start":12,"column_end":15},"name":"min","qualname":"<Decimal>::min","value":"fn min(Self, Decimal) -> Decimal","parent":null,"children":[],"decl_id":null,"docs":" Returns the minimum of the two numbers.","sig":null,"attributes":[{"value":"/ Returns the minimum of the two numbers.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":41399,"byte_end":41442,"line_start":1165,"line_end":1165,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":41447,"byte_end":41450,"line_start":1166,"line_end":1166,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":41455,"byte_end":41462,"line_start":1167,"line_end":1167,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::Decimal;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":41467,"byte_end":41499,"line_start":1168,"line_end":1168,"column_start":5,"column_end":37}},{"value":"/ #","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":41504,"byte_end":41509,"line_start":1169,"line_end":1169,"column_start":5,"column_end":10}},{"value":"/ let x = Decimal::new(1, 0);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":41514,"byte_end":41545,"line_start":1170,"line_end":1170,"column_start":5,"column_end":36}},{"value":"/ let y = Decimal::new(2, 0);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":41550,"byte_end":41581,"line_start":1171,"line_end":1171,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(x, x.min(y));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":41586,"byte_end":41614,"line_start":1172,"line_end":1172,"column_start":5,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":41619,"byte_end":41626,"line_start":1173,"line_end":1173,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":41631,"byte_end":41642,"line_start":1174,"line_end":1174,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":206},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":42182,"byte_end":42191,"line_start":1196,"line_end":1196,"column_start":12,"column_end":21},"name":"normalize","qualname":"<Decimal>::normalize","value":"fn normalize(&Self) -> Decimal","parent":null,"children":[],"decl_id":null,"docs":" Strips any trailing zero's from a `Decimal` and converts -0 to 0.","sig":null,"attributes":[{"value":"/ Strips any trailing zero's from a `Decimal` and converts -0 to 0.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":41792,"byte_end":41861,"line_start":1183,"line_end":1183,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":41866,"byte_end":41869,"line_start":1184,"line_end":1184,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":41874,"byte_end":41887,"line_start":1185,"line_end":1185,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":41892,"byte_end":41895,"line_start":1186,"line_end":1186,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":41900,"byte_end":41907,"line_start":1187,"line_end":1187,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::prelude::*;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":41912,"byte_end":41947,"line_start":1188,"line_end":1188,"column_start":5,"column_end":40}},{"value":"/ # fn main() -> Result<(), rust_decimal::Error> {","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":41952,"byte_end":42004,"line_start":1189,"line_end":1189,"column_start":5,"column_end":57}},{"value":"/ let number = Decimal::from_str(\"3.100\")?;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":42009,"byte_end":42054,"line_start":1190,"line_end":1190,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(number.normalize().to_string(), \"3.1\");","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":42059,"byte_end":42113,"line_start":1191,"line_end":1191,"column_start":5,"column_end":59}},{"value":"/ # Ok(())","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":42118,"byte_end":42130,"line_start":1192,"line_end":1192,"column_start":5,"column_end":17}},{"value":"/ # }","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":42135,"byte_end":42142,"line_start":1193,"line_end":1193,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":42147,"byte_end":42154,"line_start":1194,"line_end":1194,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":42159,"byte_end":42170,"line_start":1195,"line_end":1195,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":207},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":42791,"byte_end":42807,"line_start":1216,"line_end":1216,"column_start":12,"column_end":28},"name":"normalize_assign","qualname":"<Decimal>::normalize_assign","value":"fn normalize_assign(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" An in place version of `normalize`. Strips any trailing zero's from a `Decimal` and converts -0 to 0.","sig":null,"attributes":[{"value":"/ An in place version of `normalize`. Strips any trailing zero's from a `Decimal` and converts -0 to 0.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":42305,"byte_end":42410,"line_start":1202,"line_end":1202,"column_start":5,"column_end":110}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":42415,"byte_end":42418,"line_start":1203,"line_end":1203,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":42423,"byte_end":42436,"line_start":1204,"line_end":1204,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":42441,"byte_end":42444,"line_start":1205,"line_end":1205,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":42449,"byte_end":42456,"line_start":1206,"line_end":1206,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::prelude::*;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":42461,"byte_end":42496,"line_start":1207,"line_end":1207,"column_start":5,"column_end":40}},{"value":"/ # fn main() -> Result<(), rust_decimal::Error> {","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":42501,"byte_end":42553,"line_start":1208,"line_end":1208,"column_start":5,"column_end":57}},{"value":"/ let mut number = Decimal::from_str(\"3.100\")?;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":42558,"byte_end":42607,"line_start":1209,"line_end":1209,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(number.to_string(), \"3.100\");","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":42612,"byte_end":42656,"line_start":1210,"line_end":1210,"column_start":5,"column_end":49}},{"value":"/ number.normalize_assign();","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":42661,"byte_end":42691,"line_start":1211,"line_end":1211,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(number.to_string(), \"3.1\");","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":42696,"byte_end":42738,"line_start":1212,"line_end":1212,"column_start":5,"column_end":47}},{"value":"/ # Ok(())","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":42743,"byte_end":42755,"line_start":1213,"line_end":1213,"column_start":5,"column_end":17}},{"value":"/ # }","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":42760,"byte_end":42767,"line_start":1214,"line_end":1214,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":42772,"byte_end":42779,"line_start":1215,"line_end":1215,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":208},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":44015,"byte_end":44020,"line_start":1257,"line_end":1257,"column_start":12,"column_end":17},"name":"round","qualname":"<Decimal>::round","value":"fn round(&Self) -> Decimal","parent":null,"children":[],"decl_id":null,"docs":" Returns a new `Decimal` number with no fractional portion (i.e. an integer).\n Rounding currently follows \"Bankers Rounding\" rules. e.g. 6.5 -> 6, 7.5 -> 8","sig":null,"attributes":[{"value":"/ Returns a new `Decimal` number with no fractional portion (i.e. an integer).","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":43464,"byte_end":43544,"line_start":1242,"line_end":1242,"column_start":5,"column_end":85}},{"value":"/ Rounding currently follows \"Bankers Rounding\" rules. e.g. 6.5 -> 6, 7.5 -> 8","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":43549,"byte_end":43629,"line_start":1243,"line_end":1243,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":43634,"byte_end":43637,"line_start":1244,"line_end":1244,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":43642,"byte_end":43655,"line_start":1245,"line_end":1245,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":43660,"byte_end":43663,"line_start":1246,"line_end":1246,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":43668,"byte_end":43675,"line_start":1247,"line_end":1247,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::Decimal;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":43680,"byte_end":43712,"line_start":1248,"line_end":1248,"column_start":5,"column_end":37}},{"value":"/ #","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":43717,"byte_end":43722,"line_start":1249,"line_end":1249,"column_start":5,"column_end":10}},{"value":"/ // Demonstrating bankers rounding...","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":43727,"byte_end":43767,"line_start":1250,"line_end":1250,"column_start":5,"column_end":45}},{"value":"/ let number_down = Decimal::new(65, 1);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":43772,"byte_end":43814,"line_start":1251,"line_end":1251,"column_start":5,"column_end":47}},{"value":"/ let number_up   = Decimal::new(75, 1);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":43819,"byte_end":43861,"line_start":1252,"line_end":1252,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(number_down.round().to_string(), \"6\");","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":43866,"byte_end":43919,"line_start":1253,"line_end":1253,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(number_up.round().to_string(), \"8\");","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":43924,"byte_end":43975,"line_start":1254,"line_end":1254,"column_start":5,"column_end":56}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":43980,"byte_end":43987,"line_start":1255,"line_end":1255,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":43992,"byte_end":44003,"line_start":1256,"line_end":1256,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":209},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":44734,"byte_end":44756,"line_start":1279,"line_end":1279,"column_start":12,"column_end":34},"name":"round_dp_with_strategy","qualname":"<Decimal>::round_dp_with_strategy","value":"fn round_dp_with_strategy(&Self, u32, RoundingStrategy) -> Decimal","parent":null,"children":[],"decl_id":null,"docs":" Returns a new `Decimal` number with the specified number of decimal points for fractional\n portion.\n Rounding is performed using the provided [`RoundingStrategy`]","sig":null,"attributes":[{"value":"/ Returns a new `Decimal` number with the specified number of decimal points for fractional","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":44077,"byte_end":44170,"line_start":1261,"line_end":1261,"column_start":5,"column_end":98}},{"value":"/ portion.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":44175,"byte_end":44187,"line_start":1262,"line_end":1262,"column_start":5,"column_end":17}},{"value":"/ Rounding is performed using the provided [`RoundingStrategy`]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":44192,"byte_end":44257,"line_start":1263,"line_end":1263,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":44262,"byte_end":44265,"line_start":1264,"line_end":1264,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":44270,"byte_end":44285,"line_start":1265,"line_end":1265,"column_start":5,"column_end":20}},{"value":"/ * `dp`: the number of decimal points to round to.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":44290,"byte_end":44343,"line_start":1266,"line_end":1266,"column_start":5,"column_end":58}},{"value":"/ * `strategy`: the [`RoundingStrategy`] to use.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":44348,"byte_end":44398,"line_start":1267,"line_end":1267,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":44403,"byte_end":44406,"line_start":1268,"line_end":1268,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":44411,"byte_end":44424,"line_start":1269,"line_end":1269,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":44429,"byte_end":44432,"line_start":1270,"line_end":1270,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":44437,"byte_end":44444,"line_start":1271,"line_end":1271,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::{Decimal, RoundingStrategy};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":44449,"byte_end":44501,"line_start":1272,"line_end":1272,"column_start":5,"column_end":57}},{"value":"/ # use rust_decimal_macros::dec;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":44506,"byte_end":44541,"line_start":1273,"line_end":1273,"column_start":5,"column_end":40}},{"value":"/ #","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":44546,"byte_end":44551,"line_start":1274,"line_end":1274,"column_start":5,"column_end":10}},{"value":"/ let tax = dec!(3.4395);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":44556,"byte_end":44583,"line_start":1275,"line_end":1275,"column_start":5,"column_end":32}},{"value":"/ assert_eq!(tax.round_dp_with_strategy(2, RoundingStrategy::MidpointAwayFromZero).to_string(), \"3.44\");","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":44588,"byte_end":44694,"line_start":1276,"line_end":1276,"column_start":5,"column_end":111}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":44699,"byte_end":44706,"line_start":1277,"line_end":1277,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":44711,"byte_end":44722,"line_start":1278,"line_end":1278,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":210},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":50601,"byte_end":50609,"line_start":1432,"line_end":1432,"column_start":12,"column_end":20},"name":"round_dp","qualname":"<Decimal>::round_dp","value":"fn round_dp(&Self, u32) -> Decimal","parent":null,"children":[],"decl_id":null,"docs":" Returns a new `Decimal` number with the specified number of decimal points for fractional portion.\n Rounding currently follows \"Bankers Rounding\" rules. e.g. 6.5 -> 6, 7.5 -> 8","sig":null,"attributes":[{"value":"/ Returns a new `Decimal` number with the specified number of decimal points for fractional portion.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":50044,"byte_end":50146,"line_start":1416,"line_end":1416,"column_start":5,"column_end":107}},{"value":"/ Rounding currently follows \"Bankers Rounding\" rules. e.g. 6.5 -> 6, 7.5 -> 8","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":50151,"byte_end":50231,"line_start":1417,"line_end":1417,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":50236,"byte_end":50239,"line_start":1418,"line_end":1418,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":50244,"byte_end":50259,"line_start":1419,"line_end":1419,"column_start":5,"column_end":20}},{"value":"/ * `dp`: the number of decimal points to round to.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":50264,"byte_end":50317,"line_start":1420,"line_end":1420,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":50322,"byte_end":50325,"line_start":1421,"line_end":1421,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":50330,"byte_end":50343,"line_start":1422,"line_end":1422,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":50348,"byte_end":50351,"line_start":1423,"line_end":1423,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":50356,"byte_end":50363,"line_start":1424,"line_end":1424,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::Decimal;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":50368,"byte_end":50400,"line_start":1425,"line_end":1425,"column_start":5,"column_end":37}},{"value":"/ # use rust_decimal_macros::dec;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":50405,"byte_end":50440,"line_start":1426,"line_end":1426,"column_start":5,"column_end":40}},{"value":"/ #","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":50445,"byte_end":50450,"line_start":1427,"line_end":1427,"column_start":5,"column_end":10}},{"value":"/ let pi = dec!(3.1415926535897932384626433832);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":50455,"byte_end":50505,"line_start":1428,"line_end":1428,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(pi.round_dp(2).to_string(), \"3.14\");","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":50510,"byte_end":50561,"line_start":1429,"line_end":1429,"column_start":5,"column_end":56}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":50566,"byte_end":50573,"line_start":1430,"line_end":1430,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":50578,"byte_end":50589,"line_start":1431,"line_end":1431,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":211},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":52415,"byte_end":52423,"line_start":1473,"line_end":1473,"column_start":12,"column_end":20},"name":"round_sf","qualname":"<Decimal>::round_sf","value":"fn round_sf(&Self, u32) -> Option<Decimal>","parent":null,"children":[],"decl_id":null,"docs":" Returns `Some(Decimal)` number rounded to the specified number of significant digits. If\n the resulting number is unable to be represented by the `Decimal` number then `None` will\n be returned.\n When the number of significant figures of the `Decimal` being rounded is greater than the requested\n number of significant digits then rounding will be performed using `MidpointNearestEven` strategy.","sig":null,"attributes":[{"value":"/ Returns `Some(Decimal)` number rounded to the specified number of significant digits. If","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":50729,"byte_end":50821,"line_start":1436,"line_end":1436,"column_start":5,"column_end":97}},{"value":"/ the resulting number is unable to be represented by the `Decimal` number then `None` will","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":50826,"byte_end":50919,"line_start":1437,"line_end":1437,"column_start":5,"column_end":98}},{"value":"/ be returned.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":50924,"byte_end":50940,"line_start":1438,"line_end":1438,"column_start":5,"column_end":21}},{"value":"/ When the number of significant figures of the `Decimal` being rounded is greater than the requested","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":50945,"byte_end":51048,"line_start":1439,"line_end":1439,"column_start":5,"column_end":108}},{"value":"/ number of significant digits then rounding will be performed using `MidpointNearestEven` strategy.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":51053,"byte_end":51155,"line_start":1440,"line_end":1440,"column_start":5,"column_end":107}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":51160,"byte_end":51163,"line_start":1441,"line_end":1441,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":51168,"byte_end":51183,"line_start":1442,"line_end":1442,"column_start":5,"column_end":20}},{"value":"/ * `digits`: the number of significant digits to round to.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":51188,"byte_end":51249,"line_start":1443,"line_end":1443,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":51254,"byte_end":51257,"line_start":1444,"line_end":1444,"column_start":5,"column_end":8}},{"value":"/ # Remarks","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":51262,"byte_end":51275,"line_start":1445,"line_end":1445,"column_start":5,"column_end":18}},{"value":"/ A significant figure is determined using the following rules:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":51280,"byte_end":51345,"line_start":1446,"line_end":1446,"column_start":5,"column_end":70}},{"value":"/ 1. Non-zero digits are always significant.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":51350,"byte_end":51396,"line_start":1447,"line_end":1447,"column_start":5,"column_end":51}},{"value":"/ 2. Zeros between non-zero digits are always significant.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":51401,"byte_end":51461,"line_start":1448,"line_end":1448,"column_start":5,"column_end":65}},{"value":"/ 3. Leading zeros are never significant.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":51466,"byte_end":51509,"line_start":1449,"line_end":1449,"column_start":5,"column_end":48}},{"value":"/ 4. Trailing zeros are only significant if the number contains a decimal point.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":51514,"byte_end":51596,"line_start":1450,"line_end":1450,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":51601,"byte_end":51604,"line_start":1451,"line_end":1451,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":51609,"byte_end":51622,"line_start":1452,"line_end":1452,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":51627,"byte_end":51630,"line_start":1453,"line_end":1453,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":51635,"byte_end":51642,"line_start":1454,"line_end":1454,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::Decimal;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":51647,"byte_end":51679,"line_start":1455,"line_end":1455,"column_start":5,"column_end":37}},{"value":"/ use rust_decimal_macros::dec;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":51684,"byte_end":51717,"line_start":1456,"line_end":1456,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":51722,"byte_end":51725,"line_start":1457,"line_end":1457,"column_start":5,"column_end":8}},{"value":"/ let value = dec!(305.459);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":51730,"byte_end":51760,"line_start":1458,"line_end":1458,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(value.round_sf(0), Some(dec!(0)));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":51765,"byte_end":51814,"line_start":1459,"line_end":1459,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(value.round_sf(1), Some(dec!(300)));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":51819,"byte_end":51870,"line_start":1460,"line_end":1460,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(value.round_sf(2), Some(dec!(310)));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":51875,"byte_end":51926,"line_start":1461,"line_end":1461,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(value.round_sf(3), Some(dec!(305)));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":51931,"byte_end":51982,"line_start":1462,"line_end":1462,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(value.round_sf(4), Some(dec!(305.5)));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":51987,"byte_end":52040,"line_start":1463,"line_end":1463,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(value.round_sf(5), Some(dec!(305.46)));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":52045,"byte_end":52099,"line_start":1464,"line_end":1464,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(value.round_sf(6), Some(dec!(305.459)));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":52104,"byte_end":52159,"line_start":1465,"line_end":1465,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(value.round_sf(7), Some(dec!(305.4590)));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":52164,"byte_end":52220,"line_start":1466,"line_end":1466,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(Decimal::MAX.round_sf(1), None);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":52225,"byte_end":52272,"line_start":1467,"line_end":1467,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":52277,"byte_end":52280,"line_start":1468,"line_end":1468,"column_start":5,"column_end":8}},{"value":"/ let value = dec!(0.012301);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":52285,"byte_end":52316,"line_start":1469,"line_end":1469,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(value.round_sf(3), Some(dec!(0.0123)));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":52321,"byte_end":52375,"line_start":1470,"line_end":1470,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":52380,"byte_end":52387,"line_start":1471,"line_end":1471,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":52392,"byte_end":52403,"line_start":1472,"line_end":1472,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":212},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":54774,"byte_end":54796,"line_start":1515,"line_end":1515,"column_start":12,"column_end":34},"name":"round_sf_with_strategy","qualname":"<Decimal>::round_sf_with_strategy","value":"fn round_sf_with_strategy(&Self, u32, RoundingStrategy) -> Option<Decimal>","parent":null,"children":[],"decl_id":null,"docs":" Returns `Some(Decimal)` number rounded to the specified number of significant digits. If\n the resulting number is unable to be represented by the `Decimal` number then `None` will\n be returned.\n When the number of significant figures of the `Decimal` being rounded is greater than the requested\n number of significant digits then rounding will be performed using the provided [RoundingStrategy].","sig":null,"attributes":[{"value":"/ Returns `Some(Decimal)` number rounded to the specified number of significant digits. If","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":52559,"byte_end":52651,"line_start":1477,"line_end":1477,"column_start":5,"column_end":97}},{"value":"/ the resulting number is unable to be represented by the `Decimal` number then `None` will","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":52656,"byte_end":52749,"line_start":1478,"line_end":1478,"column_start":5,"column_end":98}},{"value":"/ be returned.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":52754,"byte_end":52770,"line_start":1479,"line_end":1479,"column_start":5,"column_end":21}},{"value":"/ When the number of significant figures of the `Decimal` being rounded is greater than the requested","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":52775,"byte_end":52878,"line_start":1480,"line_end":1480,"column_start":5,"column_end":108}},{"value":"/ number of significant digits then rounding will be performed using the provided [RoundingStrategy].","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":52883,"byte_end":52986,"line_start":1481,"line_end":1481,"column_start":5,"column_end":108}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":52991,"byte_end":52994,"line_start":1482,"line_end":1482,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":52999,"byte_end":53014,"line_start":1483,"line_end":1483,"column_start":5,"column_end":20}},{"value":"/ * `digits`: the number of significant digits to round to.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":53019,"byte_end":53080,"line_start":1484,"line_end":1484,"column_start":5,"column_end":66}},{"value":"/ * `strategy`: if required, the rounding strategy to use.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":53085,"byte_end":53145,"line_start":1485,"line_end":1485,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":53150,"byte_end":53153,"line_start":1486,"line_end":1486,"column_start":5,"column_end":8}},{"value":"/ # Remarks","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":53158,"byte_end":53171,"line_start":1487,"line_end":1487,"column_start":5,"column_end":18}},{"value":"/ A significant figure is determined using the following rules:","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":53176,"byte_end":53241,"line_start":1488,"line_end":1488,"column_start":5,"column_end":70}},{"value":"/ 1. Non-zero digits are always significant.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":53246,"byte_end":53292,"line_start":1489,"line_end":1489,"column_start":5,"column_end":51}},{"value":"/ 2. Zeros between non-zero digits are always significant.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":53297,"byte_end":53357,"line_start":1490,"line_end":1490,"column_start":5,"column_end":65}},{"value":"/ 3. Leading zeros are never significant.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":53362,"byte_end":53405,"line_start":1491,"line_end":1491,"column_start":5,"column_end":48}},{"value":"/ 4. Trailing zeros are only significant if the number contains a decimal point.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":53410,"byte_end":53492,"line_start":1492,"line_end":1492,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":53497,"byte_end":53500,"line_start":1493,"line_end":1493,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":53505,"byte_end":53518,"line_start":1494,"line_end":1494,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":53523,"byte_end":53526,"line_start":1495,"line_end":1495,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":53531,"byte_end":53538,"line_start":1496,"line_end":1496,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::{Decimal, RoundingStrategy};","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":53543,"byte_end":53595,"line_start":1497,"line_end":1497,"column_start":5,"column_end":57}},{"value":"/ use rust_decimal_macros::dec;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":53600,"byte_end":53633,"line_start":1498,"line_end":1498,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":53638,"byte_end":53641,"line_start":1499,"line_end":1499,"column_start":5,"column_end":8}},{"value":"/ let value = dec!(305.459);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":53646,"byte_end":53676,"line_start":1500,"line_end":1500,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(value.round_sf_with_strategy(0, RoundingStrategy::ToZero), Some(dec!(0)));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":53681,"byte_end":53770,"line_start":1501,"line_end":1501,"column_start":5,"column_end":94}},{"value":"/ assert_eq!(value.round_sf_with_strategy(1, RoundingStrategy::ToZero), Some(dec!(300)));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":53775,"byte_end":53866,"line_start":1502,"line_end":1502,"column_start":5,"column_end":96}},{"value":"/ assert_eq!(value.round_sf_with_strategy(2, RoundingStrategy::ToZero), Some(dec!(300)));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":53871,"byte_end":53962,"line_start":1503,"line_end":1503,"column_start":5,"column_end":96}},{"value":"/ assert_eq!(value.round_sf_with_strategy(3, RoundingStrategy::ToZero), Some(dec!(305)));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":53967,"byte_end":54058,"line_start":1504,"line_end":1504,"column_start":5,"column_end":96}},{"value":"/ assert_eq!(value.round_sf_with_strategy(4, RoundingStrategy::ToZero), Some(dec!(305.4)));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":54063,"byte_end":54156,"line_start":1505,"line_end":1505,"column_start":5,"column_end":98}},{"value":"/ assert_eq!(value.round_sf_with_strategy(5, RoundingStrategy::ToZero), Some(dec!(305.45)));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":54161,"byte_end":54255,"line_start":1506,"line_end":1506,"column_start":5,"column_end":99}},{"value":"/ assert_eq!(value.round_sf_with_strategy(6, RoundingStrategy::ToZero), Some(dec!(305.459)));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":54260,"byte_end":54355,"line_start":1507,"line_end":1507,"column_start":5,"column_end":100}},{"value":"/ assert_eq!(value.round_sf_with_strategy(7, RoundingStrategy::ToZero), Some(dec!(305.4590)));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":54360,"byte_end":54456,"line_start":1508,"line_end":1508,"column_start":5,"column_end":101}},{"value":"/ assert_eq!(Decimal::MAX.round_sf_with_strategy(1, RoundingStrategy::ToZero), Some(dec!(70000000000000000000000000000)));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":54461,"byte_end":54585,"line_start":1509,"line_end":1509,"column_start":5,"column_end":129}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":54590,"byte_end":54593,"line_start":1510,"line_end":1510,"column_start":5,"column_end":8}},{"value":"/ let value = dec!(0.012301);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":54598,"byte_end":54629,"line_start":1511,"line_end":1511,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(value.round_sf_with_strategy(3, RoundingStrategy::AwayFromZero), Some(dec!(0.0124)));","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":54634,"byte_end":54734,"line_start":1512,"line_end":1512,"column_start":5,"column_end":105}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":54739,"byte_end":54746,"line_start":1513,"line_end":1513,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":54751,"byte_end":54762,"line_start":1514,"line_end":1514,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":216},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":59632,"byte_end":59638,"line_start":1619,"line_end":1619,"column_start":18,"column_end":24},"name":"unpack","qualname":"<Decimal>::unpack","value":"const fn unpack(&Self) -> UnpackedDecimal","parent":null,"children":[],"decl_id":null,"docs":" Convert `Decimal` to an internal representation of the underlying struct. This is useful\n for debugging the internal state of the object.","sig":null,"attributes":[{"value":"/ Convert `Decimal` to an internal representation of the underlying struct. This is useful","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":58816,"byte_end":58908,"line_start":1599,"line_end":1599,"column_start":5,"column_end":97}},{"value":"/ for debugging the internal state of the object.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":58913,"byte_end":58964,"line_start":1600,"line_end":1600,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":58969,"byte_end":58972,"line_start":1601,"line_end":1601,"column_start":5,"column_end":8}},{"value":"/ # Important Disclaimer","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":58977,"byte_end":59003,"line_start":1602,"line_end":1602,"column_start":5,"column_end":31}},{"value":"/ This is primarily intended for library maintainers. The internal representation of a","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":59008,"byte_end":59096,"line_start":1603,"line_end":1603,"column_start":5,"column_end":93}},{"value":"/ `Decimal` is considered \"unstable\" for public use.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":59101,"byte_end":59155,"line_start":1604,"line_end":1604,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":59160,"byte_end":59163,"line_start":1605,"line_end":1605,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":59168,"byte_end":59181,"line_start":1606,"line_end":1606,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":59186,"byte_end":59189,"line_start":1607,"line_end":1607,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":59194,"byte_end":59201,"line_start":1608,"line_end":1608,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::Decimal;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":59206,"byte_end":59238,"line_start":1609,"line_end":1609,"column_start":5,"column_end":37}},{"value":"/ use rust_decimal_macros::dec;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":59243,"byte_end":59276,"line_start":1610,"line_end":1610,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":59281,"byte_end":59284,"line_start":1611,"line_end":1611,"column_start":5,"column_end":8}},{"value":"/ let pi = dec!(3.1415926535897932384626433832);","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":59289,"byte_end":59339,"line_start":1612,"line_end":1612,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(format!(\"{:?}\", pi), \"3.1415926535897932384626433832\");","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":59344,"byte_end":59414,"line_start":1613,"line_end":1613,"column_start":5,"column_end":75}},{"value":"/ assert_eq!(format!(\"{:?}\", pi.unpack()), \"UnpackedDecimal { \\","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":59419,"byte_end":59484,"line_start":1614,"line_end":1614,"column_start":5,"column_end":70}},{"value":"/     negative: false, scale: 28, hi: 1703060790, mid: 185874565, lo: 1102470952 \\","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":59489,"byte_end":59573,"line_start":1615,"line_end":1615,"column_start":5,"column_end":89}},{"value":"/ }\");","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":59578,"byte_end":59586,"line_start":1616,"line_end":1616,"column_start":5,"column_end":13}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":59591,"byte_end":59598,"line_start":1617,"line_end":1617,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":59603,"byte_end":59614,"line_start":1618,"line_end":1618,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":225},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":61367,"byte_end":61382,"line_start":1676,"line_end":1676,"column_start":12,"column_end":27},"name":"from_f32_retain","qualname":"<Decimal>::from_f32_retain","value":"fn from_f32_retain(f32) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Parses a 32-bit float into a Decimal number whilst retaining any non-guaranteed precision.","sig":null,"attributes":[{"value":"/ Parses a 32-bit float into a Decimal number whilst retaining any non-guaranteed precision.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":60488,"byte_end":60582,"line_start":1659,"line_end":1659,"column_start":5,"column_end":99}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":60587,"byte_end":60590,"line_start":1660,"line_end":1660,"column_start":5,"column_end":8}},{"value":"/ Typically when a float is parsed in Rust Decimal, any excess bits (after ~7.22 decimal points for","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":60595,"byte_end":60696,"line_start":1661,"line_end":1661,"column_start":5,"column_end":106}},{"value":"/ f32 as per IEEE-754) are removed due to any digits following this are considered an approximation","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":60701,"byte_end":60802,"line_start":1662,"line_end":1662,"column_start":5,"column_end":106}},{"value":"/ at best. This function bypasses this additional step and retains these excess bits.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":60807,"byte_end":60894,"line_start":1663,"line_end":1663,"column_start":5,"column_end":92}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":60899,"byte_end":60902,"line_start":1664,"line_end":1664,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":60907,"byte_end":60920,"line_start":1665,"line_end":1665,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":60925,"byte_end":60928,"line_start":1666,"line_end":1666,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":60933,"byte_end":60940,"line_start":1667,"line_end":1667,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::prelude::*;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":60945,"byte_end":60980,"line_start":1668,"line_end":1668,"column_start":5,"column_end":40}},{"value":"/ #","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":60985,"byte_end":60990,"line_start":1669,"line_end":1669,"column_start":5,"column_end":10}},{"value":"/ // Usually floats are parsed leveraging float guarantees. i.e. 0.1_f32 => 0.1","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":60995,"byte_end":61076,"line_start":1670,"line_end":1670,"column_start":5,"column_end":86}},{"value":"/ assert_eq!(\"0.1\", Decimal::from_f32(0.1_f32).unwrap().to_string());","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":61081,"byte_end":61152,"line_start":1671,"line_end":1671,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":61157,"byte_end":61160,"line_start":1672,"line_end":1672,"column_start":5,"column_end":8}},{"value":"/ // Sometimes, we may want to represent the approximation exactly.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":61165,"byte_end":61234,"line_start":1673,"line_end":1673,"column_start":5,"column_end":74}},{"value":"/ assert_eq!(\"0.100000001490116119384765625\", Decimal::from_f32_retain(0.1_f32).unwrap().to_string());","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":61239,"byte_end":61343,"line_start":1674,"line_end":1674,"column_start":5,"column_end":109}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":61348,"byte_end":61355,"line_start":1675,"line_end":1675,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":226},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":62328,"byte_end":62343,"line_start":1697,"line_end":1697,"column_start":12,"column_end":27},"name":"from_f64_retain","qualname":"<Decimal>::from_f64_retain","value":"fn from_f64_retain(f64) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Parses a 64-bit float into a Decimal number whilst retaining any non-guaranteed precision.","sig":null,"attributes":[{"value":"/ Parses a 64-bit float into a Decimal number whilst retaining any non-guaranteed precision.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":61447,"byte_end":61541,"line_start":1680,"line_end":1680,"column_start":5,"column_end":99}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":61546,"byte_end":61549,"line_start":1681,"line_end":1681,"column_start":5,"column_end":8}},{"value":"/ Typically when a float is parsed in Rust Decimal, any excess bits (after ~15.95 decimal points for","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":61554,"byte_end":61656,"line_start":1682,"line_end":1682,"column_start":5,"column_end":107}},{"value":"/ f64 as per IEEE-754) are removed due to any digits following this are considered an approximation","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":61661,"byte_end":61762,"line_start":1683,"line_end":1683,"column_start":5,"column_end":106}},{"value":"/ at best. This function bypasses this additional step and retains these excess bits.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":61767,"byte_end":61854,"line_start":1684,"line_end":1684,"column_start":5,"column_end":92}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":61859,"byte_end":61862,"line_start":1685,"line_end":1685,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":61867,"byte_end":61880,"line_start":1686,"line_end":1686,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":61885,"byte_end":61888,"line_start":1687,"line_end":1687,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":61893,"byte_end":61900,"line_start":1688,"line_end":1688,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::prelude::*;","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":61905,"byte_end":61940,"line_start":1689,"line_end":1689,"column_start":5,"column_end":40}},{"value":"/ #","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":61945,"byte_end":61950,"line_start":1690,"line_end":1690,"column_start":5,"column_end":10}},{"value":"/ // Usually floats are parsed leveraging float guarantees. i.e. 0.1_f64 => 0.1","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":61955,"byte_end":62036,"line_start":1691,"line_end":1691,"column_start":5,"column_end":86}},{"value":"/ assert_eq!(\"0.1\", Decimal::from_f64(0.1_f64).unwrap().to_string());","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":62041,"byte_end":62112,"line_start":1692,"line_end":1692,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":62117,"byte_end":62120,"line_start":1693,"line_end":1693,"column_start":5,"column_end":8}},{"value":"/ // Sometimes, we may want to represent the approximation exactly.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":62125,"byte_end":62194,"line_start":1694,"line_end":1694,"column_start":5,"column_end":74}},{"value":"/ assert_eq!(\"0.1000000000000000055511151231\", Decimal::from_f64_retain(0.1_f64).unwrap().to_string());","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":62199,"byte_end":62304,"line_start":1695,"line_end":1695,"column_start":5,"column_end":110}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":62309,"byte_end":62316,"line_start":1696,"line_end":1696,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":228},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":62618,"byte_end":62625,"line_start":1707,"line_end":1707,"column_start":8,"column_end":15},"name":"default","qualname":"<Decimal as std::default::Default>::default","value":"fn default() -> Self","parent":{"krate":2,"index":3128},"children":[],"decl_id":{"krate":2,"index":3129},"docs":" Returns the default value for a `Decimal` (equivalent to `Decimal::ZERO`). [Read more]","sig":null,"attributes":[{"value":"/ Returns the default value for a `Decimal` (equivalent to `Decimal::ZERO`). [Read more]","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":62437,"byte_end":62527,"line_start":1703,"line_end":1703,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":62532,"byte_end":62535,"line_start":1704,"line_end":1704,"column_start":5,"column_end":8}},{"value":"/ [Read more]: core::default::Default#tymethod.default","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":62540,"byte_end":62596,"line_start":1705,"line_end":1705,"column_start":5,"column_end":61}},{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":62601,"byte_end":62610,"line_start":1706,"line_end":1706,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":241},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":66477,"byte_end":66481,"line_start":1825,"line_end":1825,"column_start":8,"column_end":12},"name":"zero","qualname":"<Decimal as num_traits::Zero>::zero","value":"fn zero() -> Decimal","parent":{"krate":16,"index":466},"children":[],"decl_id":{"krate":16,"index":467},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":242},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":66524,"byte_end":66531,"line_start":1829,"line_end":1829,"column_start":8,"column_end":15},"name":"is_zero","qualname":"<Decimal as num_traits::Zero>::is_zero","value":"fn is_zero(&Self) -> bool","parent":{"krate":16,"index":466},"children":[],"decl_id":{"krate":16,"index":469},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":244},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":66611,"byte_end":66614,"line_start":1835,"line_end":1835,"column_start":8,"column_end":11},"name":"one","qualname":"<Decimal as num_traits::One>::one","value":"fn one() -> Decimal","parent":{"krate":16,"index":476},"children":[],"decl_id":{"krate":16,"index":477},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":246},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":66684,"byte_end":66687,"line_start":1841,"line_end":1841,"column_start":8,"column_end":11},"name":"abs","qualname":"<Decimal as num_traits::Signed>::abs","value":"fn abs(&Self) -> Self","parent":{"krate":16,"index":819},"children":[],"decl_id":{"krate":16,"index":820},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":247},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":66738,"byte_end":66745,"line_start":1845,"line_end":1845,"column_start":8,"column_end":15},"name":"abs_sub","qualname":"<Decimal as num_traits::Signed>::abs_sub","value":"fn abs_sub(&Self, &Self) -> Self","parent":{"krate":16,"index":819},"children":[],"decl_id":{"krate":16,"index":821},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":248},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":66885,"byte_end":66891,"line_start":1853,"line_end":1853,"column_start":8,"column_end":14},"name":"signum","qualname":"<Decimal as num_traits::Signed>::signum","value":"fn signum(&Self) -> Self","parent":{"krate":16,"index":819},"children":[],"decl_id":{"krate":16,"index":822},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":249},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":67148,"byte_end":67159,"line_start":1865,"line_end":1865,"column_start":8,"column_end":19},"name":"is_positive","qualname":"<Decimal as num_traits::Signed>::is_positive","value":"fn is_positive(&Self) -> bool","parent":{"krate":16,"index":819},"children":[],"decl_id":{"krate":16,"index":823},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":250},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":67223,"byte_end":67234,"line_start":1869,"line_end":1869,"column_start":8,"column_end":19},"name":"is_negative","qualname":"<Decimal as num_traits::Signed>::is_negative","value":"fn is_negative(&Self) -> bool","parent":{"krate":16,"index":819},"children":[],"decl_id":{"krate":16,"index":824},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":253},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":67358,"byte_end":67372,"line_start":1877,"line_end":1877,"column_start":8,"column_end":22},"name":"from_str_radix","qualname":"<Decimal as num_traits::Num>::from_str_radix","value":"fn from_str_radix(&str, u32) -> Result<Self, Self::FromStrRadixErr>","parent":{"krate":16,"index":844},"children":[],"decl_id":{"krate":16,"index":846},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":256},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":67547,"byte_end":67555,"line_start":1885,"line_end":1885,"column_start":8,"column_end":16},"name":"from_str","qualname":"<Decimal as std::str::FromStr>::from_str","value":"fn from_str(&str) -> Result<Decimal, Self::Err>","parent":{"krate":2,"index":12561},"children":[],"decl_id":{"krate":2,"index":12563},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":258},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":67696,"byte_end":67704,"line_start":1891,"line_end":1891,"column_start":8,"column_end":16},"name":"from_i32","qualname":"<Decimal as num_traits::FromPrimitive>::from_i32","value":"fn from_i32(i32) -> Option<Decimal>","parent":{"krate":16,"index":333},"children":[],"decl_id":{"krate":16,"index":337},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":259},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":68102,"byte_end":68110,"line_start":1909,"line_end":1909,"column_start":8,"column_end":16},"name":"from_i64","qualname":"<Decimal as num_traits::FromPrimitive>::from_i64","value":"fn from_i64(i64) -> Option<Decimal>","parent":{"krate":16,"index":333},"children":[],"decl_id":{"krate":16,"index":338},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":260},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":68535,"byte_end":68544,"line_start":1927,"line_end":1927,"column_start":8,"column_end":17},"name":"from_i128","qualname":"<Decimal as num_traits::FromPrimitive>::from_i128","value":"fn from_i128(i128) -> Option<Decimal>","parent":{"krate":16,"index":333},"children":[],"decl_id":{"krate":16,"index":339},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":261},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":69070,"byte_end":69078,"line_start":1949,"line_end":1949,"column_start":8,"column_end":16},"name":"from_u32","qualname":"<Decimal as num_traits::FromPrimitive>::from_u32","value":"fn from_u32(u32) -> Option<Decimal>","parent":{"krate":16,"index":333},"children":[],"decl_id":{"krate":16,"index":343},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":262},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":69236,"byte_end":69244,"line_start":1958,"line_end":1958,"column_start":8,"column_end":16},"name":"from_u64","qualname":"<Decimal as num_traits::FromPrimitive>::from_u64","value":"fn from_u64(u64) -> Option<Decimal>","parent":{"krate":16,"index":333},"children":[],"decl_id":{"krate":16,"index":344},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":263},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":69424,"byte_end":69433,"line_start":1967,"line_end":1967,"column_start":8,"column_end":17},"name":"from_u128","qualname":"<Decimal as num_traits::FromPrimitive>::from_u128","value":"fn from_u128(u128) -> Option<Decimal>","parent":{"krate":16,"index":333},"children":[],"decl_id":{"krate":16,"index":345},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":264},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":69722,"byte_end":69730,"line_start":1980,"line_end":1980,"column_start":8,"column_end":16},"name":"from_f32","qualname":"<Decimal as num_traits::FromPrimitive>::from_f32","value":"fn from_f32(f32) -> Option<Decimal>","parent":{"krate":16,"index":333},"children":[],"decl_id":{"krate":16,"index":346},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":265},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":69880,"byte_end":69888,"line_start":1985,"line_end":1985,"column_start":8,"column_end":16},"name":"from_f64","qualname":"<Decimal as num_traits::FromPrimitive>::from_f64","value":"fn from_f64(f64) -> Option<Decimal>","parent":{"krate":16,"index":333},"children":[],"decl_id":{"krate":16,"index":347},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":271},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":78636,"byte_end":78642,"line_start":2230,"line_end":2230,"column_start":8,"column_end":14},"name":"to_i64","qualname":"<Decimal as num_traits::ToPrimitive>::to_i64","value":"fn to_i64(&Self) -> Option<i64>","parent":{"krate":16,"index":307},"children":[],"decl_id":{"krate":16,"index":312},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":272},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":79510,"byte_end":79517,"line_start":2257,"line_end":2257,"column_start":8,"column_end":15},"name":"to_i128","qualname":"<Decimal as num_traits::ToPrimitive>::to_i128","value":"fn to_i128(&Self) -> Option<i128>","parent":{"krate":16,"index":307},"children":[],"decl_id":{"krate":16,"index":313},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":273},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":79793,"byte_end":79799,"line_start":2267,"line_end":2267,"column_start":8,"column_end":14},"name":"to_u64","qualname":"<Decimal as num_traits::ToPrimitive>::to_u64","value":"fn to_u64(&Self) -> Option<u64>","parent":{"krate":16,"index":307},"children":[],"decl_id":{"krate":16,"index":318},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":274},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":80081,"byte_end":80088,"line_start":2281,"line_end":2281,"column_start":8,"column_end":15},"name":"to_u128","qualname":"<Decimal as num_traits::ToPrimitive>::to_u128","value":"fn to_u128(&Self) -> Option<u128>","parent":{"krate":16,"index":307},"children":[],"decl_id":{"krate":16,"index":319},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":275},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":80317,"byte_end":80323,"line_start":2290,"line_end":2290,"column_start":8,"column_end":14},"name":"to_f64","qualname":"<Decimal as num_traits::ToPrimitive>::to_f64","value":"fn to_f64(&Self) -> Option<f64>","parent":{"krate":16,"index":307},"children":[],"decl_id":{"krate":16,"index":321},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":278},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":81538,"byte_end":81541,"line_start":2316,"line_end":2316,"column_start":8,"column_end":11},"name":"fmt","qualname":"<Decimal as std::fmt::Display>::fmt","value":"fn fmt(&Self, &mut fmt::Formatter) -> Result<(), fmt::Error>","parent":{"krate":2,"index":9914},"children":[],"decl_id":{"krate":2,"index":9915},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":280},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":82034,"byte_end":82037,"line_start":2328,"line_end":2328,"column_start":8,"column_end":11},"name":"fmt","qualname":"<Decimal as std::fmt::Debug>::fmt","value":"fn fmt(&Self, &mut fmt::Formatter) -> Result<(), fmt::Error>","parent":{"krate":2,"index":9907},"children":[],"decl_id":{"krate":2,"index":9908},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":282},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":82181,"byte_end":82184,"line_start":2334,"line_end":2334,"column_start":8,"column_end":11},"name":"fmt","qualname":"<Decimal as std::fmt::LowerExp>::fmt","value":"fn fmt(&Self, &mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":9926},"children":[],"decl_id":{"krate":2,"index":9927},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":284},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":82344,"byte_end":82347,"line_start":2340,"line_end":2340,"column_start":8,"column_end":11},"name":"fmt","qualname":"<Decimal as std::fmt::UpperExp>::fmt","value":"fn fmt(&Self, &mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":9928},"children":[],"decl_id":{"krate":2,"index":9929},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":287},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":82525,"byte_end":82528,"line_start":2348,"line_end":2348,"column_start":8,"column_end":11},"name":"neg","qualname":"<Decimal as std::ops::Neg>::neg","value":"fn neg(Self) -> Decimal","parent":{"krate":2,"index":3245},"children":[],"decl_id":{"krate":2,"index":3247},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":291},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":82722,"byte_end":82725,"line_start":2358,"line_end":2358,"column_start":8,"column_end":11},"name":"neg","qualname":"<&'a Decimal as std::ops::Neg>::neg","value":"fn neg(Self) -> Decimal","parent":{"krate":2,"index":3245},"children":[],"decl_id":{"krate":2,"index":3247},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":293},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":82961,"byte_end":82971,"line_start":2369,"line_end":2369,"column_start":8,"column_end":18},"name":"add_assign","qualname":"<Decimal as std::ops::AddAssign>::add_assign","value":"fn add_assign(&mut Self, Decimal)","parent":{"krate":2,"index":3249},"children":[],"decl_id":{"krate":2,"index":3251},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":296},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":83225,"byte_end":83235,"line_start":2379,"line_end":2379,"column_start":8,"column_end":18},"name":"add_assign","qualname":"<Decimal as std::ops::AddAssign>::add_assign","value":"fn add_assign(&mut Self, &'a Decimal)","parent":{"krate":2,"index":3249},"children":[],"decl_id":{"krate":2,"index":3251},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":299},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":83377,"byte_end":83387,"line_start":2385,"line_end":2385,"column_start":8,"column_end":18},"name":"add_assign","qualname":"<&'a mut Decimal as std::ops::AddAssign>::add_assign","value":"fn add_assign(&mut Self, Decimal)","parent":{"krate":2,"index":3249},"children":[],"decl_id":{"krate":2,"index":3251},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":302},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":83529,"byte_end":83539,"line_start":2391,"line_end":2391,"column_start":8,"column_end":18},"name":"add_assign","qualname":"<&'a mut Decimal as std::ops::AddAssign>::add_assign","value":"fn add_assign(&mut Self, &'a Decimal)","parent":{"krate":2,"index":3249},"children":[],"decl_id":{"krate":2,"index":3251},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":304},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":83661,"byte_end":83671,"line_start":2397,"line_end":2397,"column_start":8,"column_end":18},"name":"sub_assign","qualname":"<Decimal as std::ops::SubAssign>::sub_assign","value":"fn sub_assign(&mut Self, Decimal)","parent":{"krate":2,"index":3253},"children":[],"decl_id":{"krate":2,"index":3255},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":307},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":83925,"byte_end":83935,"line_start":2407,"line_end":2407,"column_start":8,"column_end":18},"name":"sub_assign","qualname":"<Decimal as std::ops::SubAssign>::sub_assign","value":"fn sub_assign(&mut Self, &'a Decimal)","parent":{"krate":2,"index":3253},"children":[],"decl_id":{"krate":2,"index":3255},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":310},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":84077,"byte_end":84087,"line_start":2413,"line_end":2413,"column_start":8,"column_end":18},"name":"sub_assign","qualname":"<&'a mut Decimal as std::ops::SubAssign>::sub_assign","value":"fn sub_assign(&mut Self, Decimal)","parent":{"krate":2,"index":3253},"children":[],"decl_id":{"krate":2,"index":3255},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":313},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":84229,"byte_end":84239,"line_start":2419,"line_end":2419,"column_start":8,"column_end":18},"name":"sub_assign","qualname":"<&'a mut Decimal as std::ops::SubAssign>::sub_assign","value":"fn sub_assign(&mut Self, &'a Decimal)","parent":{"krate":2,"index":3253},"children":[],"decl_id":{"krate":2,"index":3255},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":315},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":84361,"byte_end":84371,"line_start":2425,"line_end":2425,"column_start":8,"column_end":18},"name":"mul_assign","qualname":"<Decimal as std::ops::MulAssign>::mul_assign","value":"fn mul_assign(&mut Self, Decimal)","parent":{"krate":2,"index":3257},"children":[],"decl_id":{"krate":2,"index":3259},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":318},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":84625,"byte_end":84635,"line_start":2435,"line_end":2435,"column_start":8,"column_end":18},"name":"mul_assign","qualname":"<Decimal as std::ops::MulAssign>::mul_assign","value":"fn mul_assign(&mut Self, &'a Decimal)","parent":{"krate":2,"index":3257},"children":[],"decl_id":{"krate":2,"index":3259},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":321},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":84777,"byte_end":84787,"line_start":2441,"line_end":2441,"column_start":8,"column_end":18},"name":"mul_assign","qualname":"<&'a mut Decimal as std::ops::MulAssign>::mul_assign","value":"fn mul_assign(&mut Self, Decimal)","parent":{"krate":2,"index":3257},"children":[],"decl_id":{"krate":2,"index":3259},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":324},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":84929,"byte_end":84939,"line_start":2447,"line_end":2447,"column_start":8,"column_end":18},"name":"mul_assign","qualname":"<&'a mut Decimal as std::ops::MulAssign>::mul_assign","value":"fn mul_assign(&mut Self, &'a Decimal)","parent":{"krate":2,"index":3257},"children":[],"decl_id":{"krate":2,"index":3259},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":326},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":85061,"byte_end":85071,"line_start":2453,"line_end":2453,"column_start":8,"column_end":18},"name":"div_assign","qualname":"<Decimal as std::ops::DivAssign>::div_assign","value":"fn div_assign(&mut Self, Decimal)","parent":{"krate":2,"index":3261},"children":[],"decl_id":{"krate":2,"index":3263},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":329},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":85325,"byte_end":85335,"line_start":2463,"line_end":2463,"column_start":8,"column_end":18},"name":"div_assign","qualname":"<Decimal as std::ops::DivAssign>::div_assign","value":"fn div_assign(&mut Self, &'a Decimal)","parent":{"krate":2,"index":3261},"children":[],"decl_id":{"krate":2,"index":3263},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":332},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":85477,"byte_end":85487,"line_start":2469,"line_end":2469,"column_start":8,"column_end":18},"name":"div_assign","qualname":"<&'a mut Decimal as std::ops::DivAssign>::div_assign","value":"fn div_assign(&mut Self, Decimal)","parent":{"krate":2,"index":3261},"children":[],"decl_id":{"krate":2,"index":3263},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":335},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":85629,"byte_end":85639,"line_start":2475,"line_end":2475,"column_start":8,"column_end":18},"name":"div_assign","qualname":"<&'a mut Decimal as std::ops::DivAssign>::div_assign","value":"fn div_assign(&mut Self, &'a Decimal)","parent":{"krate":2,"index":3261},"children":[],"decl_id":{"krate":2,"index":3263},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":337},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":85761,"byte_end":85771,"line_start":2481,"line_end":2481,"column_start":8,"column_end":18},"name":"rem_assign","qualname":"<Decimal as std::ops::RemAssign>::rem_assign","value":"fn rem_assign(&mut Self, Decimal)","parent":{"krate":2,"index":3265},"children":[],"decl_id":{"krate":2,"index":3267},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":340},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":86025,"byte_end":86035,"line_start":2491,"line_end":2491,"column_start":8,"column_end":18},"name":"rem_assign","qualname":"<Decimal as std::ops::RemAssign>::rem_assign","value":"fn rem_assign(&mut Self, &'a Decimal)","parent":{"krate":2,"index":3265},"children":[],"decl_id":{"krate":2,"index":3267},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":343},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":86177,"byte_end":86187,"line_start":2497,"line_end":2497,"column_start":8,"column_end":18},"name":"rem_assign","qualname":"<&'a mut Decimal as std::ops::RemAssign>::rem_assign","value":"fn rem_assign(&mut Self, Decimal)","parent":{"krate":2,"index":3265},"children":[],"decl_id":{"krate":2,"index":3267},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":346},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":86329,"byte_end":86339,"line_start":2503,"line_end":2503,"column_start":8,"column_end":18},"name":"rem_assign","qualname":"<&'a mut Decimal as std::ops::RemAssign>::rem_assign","value":"fn rem_assign(&mut Self, &'a Decimal)","parent":{"krate":2,"index":3265},"children":[],"decl_id":{"krate":2,"index":3267},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":348},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":86475,"byte_end":86477,"line_start":2510,"line_end":2510,"column_start":8,"column_end":10},"name":"eq","qualname":"<Decimal as std::cmp::PartialEq>::eq","value":"fn eq(&Self, &Decimal) -> bool","parent":{"krate":2,"index":2802},"children":[],"decl_id":{"krate":2,"index":2804},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":86458,"byte_end":86467,"line_start":2509,"line_end":2509,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":351},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":86609,"byte_end":86613,"line_start":2518,"line_end":2518,"column_start":8,"column_end":12},"name":"hash","qualname":"<Decimal as std::hash::Hash>::hash","value":"fn hash<H>(&Self, &mut H) where H: Hasher","parent":{"krate":2,"index":10120},"children":[],"decl_id":{"krate":2,"index":10121},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":354},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":86851,"byte_end":86862,"line_start":2529,"line_end":2529,"column_start":8,"column_end":19},"name":"partial_cmp","qualname":"<Decimal as std::cmp::PartialOrd>::partial_cmp","value":"fn partial_cmp(&Self, &Decimal) -> Option<Ordering>","parent":{"krate":2,"index":2848},"children":[],"decl_id":{"krate":2,"index":2850},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":86834,"byte_end":86843,"line_start":2528,"line_end":2528,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":356},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":86978,"byte_end":86981,"line_start":2535,"line_end":2535,"column_start":8,"column_end":11},"name":"cmp","qualname":"<Decimal as std::cmp::Ord>::cmp","value":"fn cmp(&Self, &Decimal) -> Ordering","parent":{"krate":2,"index":2838},"children":[],"decl_id":{"krate":2,"index":2839},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":358},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":87130,"byte_end":87137,"line_start":2542,"line_end":2542,"column_start":8,"column_end":15},"name":"product","qualname":"<Decimal as std::iter::Product>::product","value":"fn product<I>(I) -> Self where I: Iterator<Item = Decimal>","parent":{"krate":2,"index":7961},"children":[],"decl_id":{"krate":2,"index":7963},"docs":" Panics if out-of-bounds\n","sig":null,"attributes":[{"value":"/ Panics if out-of-bounds","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":87095,"byte_end":87122,"line_start":2541,"line_end":2541,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":362},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":87385,"byte_end":87392,"line_start":2553,"line_end":2553,"column_start":8,"column_end":15},"name":"product","qualname":"<Decimal as std::iter::Product>::product","value":"fn product<I>(I) -> Self where I: Iterator<Item = &'a Decimal>","parent":{"krate":2,"index":7961},"children":[],"decl_id":{"krate":2,"index":7963},"docs":" Panics if out-of-bounds\n","sig":null,"attributes":[{"value":"/ Panics if out-of-bounds","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":87350,"byte_end":87377,"line_start":2552,"line_end":2552,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":365},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":87591,"byte_end":87594,"line_start":2563,"line_end":2563,"column_start":8,"column_end":11},"name":"sum","qualname":"<Decimal as std::iter::Sum>::sum","value":"fn sum<I>(I) -> Self where I: Iterator<Item = Decimal>","parent":{"krate":2,"index":7957},"children":[],"decl_id":{"krate":2,"index":7959},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":369},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":87795,"byte_end":87798,"line_start":2573,"line_end":2573,"column_start":8,"column_end":11},"name":"sum","qualname":"<Decimal as std::iter::Sum>::sum","value":"fn sum<I>(I) -> Self where I: Iterator<Item = &'a Decimal>","parent":{"krate":2,"index":7957},"children":[],"decl_id":{"krate":2,"index":7959},"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1190},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\error.rs","byte_start":88353,"byte_end":88364,"line_start":12,"line_end":12,"column_start":5,"column_end":16},"name":"ErrorString","qualname":"::error::Error::ErrorString","value":"Error::ErrorString(String)","parent":{"krate":0,"index":1189},"children":[],"decl_id":null,"docs":" A generic error from Rust Decimal with the `String` containing more information as to what\n went wrong.","sig":null,"attributes":[{"value":"/ A generic error from Rust Decimal with the `String` containing more information as to what","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\error.rs","byte_start":88139,"byte_end":88233,"line_start":8,"line_end":8,"column_start":5,"column_end":99}},{"value":"/ went wrong.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\error.rs","byte_start":88238,"byte_end":88253,"line_start":9,"line_end":9,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\error.rs","byte_start":88258,"byte_end":88261,"line_start":10,"line_end":10,"column_start":5,"column_end":8}},{"value":"/ This is a legacy/deprecated error type retained for backwards compatibility.  ","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\error.rs","byte_start":88266,"byte_end":88348,"line_start":11,"line_end":11,"column_start":5,"column_end":87}}]},{"kind":"Field","id":{"krate":0,"index":1192},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\error.rs","byte_start":88365,"byte_end":88371,"line_start":12,"line_end":12,"column_start":17,"column_end":23},"name":"0","qualname":"::error::Error::ErrorString::0","value":"std::string::String","parent":{"krate":0,"index":1190},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1193},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\error.rs","byte_start":88429,"byte_end":88456,"line_start":14,"line_end":14,"column_start":5,"column_end":32},"name":"ExceedsMaximumPossibleValue","qualname":"::error::Error::ExceedsMaximumPossibleValue","value":"Error::ExceedsMaximumPossibleValue","parent":{"krate":0,"index":1189},"children":[],"decl_id":null,"docs":" The value provided exceeds `Decimal::MAX`.\n","sig":null,"attributes":[{"value":"/ The value provided exceeds `Decimal::MAX`.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\error.rs","byte_start":88378,"byte_end":88424,"line_start":13,"line_end":13,"column_start":5,"column_end":51}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1195},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\error.rs","byte_start":88518,"byte_end":88546,"line_start":16,"line_end":16,"column_start":5,"column_end":33},"name":"LessThanMinimumPossibleValue","qualname":"::error::Error::LessThanMinimumPossibleValue","value":"Error::LessThanMinimumPossibleValue","parent":{"krate":0,"index":1189},"children":[],"decl_id":null,"docs":" The value provided is less than `Decimal::MIN`.\n","sig":null,"attributes":[{"value":"/ The value provided is less than `Decimal::MIN`.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\error.rs","byte_start":88462,"byte_end":88513,"line_start":15,"line_end":15,"column_start":5,"column_end":56}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1197},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\error.rs","byte_start":88656,"byte_end":88665,"line_start":18,"line_end":18,"column_start":5,"column_end":14},"name":"Underflow","qualname":"::error::Error::Underflow","value":"Error::Underflow","parent":{"krate":0,"index":1189},"children":[],"decl_id":null,"docs":" An underflow is when there are more fractional digits than can be represented within `Decimal`.\n","sig":null,"attributes":[{"value":"/ An underflow is when there are more fractional digits than can be represented within `Decimal`.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\error.rs","byte_start":88552,"byte_end":88651,"line_start":17,"line_end":17,"column_start":5,"column_end":104}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1199},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\error.rs","byte_start":88754,"byte_end":88782,"line_start":20,"line_end":20,"column_start":5,"column_end":33},"name":"ScaleExceedsMaximumPrecision","qualname":"::error::Error::ScaleExceedsMaximumPrecision","value":"Error::ScaleExceedsMaximumPrecision(u32)","parent":{"krate":0,"index":1189},"children":[],"decl_id":null,"docs":" The scale provided exceeds the maximum scale that `Decimal` can represent.\n","sig":null,"attributes":[{"value":"/ The scale provided exceeds the maximum scale that `Decimal` can represent.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\error.rs","byte_start":88671,"byte_end":88749,"line_start":19,"line_end":19,"column_start":5,"column_end":83}}]},{"kind":"Field","id":{"krate":0,"index":1201},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\error.rs","byte_start":88783,"byte_end":88786,"line_start":20,"line_end":20,"column_start":34,"column_end":37},"name":"0","qualname":"::error::Error::ScaleExceedsMaximumPrecision::0","value":"u32","parent":{"krate":0,"index":1199},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1202},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\error.rs","byte_start":88978,"byte_end":88990,"line_start":23,"line_end":23,"column_start":5,"column_end":17},"name":"ConversionTo","qualname":"::error::Error::ConversionTo","value":"Error::ConversionTo(String)","parent":{"krate":0,"index":1189},"children":[],"decl_id":null,"docs":" Represents a failure to convert to/from `Decimal` to the specified type. This is typically\n due to type constraints (e.g. `Decimal::MAX` cannot be converted into `i32`).\n","sig":null,"attributes":[{"value":"/ Represents a failure to convert to/from `Decimal` to the specified type. This is typically","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\error.rs","byte_start":88793,"byte_end":88887,"line_start":21,"line_end":21,"column_start":5,"column_end":99}},{"value":"/ due to type constraints (e.g. `Decimal::MAX` cannot be converted into `i32`).","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\error.rs","byte_start":88892,"byte_end":88973,"line_start":22,"line_end":22,"column_start":5,"column_end":86}}]},{"kind":"Field","id":{"krate":0,"index":1204},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\error.rs","byte_start":88991,"byte_end":88997,"line_start":23,"line_end":23,"column_start":18,"column_end":24},"name":"0","qualname":"::error::Error::ConversionTo::0","value":"std::string::String","parent":{"krate":0,"index":1202},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1189},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\error.rs","byte_start":88127,"byte_end":88132,"line_start":7,"line_end":7,"column_start":10,"column_end":15},"name":"Error","qualname":"::error::Error","value":"enum Error {\n    ErrorString(String),\n    ExceedsMaximumPossibleValue,\n    LessThanMinimumPossibleValue,\n    Underflow,\n    ScaleExceedsMaximumPrecision(u32),\n    ConversionTo(String),\n}","parent":null,"children":[{"krate":0,"index":1190},{"krate":0,"index":1193},{"krate":0,"index":1195},{"krate":0,"index":1197},{"krate":0,"index":1199},{"krate":0,"index":1202}],"decl_id":null,"docs":" Error type for the library.\n","sig":null,"attributes":[{"value":"/ Error type for the library.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\error.rs","byte_start":88051,"byte_end":88082,"line_start":5,"line_end":5,"column_start":1,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":387},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\error.rs","byte_start":89079,"byte_end":89083,"line_start":31,"line_end":31,"column_start":8,"column_end":12},"name":"from","qualname":"<Error as std::convert::From>::from","value":"fn from(S) -> Self","parent":{"krate":2,"index":3056},"children":[],"decl_id":{"krate":2,"index":3058},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\error.rs","byte_start":89062,"byte_end":89071,"line_start":30,"line_end":30,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":391},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\error.rs","byte_start":89354,"byte_end":89357,"line_start":45,"line_end":45,"column_start":8,"column_end":11},"name":"fmt","qualname":"<Error as std::fmt::Display>::fmt","value":"fn fmt(&Self, &mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":9914},"children":[],"decl_id":{"krate":2,"index":9915},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1225},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\arithmetic_impls.rs","byte_start":204357,"byte_end":204368,"line_start":78,"line_end":78,"column_start":9,"column_end":20},"name":"checked_add","qualname":"<Decimal>::checked_add","value":"fn checked_add(Self, Decimal) -> Option<Decimal>","parent":null,"children":[],"decl_id":null,"docs":"Checked addition. Computes `self + other`, returning `None` if overflow occurred.\n","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\arithmetic_impls.rs","byte_start":202914,"byte_end":202931,"line_start":20,"line_end":20,"column_start":9,"column_end":26}},{"value":"must_use","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\arithmetic_impls.rs","byte_start":202940,"byte_end":202951,"line_start":21,"line_end":21,"column_start":9,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1226},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\arithmetic_impls.rs","byte_start":204396,"byte_end":204410,"line_start":80,"line_end":80,"column_start":9,"column_end":23},"name":"saturating_add","qualname":"<Decimal>::saturating_add","value":"fn saturating_add(Self, Decimal) -> Decimal","parent":null,"children":[],"decl_id":null,"docs":"Saturating addition. Computes `self + other`, saturating at the relevant upper or lower boundary.\n","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\arithmetic_impls.rs","byte_start":203530,"byte_end":203547,"line_start":41,"line_end":41,"column_start":9,"column_end":26}},{"value":"must_use","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\arithmetic_impls.rs","byte_start":203556,"byte_end":203567,"line_start":42,"line_end":42,"column_start":9,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1227},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\arithmetic_impls.rs","byte_start":204534,"byte_end":204545,"line_start":86,"line_end":86,"column_start":9,"column_end":20},"name":"checked_mul","qualname":"<Decimal>::checked_mul","value":"fn checked_mul(Self, Decimal) -> Option<Decimal>","parent":null,"children":[],"decl_id":null,"docs":"Checked multiplication. Computes `self * other`, returning `None` if overflow occurred.\n","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\arithmetic_impls.rs","byte_start":202914,"byte_end":202931,"line_start":20,"line_end":20,"column_start":9,"column_end":26}},{"value":"must_use","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\arithmetic_impls.rs","byte_start":202940,"byte_end":202951,"line_start":21,"line_end":21,"column_start":9,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1228},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\arithmetic_impls.rs","byte_start":204573,"byte_end":204587,"line_start":88,"line_end":88,"column_start":9,"column_end":23},"name":"saturating_mul","qualname":"<Decimal>::saturating_mul","value":"fn saturating_mul(Self, Decimal) -> Decimal","parent":null,"children":[],"decl_id":null,"docs":"Saturating multiplication. Computes `self * other`, saturating at the relevant upper or lower boundary.\n","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\arithmetic_impls.rs","byte_start":203530,"byte_end":203547,"line_start":41,"line_end":41,"column_start":9,"column_end":26}},{"value":"must_use","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\arithmetic_impls.rs","byte_start":203556,"byte_end":203567,"line_start":42,"line_end":42,"column_start":9,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1229},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\arithmetic_impls.rs","byte_start":204699,"byte_end":204710,"line_start":94,"line_end":94,"column_start":9,"column_end":20},"name":"checked_sub","qualname":"<Decimal>::checked_sub","value":"fn checked_sub(Self, Decimal) -> Option<Decimal>","parent":null,"children":[],"decl_id":null,"docs":"Checked subtraction. Computes `self - other`, returning `None` if overflow occurred.\n","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\arithmetic_impls.rs","byte_start":202914,"byte_end":202931,"line_start":20,"line_end":20,"column_start":9,"column_end":26}},{"value":"must_use","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\arithmetic_impls.rs","byte_start":202940,"byte_end":202951,"line_start":21,"line_end":21,"column_start":9,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1230},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\arithmetic_impls.rs","byte_start":204738,"byte_end":204752,"line_start":96,"line_end":96,"column_start":9,"column_end":23},"name":"saturating_sub","qualname":"<Decimal>::saturating_sub","value":"fn saturating_sub(Self, Decimal) -> Decimal","parent":null,"children":[],"decl_id":null,"docs":"Saturating subtraction. Computes `self - other`, saturating at the relevant upper or lower boundary.\n","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\arithmetic_impls.rs","byte_start":203530,"byte_end":203547,"line_start":41,"line_end":41,"column_start":9,"column_end":26}},{"value":"must_use","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\arithmetic_impls.rs","byte_start":203556,"byte_end":203567,"line_start":42,"line_end":42,"column_start":9,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1231},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\arithmetic_impls.rs","byte_start":204831,"byte_end":204842,"line_start":100,"line_end":100,"column_start":36,"column_end":47},"name":"checked_div","qualname":"<Decimal>::checked_div","value":"fn checked_div(Self, Decimal) -> Option<Decimal>","parent":null,"children":[],"decl_id":null,"docs":"Checked division. Computes `self / other`, returning `None` if overflow occurred.\n","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\arithmetic_impls.rs","byte_start":202914,"byte_end":202931,"line_start":20,"line_end":20,"column_start":9,"column_end":26}},{"value":"must_use","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\arithmetic_impls.rs","byte_start":202940,"byte_end":202951,"line_start":21,"line_end":21,"column_start":9,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1232},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\arithmetic_impls.rs","byte_start":204891,"byte_end":204902,"line_start":101,"line_end":101,"column_start":37,"column_end":48},"name":"checked_rem","qualname":"<Decimal>::checked_rem","value":"fn checked_rem(Self, Decimal) -> Option<Decimal>","parent":null,"children":[],"decl_id":null,"docs":"Checked remainder. Computes `self % other`, returning `None` if overflow occurred.\n","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\arithmetic_impls.rs","byte_start":202914,"byte_end":202931,"line_start":20,"line_end":20,"column_start":9,"column_end":26}},{"value":"must_use","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\arithmetic_impls.rs","byte_start":202940,"byte_end":202951,"line_start":21,"line_end":21,"column_start":9,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1235},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\arithmetic_impls.rs","byte_start":206210,"byte_end":206213,"line_start":153,"line_end":153,"column_start":42,"column_end":45},"name":"add","qualname":"<Decimal as std::ops::Add>::add","value":"fn add(Self, Decimal) -> Decimal","parent":{"krate":2,"index":3218},"children":[],"decl_id":{"krate":2,"index":3221},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\arithmetic_impls.rs","byte_start":206033,"byte_end":206042,"line_start":145,"line_end":145,"column_start":13,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":1239},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\arithmetic_impls.rs","byte_start":206210,"byte_end":206213,"line_start":153,"line_end":153,"column_start":42,"column_end":45},"name":"add","qualname":"<&'a Decimal as std::ops::Add>::add","value":"fn add(Self, Decimal) -> Decimal","parent":{"krate":2,"index":3218},"children":[],"decl_id":{"krate":2,"index":3221},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\arithmetic_impls.rs","byte_start":205414,"byte_end":205423,"line_start":119,"line_end":119,"column_start":13,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":1243},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\arithmetic_impls.rs","byte_start":206210,"byte_end":206213,"line_start":153,"line_end":153,"column_start":42,"column_end":45},"name":"add","qualname":"<Decimal as std::ops::Add>::add","value":"fn add(Self, &Decimal) -> Decimal","parent":{"krate":2,"index":3218},"children":[],"decl_id":{"krate":2,"index":3221},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\arithmetic_impls.rs","byte_start":205726,"byte_end":205735,"line_start":132,"line_end":132,"column_start":13,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":907},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\arithmetic_impls.rs","byte_start":206321,"byte_end":206324,"line_start":158,"line_end":158,"column_start":8,"column_end":11},"name":"add","qualname":"<&'a Decimal as std::ops::Add>::add","value":"fn add(Self, &Decimal) -> Decimal","parent":{"krate":2,"index":3218},"children":[],"decl_id":{"krate":2,"index":3221},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\arithmetic_impls.rs","byte_start":206296,"byte_end":206313,"line_start":157,"line_end":157,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":909},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\arithmetic_impls.rs","byte_start":206569,"byte_end":206580,"line_start":168,"line_end":168,"column_start":8,"column_end":19},"name":"checked_add","qualname":"<Decimal as num_traits::CheckedAdd>::checked_add","value":"fn checked_add(&Self, &Decimal) -> Option<Decimal>","parent":{"krate":16,"index":572},"children":[],"decl_id":{"krate":16,"index":573},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\arithmetic_impls.rs","byte_start":206552,"byte_end":206561,"line_start":167,"line_end":167,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":911},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\arithmetic_impls.rs","byte_start":206722,"byte_end":206733,"line_start":175,"line_end":175,"column_start":8,"column_end":19},"name":"checked_sub","qualname":"<Decimal as num_traits::CheckedSub>::checked_sub","value":"fn checked_sub(&Self, &Decimal) -> Option<Decimal>","parent":{"krate":16,"index":575},"children":[],"decl_id":{"krate":16,"index":576},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\arithmetic_impls.rs","byte_start":206705,"byte_end":206714,"line_start":174,"line_end":174,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":913},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\arithmetic_impls.rs","byte_start":206875,"byte_end":206886,"line_start":182,"line_end":182,"column_start":8,"column_end":19},"name":"checked_mul","qualname":"<Decimal as num_traits::CheckedMul>::checked_mul","value":"fn checked_mul(&Self, &Decimal) -> Option<Decimal>","parent":{"krate":16,"index":577},"children":[],"decl_id":{"krate":16,"index":578},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\arithmetic_impls.rs","byte_start":206858,"byte_end":206867,"line_start":181,"line_end":181,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":915},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\arithmetic_impls.rs","byte_start":207028,"byte_end":207039,"line_start":189,"line_end":189,"column_start":8,"column_end":19},"name":"checked_div","qualname":"<Decimal as num_traits::CheckedDiv>::checked_div","value":"fn checked_div(&Self, &Decimal) -> Option<Decimal>","parent":{"krate":16,"index":579},"children":[],"decl_id":{"krate":16,"index":580},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\arithmetic_impls.rs","byte_start":207011,"byte_end":207020,"line_start":188,"line_end":188,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":917},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\arithmetic_impls.rs","byte_start":207181,"byte_end":207192,"line_start":196,"line_end":196,"column_start":8,"column_end":19},"name":"checked_rem","qualname":"<Decimal as num_traits::CheckedRem>::checked_rem","value":"fn checked_rem(&Self, &Decimal) -> Option<Decimal>","parent":{"krate":16,"index":581},"children":[],"decl_id":{"krate":16,"index":582},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\arithmetic_impls.rs","byte_start":207164,"byte_end":207173,"line_start":195,"line_end":195,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":920},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\arithmetic_impls.rs","byte_start":207352,"byte_end":207355,"line_start":205,"line_end":205,"column_start":8,"column_end":11},"name":"inv","qualname":"<Decimal as num_traits::Inv>::inv","value":"fn inv(Self) -> Self","parent":{"krate":16,"index":618},"children":[],"decl_id":{"krate":16,"index":620},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\arithmetic_impls.rs","byte_start":207335,"byte_end":207344,"line_start":204,"line_end":204,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1246},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\arithmetic_impls.rs","byte_start":207450,"byte_end":207453,"line_start":210,"line_end":210,"column_start":42,"column_end":45},"name":"div","qualname":"<Decimal as std::ops::Div>::div","value":"fn div(Self, Decimal) -> Decimal","parent":{"krate":2,"index":3233},"children":[],"decl_id":{"krate":2,"index":3236},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\arithmetic_impls.rs","byte_start":206033,"byte_end":206042,"line_start":145,"line_end":145,"column_start":13,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":1250},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\arithmetic_impls.rs","byte_start":207450,"byte_end":207453,"line_start":210,"line_end":210,"column_start":42,"column_end":45},"name":"div","qualname":"<&'a Decimal as std::ops::Div>::div","value":"fn div(Self, Decimal) -> Decimal","parent":{"krate":2,"index":3233},"children":[],"decl_id":{"krate":2,"index":3236},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\arithmetic_impls.rs","byte_start":205414,"byte_end":205423,"line_start":119,"line_end":119,"column_start":13,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":1254},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\arithmetic_impls.rs","byte_start":207450,"byte_end":207453,"line_start":210,"line_end":210,"column_start":42,"column_end":45},"name":"div","qualname":"<Decimal as std::ops::Div>::div","value":"fn div(Self, &Decimal) -> Decimal","parent":{"krate":2,"index":3233},"children":[],"decl_id":{"krate":2,"index":3236},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\arithmetic_impls.rs","byte_start":205726,"byte_end":205735,"line_start":132,"line_end":132,"column_start":13,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":925},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\arithmetic_impls.rs","byte_start":207553,"byte_end":207556,"line_start":215,"line_end":215,"column_start":8,"column_end":11},"name":"div","qualname":"<&'a Decimal as std::ops::Div>::div","value":"fn div(Self, &Decimal) -> Decimal","parent":{"krate":2,"index":3233},"children":[],"decl_id":{"krate":2,"index":3236},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\arithmetic_impls.rs","byte_start":207536,"byte_end":207545,"line_start":214,"line_end":214,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1257},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\arithmetic_impls.rs","byte_start":207891,"byte_end":207894,"line_start":224,"line_end":224,"column_start":42,"column_end":45},"name":"mul","qualname":"<Decimal as std::ops::Mul>::mul","value":"fn mul(Self, Decimal) -> Decimal","parent":{"krate":2,"index":3228},"children":[],"decl_id":{"krate":2,"index":3231},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\arithmetic_impls.rs","byte_start":206033,"byte_end":206042,"line_start":145,"line_end":145,"column_start":13,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":1261},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\arithmetic_impls.rs","byte_start":207891,"byte_end":207894,"line_start":224,"line_end":224,"column_start":42,"column_end":45},"name":"mul","qualname":"<&'a Decimal as std::ops::Mul>::mul","value":"fn mul(Self, Decimal) -> Decimal","parent":{"krate":2,"index":3228},"children":[],"decl_id":{"krate":2,"index":3231},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\arithmetic_impls.rs","byte_start":205414,"byte_end":205423,"line_start":119,"line_end":119,"column_start":13,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":1265},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\arithmetic_impls.rs","byte_start":207891,"byte_end":207894,"line_start":224,"line_end":224,"column_start":42,"column_end":45},"name":"mul","qualname":"<Decimal as std::ops::Mul>::mul","value":"fn mul(Self, &Decimal) -> Decimal","parent":{"krate":2,"index":3228},"children":[],"decl_id":{"krate":2,"index":3231},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\arithmetic_impls.rs","byte_start":205726,"byte_end":205735,"line_start":132,"line_end":132,"column_start":13,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":930},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\arithmetic_impls.rs","byte_start":207994,"byte_end":207997,"line_start":229,"line_end":229,"column_start":8,"column_end":11},"name":"mul","qualname":"<&'a Decimal as std::ops::Mul>::mul","value":"fn mul(Self, &Decimal) -> Decimal","parent":{"krate":2,"index":3228},"children":[],"decl_id":{"krate":2,"index":3231},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\arithmetic_impls.rs","byte_start":207977,"byte_end":207986,"line_start":228,"line_end":228,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1268},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\arithmetic_impls.rs","byte_start":208240,"byte_end":208243,"line_start":237,"line_end":237,"column_start":42,"column_end":45},"name":"rem","qualname":"<Decimal as std::ops::Rem>::rem","value":"fn rem(Self, Decimal) -> Decimal","parent":{"krate":2,"index":3239},"children":[],"decl_id":{"krate":2,"index":3242},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\arithmetic_impls.rs","byte_start":206033,"byte_end":206042,"line_start":145,"line_end":145,"column_start":13,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":1272},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\arithmetic_impls.rs","byte_start":208240,"byte_end":208243,"line_start":237,"line_end":237,"column_start":42,"column_end":45},"name":"rem","qualname":"<&'a Decimal as std::ops::Rem>::rem","value":"fn rem(Self, Decimal) -> Decimal","parent":{"krate":2,"index":3239},"children":[],"decl_id":{"krate":2,"index":3242},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\arithmetic_impls.rs","byte_start":205414,"byte_end":205423,"line_start":119,"line_end":119,"column_start":13,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":1276},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\arithmetic_impls.rs","byte_start":208240,"byte_end":208243,"line_start":237,"line_end":237,"column_start":42,"column_end":45},"name":"rem","qualname":"<Decimal as std::ops::Rem>::rem","value":"fn rem(Self, &Decimal) -> Decimal","parent":{"krate":2,"index":3239},"children":[],"decl_id":{"krate":2,"index":3242},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\arithmetic_impls.rs","byte_start":205726,"byte_end":205735,"line_start":132,"line_end":132,"column_start":13,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":935},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\arithmetic_impls.rs","byte_start":208343,"byte_end":208346,"line_start":242,"line_end":242,"column_start":8,"column_end":11},"name":"rem","qualname":"<&'a Decimal as std::ops::Rem>::rem","value":"fn rem(Self, &Decimal) -> Decimal","parent":{"krate":2,"index":3239},"children":[],"decl_id":{"krate":2,"index":3242},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\arithmetic_impls.rs","byte_start":208326,"byte_end":208335,"line_start":241,"line_end":241,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1279},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\arithmetic_impls.rs","byte_start":208679,"byte_end":208682,"line_start":251,"line_end":251,"column_start":42,"column_end":45},"name":"sub","qualname":"<Decimal as std::ops::Sub>::sub","value":"fn sub(Self, Decimal) -> Decimal","parent":{"krate":2,"index":3223},"children":[],"decl_id":{"krate":2,"index":3226},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\arithmetic_impls.rs","byte_start":206033,"byte_end":206042,"line_start":145,"line_end":145,"column_start":13,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":1283},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\arithmetic_impls.rs","byte_start":208679,"byte_end":208682,"line_start":251,"line_end":251,"column_start":42,"column_end":45},"name":"sub","qualname":"<&'a Decimal as std::ops::Sub>::sub","value":"fn sub(Self, Decimal) -> Decimal","parent":{"krate":2,"index":3223},"children":[],"decl_id":{"krate":2,"index":3226},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\arithmetic_impls.rs","byte_start":205414,"byte_end":205423,"line_start":119,"line_end":119,"column_start":13,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":1287},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\arithmetic_impls.rs","byte_start":208679,"byte_end":208682,"line_start":251,"line_end":251,"column_start":42,"column_end":45},"name":"sub","qualname":"<Decimal as std::ops::Sub>::sub","value":"fn sub(Self, &Decimal) -> Decimal","parent":{"krate":2,"index":3223},"children":[],"decl_id":{"krate":2,"index":3226},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\arithmetic_impls.rs","byte_start":205726,"byte_end":205735,"line_start":132,"line_end":132,"column_start":13,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":940},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\arithmetic_impls.rs","byte_start":208790,"byte_end":208793,"line_start":256,"line_end":256,"column_start":8,"column_end":11},"name":"sub","qualname":"<&'a Decimal as std::ops::Sub>::sub","value":"fn sub(Self, &Decimal) -> Decimal","parent":{"krate":2,"index":3223},"children":[],"decl_id":{"krate":2,"index":3226},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\arithmetic_impls.rs","byte_start":208765,"byte_end":208782,"line_start":255,"line_end":255,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":969},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\serde.rs","byte_start":219963,"byte_end":219974,"line_start":281,"line_end":281,"column_start":8,"column_end":19},"name":"deserialize","qualname":"<Decimal as serde::Deserialize>::deserialize","value":"fn deserialize<D>(D) -> Result<Decimal, D::Error> where\nD: serde::de::Deserializer","parent":{"krate":18,"index":1577},"children":[],"decl_id":{"krate":18,"index":1579},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":999},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\serde.rs","byte_start":225515,"byte_end":225524,"line_start":469,"line_end":469,"column_start":8,"column_end":17},"name":"serialize","qualname":"<Decimal as serde::Serialize>::serialize","value":"fn serialize<S>(&Self, S) -> Result<S::Ok, S::Error> where\nS: serde::Serializer","parent":{"krate":18,"index":2117},"children":[],"decl_id":{"krate":18,"index":2118},"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1011},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\lib.rs","byte_start":1417,"byte_end":1424,"line_start":58,"line_end":58,"column_start":9,"column_end":16},"name":"prelude","qualname":"::prelude","value":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1012},{"krate":0,"index":1013},{"krate":0,"index":1016},{"krate":0,"index":1019},{"krate":0,"index":1022},{"krate":0,"index":1023},{"krate":0,"index":1026},{"krate":0,"index":1029},{"krate":0,"index":1032},{"krate":0,"index":1035}],"decl_id":null,"docs":" A convenience module appropriate for glob imports (`use rust_decimal::prelude::*;`).\n","sig":null,"attributes":[{"value":"/ A convenience module appropriate for glob imports (`use rust_decimal::prelude::*;`).","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\lib.rs","byte_start":1320,"byte_end":1408,"line_start":57,"line_end":57,"column_start":1,"column_end":89}}]},{"kind":"Type","id":{"krate":0,"index":1038},"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\lib.rs","byte_start":1962,"byte_end":1968,"line_start":75,"line_end":75,"column_start":10,"column_end":16},"name":"Result","qualname":"::Result","value":"core::result::Result<T, Error>","parent":null,"children":[],"decl_id":null,"docs":" Shortcut for `core::result::Result<T, rust_decimal::Error>`. Useful to distinguish\n between `rust_decimal` and `std` types.\n","sig":null,"attributes":[{"value":"/ Shortcut for `core::result::Result<T, rust_decimal::Error>`. Useful to distinguish","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\lib.rs","byte_start":1822,"byte_end":1908,"line_start":73,"line_end":73,"column_start":1,"column_end":87}},{"value":"/ between `rust_decimal` and `std` types.","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\lib.rs","byte_start":1909,"byte_end":1952,"line_start":74,"line_end":74,"column_start":1,"column_end":44}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":10428,"byte_end":10435,"line_start":184,"line_end":184,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":154},{"krate":0,"index":155},{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":158},{"krate":0,"index":159},{"krate":0,"index":160},{"krate":0,"index":161},{"krate":0,"index":162},{"krate":0,"index":163},{"krate":0,"index":164},{"krate":0,"index":165},{"krate":0,"index":166},{"krate":0,"index":167},{"krate":0,"index":168},{"krate":0,"index":169},{"krate":0,"index":179},{"krate":0,"index":180},{"krate":0,"index":181},{"krate":0,"index":182},{"krate":0,"index":183},{"krate":0,"index":184},{"krate":0,"index":185},{"krate":0,"index":186},{"krate":0,"index":187},{"krate":0,"index":188},{"krate":0,"index":189},{"krate":0,"index":191},{"krate":0,"index":193},{"krate":0,"index":194},{"krate":0,"index":195},{"krate":0,"index":196},{"krate":0,"index":197},{"krate":0,"index":198},{"krate":0,"index":199},{"krate":0,"index":200},{"krate":0,"index":201},{"krate":0,"index":202},{"krate":0,"index":203},{"krate":0,"index":204},{"krate":0,"index":205},{"krate":0,"index":206},{"krate":0,"index":207},{"krate":0,"index":208},{"krate":0,"index":209},{"krate":0,"index":210},{"krate":0,"index":211},{"krate":0,"index":212},{"krate":0,"index":216},{"krate":0,"index":217},{"krate":0,"index":218},{"krate":0,"index":219},{"krate":0,"index":220},{"krate":0,"index":221},{"krate":0,"index":223},{"krate":0,"index":225},{"krate":0,"index":226}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":62423,"byte_end":62430,"line_start":1702,"line_end":1702,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":228}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":66460,"byte_end":66467,"line_start":1824,"line_end":1824,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":241},{"krate":0,"index":242}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":66594,"byte_end":66601,"line_start":1834,"line_end":1834,"column_start":14,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":244}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":66667,"byte_end":66674,"line_start":1840,"line_end":1840,"column_start":17,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":246},{"krate":0,"index":247},{"krate":0,"index":248},{"krate":0,"index":249},{"krate":0,"index":250}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":67306,"byte_end":67313,"line_start":1874,"line_end":1874,"column_start":14,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":252},{"krate":0,"index":253}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":67507,"byte_end":67514,"line_start":1882,"line_end":1882,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":255},{"krate":0,"index":256}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":67679,"byte_end":67686,"line_start":1890,"line_end":1890,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":258},{"krate":0,"index":259},{"krate":0,"index":260},{"krate":0,"index":261},{"krate":0,"index":262},{"krate":0,"index":263},{"krate":0,"index":264},{"krate":0,"index":265}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":78619,"byte_end":78626,"line_start":2229,"line_end":2229,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":271},{"krate":0,"index":272},{"krate":0,"index":273},{"krate":0,"index":274},{"krate":0,"index":275}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":81521,"byte_end":81528,"line_start":2315,"line_end":2315,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":278}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":82017,"byte_end":82024,"line_start":2327,"line_end":2327,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":280}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":82164,"byte_end":82171,"line_start":2333,"line_end":2333,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":282}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":82327,"byte_end":82334,"line_start":2339,"line_end":2339,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":284}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":82480,"byte_end":82487,"line_start":2345,"line_end":2345,"column_start":14,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":286},{"krate":0,"index":287}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":82944,"byte_end":82951,"line_start":2368,"line_end":2368,"column_start":20,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":293}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":83208,"byte_end":83215,"line_start":2378,"line_end":2378,"column_start":37,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":296}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":83644,"byte_end":83651,"line_start":2396,"line_end":2396,"column_start":20,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":304}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":83908,"byte_end":83915,"line_start":2406,"line_end":2406,"column_start":37,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":307}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":84344,"byte_end":84351,"line_start":2424,"line_end":2424,"column_start":20,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":315}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":84608,"byte_end":84615,"line_start":2434,"line_end":2434,"column_start":37,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":318}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":85044,"byte_end":85051,"line_start":2452,"line_end":2452,"column_start":20,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":326}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":85308,"byte_end":85315,"line_start":2462,"line_end":2462,"column_start":37,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":329}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":85744,"byte_end":85751,"line_start":2480,"line_end":2480,"column_start":20,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":337}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":86008,"byte_end":86015,"line_start":2490,"line_end":2490,"column_start":37,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":340}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":86444,"byte_end":86451,"line_start":2508,"line_end":2508,"column_start":20,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":348}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":86566,"byte_end":86573,"line_start":2515,"line_end":2515,"column_start":13,"column_end":20},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":86592,"byte_end":86599,"line_start":2517,"line_end":2517,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":351}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":86820,"byte_end":86827,"line_start":2527,"line_end":2527,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":354}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":86961,"byte_end":86968,"line_start":2534,"line_end":2534,"column_start":14,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":356}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":87081,"byte_end":87088,"line_start":2540,"line_end":2540,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":358}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":87336,"byte_end":87343,"line_start":2551,"line_end":2551,"column_start":35,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":362}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":87574,"byte_end":87581,"line_start":2562,"line_end":2562,"column_start":14,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":365}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":87778,"byte_end":87785,"line_start":2572,"line_end":2572,"column_start":31,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":369}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\error.rs","byte_start":89023,"byte_end":89028,"line_start":26,"line_end":26,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":387}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\error.rs","byte_start":89307,"byte_end":89312,"line_start":42,"line_end":42,"column_start":28,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\error.rs","byte_start":89339,"byte_end":89344,"line_start":44,"line_end":44,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":391}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Inherent","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\ops\\common.rs","byte_start":118369,"byte_end":118374,"line_start":9,"line_end":9,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":517},{"krate":0,"index":518},{"krate":0,"index":519},{"krate":0,"index":520},{"krate":0,"index":521},{"krate":0,"index":522},{"krate":0,"index":523},{"krate":0,"index":524},{"krate":0,"index":525},{"krate":0,"index":526},{"krate":0,"index":527},{"krate":0,"index":528},{"krate":0,"index":529}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Inherent","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\ops\\common.rs","byte_start":123744,"byte_end":123749,"line_start":191,"line_end":191,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":548},{"krate":0,"index":549},{"krate":0,"index":550},{"krate":0,"index":551},{"krate":0,"index":552}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Inherent","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\ops\\common.rs","byte_start":124910,"byte_end":124915,"line_start":240,"line_end":240,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":557},{"krate":0,"index":558},{"krate":0,"index":559},{"krate":0,"index":560},{"krate":0,"index":561},{"krate":0,"index":562},{"krate":0,"index":563}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Inherent","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\ops\\common.rs","byte_start":125797,"byte_end":125802,"line_start":278,"line_end":278,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":565},{"krate":0,"index":566},{"krate":0,"index":567},{"krate":0,"index":568},{"krate":0,"index":569},{"krate":0,"index":570},{"krate":0,"index":571},{"krate":0,"index":572},{"krate":0,"index":573}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Inherent","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\ops\\div.rs","byte_start":132023,"byte_end":132028,"line_start":8,"line_end":8,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":606},{"krate":0,"index":607},{"krate":0,"index":608}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Inherent","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\ops\\div.rs","byte_start":134267,"byte_end":134272,"line_start":75,"line_end":75,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":610},{"krate":0,"index":611}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Inherent","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\arithmetic_impls.rs","byte_start":204272,"byte_end":204279,"line_start":74,"line_end":74,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":1225},{"krate":0,"index":1226},{"krate":0,"index":1227},{"krate":0,"index":1228},{"krate":0,"index":1229},{"krate":0,"index":1230},{"krate":0,"index":1231},{"krate":0,"index":1232}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\arithmetic_impls.rs","byte_start":206538,"byte_end":206545,"line_start":166,"line_end":166,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":909}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\arithmetic_impls.rs","byte_start":206691,"byte_end":206698,"line_start":173,"line_end":173,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":911}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\arithmetic_impls.rs","byte_start":206844,"byte_end":206851,"line_start":180,"line_end":180,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":913}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\arithmetic_impls.rs","byte_start":206997,"byte_end":207004,"line_start":187,"line_end":187,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":915}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\arithmetic_impls.rs","byte_start":207150,"byte_end":207157,"line_start":194,"line_end":194,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":917}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\arithmetic_impls.rs","byte_start":207296,"byte_end":207303,"line_start":201,"line_end":201,"column_start":14,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":919},{"krate":0,"index":920}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\serde.rs","byte_start":219946,"byte_end":219953,"line_start":280,"line_end":280,"column_start":39,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":969}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\serde.rs","byte_start":221015,"byte_end":221029,"line_start":315,"line_end":315,"column_start":39,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":975},{"krate":0,"index":976},{"krate":0,"index":977},{"krate":0,"index":979},{"krate":0,"index":981},{"krate":0,"index":984}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\serde.rs","byte_start":222778,"byte_end":222798,"line_start":375,"line_end":375,"column_start":39,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":992},{"krate":0,"index":993},{"krate":0,"index":994},{"krate":0,"index":996}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\serde.rs","byte_start":225498,"byte_end":225505,"line_start":468,"line_end":468,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":999}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":10428,"byte_end":10435,"line_start":184,"line_end":184,"column_start":6,"column_end":13},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":1055},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":62423,"byte_end":62430,"line_start":1702,"line_end":1702,"column_start":18,"column_end":25},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":1055},"to":{"krate":2,"index":3128}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":66460,"byte_end":66467,"line_start":1824,"line_end":1824,"column_start":15,"column_end":22},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":1055},"to":{"krate":16,"index":466}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":66594,"byte_end":66601,"line_start":1834,"line_end":1834,"column_start":14,"column_end":21},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":1055},"to":{"krate":16,"index":476}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":66667,"byte_end":66674,"line_start":1840,"line_end":1840,"column_start":17,"column_end":24},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":1055},"to":{"krate":16,"index":819}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":67306,"byte_end":67313,"line_start":1874,"line_end":1874,"column_start":14,"column_end":21},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":1055},"to":{"krate":16,"index":844}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":67507,"byte_end":67514,"line_start":1882,"line_end":1882,"column_start":18,"column_end":25},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":1055},"to":{"krate":2,"index":12561}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":67679,"byte_end":67686,"line_start":1890,"line_end":1890,"column_start":24,"column_end":31},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":1055},"to":{"krate":16,"index":333}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":78619,"byte_end":78626,"line_start":2229,"line_end":2229,"column_start":22,"column_end":29},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":1055},"to":{"krate":16,"index":307}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":81521,"byte_end":81528,"line_start":2315,"line_end":2315,"column_start":23,"column_end":30},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":1055},"to":{"krate":2,"index":9914}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":82017,"byte_end":82024,"line_start":2327,"line_end":2327,"column_start":21,"column_end":28},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":1055},"to":{"krate":2,"index":9907}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":82164,"byte_end":82171,"line_start":2333,"line_end":2333,"column_start":24,"column_end":31},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":1055},"to":{"krate":2,"index":9926}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":82327,"byte_end":82334,"line_start":2339,"line_end":2339,"column_start":24,"column_end":31},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":1055},"to":{"krate":2,"index":9928}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":82480,"byte_end":82487,"line_start":2345,"line_end":2345,"column_start":14,"column_end":21},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":1055},"to":{"krate":2,"index":3245}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":82944,"byte_end":82951,"line_start":2368,"line_end":2368,"column_start":20,"column_end":27},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":1055},"to":{"krate":2,"index":3249}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":83208,"byte_end":83215,"line_start":2378,"line_end":2378,"column_start":37,"column_end":44},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":1055},"to":{"krate":2,"index":3249}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":83644,"byte_end":83651,"line_start":2396,"line_end":2396,"column_start":20,"column_end":27},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":1055},"to":{"krate":2,"index":3253}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":83908,"byte_end":83915,"line_start":2406,"line_end":2406,"column_start":37,"column_end":44},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":1055},"to":{"krate":2,"index":3253}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":84344,"byte_end":84351,"line_start":2424,"line_end":2424,"column_start":20,"column_end":27},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":1055},"to":{"krate":2,"index":3257}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":84608,"byte_end":84615,"line_start":2434,"line_end":2434,"column_start":37,"column_end":44},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":1055},"to":{"krate":2,"index":3257}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":85044,"byte_end":85051,"line_start":2452,"line_end":2452,"column_start":20,"column_end":27},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":1055},"to":{"krate":2,"index":3261}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":85308,"byte_end":85315,"line_start":2462,"line_end":2462,"column_start":37,"column_end":44},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":1055},"to":{"krate":2,"index":3261}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":85744,"byte_end":85751,"line_start":2480,"line_end":2480,"column_start":20,"column_end":27},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":1055},"to":{"krate":2,"index":3265}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":86008,"byte_end":86015,"line_start":2490,"line_end":2490,"column_start":37,"column_end":44},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":1055},"to":{"krate":2,"index":3265}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":86444,"byte_end":86451,"line_start":2508,"line_end":2508,"column_start":20,"column_end":27},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":1055},"to":{"krate":2,"index":2802}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":86566,"byte_end":86573,"line_start":2515,"line_end":2515,"column_start":13,"column_end":20},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":1055},"to":{"krate":2,"index":2807}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":86592,"byte_end":86599,"line_start":2517,"line_end":2517,"column_start":15,"column_end":22},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":1055},"to":{"krate":2,"index":10120}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":86820,"byte_end":86827,"line_start":2527,"line_end":2527,"column_start":21,"column_end":28},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":1055},"to":{"krate":2,"index":2848}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":86961,"byte_end":86968,"line_start":2534,"line_end":2534,"column_start":14,"column_end":21},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":1055},"to":{"krate":2,"index":2838}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":87081,"byte_end":87088,"line_start":2540,"line_end":2540,"column_start":18,"column_end":25},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":1055},"to":{"krate":2,"index":7961}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":87336,"byte_end":87343,"line_start":2551,"line_end":2551,"column_start":35,"column_end":42},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":1055},"to":{"krate":2,"index":7961}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":87574,"byte_end":87581,"line_start":2562,"line_end":2562,"column_start":14,"column_end":21},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":1055},"to":{"krate":2,"index":7957}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\decimal.rs","byte_start":87778,"byte_end":87785,"line_start":2572,"line_end":2572,"column_start":31,"column_end":38},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":1055},"to":{"krate":2,"index":7957}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\error.rs","byte_start":89023,"byte_end":89028,"line_start":26,"line_end":26,"column_start":21,"column_end":26},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":1189},"to":{"krate":2,"index":3056}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\error.rs","byte_start":89307,"byte_end":89312,"line_start":42,"line_end":42,"column_start":28,"column_end":33},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":1189},"to":{"krate":1,"index":2555}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\error.rs","byte_start":89339,"byte_end":89344,"line_start":44,"line_end":44,"column_start":23,"column_end":28},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":1189},"to":{"krate":2,"index":9914}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\ops\\common.rs","byte_start":118369,"byte_end":118374,"line_start":9,"line_end":9,"column_start":6,"column_end":11},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":1213},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\ops\\common.rs","byte_start":123744,"byte_end":123749,"line_start":191,"line_end":191,"column_start":6,"column_end":11},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":542},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\ops\\common.rs","byte_start":124910,"byte_end":124915,"line_start":240,"line_end":240,"column_start":6,"column_end":11},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":553},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\ops\\common.rs","byte_start":125797,"byte_end":125802,"line_start":278,"line_end":278,"column_start":6,"column_end":11},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":1218},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\ops\\div.rs","byte_start":132023,"byte_end":132028,"line_start":8,"line_end":8,"column_start":6,"column_end":11},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":1213},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\ops\\div.rs","byte_start":134267,"byte_end":134272,"line_start":75,"line_end":75,"column_start":6,"column_end":11},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":553},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\arithmetic_impls.rs","byte_start":204272,"byte_end":204279,"line_start":74,"line_end":74,"column_start":6,"column_end":13},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":1055},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\arithmetic_impls.rs","byte_start":206538,"byte_end":206545,"line_start":166,"line_end":166,"column_start":21,"column_end":28},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":1055},"to":{"krate":16,"index":572}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\arithmetic_impls.rs","byte_start":206691,"byte_end":206698,"line_start":173,"line_end":173,"column_start":21,"column_end":28},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":1055},"to":{"krate":16,"index":575}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\arithmetic_impls.rs","byte_start":206844,"byte_end":206851,"line_start":180,"line_end":180,"column_start":21,"column_end":28},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":1055},"to":{"krate":16,"index":577}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\arithmetic_impls.rs","byte_start":206997,"byte_end":207004,"line_start":187,"line_end":187,"column_start":21,"column_end":28},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":1055},"to":{"krate":16,"index":579}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\arithmetic_impls.rs","byte_start":207150,"byte_end":207157,"line_start":194,"line_end":194,"column_start":21,"column_end":28},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":1055},"to":{"krate":16,"index":581}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\arithmetic_impls.rs","byte_start":207296,"byte_end":207303,"line_start":201,"line_end":201,"column_start":14,"column_end":21},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":1055},"to":{"krate":16,"index":618}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\serde.rs","byte_start":219946,"byte_end":219953,"line_start":280,"line_end":280,"column_start":39,"column_end":46},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":1055},"to":{"krate":18,"index":1577}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\serde.rs","byte_start":221015,"byte_end":221029,"line_start":315,"line_end":315,"column_start":39,"column_end":53},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":971},"to":{"krate":18,"index":1663}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\serde.rs","byte_start":222778,"byte_end":222798,"line_start":375,"line_end":375,"column_start":39,"column_end":59},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":988},"to":{"krate":18,"index":1663}},{"span":{"file_name":"C:\\Users\\Andrei\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rust_decimal-1.26.1\\src\\serde.rs","byte_start":225498,"byte_end":225505,"line_start":468,"line_end":468,"column_start":27,"column_end":34},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":1055},"to":{"krate":18,"index":2117}}]}